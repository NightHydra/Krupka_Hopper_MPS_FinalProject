
FinalTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .appdat       0000001c  20040000  20040000  00007000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000049ac  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000008c  08004bac  08004bac  00005bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08004c38  08004c38  0000701c  2**0
                  CONTENTS
  5 .ARM          00000008  08004c38  08004c38  00005c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08004c40  08004c40  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08004c40  08004c40  00005c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08004c44  08004c44  00005c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000080  20000000  08004c48  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000054c  20000080  08004cc8  00006080  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  200005cc  08004cc8  000065cc  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164a6  00000000  00000000  0000704a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000274b  00000000  00000000  0001d4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  0001fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c2b  00000000  00000000  00020c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ead8  00000000  00000000  0002183b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b3e5  00000000  00000000  00050313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011e249  00000000  00000000  0006b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00189941  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033dc  00000000  00000000  00189984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000aa82  00000000  00000000  0018cd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  001977e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .appdat:

20040000 <mult2>:
	}
}

void mult2(uint8_t * a)
{
	*a *= 2;
20040000:	7803      	ldrb	r3, [r0, #0]
20040002:	005b      	lsls	r3, r3, #1
20040004:	7003      	strb	r3, [r0, #0]
}
20040006:	4770      	bx	lr

20040008 <appFrame>:
{
20040008:	b508      	push	{r3, lr}
2004000a:	4604      	mov	r4, r0
2004000c:	460d      	mov	r5, r1
		(*a) += x;
2004000e:	7823      	ldrb	r3, [r4, #0]
20040010:	442b      	add	r3, r5
20040012:	7023      	strb	r3, [r4, #0]
		mult2(a);
20040014:	4620      	mov	r0, r4
20040016:	f7ff fff3 	bl	20040000 <mult2>
	while (1)
2004001a:	e7f8      	b.n	2004000e <appFrame+0x6>

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08004b94 	.word	0x08004b94

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08004b94 	.word	0x08004b94

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
extern int append;


uint8_t copyfunc[200];

int main(void){
 80005d0:	b538      	push	{r3, r4, r5, lr}

	Sys_Init();
 80005d2:	f000 f9f9 	bl	80009c8 <Sys_Init>

	// Read the README in the base directory of this project.
	spi_flash_interface_initialize_SPI();
 80005d6:	f000 fab5 	bl	8000b44 <spi_flash_interface_initialize_SPI>
	void (*myFunc)(uint8_t * );
	myFunc = (void (*)(uint8_t * )) (func-1);
	*/

	uint8_t x = 0;
	printf("%x %x\r\n", appbegin, append);
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <main+0x3c>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <main+0x40>)
 80005e0:	6819      	ldr	r1, [r3, #0]
 80005e2:	480c      	ldr	r0, [pc, #48]	@ (8000614 <main+0x44>)
 80005e4:	f003 fb30 	bl	8003c48 <iprintf>

	memcpy(copyfunc, (uint8_t *)(appFrame-1), 200);
 80005e8:	4c0b      	ldr	r4, [pc, #44]	@ (8000618 <main+0x48>)
 80005ea:	3c01      	subs	r4, #1
 80005ec:	25c8      	movs	r5, #200	@ 0xc8
 80005ee:	462a      	mov	r2, r5
 80005f0:	4621      	mov	r1, r4
 80005f2:	480a      	ldr	r0, [pc, #40]	@ (800061c <main+0x4c>)
 80005f4:	f003 fda1 	bl	800413a <memcpy>
	//inc(&x);

	// If we conveniently make sure to copy the previous function then everything
	//     works out alright

	spi_flash_write_function(0x00, 200, (uint8_t *) (appFrame-1), 0);
 80005f8:	2300      	movs	r3, #0
 80005fa:	4622      	mov	r2, r4
 80005fc:	4629      	mov	r1, r5
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fb68 	bl	8000cd4 <spi_flash_write_function>


	printf("WROTE FUNCTION\r\n");
 8000604:	4806      	ldr	r0, [pc, #24]	@ (8000620 <main+0x50>)
 8000606:	f003 fb87 	bl	8003d18 <puts>

	while(1)
 800060a:	e7fe      	b.n	800060a <main+0x3a>
 800060c:	2004001c 	.word	0x2004001c
 8000610:	2004001c 	.word	0x2004001c
 8000614:	08004bcc 	.word	0x08004bcc
 8000618:	20040009 	.word	0x20040009
 800061c:	2000009c 	.word	0x2000009c
 8000620:	08004bd4 	.word	0x08004bd4

08000624 <cart_ids_match>:
	return true;
}

bool cart_ids_match(cartridge_t const * const the_cart, uint8_t * read_id)
{
	uint8_t * cart_id = the_cart->cart_unique_id;
 8000624:	f500 7082 	add.w	r0, r0, #260	@ 0x104

	for (unsigned int i = 0; i < 8; ++i)
 8000628:	2300      	movs	r3, #0
 800062a:	2b07      	cmp	r3, #7
 800062c:	d806      	bhi.n	800063c <cart_ids_match+0x18>
	{
		if (cart_id[i] != read_id[i]) return false;
 800062e:	f810 c003 	ldrb.w	ip, [r0, r3]
 8000632:	5cca      	ldrb	r2, [r1, r3]
 8000634:	4594      	cmp	ip, r2
 8000636:	d103      	bne.n	8000640 <cart_ids_match+0x1c>
	for (unsigned int i = 0; i < 8; ++i)
 8000638:	3301      	adds	r3, #1
 800063a:	e7f6      	b.n	800062a <cart_ids_match+0x6>
	}
	return true;
 800063c:	2001      	movs	r0, #1
 800063e:	4770      	bx	lr
		if (cart_id[i] != read_id[i]) return false;
 8000640:	2000      	movs	r0, #0
}
 8000642:	4770      	bx	lr

08000644 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000644:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000648:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <SCB_EnableICache+0x2c>)
 800064e:	2200      	movs	r2, #0
 8000650:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000654:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000658:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800065c:	695a      	ldr	r2, [r3, #20]
 800065e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000662:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000668:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000674:	b410      	push	{r4}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SCB_EnableDCache+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800067e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000682:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000686:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800068a:	e000      	b.n	800068e <SCB_EnableDCache+0x1a>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 800068c:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800068e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000692:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000696:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800069a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800069e:	490b      	ldr	r1, [pc, #44]	@ (80006cc <SCB_EnableDCache+0x58>)
 80006a0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80006a4:	4613      	mov	r3, r2
 80006a6:	3a01      	subs	r2, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f2      	bne.n	8000692 <SCB_EnableDCache+0x1e>
    } while(sets-- != 0U);
 80006ac:	1e43      	subs	r3, r0, #1
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d1ec      	bne.n	800068c <SCB_EnableDCache+0x18>
 80006b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006b6:	694b      	ldr	r3, [r1, #20]
 80006b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006bc:	614b      	str	r3, [r1, #20]
 80006be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006c2:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80006c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80006d0:	b500      	push	{lr}
 80006d2:	b093      	sub	sp, #76	@ 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006dc:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006e6:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006e8:	2219      	movs	r2, #25
 80006ea:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006ec:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80006f0:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006f4:	2309      	movs	r3, #9
 80006f6:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 80006f8:	2307      	movs	r3, #7
 80006fa:	930c      	str	r3, [sp, #48]	@ 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006fc:	4668      	mov	r0, sp
 80006fe:	f001 f913 	bl	8001928 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000702:	b100      	cbz	r0, 8000706 <SystemClock_Config+0x36>
    while(1) { ; }
 8000704:	e7fe      	b.n	8000704 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000706:	f001 f8d1 	bl	80018ac <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800070a:	b100      	cbz	r0, 800070e <SystemClock_Config+0x3e>
    while(1) { ; }
 800070c:	e7fe      	b.n	800070c <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800070e:	230f      	movs	r3, #15
 8000710:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800071e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000724:	9311      	str	r3, [sp, #68]	@ 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000726:	2107      	movs	r1, #7
 8000728:	a80d      	add	r0, sp, #52	@ 0x34
 800072a:	f001 fb73 	bl	8001e14 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800072e:	b100      	cbz	r0, 8000732 <SystemClock_Config+0x62>
    while(1) { ; }
 8000730:	e7fe      	b.n	8000730 <SystemClock_Config+0x60>
  }
}
 8000732:	b013      	add	sp, #76	@ 0x4c
 8000734:	f85d fb04 	ldr.w	pc, [sp], #4

08000738 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000738:	b508      	push	{r3, lr}
  /* Enable I-Cache */
  SCB_EnableICache();
 800073a:	f7ff ff83 	bl	8000644 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 800073e:	f7ff ff99 	bl	8000674 <SCB_EnableDCache>
}
 8000742:	bd08      	pop	{r3, pc}

08000744 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 8000744:	b0a4      	sub	sp, #144	@ 0x90
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b9f      	ldr	r3, [pc, #636]	@ (80009c4 <Clock_Inits+0x280>)
 8000748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800074a:	f042 0201 	orr.w	r2, r2, #1
 800074e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000752:	f002 0201 	and.w	r2, r2, #1
 8000756:	9201      	str	r2, [sp, #4]
 8000758:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800075c:	f042 0202 	orr.w	r2, r2, #2
 8000760:	631a      	str	r2, [r3, #48]	@ 0x30
 8000762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000764:	f002 0202 	and.w	r2, r2, #2
 8000768:	9202      	str	r2, [sp, #8]
 800076a:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800076c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800076e:	f042 0204 	orr.w	r2, r2, #4
 8000772:	631a      	str	r2, [r3, #48]	@ 0x30
 8000774:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000776:	f002 0204 	and.w	r2, r2, #4
 800077a:	9203      	str	r2, [sp, #12]
 800077c:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000780:	f042 0208 	orr.w	r2, r2, #8
 8000784:	631a      	str	r2, [r3, #48]	@ 0x30
 8000786:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000788:	f002 0208 	and.w	r2, r2, #8
 800078c:	9204      	str	r2, [sp, #16]
 800078e:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000792:	f042 0210 	orr.w	r2, r2, #16
 8000796:	631a      	str	r2, [r3, #48]	@ 0x30
 8000798:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800079a:	f002 0210 	and.w	r2, r2, #16
 800079e:	9205      	str	r2, [sp, #20]
 80007a0:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80007a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007a4:	f042 0220 	orr.w	r2, r2, #32
 80007a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80007aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ac:	f002 0220 	and.w	r2, r2, #32
 80007b0:	9206      	str	r2, [sp, #24]
 80007b2:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80007bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007be:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80007c2:	9207      	str	r2, [sp, #28]
 80007c4:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80007cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80007ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007d0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80007d4:	9208      	str	r2, [sp, #32]
 80007d6:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80007d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80007de:	631a      	str	r2, [r3, #48]	@ 0x30
 80007e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007e2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80007e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80007e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80007ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80007f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80007f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007f4:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80007f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80007fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
	__HAL_RCC_GPIOK_CLK_ENABLE();
 80007fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000802:	631a      	str	r2, [r3, #48]	@ 0x30
 8000804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000806:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800080a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800080c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000810:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000814:	645a      	str	r2, [r3, #68]	@ 0x44
 8000816:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000818:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800081c:	920c      	str	r2, [sp, #48]	@ 0x30
 800081e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000822:	f042 0201 	orr.w	r2, r2, #1
 8000826:	645a      	str	r2, [r3, #68]	@ 0x44
 8000828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800082a:	f002 0201 	and.w	r2, r2, #1
 800082e:	920d      	str	r2, [sp, #52]	@ 0x34
 8000830:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000834:	f042 0201 	orr.w	r2, r2, #1
 8000838:	641a      	str	r2, [r3, #64]	@ 0x40
 800083a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800083c:	f002 0201 	and.w	r2, r2, #1
 8000840:	920e      	str	r2, [sp, #56]	@ 0x38
 8000842:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000846:	f042 0202 	orr.w	r2, r2, #2
 800084a:	641a      	str	r2, [r3, #64]	@ 0x40
 800084c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084e:	f002 0202 	and.w	r2, r2, #2
 8000852:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000854:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
	__HAL_RCC_TIM4_CLK_ENABLE();
 8000856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000858:	f042 0204 	orr.w	r2, r2, #4
 800085c:	641a      	str	r2, [r3, #64]	@ 0x40
 800085e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000860:	f002 0204 	and.w	r2, r2, #4
 8000864:	9210      	str	r2, [sp, #64]	@ 0x40
 8000866:	9a10      	ldr	r2, [sp, #64]	@ 0x40
	__HAL_RCC_TIM5_CLK_ENABLE();
 8000868:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800086a:	f042 0208 	orr.w	r2, r2, #8
 800086e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000870:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000872:	f002 0208 	and.w	r2, r2, #8
 8000876:	9211      	str	r2, [sp, #68]	@ 0x44
 8000878:	9a11      	ldr	r2, [sp, #68]	@ 0x44
	__HAL_RCC_TIM6_CLK_ENABLE();
 800087a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800087c:	f042 0210 	orr.w	r2, r2, #16
 8000880:	641a      	str	r2, [r3, #64]	@ 0x40
 8000882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000884:	f002 0210 	and.w	r2, r2, #16
 8000888:	9212      	str	r2, [sp, #72]	@ 0x48
 800088a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
	__HAL_RCC_TIM7_CLK_ENABLE();
 800088c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800088e:	f042 0220 	orr.w	r2, r2, #32
 8000892:	641a      	str	r2, [r3, #64]	@ 0x40
 8000894:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000896:	f002 0220 	and.w	r2, r2, #32
 800089a:	9213      	str	r2, [sp, #76]	@ 0x4c
 800089c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
	__HAL_RCC_TIM8_CLK_ENABLE();
 800089e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008a0:	f042 0202 	orr.w	r2, r2, #2
 80008a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80008a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008a8:	f002 0202 	and.w	r2, r2, #2
 80008ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80008ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
	__HAL_RCC_TIM9_CLK_ENABLE();
 80008b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80008b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80008b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008ba:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 80008be:	9215      	str	r2, [sp, #84]	@ 0x54
 80008c0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
	__HAL_RCC_TIM10_CLK_ENABLE();
 80008c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008c4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80008c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80008ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008cc:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80008d0:	9216      	str	r2, [sp, #88]	@ 0x58
 80008d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
	__HAL_RCC_TIM11_CLK_ENABLE();
 80008d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008d6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80008da:	645a      	str	r2, [r3, #68]	@ 0x44
 80008dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008de:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80008e2:	9217      	str	r2, [sp, #92]	@ 0x5c
 80008e4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
	__HAL_RCC_TIM12_CLK_ENABLE();
 80008e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80008ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80008ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008f0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80008f4:	9218      	str	r2, [sp, #96]	@ 0x60
 80008f6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
	__HAL_RCC_TIM13_CLK_ENABLE();
 80008f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80008fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8000900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000902:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000906:	9219      	str	r2, [sp, #100]	@ 0x64
 8000908:	9a19      	ldr	r2, [sp, #100]	@ 0x64
	__HAL_RCC_TIM14_CLK_ENABLE();
 800090a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800090c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000910:	641a      	str	r2, [r3, #64]	@ 0x40
 8000912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000914:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000918:	921a      	str	r2, [sp, #104]	@ 0x68
 800091a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 800091c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800091e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000922:	641a      	str	r2, [r3, #64]	@ 0x40
 8000924:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000926:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800092a:	921b      	str	r2, [sp, #108]	@ 0x6c
 800092c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 800092e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000930:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000934:	641a      	str	r2, [r3, #64]	@ 0x40
 8000936:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000938:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 800093c:	921c      	str	r2, [sp, #112]	@ 0x70
 800093e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000942:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000946:	645a      	str	r2, [r3, #68]	@ 0x44
 8000948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800094a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800094e:	921d      	str	r2, [sp, #116]	@ 0x74
 8000950:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
	__HAL_RCC_ADC2_CLK_ENABLE();
 8000952:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000954:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000958:	645a      	str	r2, [r3, #68]	@ 0x44
 800095a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800095c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000960:	921e      	str	r2, [sp, #120]	@ 0x78
 8000962:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
	__HAL_RCC_ADC3_CLK_ENABLE();
 8000964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000966:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800096a:	645a      	str	r2, [r3, #68]	@ 0x44
 800096c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800096e:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8000972:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000974:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000976:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000978:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800097c:	631a      	str	r2, [r3, #48]	@ 0x30
 800097e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000980:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8000984:	9220      	str	r2, [sp, #128]	@ 0x80
 8000986:	9a20      	ldr	r2, [sp, #128]	@ 0x80
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800098a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800098e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000992:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000996:	9221      	str	r2, [sp, #132]	@ 0x84
 8000998:	9a21      	ldr	r2, [sp, #132]	@ 0x84

	// JPEG Clock
	__HAL_RCC_JPEG_CLK_ENABLE();
 800099a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800099c:	f042 0202 	orr.w	r2, r2, #2
 80009a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a4:	f002 0202 	and.w	r2, r2, #2
 80009a8:	9222      	str	r2, [sp, #136]	@ 0x88
 80009aa:	9a22      	ldr	r2, [sp, #136]	@ 0x88

	// DMA2D Clock
	__HAL_RCC_DMA2D_CLK_ENABLE();
 80009ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009ae:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80009b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80009ba:	9323      	str	r3, [sp, #140]	@ 0x8c
 80009bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c

}
 80009be:	b024      	add	sp, #144	@ 0x90
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <Sys_Init>:
void Sys_Init(void) {
 80009c8:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 80009ca:	f7ff feb5 	bl	8000738 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80009ce:	f000 fba7 	bl	8001120 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80009d2:	f7ff fe7d 	bl	80006d0 <SystemClock_Config>
	Clock_Inits();
 80009d6:	f7ff feb5 	bl	8000744 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 80009da:	4a06      	ldr	r2, [pc, #24]	@ (80009f4 <Sys_Init+0x2c>)
 80009dc:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <Sys_Init+0x30>)
 80009e2:	f000 fb17 	bl	8001014 <initUart>
	setbuf(stdout, NULL);
 80009e6:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <Sys_Init+0x34>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2100      	movs	r1, #0
 80009ec:	6898      	ldr	r0, [r3, #8]
 80009ee:	f003 f99b 	bl	8003d28 <setbuf>
}
 80009f2:	bd08      	pop	{r3, pc}
 80009f4:	40011000 	.word	0x40011000
 80009f8:	200003f0 	.word	0x200003f0
 80009fc:	20000030 	.word	0x20000030

08000a00 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000a00:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000a02:	f000 fba3 	bl	800114c <HAL_IncTick>
}
 8000a06:	bd08      	pop	{r3, pc}

08000a08 <cart_nss_activate>:
 *  Initialization Function
    ============================================================= */

// A very simple function for driving the nss pin low or high
void cart_nss_activate(uint8_t cart_num)
{
 8000a08:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(cartridge_nss_ports[cart_num], cartridge_nss_pin_numbers[cart_num], GPIO_PIN_RESET);
 8000a0a:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <cart_nss_activate+0x18>)
 8000a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8000a10:	2200      	movs	r2, #0
 8000a12:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000a16:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8000a1a:	f000 ff41 	bl	80018a0 <HAL_GPIO_WritePin>
}
 8000a1e:	bd08      	pop	{r3, pc}
 8000a20:	20000000 	.word	0x20000000

08000a24 <cart_nss_deactivate>:
void cart_nss_deactivate(uint8_t cart_num)
{
 8000a24:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(cartridge_nss_ports[cart_num], cartridge_nss_pin_numbers[cart_num], GPIO_PIN_SET);
 8000a26:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <cart_nss_deactivate+0x18>)
 8000a28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000a32:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8000a36:	f000 ff33 	bl	80018a0 <HAL_GPIO_WritePin>
}
 8000a3a:	bd08      	pop	{r3, pc}
 8000a3c:	20000000 	.word	0x20000000

08000a40 <inc_cart_to_read_ind>:
void inc_cart_to_read_ind(uint8_t * ind)
{
	++(*ind);
 8000a40:	7803      	ldrb	r3, [r0, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	7003      	strb	r3, [r0, #0]
	if (*ind == 3)
 8000a48:	2b03      	cmp	r3, #3
 8000a4a:	d000      	beq.n	8000a4e <inc_cart_to_read_ind+0xe>
	{
		*ind = 0;
	}
}
 8000a4c:	4770      	bx	lr
		*ind = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	7003      	strb	r3, [r0, #0]
}
 8000a52:	e7fb      	b.n	8000a4c <inc_cart_to_read_ind+0xc>

08000a54 <spi_flash_dma_init>:


void spi_flash_dma_init()
{
 8000a54:	b538      	push	{r3, r4, r5, lr}
	// Configure the DMA first, then the SPI
	flash_tx_dma_handle.Instance = DMA1_Stream4;
 8000a56:	4c19      	ldr	r4, [pc, #100]	@ (8000abc <spi_flash_dma_init+0x68>)
 8000a58:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <spi_flash_dma_init+0x6c>)
 8000a5a:	6023      	str	r3, [r4, #0]
	flash_tx_dma_handle.Init.Channel = DMA_CHANNEL_0;
 8000a5c:	2500      	movs	r5, #0
 8000a5e:	6065      	str	r5, [r4, #4]
	flash_tx_dma_handle.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a60:	2340      	movs	r3, #64	@ 0x40
 8000a62:	60a3      	str	r3, [r4, #8]
	// This might not make a lot of sense but when reading its actually far more
	//     efficient to just continually tx the same byte as the SPI flash chip
	//     requires a lot of dummy bytes.  txing the instruction is only 1 byte
	//     but even then we really shouldnt be using DMA for that as its efficiency
	//     is vastly reduced when only transmitting 1 byte
	flash_tx_dma_handle.Init.MemInc = DMA_MINC_DISABLE;
 8000a64:	6125      	str	r5, [r4, #16]
	flash_tx_dma_handle.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a66:	60e5      	str	r5, [r4, #12]
	flash_tx_dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a68:	6165      	str	r5, [r4, #20]
	flash_tx_dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6a:	61a5      	str	r5, [r4, #24]
	flash_tx_dma_handle.Init.Mode = DMA_NORMAL;
 8000a6c:	61e5      	str	r5, [r4, #28]
	flash_tx_dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	6265      	str	r5, [r4, #36]	@ 0x24
	flash_tx_dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a70:	62e5      	str	r5, [r4, #44]	@ 0x2c
	flash_tx_dma_handle.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a72:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000a76:	6223      	str	r3, [r4, #32]

	HAL_DMA_Init(&flash_tx_dma_handle);
 8000a78:	4620      	mov	r0, r4
 8000a7a:	f000 fc6d 	bl	8001358 <HAL_DMA_Init>



	// Configure the DMA first, then the SPI
	flash_rx_dma_handle.Instance = DMA1_Stream3;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <spi_flash_dma_init+0x70>)
 8000a80:	6623      	str	r3, [r4, #96]	@ 0x60
	flash_rx_dma_handle.Init.Channel = DMA_CHANNEL_0;
 8000a82:	6665      	str	r5, [r4, #100]	@ 0x64
	flash_rx_dma_handle.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a84:	66a5      	str	r5, [r4, #104]	@ 0x68
	flash_rx_dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 8000a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a8a:	6723      	str	r3, [r4, #112]	@ 0x70
	flash_rx_dma_handle.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	66e5      	str	r5, [r4, #108]	@ 0x6c
	flash_rx_dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a8e:	6765      	str	r5, [r4, #116]	@ 0x74
	flash_rx_dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a90:	67a5      	str	r5, [r4, #120]	@ 0x78
	flash_rx_dma_handle.Init.Mode = DMA_NORMAL;
 8000a92:	67e5      	str	r5, [r4, #124]	@ 0x7c
	flash_rx_dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a94:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
	flash_rx_dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a98:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
	flash_rx_dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 8000a9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000aa0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80


	// Initialize the dma
	HAL_DMA_Init(&flash_rx_dma_handle);
 8000aa4:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8000aa8:	f000 fc56 	bl	8001358 <HAL_DMA_Init>

	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000aac:	200e      	movs	r0, #14
 8000aae:	f000 fbb3 	bl	8001218 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 fbb0 	bl	8001218 <HAL_NVIC_EnableIRQ>

}
 8000ab8:	bd38      	pop	{r3, r4, r5, pc}
 8000aba:	bf00      	nop
 8000abc:	20000264 	.word	0x20000264
 8000ac0:	40026070 	.word	0x40026070
 8000ac4:	40026058 	.word	0x40026058

08000ac8 <spi_flash_gpio_init>:

void spi_flash_gpio_init()
{
 8000ac8:	b530      	push	{r4, r5, lr}
 8000aca:	b08b      	sub	sp, #44	@ 0x2c
	// Initialize the MOSI and MISO pins
	GPIO_InitTypeDef spi_pins_init_struct = {0};
 8000acc:	2400      	movs	r4, #0
 8000ace:	9405      	str	r4, [sp, #20]
 8000ad0:	9406      	str	r4, [sp, #24]
 8000ad2:	9407      	str	r4, [sp, #28]
 8000ad4:	9408      	str	r4, [sp, #32]
 8000ad6:	9409      	str	r4, [sp, #36]	@ 0x24

	spi_pins_init_struct.Pin = MOSI_PIN | MISO_PIN;
 8000ad8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000adc:	9305      	str	r3, [sp, #20]
	spi_pins_init_struct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	9306      	str	r3, [sp, #24]
	spi_pins_init_struct.Pull = GPIO_NOPULL;
	spi_pins_init_struct.Speed = GPIO_SPEED_HIGH;
 8000ae2:	2503      	movs	r5, #3
 8000ae4:	9508      	str	r5, [sp, #32]
	spi_pins_init_struct.Alternate = GPIO_AF5_SPI2;			// From Table 13 of stm32f769xx_Datasheet
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	9309      	str	r3, [sp, #36]	@ 0x24
	HAL_GPIO_Init(MOSI_MISO_PORT, &spi_pins_init_struct);
 8000aea:	a905      	add	r1, sp, #20
 8000aec:	4812      	ldr	r0, [pc, #72]	@ (8000b38 <spi_flash_gpio_init+0x70>)
 8000aee:	f000 fdd5 	bl	800169c <HAL_GPIO_Init>

	// Initialize the SCLK PIN
	spi_pins_init_struct.Pin = SCLK_PIN;
 8000af2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af6:	9305      	str	r3, [sp, #20]

	HAL_GPIO_Init(SCLK_PORT, &spi_pins_init_struct);
 8000af8:	a905      	add	r1, sp, #20
 8000afa:	4810      	ldr	r0, [pc, #64]	@ (8000b3c <spi_flash_gpio_init+0x74>)
 8000afc:	f000 fdce 	bl	800169c <HAL_GPIO_Init>

	// Initialize the NSS Pins as normal GPIO Pins

	GPIO_InitTypeDef nss_control_pin_init_struct = {0};
 8000b00:	9400      	str	r4, [sp, #0]
 8000b02:	9401      	str	r4, [sp, #4]
 8000b04:	9402      	str	r4, [sp, #8]
 8000b06:	9403      	str	r4, [sp, #12]
 8000b08:	9404      	str	r4, [sp, #16]

	nss_control_pin_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	9301      	str	r3, [sp, #4]
	nss_control_pin_init_struct.Pull = GPIO_NOPULL;
	nss_control_pin_init_struct.Speed = GPIO_SPEED_HIGH;
 8000b0e:	9503      	str	r5, [sp, #12]

	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000b10:	e00e      	b.n	8000b30 <spi_flash_gpio_init+0x68>
	{
		nss_control_pin_init_struct.Pin = cartridge_nss_pin_numbers[i];
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <spi_flash_gpio_init+0x78>)
 8000b14:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8000b18:	9200      	str	r2, [sp, #0]
		HAL_GPIO_Init(cartridge_nss_ports[i], &nss_control_pin_init_struct);
 8000b1a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000b1e:	4669      	mov	r1, sp
 8000b20:	6898      	ldr	r0, [r3, #8]
 8000b22:	f000 fdbb 	bl	800169c <HAL_GPIO_Init>

		// MAKE SURE IT IS HIGH TO START
		cart_nss_deactivate(i);
 8000b26:	4620      	mov	r0, r4
 8000b28:	f7ff ff7c 	bl	8000a24 <cart_nss_deactivate>
	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000b2c:	3401      	adds	r4, #1
 8000b2e:	b2e4      	uxtb	r4, r4
 8000b30:	2c02      	cmp	r4, #2
 8000b32:	d9ee      	bls.n	8000b12 <spi_flash_gpio_init+0x4a>
	}

}
 8000b34:	b00b      	add	sp, #44	@ 0x2c
 8000b36:	bd30      	pop	{r4, r5, pc}
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	20000000 	.word	0x20000000

08000b44 <spi_flash_interface_initialize_SPI>:

void spi_flash_interface_initialize_SPI()
{
 8000b44:	b570      	push	{r4, r5, r6, lr}
	spi_flash_gpio_init();
 8000b46:	f7ff ffbf 	bl	8000ac8 <spi_flash_gpio_init>

	spi_flash_dma_init();
 8000b4a:	f7ff ff83 	bl	8000a54 <spi_flash_dma_init>

	flash_spi_handle.Instance = SPI2;
 8000b4e:	4c19      	ldr	r4, [pc, #100]	@ (8000bb4 <spi_flash_interface_initialize_SPI+0x70>)
 8000b50:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <spi_flash_interface_initialize_SPI+0x74>)
 8000b52:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
	flash_spi_handle.Init.Mode = SPI_MODE_MASTER; // Set master mode
 8000b56:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000b5a:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
	flash_spi_handle.Init.TIMode = SPI_TIMODE_DISABLE; // Use Motorola mode, not TI mode
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
	flash_spi_handle.Init.Direction = SPI_DIRECTION_2LINES; //Subject to change?
 8000b64:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
	flash_spi_handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b68:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
	flash_spi_handle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b70:	f8c4 20cc 	str.w	r2, [r4, #204]	@ 0xcc
	flash_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b74:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
	flash_spi_handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b78:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
	flash_spi_handle.Init.NSS = SPI_NSS_SOFT;
 8000b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b80:	f8c4 20d8 	str.w	r2, [r4, #216]	@ 0xd8
	flash_spi_handle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b84:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
	flash_spi_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b88:	2318      	movs	r3, #24
 8000b8a:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc

	flash_spi_handle.hdmatx = &flash_tx_dma_handle;
 8000b8e:	f8c4 4114 	str.w	r4, [r4, #276]	@ 0x114
	flash_spi_handle.hdmatx = &flash_rx_dma_handle;
 8000b92:	f104 0660 	add.w	r6, r4, #96	@ 0x60
 8000b96:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114

	HAL_SPI_Init(&flash_spi_handle);
 8000b9a:	f104 05c0 	add.w	r5, r4, #192	@ 0xc0
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	f001 fba3 	bl	80022ea <HAL_SPI_Init>

	// Even for writing entire programs (which wont use dma), no reason it needs
	//     To remain uninitialized
	__HAL_LINKDMA(&flash_spi_handle, hdmatx, flash_tx_dma_handle);
 8000ba4:	f8c4 4114 	str.w	r4, [r4, #276]	@ 0x114
 8000ba8:	63a5      	str	r5, [r4, #56]	@ 0x38
	__HAL_LINKDMA(&flash_spi_handle, hdmarx, flash_rx_dma_handle);
 8000baa:	f8c4 6118 	str.w	r6, [r4, #280]	@ 0x118
 8000bae:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
}
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
 8000bb4:	20000264 	.word	0x20000264
 8000bb8:	40003800 	.word	0x40003800

08000bbc <spi_flash_enable_write>:


void spi_flash_enable_write(uint8_t const cart_slot)
{
 8000bbc:	b510      	push	{r4, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	4604      	mov	r4, r0
	uint8_t to_tx = 0x06;
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t rx_buf;

	cart_nss_activate(cart_slot);
 8000bc8:	f7ff ff1e 	bl	8000a08 <cart_nss_activate>

	HAL_SPI_TransmitReceive(&flash_spi_handle, &to_tx, &rx_buf, 1, HAL_MAX_DELAY);
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f10d 020e 	add.w	r2, sp, #14
 8000bd8:	f10d 010f 	add.w	r1, sp, #15
 8000bdc:	4803      	ldr	r0, [pc, #12]	@ (8000bec <spi_flash_enable_write+0x30>)
 8000bde:	f001 fd30 	bl	8002642 <HAL_SPI_TransmitReceive>

	cart_nss_deactivate(cart_slot);
 8000be2:	4620      	mov	r0, r4
 8000be4:	f7ff ff1e 	bl	8000a24 <cart_nss_deactivate>
}
 8000be8:	b004      	add	sp, #16
 8000bea:	bd10      	pop	{r4, pc}
 8000bec:	20000324 	.word	0x20000324

08000bf0 <spi_flash_erase_or_write_in_progess>:

bool spi_flash_erase_or_write_in_progess(uint8_t const cart_slot)
{
 8000bf0:	b510      	push	{r4, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	4604      	mov	r4, r0
	uint8_t to_tx[2] = {0x05, 0x00};
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	f8ad 300c 	strh.w	r3, [sp, #12]

	uint8_t rx_buf[2];

	cart_nss_activate(cart_slot);
 8000bfc:	f7ff ff04 	bl	8000a08 <cart_nss_activate>

	HAL_SPI_TransmitReceive(&flash_spi_handle, to_tx, rx_buf, 2, HAL_MAX_DELAY);
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2302      	movs	r3, #2
 8000c08:	aa02      	add	r2, sp, #8
 8000c0a:	a903      	add	r1, sp, #12
 8000c0c:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <spi_flash_erase_or_write_in_progess+0x34>)
 8000c0e:	f001 fd18 	bl	8002642 <HAL_SPI_TransmitReceive>

	cart_nss_deactivate(cart_slot);
 8000c12:	4620      	mov	r0, r4
 8000c14:	f7ff ff06 	bl	8000a24 <cart_nss_deactivate>

	return (rx_buf[1] &0x01);
 8000c18:	f89d 0009 	ldrb.w	r0, [sp, #9]
}
 8000c1c:	f000 0001 	and.w	r0, r0, #1
 8000c20:	b004      	add	sp, #16
 8000c22:	bd10      	pop	{r4, pc}
 8000c24:	20000324 	.word	0x20000324

08000c28 <spi_flash_write_page>:
	return rx_buf[1];
}

void spi_flash_write_page(uint8_t * const data, uint16_t const datalen,
		uint32_t const addr, uint8_t const cart_slot)
{
 8000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	4606      	mov	r6, r0
 8000c2e:	460f      	mov	r7, r1
 8000c30:	4615      	mov	r5, r2
 8000c32:	461c      	mov	r4, r3
	spi_flash_enable_write(cart_slot);
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ffc1 	bl	8000bbc <spi_flash_enable_write>


	uint8_t setup_sequence[4];
	setup_sequence[0] = 0x02; // The write instruction
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	f88d 3004 	strb.w	r3, [sp, #4]
	setup_sequence[1] = (uint8_t) (addr >> 16);
 8000c40:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8000c44:	f88d 3005 	strb.w	r3, [sp, #5]
	setup_sequence[2] = (uint8_t) (addr >> 8);
 8000c48:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8000c4c:	f88d 3006 	strb.w	r3, [sp, #6]
	setup_sequence[3] = (uint8_t) (addr);
 8000c50:	f88d 5007 	strb.w	r5, [sp, #7]

	cart_nss_activate(cart_slot);
 8000c54:	4620      	mov	r0, r4
 8000c56:	f7ff fed7 	bl	8000a08 <cart_nss_activate>

	HAL_SPI_Transmit(&flash_spi_handle, setup_sequence, 4, HAL_MAX_DELAY);
 8000c5a:	4d0a      	ldr	r5, [pc, #40]	@ (8000c84 <spi_flash_write_page+0x5c>)
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	2204      	movs	r2, #4
 8000c62:	eb0d 0102 	add.w	r1, sp, r2
 8000c66:	4628      	mov	r0, r5
 8000c68:	f001 fbd2 	bl	8002410 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&flash_spi_handle, data, datalen, HAL_MAX_DELAY);
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	463a      	mov	r2, r7
 8000c72:	4631      	mov	r1, r6
 8000c74:	4628      	mov	r0, r5
 8000c76:	f001 fbcb 	bl	8002410 <HAL_SPI_Transmit>

	cart_nss_deactivate(cart_slot);
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f7ff fed2 	bl	8000a24 <cart_nss_deactivate>

}
 8000c80:	b003      	add	sp, #12
 8000c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c84:	20000324 	.word	0x20000324

08000c88 <spi_flash_erase_sector>:

	cart_nss_deactivate(cart_slot);
}

void spi_flash_erase_sector(uint32_t addr, uint8_t const cart_slot)
{
 8000c88:	b530      	push	{r4, r5, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	4605      	mov	r5, r0
 8000c8e:	460c      	mov	r4, r1
	spi_flash_enable_write(cart_slot);
 8000c90:	4608      	mov	r0, r1
 8000c92:	f7ff ff93 	bl	8000bbc <spi_flash_enable_write>

	uint8_t command_seq[4];
	command_seq[0] = 0x20;
 8000c96:	2320      	movs	r3, #32
 8000c98:	f88d 3004 	strb.w	r3, [sp, #4]
	command_seq[1] = (uint8_t) (addr >> 16);
 8000c9c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8000ca0:	f88d 3005 	strb.w	r3, [sp, #5]
	command_seq[2] = (uint8_t) (addr >> 8);
 8000ca4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8000ca8:	f88d 3006 	strb.w	r3, [sp, #6]
	command_seq[3] = (uint8_t) (addr);
 8000cac:	f88d 5007 	strb.w	r5, [sp, #7]

	cart_nss_activate(cart_slot);
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f7ff fea9 	bl	8000a08 <cart_nss_activate>

	HAL_SPI_Transmit(&flash_spi_handle, command_seq, 4, HAL_MAX_DELAY);
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	2204      	movs	r2, #4
 8000cbc:	eb0d 0102 	add.w	r1, sp, r2
 8000cc0:	4803      	ldr	r0, [pc, #12]	@ (8000cd0 <spi_flash_erase_sector+0x48>)
 8000cc2:	f001 fba5 	bl	8002410 <HAL_SPI_Transmit>

	cart_nss_deactivate(cart_slot);
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f7ff feac 	bl	8000a24 <cart_nss_deactivate>
}
 8000ccc:	b003      	add	sp, #12
 8000cce:	bd30      	pop	{r4, r5, pc}
 8000cd0:	20000324 	.word	0x20000324

08000cd4 <spi_flash_write_function>:

void spi_flash_write_function(uint32_t flash_addr, uint16_t num_bytes,
	uint8_t * func_ptr, uint8_t const cart_slot)
{
 8000cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd6:	4607      	mov	r7, r0
 8000cd8:	460c      	mov	r4, r1
 8000cda:	4616      	mov	r6, r2
 8000cdc:	461d      	mov	r5, r3
	spi_flash_erase_sector(flash_addr, cart_slot);
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f7ff ffd2 	bl	8000c88 <spi_flash_erase_sector>

	while(spi_flash_erase_or_write_in_progess(cart_slot))
 8000ce4:	e002      	b.n	8000cec <spi_flash_write_function+0x18>
	{
		printf("Waiting....\r\n");
 8000ce6:	4815      	ldr	r0, [pc, #84]	@ (8000d3c <spi_flash_write_function+0x68>)
 8000ce8:	f003 f816 	bl	8003d18 <puts>
	while(spi_flash_erase_or_write_in_progess(cart_slot))
 8000cec:	4628      	mov	r0, r5
 8000cee:	f7ff ff7f 	bl	8000bf0 <spi_flash_erase_or_write_in_progess>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d1f7      	bne.n	8000ce6 <spi_flash_write_function+0x12>
 8000cf6:	e00d      	b.n	8000d14 <spi_flash_write_function+0x40>

	// Less than or equal to 256 bytes and just go to the last one
	while (num_bytes > 256)
	{

		spi_flash_write_page(func_ptr, 256, flash_addr, cart_slot);
 8000cf8:	462b      	mov	r3, r5
 8000cfa:	463a      	mov	r2, r7
 8000cfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d00:	4630      	mov	r0, r6
 8000d02:	f7ff ff91 	bl	8000c28 <spi_flash_write_page>
		flash_addr += 256;
 8000d06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
		func_ptr +=256;
 8000d0a:	f506 7680 	add.w	r6, r6, #256	@ 0x100
		num_bytes -= 256;
 8000d0e:	f5a4 7480 	sub.w	r4, r4, #256	@ 0x100
 8000d12:	b2a4      	uxth	r4, r4
	while (num_bytes > 256)
 8000d14:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8000d18:	d8ee      	bhi.n	8000cf8 <spi_flash_write_function+0x24>
	}


	spi_flash_write_page(func_ptr, num_bytes, flash_addr, cart_slot);
 8000d1a:	462b      	mov	r3, r5
 8000d1c:	463a      	mov	r2, r7
 8000d1e:	4621      	mov	r1, r4
 8000d20:	4630      	mov	r0, r6
 8000d22:	f7ff ff81 	bl	8000c28 <spi_flash_write_page>

	while(spi_flash_erase_or_write_in_progess(cart_slot))
 8000d26:	e002      	b.n	8000d2e <spi_flash_write_function+0x5a>
	{
		printf("Waiting2....\r\n");
 8000d28:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <spi_flash_write_function+0x6c>)
 8000d2a:	f002 fff5 	bl	8003d18 <puts>
	while(spi_flash_erase_or_write_in_progess(cart_slot))
 8000d2e:	4628      	mov	r0, r5
 8000d30:	f7ff ff5e 	bl	8000bf0 <spi_flash_erase_or_write_in_progess>
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d1f7      	bne.n	8000d28 <spi_flash_write_function+0x54>
	}
}
 8000d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08004be4 	.word	0x08004be4
 8000d40:	08004bf4 	.word	0x08004bf4

08000d44 <TIM7_IRQHandler>:

	// Initialize the timer and wait for everything to get loaded
	timer_init();
}

void TIM7_IRQHandler() {
 8000d44:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&begin_poll_timer_handle);
 8000d46:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <TIM7_IRQHandler+0xc>)
 8000d48:	f002 fa33 	bl	80031b2 <HAL_TIM_IRQHandler>

}
 8000d4c:	bd08      	pop	{r3, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000388 	.word	0x20000388

08000d54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
	static uint8_t read_device_id_instruction_byte = 0x4B;
	if (htim->Instance == TIM7)
 8000d54:	6802      	ldr	r2, [r0, #0]
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d000      	beq.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0xa>
 8000d5c:	4770      	bx	lr
	{
		// ONLY DO anything if we are actually ready to poll
		if (cart_read_state == READY_TO_POLL_STATE)
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000d60:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f9      	bne.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x8>
{
 8000d68:	b510      	push	{r4, lr}
		{
			cart_read_state = POLLING_DEVICE_ID_STATE;
 8000d6a:	4c08      	ldr	r4, [pc, #32]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f884 3170 	strb.w	r3, [r4, #368]	@ 0x170
			// Just start transmitting using the dma while we go back to doing other stuff
			cart_nss_activate(0);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fe48 	bl	8000a08 <cart_nss_activate>
			HAL_SPI_Transmit_DMA(&flash_spi_handle, &read_device_id_instruction_byte, 5);
 8000d78:	2205      	movs	r2, #5
 8000d7a:	4905      	ldr	r1, [pc, #20]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d7c:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8000d80:	f001 fe66 	bl	8002a50 <HAL_SPI_Transmit_DMA>
		}
	}
}
 8000d84:	bd10      	pop	{r4, pc}
 8000d86:	bf00      	nop
 8000d88:	40001400 	.word	0x40001400
 8000d8c:	20000264 	.word	0x20000264
 8000d90:	20000014 	.word	0x20000014

08000d94 <DMA1_Stream3_IRQHandler>:

// DMA and SPI IRQ Handlers
void DMA1_Stream3_IRQHandler()
{
 8000d94:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(&flash_rx_dma_handle);
 8000d96:	4802      	ldr	r0, [pc, #8]	@ (8000da0 <DMA1_Stream3_IRQHandler+0xc>)
 8000d98:	f000 fb92 	bl	80014c0 <HAL_DMA_IRQHandler>
}
 8000d9c:	bd08      	pop	{r3, pc}
 8000d9e:	bf00      	nop
 8000da0:	200002c4 	.word	0x200002c4

08000da4 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler()
{
 8000da4:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(&flash_tx_dma_handle);
 8000da6:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <DMA1_Stream4_IRQHandler+0xc>)
 8000da8:	f000 fb8a 	bl	80014c0 <HAL_DMA_IRQHandler>
}
 8000dac:	bd08      	pop	{r3, pc}
 8000dae:	bf00      	nop
 8000db0:	20000264 	.word	0x20000264

08000db4 <SPI2_IRQHandler>:
void SPI2_IRQHandler()
{
 8000db4:	b508      	push	{r3, lr}
	HAL_SPI_IRQHandler(&flash_spi_handle);
 8000db6:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <SPI2_IRQHandler+0xc>)
 8000db8:	f002 f962 	bl	8003080 <HAL_SPI_IRQHandler>
}
 8000dbc:	bd08      	pop	{r3, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000324 	.word	0x20000324

08000dc4 <HAL_SPI_TxCpltCallback>:

// SPI Callbacks
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000dc4:	b508      	push	{r3, lr}
	static uint8_t dummy_byte = 0;
	if (hspi->Instance == SPI2)
 8000dc6:	6802      	ldr	r2, [r0, #0]
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <HAL_SPI_TxCpltCallback+0x2c>)
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d000      	beq.n	8000dd0 <HAL_SPI_TxCpltCallback+0xc>
			//     to read in the device id so transmit + receive via dma
			// No need to change state though.
			HAL_SPI_TransmitReceive_DMA( &flash_spi_handle, &dummy_byte , device_id_buf, 8);
		}
	}
}
 8000dce:	bd08      	pop	{r3, pc}
		if (cart_read_state == POLLING_DEVICE_ID_STATE)
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_SPI_TxCpltCallback+0x30>)
 8000dd2:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d1f9      	bne.n	8000dce <HAL_SPI_TxCpltCallback+0xa>
			HAL_SPI_TransmitReceive_DMA( &flash_spi_handle, &dummy_byte , device_id_buf, 8);
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <HAL_SPI_TxCpltCallback+0x30>)
 8000ddc:	2308      	movs	r3, #8
 8000dde:	f500 72bc 	add.w	r2, r0, #376	@ 0x178
 8000de2:	f500 71c0 	add.w	r1, r0, #384	@ 0x180
 8000de6:	30c0      	adds	r0, #192	@ 0xc0
 8000de8:	f001 fede 	bl	8002ba8 <HAL_SPI_TransmitReceive_DMA>
}
 8000dec:	e7ef      	b.n	8000dce <HAL_SPI_TxCpltCallback+0xa>
 8000dee:	bf00      	nop
 8000df0:	40003800 	.word	0x40003800
 8000df4:	20000264 	.word	0x20000264

08000df8 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000df8:	b538      	push	{r3, r4, r5, lr}
	static uint8_t dummy_byte = 0;
	if (hspi->Instance == SPI2)
 8000dfa:	6802      	ldr	r2, [r0, #0]
 8000dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8000f38 <HAL_SPI_TxRxCpltCallback+0x140>)
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d000      	beq.n	8000e04 <HAL_SPI_TxRxCpltCallback+0xc>
			cartidges_slots_to_read_into[cart_to_read_ind].data_initialized = true;
			inc_cart_to_read_ind(&cart_to_read_ind);
			cart_read_state = READY_TO_POLL_STATE;
		}
	}
}
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
		if (cart_read_state == POLLING_DEVICE_ID_STATE)
 8000e04:	4b4d      	ldr	r3, [pc, #308]	@ (8000f3c <HAL_SPI_TxRxCpltCallback+0x144>)
 8000e06:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d018      	beq.n	8000e40 <HAL_SPI_TxRxCpltCallback+0x48>
		else if (cart_read_state == READING_IN_ROM_STATE)
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d1f7      	bne.n	8000e02 <HAL_SPI_TxRxCpltCallback+0xa>
			cart_nss_deactivate(0);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff fe06 	bl	8000a24 <cart_nss_deactivate>
			cartidges_slots_to_read_into[cart_to_read_ind].data_initialized = true;
 8000e18:	4c48      	ldr	r4, [pc, #288]	@ (8000f3c <HAL_SPI_TxRxCpltCallback+0x144>)
 8000e1a:	f894 3171 	ldrb.w	r3, [r4, #369]	@ 0x171
 8000e1e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8000e22:	f8d4 2174 	ldr.w	r2, [r4, #372]	@ 0x174
 8000e26:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f882 310c 	strb.w	r3, [r2, #268]	@ 0x10c
			inc_cart_to_read_ind(&cart_to_read_ind);
 8000e30:	f204 1071 	addw	r0, r4, #369	@ 0x171
 8000e34:	f7ff fe04 	bl	8000a40 <inc_cart_to_read_ind>
			cart_read_state = READY_TO_POLL_STATE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f884 3170 	strb.w	r3, [r4, #368]	@ 0x170
}
 8000e3e:	e7e0      	b.n	8000e02 <HAL_SPI_TxRxCpltCallback+0xa>
			cart_nss_deactivate(0);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f7ff fdef 	bl	8000a24 <cart_nss_deactivate>
			for (uint8_t i = 0; i<8; ++i)
 8000e46:	2300      	movs	r3, #0
 8000e48:	2b07      	cmp	r3, #7
 8000e4a:	d808      	bhi.n	8000e5e <HAL_SPI_TxRxCpltCallback+0x66>
				if (device_id_buf[i] != 0) {cart_all_zeros = false; break;}
 8000e4c:	4a3b      	ldr	r2, [pc, #236]	@ (8000f3c <HAL_SPI_TxRxCpltCallback+0x144>)
 8000e4e:	441a      	add	r2, r3
 8000e50:	f892 2178 	ldrb.w	r2, [r2, #376]	@ 0x178
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d150      	bne.n	8000efa <HAL_SPI_TxRxCpltCallback+0x102>
			for (uint8_t i = 0; i<8; ++i)
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	e7f4      	b.n	8000e48 <HAL_SPI_TxRxCpltCallback+0x50>
			bool cart_all_zeros = true;
 8000e5e:	2301      	movs	r3, #1
			if (cart_all_zeros)
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d14c      	bne.n	8000efe <HAL_SPI_TxRxCpltCallback+0x106>
			else if (cartidges_slots_to_read_into[cart_to_read_ind].data_initialized == true &&
 8000e64:	4a35      	ldr	r2, [pc, #212]	@ (8000f3c <HAL_SPI_TxRxCpltCallback+0x144>)
 8000e66:	f892 3171 	ldrb.w	r3, [r2, #369]	@ 0x171
 8000e6a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8000e6e:	f8d2 0174 	ldr.w	r0, [r2, #372]	@ 0x174
 8000e72:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8000e76:	f890 310c 	ldrb.w	r3, [r0, #268]	@ 0x10c
 8000e7a:	b12b      	cbz	r3, 8000e88 <HAL_SPI_TxRxCpltCallback+0x90>
					cart_ids_match(cartidges_slots_to_read_into+cart_to_read_ind, device_id_buf))
 8000e7c:	f502 71bc 	add.w	r1, r2, #376	@ 0x178
 8000e80:	f7ff fbd0 	bl	8000624 <cart_ids_match>
			else if (cartidges_slots_to_read_into[cart_to_read_ind].data_initialized == true &&
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d14d      	bne.n	8000f24 <HAL_SPI_TxRxCpltCallback+0x12c>
				memcpy(cartidges_slots_to_read_into[cart_to_read_ind].cart_unique_id, device_id_buf, 8);
 8000e88:	4c2c      	ldr	r4, [pc, #176]	@ (8000f3c <HAL_SPI_TxRxCpltCallback+0x144>)
 8000e8a:	f894 3171 	ldrb.w	r3, [r4, #369]	@ 0x171
 8000e8e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8000e92:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
 8000e96:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8000e9a:	f504 72bc 	add.w	r2, r4, #376	@ 0x178
 8000e9e:	ca03      	ldmia	r2!, {r0, r1}
 8000ea0:	f8c3 0104 	str.w	r0, [r3, #260]	@ 0x104
 8000ea4:	f8c3 1108 	str.w	r1, [r3, #264]	@ 0x108
				cart_read_state = READING_IN_ROM_STATE;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f884 3170 	strb.w	r3, [r4, #368]	@ 0x170
				cart_nss_activate(0);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fdaa 	bl	8000a08 <cart_nss_activate>
				begin_read_header[0] = 0x03;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	f884 3184 	strb.w	r3, [r4, #388]	@ 0x184
				begin_read_header[1] = 0x00;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f884 3185 	strb.w	r3, [r4, #389]	@ 0x185
				begin_read_header[2] = 0x00;
 8000ec0:	f884 3186 	strb.w	r3, [r4, #390]	@ 0x186
				begin_read_header[3] = 0x00;
 8000ec4:	f884 3187 	strb.w	r3, [r4, #391]	@ 0x187
				HAL_SPI_Transmit(&flash_spi_handle, begin_read_header, 4, HAL_MAX_DELAY);
 8000ec8:	f104 05c0 	add.w	r5, r4, #192	@ 0xc0
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	f504 71c2 	add.w	r1, r4, #388	@ 0x184
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f001 fa9a 	bl	8002410 <HAL_SPI_Transmit>
						cartidges_slots_to_read_into[cart_to_read_ind].cart_rom, 200);
 8000edc:	f894 2171 	ldrb.w	r2, [r4, #369]	@ 0x171
 8000ee0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8000ee4:	f8d4 1174 	ldr.w	r1, [r4, #372]	@ 0x174
				HAL_SPI_TransmitReceive_DMA(&flash_spi_handle, &dummy_byte,
 8000ee8:	23c8      	movs	r3, #200	@ 0xc8
 8000eea:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8000eee:	f504 71c4 	add.w	r1, r4, #392	@ 0x188
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	f001 fe58 	bl	8002ba8 <HAL_SPI_TransmitReceive_DMA>
 8000ef8:	e783      	b.n	8000e02 <HAL_SPI_TxRxCpltCallback+0xa>
				if (device_id_buf[i] != 0) {cart_all_zeros = false; break;}
 8000efa:	2300      	movs	r3, #0
 8000efc:	e7b0      	b.n	8000e60 <HAL_SPI_TxRxCpltCallback+0x68>
				cartidges_slots_to_read_into[cart_to_read_ind].data_initialized = false;
 8000efe:	480f      	ldr	r0, [pc, #60]	@ (8000f3c <HAL_SPI_TxRxCpltCallback+0x144>)
 8000f00:	f890 3171 	ldrb.w	r3, [r0, #369]	@ 0x171
 8000f04:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8000f08:	f8d0 2174 	ldr.w	r2, [r0, #372]	@ 0x174
 8000f0c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000f10:	2300      	movs	r3, #0
 8000f12:	f882 310c 	strb.w	r3, [r2, #268]	@ 0x10c
				cart_read_state = READY_TO_POLL_STATE;
 8000f16:	f880 3170 	strb.w	r3, [r0, #368]	@ 0x170
				inc_cart_to_read_ind(&cart_to_read_ind);
 8000f1a:	f200 1071 	addw	r0, r0, #369	@ 0x171
 8000f1e:	f7ff fd8f 	bl	8000a40 <inc_cart_to_read_ind>
 8000f22:	e76e      	b.n	8000e02 <HAL_SPI_TxRxCpltCallback+0xa>
				cart_read_state = READY_TO_POLL_STATE;
 8000f24:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <HAL_SPI_TxRxCpltCallback+0x144>)
 8000f26:	2300      	movs	r3, #0
 8000f28:	f880 3170 	strb.w	r3, [r0, #368]	@ 0x170
				inc_cart_to_read_ind(&cart_to_read_ind);
 8000f2c:	f200 1071 	addw	r0, r0, #369	@ 0x171
 8000f30:	f7ff fd86 	bl	8000a40 <inc_cart_to_read_ind>
 8000f34:	e765      	b.n	8000e02 <HAL_SPI_TxRxCpltCallback+0xa>
 8000f36:	bf00      	nop
 8000f38:	40003800 	.word	0x40003800
 8000f3c:	20000264 	.word	0x20000264

08000f40 <HAL_UART_MspInit>:
UART_HandleTypeDef USB_UART;

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000f40:	b530      	push	{r4, r5, lr}
 8000f42:	b08b      	sub	sp, #44	@ 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000f44:	6803      	ldr	r3, [r0, #0]
 8000f46:	4a2e      	ldr	r2, [pc, #184]	@ (8001000 <HAL_UART_MspInit+0xc0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d004      	beq.n	8000f56 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001004 <HAL_UART_MspInit+0xc4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d02c      	beq.n	8000fac <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000f52:	b00b      	add	sp, #44	@ 0x2c
 8000f54:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000f56:	4c2c      	ldr	r4, [pc, #176]	@ (8001008 <HAL_UART_MspInit+0xc8>)
 8000f58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6323      	str	r3, [r4, #48]	@ 0x30
 8000f60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000f6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f6e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000f80:	4d22      	ldr	r5, [pc, #136]	@ (800100c <HAL_UART_MspInit+0xcc>)
 8000f82:	a905      	add	r1, sp, #20
 8000f84:	4628      	mov	r0, r5
 8000f86:	f000 fb89 	bl	800169c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f8e:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000f90:	a905      	add	r1, sp, #20
 8000f92:	4628      	mov	r0, r5
 8000f94:	f000 fb82 	bl	800169c <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000f98:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	6463      	str	r3, [r4, #68]	@ 0x44
 8000fa0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	9b02      	ldr	r3, [sp, #8]
 8000faa:	e7d2      	b.n	8000f52 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000fac:	4c16      	ldr	r4, [pc, #88]	@ (8001008 <HAL_UART_MspInit+0xc8>)
 8000fae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000fb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000fc0:	2340      	movs	r3, #64	@ 0x40
 8000fc2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000fd4:	4d0e      	ldr	r5, [pc, #56]	@ (8001010 <HAL_UART_MspInit+0xd0>)
 8000fd6:	a905      	add	r1, sp, #20
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f000 fb5f 	bl	800169c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fde:	2380      	movs	r3, #128	@ 0x80
 8000fe0:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000fe2:	a905      	add	r1, sp, #20
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	f000 fb59 	bl	800169c <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000fea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	6463      	str	r3, [r4, #68]	@ 0x44
 8000ff2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000ff4:	f003 0320 	and.w	r3, r3, #32
 8000ff8:	9304      	str	r3, [sp, #16]
 8000ffa:	9b04      	ldr	r3, [sp, #16]
}
 8000ffc:	e7a9      	b.n	8000f52 <HAL_UART_MspInit+0x12>
 8000ffe:	bf00      	nop
 8001000:	40011000 	.word	0x40011000
 8001004:	40011400 	.word	0x40011400
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000
 8001010:	40020800 	.word	0x40020800

08001014 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8001014:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8001016:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8001018:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	2200      	movs	r2, #0
 800101c:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800101e:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8001020:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8001022:	210c      	movs	r1, #12
 8001024:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001026:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8001028:	f002 fd1a 	bl	8003a60 <HAL_UART_Init>
}
 800102c:	bd08      	pop	{r3, pc}
	...

08001030 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8001030:	b510      	push	{r4, lr}
 8001032:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8001034:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001038:	b292      	uxth	r2, r2
 800103a:	4802      	ldr	r0, [pc, #8]	@ (8001044 <_write+0x14>)
 800103c:	f002 fbf1 	bl	8003822 <HAL_UART_Transmit>
	return len;
}
 8001040:	4620      	mov	r0, r4
 8001042:	bd10      	pop	{r4, pc}
 8001044:	200003f0 	.word	0x200003f0

08001048 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8001048:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 800104a:	2200      	movs	r2, #0
 800104c:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	2201      	movs	r2, #1
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <_read+0x18>)
 8001056:	f002 fc42 	bl	80038de <HAL_UART_Receive>
	return len;
}
 800105a:	2001      	movs	r0, #1
 800105c:	bd08      	pop	{r3, pc}
 800105e:	bf00      	nop
 8001060:	200003f0 	.word	0x200003f0

08001064 <_close>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3
__attribute__((weak)) void _close(void){}
 8001064:	4770      	bx	lr

08001066 <_lseek>:
__attribute__((weak)) void _lseek(void){}
 8001066:	4770      	bx	lr

08001068 <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8001068:	4770      	bx	lr

0800106a <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 800106a:	4770      	bx	lr

0800106c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800106c:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8001070:	480d      	ldr	r0, [pc, #52]	@ (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490e      	ldr	r1, [pc, #56]	@ (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0e      	ldr	r2, [pc, #56]	@ (80010b0 <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	@ (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0b      	ldr	r4, [pc, #44]	@ (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001096:	f000 f813 	bl	80010c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800109a:	f003 f827 	bl	80040ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109e:	f7ff fa97 	bl	80005d0 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   r0, =_estack
 80010a4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80010b0:	08004c48 	.word	0x08004c48
  ldr r2, =_sbss
 80010b4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80010b8:	200005cc 	.word	0x200005cc

080010bc <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC_IRQHandler>
	...

080010c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4a03      	ldr	r2, [pc, #12]	@ (80010d0 <SystemInit+0x10>)
 80010c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80010c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b510      	push	{r4, lr}
 80010da:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <HAL_InitTick+0x40>)
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80010e8:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <HAL_InitTick+0x44>)
 80010ea:	6810      	ldr	r0, [r2, #0]
 80010ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80010f0:	f000 f8a0 	bl	8001234 <HAL_SYSTICK_Config>
 80010f4:	b968      	cbnz	r0, 8001112 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	2c0f      	cmp	r4, #15
 80010f8:	d901      	bls.n	80010fe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80010fa:	2001      	movs	r0, #1
 80010fc:	e00a      	b.n	8001114 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fe:	2200      	movs	r2, #0
 8001100:	4621      	mov	r1, r4
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	f000 f877 	bl	80011f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800110a:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_InitTick+0x40>)
 800110c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2000      	movs	r0, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001112:	2001      	movs	r0, #1
}
 8001114:	bd10      	pop	{r4, pc}
 8001116:	bf00      	nop
 8001118:	2000001c 	.word	0x2000001c
 800111c:	20000018 	.word	0x20000018

08001120 <HAL_Init>:
{
 8001120:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <HAL_Init+0x28>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800112a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001132:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 f84d 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800113a:	200f      	movs	r0, #15
 800113c:	f7ff ffcc 	bl	80010d8 <HAL_InitTick>
  HAL_MspInit();
 8001140:	f7ff ffc8 	bl	80010d4 <HAL_MspInit>
}
 8001144:	2000      	movs	r0, #0
 8001146:	bd08      	pop	{r3, pc}
 8001148:	40023c00 	.word	0x40023c00

0800114c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800114c:	4a03      	ldr	r2, [pc, #12]	@ (800115c <HAL_IncTick+0x10>)
 800114e:	6811      	ldr	r1, [r2, #0]
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <HAL_IncTick+0x14>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	440b      	add	r3, r1
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000478 	.word	0x20000478
 8001160:	2000001c 	.word	0x2000001c

08001164 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001164:	4b01      	ldr	r3, [pc, #4]	@ (800116c <HAL_GetTick+0x8>)
 8001166:	6818      	ldr	r0, [r3, #0]
}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000478 	.word	0x20000478

08001170 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8001170:	2800      	cmp	r0, #0
 8001172:	db04      	blt.n	800117e <__NVIC_SetPriority+0xe>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	0109      	lsls	r1, r1, #4
 8001176:	b2c9      	uxtb	r1, r1
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <__NVIC_SetPriority+0x1c>)
 800117a:	5419      	strb	r1, [r3, r0]
 800117c:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	f000 000f 	and.w	r0, r0, #15
 8001182:	0109      	lsls	r1, r1, #4
 8001184:	b2c9      	uxtb	r1, r1
 8001186:	4b02      	ldr	r3, [pc, #8]	@ (8001190 <__NVIC_SetPriority+0x20>)
 8001188:	5419      	strb	r1, [r3, r0]
}
 800118a:	4770      	bx	lr
 800118c:	e000e400 	.word	0xe000e400
 8001190:	e000ed14 	.word	0xe000ed14

08001194 <NVIC_EncodePriority>:
{
 8001194:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001196:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119a:	f1c0 0c07 	rsb	ip, r0, #7
 800119e:	f1bc 0f04 	cmp.w	ip, #4
 80011a2:	bf28      	it	cs
 80011a4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a8:	1d03      	adds	r3, r0, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d90f      	bls.n	80011ce <NVIC_EncodePriority+0x3a>
 80011ae:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 3eff 	mov.w	lr, #4294967295
 80011b4:	fa0e f00c 	lsl.w	r0, lr, ip
 80011b8:	ea21 0100 	bic.w	r1, r1, r0
 80011bc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011be:	fa0e fe03 	lsl.w	lr, lr, r3
 80011c2:	ea22 020e 	bic.w	r2, r2, lr
}
 80011c6:	ea41 0002 	orr.w	r0, r1, r2
 80011ca:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	2300      	movs	r3, #0
 80011d0:	e7ee      	b.n	80011b0 <NVIC_EncodePriority+0x1c>
	...

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4906      	ldr	r1, [pc, #24]	@ (80011f0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80011d6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	0200      	lsls	r0, r0, #8
 80011e2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80011e8:	4a02      	ldr	r2, [pc, #8]	@ (80011f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80011ea:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80011ec:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	05fa0000 	.word	0x05fa0000

080011f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f8:	b510      	push	{r4, lr}
 80011fa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_NVIC_SetPriority+0x1c>)
 80011fe:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001200:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001204:	f7ff ffc6 	bl	8001194 <NVIC_EncodePriority>
 8001208:	4601      	mov	r1, r0
 800120a:	4620      	mov	r0, r4
 800120c:	f7ff ffb0 	bl	8001170 <__NVIC_SetPriority>
}
 8001210:	bd10      	pop	{r4, pc}
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001218:	2800      	cmp	r0, #0
 800121a:	db07      	blt.n	800122c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121c:	f000 021f 	and.w	r2, r0, #31
 8001220:	0940      	lsrs	r0, r0, #5
 8001222:	2301      	movs	r3, #1
 8001224:	4093      	lsls	r3, r2
 8001226:	4a02      	ldr	r2, [pc, #8]	@ (8001230 <HAL_NVIC_EnableIRQ+0x18>)
 8001228:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	3801      	subs	r0, #1
 8001236:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800123a:	d20b      	bcs.n	8001254 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001240:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	4a05      	ldr	r2, [pc, #20]	@ (8001258 <HAL_SYSTICK_Config+0x24>)
 8001244:	21f0      	movs	r1, #240	@ 0xf0
 8001246:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124a:	2000      	movs	r0, #0
 800124c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	2207      	movs	r2, #7
 8001250:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001252:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001254:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800125c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800125e:	6805      	ldr	r5, [r0, #0]
 8001260:	682c      	ldr	r4, [r5, #0]
 8001262:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8001266:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001268:	6804      	ldr	r4, [r0, #0]
 800126a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800126c:	6883      	ldr	r3, [r0, #8]
 800126e:	2b40      	cmp	r3, #64	@ 0x40
 8001270:	d005      	beq.n	800127e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001272:	6803      	ldr	r3, [r0, #0]
 8001274:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001276:	6803      	ldr	r3, [r0, #0]
 8001278:	60da      	str	r2, [r3, #12]
  }
}
 800127a:	bc30      	pop	{r4, r5}
 800127c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800127e:	6803      	ldr	r3, [r0, #0]
 8001280:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001282:	6803      	ldr	r3, [r0, #0]
 8001284:	60d9      	str	r1, [r3, #12]
 8001286:	e7f8      	b.n	800127a <DMA_SetConfig+0x1e>

08001288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001288:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800128a:	6801      	ldr	r1, [r0, #0]
 800128c:	b2ca      	uxtb	r2, r1
 800128e:	3a10      	subs	r2, #16
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <DMA_CalcBaseAndBitshift+0x34>)
 8001292:	fba3 4302 	umull	r4, r3, r3, r2
 8001296:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001298:	4c09      	ldr	r4, [pc, #36]	@ (80012c0 <DMA_CalcBaseAndBitshift+0x38>)
 800129a:	5ce3      	ldrb	r3, [r4, r3]
 800129c:	65c3      	str	r3, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800129e:	2a5f      	cmp	r2, #95	@ 0x5f
 80012a0:	d907      	bls.n	80012b2 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <DMA_CalcBaseAndBitshift+0x3c>)
 80012a4:	400b      	ands	r3, r1
 80012a6:	3304      	adds	r3, #4
 80012a8:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80012aa:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80012ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012b0:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012b2:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <DMA_CalcBaseAndBitshift+0x3c>)
 80012b4:	400b      	ands	r3, r1
 80012b6:	6583      	str	r3, [r0, #88]	@ 0x58
 80012b8:	e7f7      	b.n	80012aa <DMA_CalcBaseAndBitshift+0x22>
 80012ba:	bf00      	nop
 80012bc:	aaaaaaab 	.word	0xaaaaaaab
 80012c0:	08004bc4 	.word	0x08004bc4
 80012c4:	fffffc00 	.word	0xfffffc00

080012c8 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012c8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012ca:	6982      	ldr	r2, [r0, #24]
 80012cc:	b992      	cbnz	r2, 80012f4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d00a      	beq.n	80012e8 <DMA_CheckFifoParam+0x20>
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d002      	beq.n	80012dc <DMA_CheckFifoParam+0x14>
 80012d6:	b10b      	cbz	r3, 80012dc <DMA_CheckFifoParam+0x14>
 80012d8:	2000      	movs	r0, #0
 80012da:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012dc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80012de:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80012e2:	d128      	bne.n	8001336 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80012e4:	2000      	movs	r0, #0
 80012e6:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012e8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80012ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80012ee:	d024      	beq.n	800133a <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80012f0:	2000      	movs	r0, #0
 80012f2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012f4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80012f8:	d009      	beq.n	800130e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d925      	bls.n	800134a <DMA_CheckFifoParam+0x82>
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d125      	bne.n	800134e <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001302:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001304:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001308:	d123      	bne.n	8001352 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800130a:	2000      	movs	r0, #0
 800130c:	4770      	bx	lr
    switch (tmp)
 800130e:	2b03      	cmp	r3, #3
 8001310:	d803      	bhi.n	800131a <DMA_CheckFifoParam+0x52>
 8001312:	e8df f003 	tbb	[pc, r3]
 8001316:	0414      	.short	0x0414
 8001318:	0a14      	.short	0x0a14
 800131a:	2000      	movs	r0, #0
 800131c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800131e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001320:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001324:	d10d      	bne.n	8001342 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001326:	2000      	movs	r0, #0
 8001328:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800132a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800132c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001330:	d009      	beq.n	8001346 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001332:	2000      	movs	r0, #0
 8001334:	4770      	bx	lr
        status = HAL_ERROR;
 8001336:	2001      	movs	r0, #1
 8001338:	4770      	bx	lr
        status = HAL_ERROR;
 800133a:	2001      	movs	r0, #1
 800133c:	4770      	bx	lr
      status = HAL_ERROR;
 800133e:	2001      	movs	r0, #1
 8001340:	4770      	bx	lr
        status = HAL_ERROR;
 8001342:	2001      	movs	r0, #1
 8001344:	4770      	bx	lr
        status = HAL_ERROR;
 8001346:	2001      	movs	r0, #1
 8001348:	4770      	bx	lr
      status = HAL_ERROR;
 800134a:	2001      	movs	r0, #1
 800134c:	4770      	bx	lr
    switch (tmp)
 800134e:	2000      	movs	r0, #0
 8001350:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001352:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001354:	4770      	bx	lr
	...

08001358 <HAL_DMA_Init>:
{
 8001358:	b570      	push	{r4, r5, r6, lr}
 800135a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ff02 	bl	8001164 <HAL_GetTick>
  if(hdma == NULL)
 8001360:	2c00      	cmp	r4, #0
 8001362:	d05b      	beq.n	800141c <HAL_DMA_Init+0xc4>
 8001364:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001366:	2302      	movs	r3, #2
 8001368:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800136c:	2300      	movs	r3, #0
 800136e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001372:	6822      	ldr	r2, [r4, #0]
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	f012 0f01 	tst.w	r2, #1
 8001384:	d00a      	beq.n	800139c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001386:	f7ff feed 	bl	8001164 <HAL_GetTick>
 800138a:	1b43      	subs	r3, r0, r5
 800138c:	2b05      	cmp	r3, #5
 800138e:	d9f5      	bls.n	800137c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001390:	2320      	movs	r3, #32
 8001392:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001394:	2003      	movs	r0, #3
 8001396:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800139a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800139c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800139e:	4920      	ldr	r1, [pc, #128]	@ (8001420 <HAL_DMA_Init+0xc8>)
 80013a0:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a2:	6862      	ldr	r2, [r4, #4]
 80013a4:	68a0      	ldr	r0, [r4, #8]
 80013a6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a8:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013aa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ac:	6920      	ldr	r0, [r4, #16]
 80013ae:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b0:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b4:	69a0      	ldr	r0, [r4, #24]
 80013b6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b8:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ba:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80013bc:	6a20      	ldr	r0, [r4, #32]
 80013be:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013c0:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80013c4:	2904      	cmp	r1, #4
 80013c6:	d01e      	beq.n	8001406 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80013c8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80013ca:	6826      	ldr	r6, [r4, #0]
 80013cc:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013ce:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80013d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80013d4:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d107      	bne.n	80013ea <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80013da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80013dc:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80013e0:	b11b      	cbz	r3, 80013ea <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff ff70 	bl	80012c8 <DMA_CheckFifoParam>
 80013e8:	b990      	cbnz	r0, 8001410 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80013ea:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ec:	4620      	mov	r0, r4
 80013ee:	f7ff ff4b 	bl	8001288 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80013f4:	233f      	movs	r3, #63	@ 0x3f
 80013f6:	4093      	lsls	r3, r2
 80013f8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fa:	2000      	movs	r0, #0
 80013fc:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80013fe:	2301      	movs	r3, #1
 8001400:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001404:	e7c9      	b.n	800139a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001406:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001408:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800140a:	4301      	orrs	r1, r0
 800140c:	430a      	orrs	r2, r1
 800140e:	e7db      	b.n	80013c8 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001410:	2340      	movs	r3, #64	@ 0x40
 8001412:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001414:	2001      	movs	r0, #1
 8001416:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800141a:	e7be      	b.n	800139a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800141c:	2001      	movs	r0, #1
 800141e:	e7bc      	b.n	800139a <HAL_DMA_Init+0x42>
 8001420:	e010803f 	.word	0xe010803f

08001424 <HAL_DMA_Start_IT>:
{
 8001424:	b538      	push	{r3, r4, r5, lr}
 8001426:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001428:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800142a:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800142e:	2801      	cmp	r0, #1
 8001430:	d030      	beq.n	8001494 <HAL_DMA_Start_IT+0x70>
 8001432:	2001      	movs	r0, #1
 8001434:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001438:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 800143c:	b2c0      	uxtb	r0, r0
 800143e:	2801      	cmp	r0, #1
 8001440:	d004      	beq.n	800144c <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001442:	2300      	movs	r3, #0
 8001444:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001448:	2002      	movs	r0, #2
}
 800144a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800144c:	2002      	movs	r0, #2
 800144e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001452:	2000      	movs	r0, #0
 8001454:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001456:	4620      	mov	r0, r4
 8001458:	f7ff ff00 	bl	800125c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800145c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800145e:	233f      	movs	r3, #63	@ 0x3f
 8001460:	4093      	lsls	r3, r2
 8001462:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001464:	6822      	ldr	r2, [r4, #0]
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	f043 0316 	orr.w	r3, r3, #22
 800146c:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800146e:	6822      	ldr	r2, [r4, #0]
 8001470:	6953      	ldr	r3, [r2, #20]
 8001472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001476:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001478:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800147a:	b123      	cbz	r3, 8001486 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 800147c:	6822      	ldr	r2, [r4, #0]
 800147e:	6813      	ldr	r3, [r2, #0]
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001486:	6822      	ldr	r2, [r4, #0]
 8001488:	6813      	ldr	r3, [r2, #0]
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001490:	2000      	movs	r0, #0
 8001492:	e7da      	b.n	800144a <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001494:	2002      	movs	r0, #2
 8001496:	e7d8      	b.n	800144a <HAL_DMA_Start_IT+0x26>

08001498 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001498:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d003      	beq.n	80014aa <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
 80014a8:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80014aa:	2305      	movs	r3, #5
 80014ac:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 80014b0:	6802      	ldr	r2, [r0, #0]
 80014b2:	6813      	ldr	r3, [r2, #0]
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80014ba:	2000      	movs	r0, #0
}
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_DMA_IRQHandler>:
{
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80014ca:	4b72      	ldr	r3, [pc, #456]	@ (8001694 <HAL_DMA_IRQHandler+0x1d4>)
 80014cc:	681d      	ldr	r5, [r3, #0]
 80014ce:	4b72      	ldr	r3, [pc, #456]	@ (8001698 <HAL_DMA_IRQHandler+0x1d8>)
 80014d0:	fba3 3505 	umull	r3, r5, r3, r5
 80014d4:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d6:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80014d8:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014da:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80014dc:	2308      	movs	r3, #8
 80014de:	4093      	lsls	r3, r2
 80014e0:	4233      	tst	r3, r6
 80014e2:	d010      	beq.n	8001506 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014e4:	6803      	ldr	r3, [r0, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	f012 0f04 	tst.w	r2, #4
 80014ec:	d00b      	beq.n	8001506 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	f022 0204 	bic.w	r2, r2, #4
 80014f4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014f6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80014f8:	2308      	movs	r3, #8
 80014fa:	4093      	lsls	r3, r2
 80014fc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014fe:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001506:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001508:	2301      	movs	r3, #1
 800150a:	4093      	lsls	r3, r2
 800150c:	4233      	tst	r3, r6
 800150e:	d009      	beq.n	8001524 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001510:	6822      	ldr	r2, [r4, #0]
 8001512:	6952      	ldr	r2, [r2, #20]
 8001514:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001518:	d004      	beq.n	8001524 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800151a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800151c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001524:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001526:	2304      	movs	r3, #4
 8001528:	4093      	lsls	r3, r2
 800152a:	4233      	tst	r3, r6
 800152c:	d009      	beq.n	8001542 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800152e:	6822      	ldr	r2, [r4, #0]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	f012 0f02 	tst.w	r2, #2
 8001536:	d004      	beq.n	8001542 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001538:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800153a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001542:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001544:	2310      	movs	r3, #16
 8001546:	4093      	lsls	r3, r2
 8001548:	4233      	tst	r3, r6
 800154a:	d024      	beq.n	8001596 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800154c:	6822      	ldr	r2, [r4, #0]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	f012 0f08 	tst.w	r2, #8
 8001554:	d01f      	beq.n	8001596 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001556:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001560:	d00d      	beq.n	800157e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001568:	d104      	bne.n	8001574 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800156a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800156c:	b19b      	cbz	r3, 8001596 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800156e:	4620      	mov	r0, r4
 8001570:	4798      	blx	r3
 8001572:	e010      	b.n	8001596 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001574:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001576:	b173      	cbz	r3, 8001596 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001578:	4620      	mov	r0, r4
 800157a:	4798      	blx	r3
 800157c:	e00b      	b.n	8001596 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001584:	d103      	bne.n	800158e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	f022 0208 	bic.w	r2, r2, #8
 800158c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800158e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001590:	b10b      	cbz	r3, 8001596 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001592:	4620      	mov	r0, r4
 8001594:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001596:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001598:	2320      	movs	r3, #32
 800159a:	4093      	lsls	r3, r2
 800159c:	4233      	tst	r3, r6
 800159e:	d055      	beq.n	800164c <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015a0:	6822      	ldr	r2, [r4, #0]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	f012 0f10 	tst.w	r2, #16
 80015a8:	d050      	beq.n	800164c <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015aa:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ac:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d00e      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80015be:	d033      	beq.n	8001628 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80015c6:	d12a      	bne.n	800161e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80015c8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d03e      	beq.n	800164c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80015ce:	4620      	mov	r0, r4
 80015d0:	4798      	blx	r3
 80015d2:	e03b      	b.n	800164c <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015d4:	6822      	ldr	r2, [r4, #0]
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	f023 0316 	bic.w	r3, r3, #22
 80015dc:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	6953      	ldr	r3, [r2, #20]
 80015e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015e6:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015ea:	b1a3      	cbz	r3, 8001616 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015ec:	6822      	ldr	r2, [r4, #0]
 80015ee:	6813      	ldr	r3, [r2, #0]
 80015f0:	f023 0308 	bic.w	r3, r3, #8
 80015f4:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80015f8:	233f      	movs	r3, #63	@ 0x3f
 80015fa:	4093      	lsls	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80015fe:	2301      	movs	r3, #1
 8001600:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001604:	2300      	movs	r3, #0
 8001606:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800160a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800160c:	2b00      	cmp	r3, #0
 800160e:	d03f      	beq.n	8001690 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001610:	4620      	mov	r0, r4
 8001612:	4798      	blx	r3
        return;
 8001614:	e03c      	b.n	8001690 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001616:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e7      	bne.n	80015ec <HAL_DMA_IRQHandler+0x12c>
 800161c:	e7eb      	b.n	80015f6 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800161e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001620:	b1a3      	cbz	r3, 800164c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001622:	4620      	mov	r0, r4
 8001624:	4798      	blx	r3
 8001626:	e011      	b.n	800164c <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800162e:	d109      	bne.n	8001644 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	f022 0210 	bic.w	r2, r2, #16
 8001636:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001638:	2301      	movs	r3, #1
 800163a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800163e:	2300      	movs	r3, #0
 8001640:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001644:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001646:	b10b      	cbz	r3, 800164c <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001648:	4620      	mov	r0, r4
 800164a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800164c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800164e:	b1fb      	cbz	r3, 8001690 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001650:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001652:	f013 0f01 	tst.w	r3, #1
 8001656:	d017      	beq.n	8001688 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001658:	2305      	movs	r3, #5
 800165a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800165e:	6822      	ldr	r2, [r4, #0]
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001668:	9b01      	ldr	r3, [sp, #4]
 800166a:	3301      	adds	r3, #1
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	42ab      	cmp	r3, r5
 8001670:	d804      	bhi.n	800167c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f013 0f01 	tst.w	r3, #1
 800167a:	d1f5      	bne.n	8001668 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 800167c:	2301      	movs	r3, #1
 800167e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001682:	2300      	movs	r3, #0
 8001684:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001688:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800168a:	b10b      	cbz	r3, 8001690 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 800168c:	4620      	mov	r0, r4
 800168e:	4798      	blx	r3
}
 8001690:	b003      	add	sp, #12
 8001692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001694:	20000018 	.word	0x20000018
 8001698:	1b4e81b5 	.word	0x1b4e81b5

0800169c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800169c:	2300      	movs	r3, #0
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	f200 80f4 	bhi.w	800188c <HAL_GPIO_Init+0x1f0>
{
 80016a4:	b570      	push	{r4, r5, r6, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	e066      	b.n	8001778 <HAL_GPIO_Init+0xdc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016aa:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016ac:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80016b0:	2403      	movs	r4, #3
 80016b2:	fa04 f40e 	lsl.w	r4, r4, lr
 80016b6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80016ba:	68cc      	ldr	r4, [r1, #12]
 80016bc:	fa04 f40e 	lsl.w	r4, r4, lr
 80016c0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80016c2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ca:	684a      	ldr	r2, [r1, #4]
 80016cc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80016d0:	409a      	lsls	r2, r3
 80016d2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80016d4:	6042      	str	r2, [r0, #4]
 80016d6:	e05d      	b.n	8001794 <HAL_GPIO_Init+0xf8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016d8:	08dc      	lsrs	r4, r3, #3
 80016da:	3408      	adds	r4, #8
 80016dc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016e0:	f003 0507 	and.w	r5, r3, #7
 80016e4:	00ad      	lsls	r5, r5, #2
 80016e6:	f04f 0e0f 	mov.w	lr, #15
 80016ea:	fa0e fe05 	lsl.w	lr, lr, r5
 80016ee:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016f2:	690a      	ldr	r2, [r1, #16]
 80016f4:	40aa      	lsls	r2, r5
 80016f6:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 80016fa:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80016fe:	e05d      	b.n	80017bc <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001700:	2209      	movs	r2, #9
 8001702:	e000      	b.n	8001706 <HAL_GPIO_Init+0x6a>
 8001704:	2200      	movs	r2, #0
 8001706:	fa02 f20e 	lsl.w	r2, r2, lr
 800170a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 800170c:	3402      	adds	r4, #2
 800170e:	4d60      	ldr	r5, [pc, #384]	@ (8001890 <HAL_GPIO_Init+0x1f4>)
 8001710:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001714:	4a5f      	ldr	r2, [pc, #380]	@ (8001894 <HAL_GPIO_Init+0x1f8>)
 8001716:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001718:	ea6f 020c 	mvn.w	r2, ip
 800171c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001720:	684e      	ldr	r6, [r1, #4]
 8001722:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001726:	d001      	beq.n	800172c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001728:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800172c:	4c59      	ldr	r4, [pc, #356]	@ (8001894 <HAL_GPIO_Init+0x1f8>)
 800172e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001730:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001732:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001736:	684e      	ldr	r6, [r1, #4]
 8001738:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 800173c:	d001      	beq.n	8001742 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800173e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001742:	4c54      	ldr	r4, [pc, #336]	@ (8001894 <HAL_GPIO_Init+0x1f8>)
 8001744:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001746:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001748:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800174c:	684e      	ldr	r6, [r1, #4]
 800174e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001752:	d001      	beq.n	8001758 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001754:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001758:	4c4e      	ldr	r4, [pc, #312]	@ (8001894 <HAL_GPIO_Init+0x1f8>)
 800175a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800175c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800175e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001760:	684d      	ldr	r5, [r1, #4]
 8001762:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001766:	d001      	beq.n	800176c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001768:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800176c:	4c49      	ldr	r4, [pc, #292]	@ (8001894 <HAL_GPIO_Init+0x1f8>)
 800176e:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001770:	3301      	adds	r3, #1
 8001772:	2b0f      	cmp	r3, #15
 8001774:	f200 8088 	bhi.w	8001888 <HAL_GPIO_Init+0x1ec>
    ioposition = ((uint32_t)0x01) << position;
 8001778:	2201      	movs	r2, #1
 800177a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177c:	680c      	ldr	r4, [r1, #0]
 800177e:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001782:	ea32 0404 	bics.w	r4, r2, r4
 8001786:	d1f3      	bne.n	8001770 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001788:	684c      	ldr	r4, [r1, #4]
 800178a:	f004 0403 	and.w	r4, r4, #3
 800178e:	3c01      	subs	r4, #1
 8001790:	2c01      	cmp	r4, #1
 8001792:	d98a      	bls.n	80016aa <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001794:	684a      	ldr	r2, [r1, #4]
 8001796:	f002 0203 	and.w	r2, r2, #3
 800179a:	2a03      	cmp	r2, #3
 800179c:	d009      	beq.n	80017b2 <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 800179e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017a0:	005d      	lsls	r5, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	40aa      	lsls	r2, r5
 80017a6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017aa:	688a      	ldr	r2, [r1, #8]
 80017ac:	40aa      	lsls	r2, r5
 80017ae:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80017b0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b2:	684a      	ldr	r2, [r1, #4]
 80017b4:	f002 0203 	and.w	r2, r2, #3
 80017b8:	2a02      	cmp	r2, #2
 80017ba:	d08d      	beq.n	80016d8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80017bc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017be:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	fa02 f20e 	lsl.w	r2, r2, lr
 80017c8:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017cc:	684a      	ldr	r2, [r1, #4]
 80017ce:	f002 0203 	and.w	r2, r2, #3
 80017d2:	fa02 f20e 	lsl.w	r2, r2, lr
 80017d6:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80017d8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017da:	684a      	ldr	r2, [r1, #4]
 80017dc:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80017e0:	d0c6      	beq.n	8001770 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001898 <HAL_GPIO_Init+0x1fc>)
 80017e4:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80017e6:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80017ea:	6454      	str	r4, [r2, #68]	@ 0x44
 80017ec:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017ee:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80017f2:	9201      	str	r2, [sp, #4]
 80017f4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80017f6:	089c      	lsrs	r4, r3, #2
 80017f8:	1ca5      	adds	r5, r4, #2
 80017fa:	4a25      	ldr	r2, [pc, #148]	@ (8001890 <HAL_GPIO_Init+0x1f4>)
 80017fc:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001800:	f003 0e03 	and.w	lr, r3, #3
 8001804:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001808:	220f      	movs	r2, #15
 800180a:	fa02 f20e 	lsl.w	r2, r2, lr
 800180e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001812:	4a22      	ldr	r2, [pc, #136]	@ (800189c <HAL_GPIO_Init+0x200>)
 8001814:	4290      	cmp	r0, r2
 8001816:	f43f af75 	beq.w	8001704 <HAL_GPIO_Init+0x68>
 800181a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800181e:	4290      	cmp	r0, r2
 8001820:	d022      	beq.n	8001868 <HAL_GPIO_Init+0x1cc>
 8001822:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001826:	4290      	cmp	r0, r2
 8001828:	d020      	beq.n	800186c <HAL_GPIO_Init+0x1d0>
 800182a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800182e:	4290      	cmp	r0, r2
 8001830:	d01e      	beq.n	8001870 <HAL_GPIO_Init+0x1d4>
 8001832:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001836:	4290      	cmp	r0, r2
 8001838:	d01c      	beq.n	8001874 <HAL_GPIO_Init+0x1d8>
 800183a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800183e:	4290      	cmp	r0, r2
 8001840:	d01a      	beq.n	8001878 <HAL_GPIO_Init+0x1dc>
 8001842:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001846:	4290      	cmp	r0, r2
 8001848:	d018      	beq.n	800187c <HAL_GPIO_Init+0x1e0>
 800184a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800184e:	4290      	cmp	r0, r2
 8001850:	d016      	beq.n	8001880 <HAL_GPIO_Init+0x1e4>
 8001852:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001856:	4290      	cmp	r0, r2
 8001858:	d014      	beq.n	8001884 <HAL_GPIO_Init+0x1e8>
 800185a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800185e:	4290      	cmp	r0, r2
 8001860:	f43f af4e 	beq.w	8001700 <HAL_GPIO_Init+0x64>
 8001864:	220a      	movs	r2, #10
 8001866:	e74e      	b.n	8001706 <HAL_GPIO_Init+0x6a>
 8001868:	2201      	movs	r2, #1
 800186a:	e74c      	b.n	8001706 <HAL_GPIO_Init+0x6a>
 800186c:	2202      	movs	r2, #2
 800186e:	e74a      	b.n	8001706 <HAL_GPIO_Init+0x6a>
 8001870:	2203      	movs	r2, #3
 8001872:	e748      	b.n	8001706 <HAL_GPIO_Init+0x6a>
 8001874:	2204      	movs	r2, #4
 8001876:	e746      	b.n	8001706 <HAL_GPIO_Init+0x6a>
 8001878:	2205      	movs	r2, #5
 800187a:	e744      	b.n	8001706 <HAL_GPIO_Init+0x6a>
 800187c:	2206      	movs	r2, #6
 800187e:	e742      	b.n	8001706 <HAL_GPIO_Init+0x6a>
 8001880:	2207      	movs	r2, #7
 8001882:	e740      	b.n	8001706 <HAL_GPIO_Init+0x6a>
 8001884:	2208      	movs	r2, #8
 8001886:	e73e      	b.n	8001706 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001888:	b002      	add	sp, #8
 800188a:	bd70      	pop	{r4, r5, r6, pc}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40013800 	.word	0x40013800
 8001894:	40013c00 	.word	0x40013c00
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000

080018a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a0:	b10a      	cbz	r2, 80018a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a2:	6181      	str	r1, [r0, #24]
 80018a4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80018a6:	0409      	lsls	r1, r1, #16
 80018a8:	6181      	str	r1, [r0, #24]
  }
}
 80018aa:	4770      	bx	lr

080018ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018ac:	b510      	push	{r4, lr}
 80018ae:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <HAL_PWREx_EnableOverDrive+0x74>)
 80018b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018b4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018c4:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <HAL_PWREx_EnableOverDrive+0x78>)
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ce:	f7ff fc49 	bl	8001164 <HAL_GetTick>
 80018d2:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018d4:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <HAL_PWREx_EnableOverDrive+0x78>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80018dc:	d108      	bne.n	80018f0 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018de:	f7ff fc41 	bl	8001164 <HAL_GetTick>
 80018e2:	1b00      	subs	r0, r0, r4
 80018e4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80018e8:	d9f4      	bls.n	80018d4 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80018ea:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80018ec:	b002      	add	sp, #8
 80018ee:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001924 <HAL_PWREx_EnableOverDrive+0x78>)
 80018f2:	6813      	ldr	r3, [r2, #0]
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80018fa:	f7ff fc33 	bl	8001164 <HAL_GetTick>
 80018fe:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <HAL_PWREx_EnableOverDrive+0x78>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001908:	d107      	bne.n	800191a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800190a:	f7ff fc2b 	bl	8001164 <HAL_GetTick>
 800190e:	1b00      	subs	r0, r0, r4
 8001910:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001914:	d9f4      	bls.n	8001900 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001916:	2003      	movs	r0, #3
 8001918:	e7e8      	b.n	80018ec <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800191a:	2000      	movs	r0, #0
 800191c:	e7e6      	b.n	80018ec <HAL_PWREx_EnableOverDrive+0x40>
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000

08001928 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001928:	2800      	cmp	r0, #0
 800192a:	f000 8206 	beq.w	8001d3a <HAL_RCC_OscConfig+0x412>
{
 800192e:	b570      	push	{r4, r5, r6, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001934:	6803      	ldr	r3, [r0, #0]
 8001936:	f013 0f01 	tst.w	r3, #1
 800193a:	d029      	beq.n	8001990 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800193c:	4b95      	ldr	r3, [pc, #596]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b04      	cmp	r3, #4
 8001946:	d01a      	beq.n	800197e <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001948:	4b92      	ldr	r3, [pc, #584]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d00f      	beq.n	8001974 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001954:	6863      	ldr	r3, [r4, #4]
 8001956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800195a:	d040      	beq.n	80019de <HAL_RCC_OscConfig+0xb6>
 800195c:	2b00      	cmp	r3, #0
 800195e:	d154      	bne.n	8001a0a <HAL_RCC_OscConfig+0xe2>
 8001960:	4b8c      	ldr	r3, [pc, #560]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e039      	b.n	80019e8 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001974:	4b87      	ldr	r3, [pc, #540]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800197c:	d0ea      	beq.n	8001954 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197e:	4b85      	ldr	r3, [pc, #532]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001986:	d003      	beq.n	8001990 <HAL_RCC_OscConfig+0x68>
 8001988:	6863      	ldr	r3, [r4, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 81d7 	beq.w	8001d3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	f013 0f02 	tst.w	r3, #2
 8001996:	d074      	beq.n	8001a82 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001998:	4b7e      	ldr	r3, [pc, #504]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f013 0f0c 	tst.w	r3, #12
 80019a0:	d05e      	beq.n	8001a60 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d053      	beq.n	8001a56 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019ae:	68e3      	ldr	r3, [r4, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8089 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b6:	4a77      	ldr	r2, [pc, #476]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	6813      	ldr	r3, [r2, #0]
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fbd0 	bl	8001164 <HAL_GetTick>
 80019c4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	4b73      	ldr	r3, [pc, #460]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f013 0f02 	tst.w	r3, #2
 80019ce:	d172      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff fbc8 	bl	8001164 <HAL_GetTick>
 80019d4:	1b40      	subs	r0, r0, r5
 80019d6:	2802      	cmp	r0, #2
 80019d8:	d9f5      	bls.n	80019c6 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80019da:	2003      	movs	r0, #3
 80019dc:	e1b4      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019de:	4a6d      	ldr	r2, [pc, #436]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	6863      	ldr	r3, [r4, #4]
 80019ea:	b32b      	cbz	r3, 8001a38 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80019ec:	f7ff fbba 	bl	8001164 <HAL_GetTick>
 80019f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	4b68      	ldr	r3, [pc, #416]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80019fa:	d1c9      	bne.n	8001990 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fbb2 	bl	8001164 <HAL_GetTick>
 8001a00:	1b40      	subs	r0, r0, r5
 8001a02:	2864      	cmp	r0, #100	@ 0x64
 8001a04:	d9f5      	bls.n	80019f2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001a06:	2003      	movs	r0, #3
 8001a08:	e19e      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a0e:	d009      	beq.n	8001a24 <HAL_RCC_OscConfig+0xfc>
 8001a10:	4b60      	ldr	r3, [pc, #384]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e7e1      	b.n	80019e8 <HAL_RCC_OscConfig+0xc0>
 8001a24:	4b5b      	ldr	r3, [pc, #364]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e7d7      	b.n	80019e8 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb94 	bl	8001164 <HAL_GetTick>
 8001a3c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	4b55      	ldr	r3, [pc, #340]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001a46:	d0a3      	beq.n	8001990 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fb8c 	bl	8001164 <HAL_GetTick>
 8001a4c:	1b40      	subs	r0, r0, r5
 8001a4e:	2864      	cmp	r0, #100	@ 0x64
 8001a50:	d9f5      	bls.n	8001a3e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8001a52:	2003      	movs	r0, #3
 8001a54:	e178      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a56:	4b4f      	ldr	r3, [pc, #316]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001a5e:	d1a6      	bne.n	80019ae <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a60:	4b4c      	ldr	r3, [pc, #304]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f013 0f02 	tst.w	r3, #2
 8001a68:	d003      	beq.n	8001a72 <HAL_RCC_OscConfig+0x14a>
 8001a6a:	68e3      	ldr	r3, [r4, #12]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	f040 8168 	bne.w	8001d42 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a72:	4a48      	ldr	r2, [pc, #288]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001a7a:	6921      	ldr	r1, [r4, #16]
 8001a7c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a80:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	f013 0f08 	tst.w	r3, #8
 8001a88:	d046      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a8a:	6963      	ldr	r3, [r4, #20]
 8001a8c:	b383      	cbz	r3, 8001af0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	4a41      	ldr	r2, [pc, #260]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff fb64 	bl	8001164 <HAL_GetTick>
 8001a9c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aa2:	f013 0f02 	tst.w	r3, #2
 8001aa6:	d137      	bne.n	8001b18 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fb5c 	bl	8001164 <HAL_GetTick>
 8001aac:	1b40      	subs	r0, r0, r5
 8001aae:	2802      	cmp	r0, #2
 8001ab0:	d9f5      	bls.n	8001a9e <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	e148      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab6:	4a37      	ldr	r2, [pc, #220]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	6813      	ldr	r3, [r2, #0]
 8001aba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001abe:	6921      	ldr	r1, [r4, #16]
 8001ac0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e7dc      	b.n	8001a82 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8001ac8:	4a32      	ldr	r2, [pc, #200]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fb47 	bl	8001164 <HAL_GetTick>
 8001ad6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f013 0f02 	tst.w	r3, #2
 8001ae0:	d0cf      	beq.n	8001a82 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fb3f 	bl	8001164 <HAL_GetTick>
 8001ae6:	1b40      	subs	r0, r0, r5
 8001ae8:	2802      	cmp	r0, #2
 8001aea:	d9f5      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8001aec:	2003      	movs	r0, #3
 8001aee:	e12b      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af0:	4a28      	ldr	r2, [pc, #160]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff fb33 	bl	8001164 <HAL_GetTick>
 8001afe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b00:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b04:	f013 0f02 	tst.w	r3, #2
 8001b08:	d006      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fb2b 	bl	8001164 <HAL_GetTick>
 8001b0e:	1b40      	subs	r0, r0, r5
 8001b10:	2802      	cmp	r0, #2
 8001b12:	d9f5      	bls.n	8001b00 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001b14:	2003      	movs	r0, #3
 8001b16:	e117      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	f013 0f04 	tst.w	r3, #4
 8001b1e:	d07d      	beq.n	8001c1c <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b20:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001b28:	d11e      	bne.n	8001b68 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b2e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b32:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b3e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b48:	d010      	beq.n	8001b6c <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4a:	68a3      	ldr	r3, [r4, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d025      	beq.n	8001b9c <HAL_RCC_OscConfig+0x274>
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d13b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2a4>
 8001b54:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b60:	f022 0204 	bic.w	r2, r2, #4
 8001b64:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b66:	e01e      	b.n	8001ba6 <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8001b68:	2500      	movs	r5, #0
 8001b6a:	e7e9      	b.n	8001b40 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	6813      	ldr	r3, [r2, #0]
 8001b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b74:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b76:	f7ff faf5 	bl	8001164 <HAL_GetTick>
 8001b7a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b84:	d1e1      	bne.n	8001b4a <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b86:	f7ff faed 	bl	8001164 <HAL_GetTick>
 8001b8a:	1b80      	subs	r0, r0, r6
 8001b8c:	2864      	cmp	r0, #100	@ 0x64
 8001b8e:	d9f5      	bls.n	8001b7c <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8001b90:	2003      	movs	r0, #3
 8001b92:	e0d9      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9c:	4a72      	ldr	r2, [pc, #456]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001b9e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba6:	68a3      	ldr	r3, [r4, #8]
 8001ba8:	b333      	cbz	r3, 8001bf8 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7ff fadb 	bl	8001164 <HAL_GetTick>
 8001bae:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb0:	4b6d      	ldr	r3, [pc, #436]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb4:	f013 0f02 	tst.w	r3, #2
 8001bb8:	d12f      	bne.n	8001c1a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7ff fad3 	bl	8001164 <HAL_GetTick>
 8001bbe:	1b80      	subs	r0, r0, r6
 8001bc0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001bc4:	4298      	cmp	r0, r3
 8001bc6:	d9f3      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001bc8:	2003      	movs	r0, #3
 8001bca:	e0bd      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d009      	beq.n	8001be4 <HAL_RCC_OscConfig+0x2bc>
 8001bd0:	4b65      	ldr	r3, [pc, #404]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001bd2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bda:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001bdc:	f022 0204 	bic.w	r2, r2, #4
 8001be0:	671a      	str	r2, [r3, #112]	@ 0x70
 8001be2:	e7e0      	b.n	8001ba6 <HAL_RCC_OscConfig+0x27e>
 8001be4:	4b60      	ldr	r3, [pc, #384]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001be6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001be8:	f042 0204 	orr.w	r2, r2, #4
 8001bec:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bf6:	e7d6      	b.n	8001ba6 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fab4 	bl	8001164 <HAL_GetTick>
 8001bfc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfe:	4b5a      	ldr	r3, [pc, #360]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c02:	f013 0f02 	tst.w	r3, #2
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f7ff faac 	bl	8001164 <HAL_GetTick>
 8001c0c:	1b80      	subs	r0, r0, r6
 8001c0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c12:	4298      	cmp	r0, r3
 8001c14:	d9f3      	bls.n	8001bfe <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8001c16:	2003      	movs	r0, #3
 8001c18:	e096      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c1a:	b9fd      	cbnz	r5, 8001c5c <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1c:	69a3      	ldr	r3, [r4, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8091 	beq.w	8001d46 <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c24:	4a50      	ldr	r2, [pc, #320]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001c26:	6892      	ldr	r2, [r2, #8]
 8001c28:	f002 020c 	and.w	r2, r2, #12
 8001c2c:	2a08      	cmp	r2, #8
 8001c2e:	d059      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d019      	beq.n	8001c68 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	4a4c      	ldr	r2, [pc, #304]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001c36:	6813      	ldr	r3, [r2, #0]
 8001c38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fa91 	bl	8001164 <HAL_GetTick>
 8001c42:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c44:	4b48      	ldr	r3, [pc, #288]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c4c:	d048      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff fa89 	bl	8001164 <HAL_GetTick>
 8001c52:	1b00      	subs	r0, r0, r4
 8001c54:	2802      	cmp	r0, #2
 8001c56:	d9f5      	bls.n	8001c44 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001c58:	2003      	movs	r0, #3
 8001c5a:	e075      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4a42      	ldr	r2, [pc, #264]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001c5e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001c60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c66:	e7d9      	b.n	8001c1c <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001c68:	4a3f      	ldr	r2, [pc, #252]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001c6a:	6813      	ldr	r3, [r2, #0]
 8001c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c70:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001c72:	f7ff fa77 	bl	8001164 <HAL_GetTick>
 8001c76:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c78:	4b3b      	ldr	r3, [pc, #236]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c80:	d006      	beq.n	8001c90 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff fa6f 	bl	8001164 <HAL_GetTick>
 8001c86:	1b40      	subs	r0, r0, r5
 8001c88:	2802      	cmp	r0, #2
 8001c8a:	d9f5      	bls.n	8001c78 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	e05b      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c90:	69e3      	ldr	r3, [r4, #28]
 8001c92:	6a22      	ldr	r2, [r4, #32]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001c98:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c9c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001c9e:	0852      	lsrs	r2, r2, #1
 8001ca0:	3a01      	subs	r2, #1
 8001ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ca6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001ca8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001cae:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001cb4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cb6:	6813      	ldr	r3, [r2, #0]
 8001cb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cbc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fa51 	bl	8001164 <HAL_GetTick>
 8001cc2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc4:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001ccc:	d106      	bne.n	8001cdc <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff fa49 	bl	8001164 <HAL_GetTick>
 8001cd2:	1b00      	subs	r0, r0, r4
 8001cd4:	2802      	cmp	r0, #2
 8001cd6:	d9f5      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8001cd8:	2003      	movs	r0, #3
 8001cda:	e035      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001cdc:	2000      	movs	r0, #0
 8001cde:	e033      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	e031      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 8001ce4:	4a20      	ldr	r2, [pc, #128]	@ (8001d68 <HAL_RCC_OscConfig+0x440>)
 8001ce6:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d02f      	beq.n	8001d4c <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8001cf0:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf2:	428b      	cmp	r3, r1
 8001cf4:	d12c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cf6:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 8001cfa:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfc:	428b      	cmp	r3, r1
 8001cfe:	d129      	bne.n	8001d54 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d00:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d02:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d06:	4013      	ands	r3, r2
 8001d08:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001d0c:	d124      	bne.n	8001d58 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d0e:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8001d12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d14:	085b      	lsrs	r3, r3, #1
 8001d16:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d18:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001d1c:	d11e      	bne.n	8001d5c <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d1e:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 8001d22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d24:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8001d28:	d11a      	bne.n	8001d60 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d2a:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8001d2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d30:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001d34:	d116      	bne.n	8001d64 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 8001d36:	2000      	movs	r0, #0
 8001d38:	e006      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 8001d3a:	2001      	movs	r0, #1
}
 8001d3c:	4770      	bx	lr
        return HAL_ERROR;
 8001d3e:	2001      	movs	r0, #1
 8001d40:	e002      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 8001d42:	2001      	movs	r0, #1
 8001d44:	e000      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8001d46:	2000      	movs	r0, #0
}
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	e7fb      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
 8001d50:	2001      	movs	r0, #1
 8001d52:	e7f9      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
 8001d54:	2001      	movs	r0, #1
 8001d56:	e7f7      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
 8001d58:	2001      	movs	r0, #1
 8001d5a:	e7f5      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	e7f3      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
 8001d60:	2001      	movs	r0, #1
 8001d62:	e7f1      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
 8001d64:	2001      	movs	r0, #1
 8001d66:	e7ef      	b.n	8001d48 <HAL_RCC_OscConfig+0x420>
 8001d68:	40023800 	.word	0x40023800

08001d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d6c:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d6e:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d041      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x92>
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d141      	bne.n	8001e02 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d7e:	4b22      	ldr	r3, [pc, #136]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001d8c:	d012      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d96:	481d      	ldr	r0, [pc, #116]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	fba1 0100 	umull	r0, r1, r1, r0
 8001d9e:	f7fe fa9f 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001da2:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001daa:	3301      	adds	r3, #1
 8001dac:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001dae:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001db2:	e027      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001db6:	6858      	ldr	r0, [r3, #4]
 8001db8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001dbc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001dc0:	ebbc 0c00 	subs.w	ip, ip, r0
 8001dc4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001dc8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001dcc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001dd0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001dd4:	ebb1 010c 	subs.w	r1, r1, ip
 8001dd8:	eb63 030e 	sbc.w	r3, r3, lr
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001de2:	00c9      	lsls	r1, r1, #3
 8001de4:	eb11 0c00 	adds.w	ip, r1, r0
 8001de8:	f143 0300 	adc.w	r3, r3, #0
 8001dec:	0299      	lsls	r1, r3, #10
 8001dee:	2300      	movs	r3, #0
 8001df0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001df4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001df8:	f7fe fa72 	bl	80002e0 <__aeabi_uldivmod>
 8001dfc:	e7d1      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001dfe:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e00:	e000      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e02:	4803      	ldr	r0, [pc, #12]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e04:	bd08      	pop	{r3, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	017d7840 	.word	0x017d7840
 8001e10:	00f42400 	.word	0x00f42400

08001e14 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001e14:	2800      	cmp	r0, #0
 8001e16:	f000 80a0 	beq.w	8001f5a <HAL_RCC_ClockConfig+0x146>
{
 8001e1a:	b570      	push	{r4, r5, r6, lr}
 8001e1c:	460d      	mov	r5, r1
 8001e1e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b52      	ldr	r3, [pc, #328]	@ (8001f6c <HAL_RCC_ClockConfig+0x158>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	428b      	cmp	r3, r1
 8001e2a:	d20b      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001f6c <HAL_RCC_ClockConfig+0x158>)
 8001e2e:	6813      	ldr	r3, [r2, #0]
 8001e30:	f023 030f 	bic.w	r3, r3, #15
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e38:	6813      	ldr	r3, [r2, #0]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	428b      	cmp	r3, r1
 8001e40:	f040 808d 	bne.w	8001f5e <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	f013 0f02 	tst.w	r3, #2
 8001e4a:	d017      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	f013 0f04 	tst.w	r3, #4
 8001e50:	d004      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e52:	4a47      	ldr	r2, [pc, #284]	@ (8001f70 <HAL_RCC_ClockConfig+0x15c>)
 8001e54:	6893      	ldr	r3, [r2, #8]
 8001e56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e5a:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	f013 0f08 	tst.w	r3, #8
 8001e62:	d004      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e64:	4a42      	ldr	r2, [pc, #264]	@ (8001f70 <HAL_RCC_ClockConfig+0x15c>)
 8001e66:	6893      	ldr	r3, [r2, #8]
 8001e68:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e6c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6e:	4a40      	ldr	r2, [pc, #256]	@ (8001f70 <HAL_RCC_ClockConfig+0x15c>)
 8001e70:	6893      	ldr	r3, [r2, #8]
 8001e72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e76:	68a1      	ldr	r1, [r4, #8]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	f013 0f01 	tst.w	r3, #1
 8001e82:	d031      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e84:	6863      	ldr	r3, [r4, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d020      	beq.n	8001ecc <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d025      	beq.n	8001eda <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4a38      	ldr	r2, [pc, #224]	@ (8001f70 <HAL_RCC_ClockConfig+0x15c>)
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	f012 0f02 	tst.w	r2, #2
 8001e96:	d064      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e98:	4935      	ldr	r1, [pc, #212]	@ (8001f70 <HAL_RCC_ClockConfig+0x15c>)
 8001e9a:	688a      	ldr	r2, [r1, #8]
 8001e9c:	f022 0203 	bic.w	r2, r2, #3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001ea4:	f7ff f95e 	bl	8001164 <HAL_GetTick>
 8001ea8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	4b31      	ldr	r3, [pc, #196]	@ (8001f70 <HAL_RCC_ClockConfig+0x15c>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	6862      	ldr	r2, [r4, #4]
 8001eb4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001eb8:	d016      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eba:	f7ff f953 	bl	8001164 <HAL_GetTick>
 8001ebe:	1b80      	subs	r0, r0, r6
 8001ec0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ec4:	4298      	cmp	r0, r3
 8001ec6:	d9f0      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001ec8:	2003      	movs	r0, #3
 8001eca:	e045      	b.n	8001f58 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ecc:	4a28      	ldr	r2, [pc, #160]	@ (8001f70 <HAL_RCC_ClockConfig+0x15c>)
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001ed4:	d1e0      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	e03e      	b.n	8001f58 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	4a25      	ldr	r2, [pc, #148]	@ (8001f70 <HAL_RCC_ClockConfig+0x15c>)
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001ee2:	d1d9      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	e037      	b.n	8001f58 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <HAL_RCC_ClockConfig+0x158>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	42ab      	cmp	r3, r5
 8001ef2:	d90a      	bls.n	8001f0a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f6c <HAL_RCC_ClockConfig+0x158>)
 8001ef6:	6813      	ldr	r3, [r2, #0]
 8001ef8:	f023 030f 	bic.w	r3, r3, #15
 8001efc:	432b      	orrs	r3, r5
 8001efe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f00:	6813      	ldr	r3, [r2, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	42ab      	cmp	r3, r5
 8001f08:	d12d      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	f013 0f04 	tst.w	r3, #4
 8001f10:	d006      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f12:	4a17      	ldr	r2, [pc, #92]	@ (8001f70 <HAL_RCC_ClockConfig+0x15c>)
 8001f14:	6893      	ldr	r3, [r2, #8]
 8001f16:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001f1a:	68e1      	ldr	r1, [r4, #12]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	f013 0f08 	tst.w	r3, #8
 8001f26:	d007      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f28:	4a11      	ldr	r2, [pc, #68]	@ (8001f70 <HAL_RCC_ClockConfig+0x15c>)
 8001f2a:	6893      	ldr	r3, [r2, #8]
 8001f2c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001f30:	6921      	ldr	r1, [r4, #16]
 8001f32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f36:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f38:	f7ff ff18 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <HAL_RCC_ClockConfig+0x15c>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f44:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_RCC_ClockConfig+0x160>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	40d8      	lsrs	r0, r3
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_RCC_ClockConfig+0x164>)
 8001f4c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_RCC_ClockConfig+0x168>)
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	f7ff f8c1 	bl	80010d8 <HAL_InitTick>
  return HAL_OK;
 8001f56:	2000      	movs	r0, #0
}
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001f5a:	2001      	movs	r0, #1
}
 8001f5c:	4770      	bx	lr
      return HAL_ERROR;
 8001f5e:	2001      	movs	r0, #1
 8001f60:	e7fa      	b.n	8001f58 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001f62:	2001      	movs	r0, #1
 8001f64:	e7f8      	b.n	8001f58 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 8001f66:	2001      	movs	r0, #1
 8001f68:	e7f6      	b.n	8001f58 <HAL_RCC_ClockConfig+0x144>
 8001f6a:	bf00      	nop
 8001f6c:	40023c00 	.word	0x40023c00
 8001f70:	40023800 	.word	0x40023800
 8001f74:	08004bac 	.word	0x08004bac
 8001f78:	20000018 	.word	0x20000018
 8001f7c:	20000020 	.word	0x20000020

08001f80 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001f80:	4b01      	ldr	r3, [pc, #4]	@ (8001f88 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000018 	.word	0x20000018

08001f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f8c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f8e:	f7ff fff7 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001f92:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f9a:	4a03      	ldr	r2, [pc, #12]	@ (8001fa8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f9e:	40d8      	lsrs	r0, r3
 8001fa0:	bd08      	pop	{r3, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	08004bbc 	.word	0x08004bbc

08001fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fae:	f7ff ffe7 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001fba:	4a03      	ldr	r2, [pc, #12]	@ (8001fc8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001fbc:	5cd3      	ldrb	r3, [r2, r3]
}
 8001fbe:	40d8      	lsrs	r0, r3
 8001fc0:	bd08      	pop	{r3, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08004bbc 	.word	0x08004bbc

08001fcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	4605      	mov	r5, r0
 8001fd4:	4688      	mov	r8, r1
 8001fd6:	4617      	mov	r7, r2
 8001fd8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fda:	f7ff f8c3 	bl	8001164 <HAL_GetTick>
 8001fde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001fe0:	1a1b      	subs	r3, r3, r0
 8001fe2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8001fe6:	f7ff f8bd 	bl	8001164 <HAL_GetTick>
 8001fea:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fec:	4b28      	ldr	r3, [pc, #160]	@ (8002090 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001ff4:	fb09 f303 	mul.w	r3, r9, r3
 8001ff8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ffa:	682b      	ldr	r3, [r5, #0]
 8001ffc:	689c      	ldr	r4, [r3, #8]
 8001ffe:	ea38 0404 	bics.w	r4, r8, r4
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	42bb      	cmp	r3, r7
 800200a:	d03d      	beq.n	8002088 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 800200c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002010:	d0f3      	beq.n	8001ffa <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002012:	f7ff f8a7 	bl	8001164 <HAL_GetTick>
 8002016:	eba0 000a 	sub.w	r0, r0, sl
 800201a:	4548      	cmp	r0, r9
 800201c:	d207      	bcs.n	800202e <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800201e:	9a01      	ldr	r2, [sp, #4]
 8002020:	b102      	cbz	r2, 8002024 <SPI_WaitFlagStateUntilTimeout+0x58>
 8002022:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002024:	9b01      	ldr	r3, [sp, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	4691      	mov	r9, r2
 800202c:	e7e5      	b.n	8001ffa <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800202e:	682a      	ldr	r2, [r5, #0]
 8002030:	6853      	ldr	r3, [r2, #4]
 8002032:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8002036:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002038:	686b      	ldr	r3, [r5, #4]
 800203a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800203e:	d00b      	beq.n	8002058 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002040:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002042:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002046:	d014      	beq.n	8002072 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8002048:	2301      	movs	r3, #1
 800204a:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800204e:	2300      	movs	r3, #0
 8002050:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002054:	2003      	movs	r0, #3
 8002056:	e018      	b.n	800208a <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002058:	68ab      	ldr	r3, [r5, #8]
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205e:	bf18      	it	ne
 8002060:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8002064:	d1ec      	bne.n	8002040 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8002066:	682a      	ldr	r2, [r5, #0]
 8002068:	6813      	ldr	r3, [r2, #0]
 800206a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	e7e6      	b.n	8002040 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8002072:	682a      	ldr	r2, [r5, #0]
 8002074:	6813      	ldr	r3, [r2, #0]
 8002076:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	682a      	ldr	r2, [r5, #0]
 800207e:	6813      	ldr	r3, [r2, #0]
 8002080:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e7df      	b.n	8002048 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8002088:	2000      	movs	r0, #0
}
 800208a:	b002      	add	sp, #8
 800208c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002090:	20000018 	.word	0x20000018

08002094 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	4606      	mov	r6, r0
 800209c:	460d      	mov	r5, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80020a8:	f7ff f85c 	bl	8001164 <HAL_GetTick>
 80020ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80020ae:	1a1b      	subs	r3, r3, r0
 80020b0:	eb03 0907 	add.w	r9, r3, r7
  tmp_tickstart = HAL_GetTick();
 80020b4:	f7ff f856 	bl	8001164 <HAL_GetTick>
 80020b8:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80020ba:	f8d6 8000 	ldr.w	r8, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80020be:	4b30      	ldr	r3, [pc, #192]	@ (8002180 <SPI_WaitFifoStateUntilTimeout+0xec>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80020c6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80020ca:	0d1b      	lsrs	r3, r3, #20
 80020cc:	fb09 f303 	mul.w	r3, r9, r3
 80020d0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80020d2:	e002      	b.n	80020da <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80020d4:	f1b7 3fff 	cmp.w	r7, #4294967295
 80020d8:	d112      	bne.n	8002100 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 80020da:	6833      	ldr	r3, [r6, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	ea03 0c05 	and.w	ip, r3, r5
 80020e2:	45a4      	cmp	ip, r4
 80020e4:	d047      	beq.n	8002176 <SPI_WaitFifoStateUntilTimeout+0xe2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80020e6:	f5b5 6fc0 	cmp.w	r5, #1536	@ 0x600
 80020ea:	bf08      	it	eq
 80020ec:	2c00      	cmpeq	r4, #0
 80020ee:	d1f1      	bne.n	80020d4 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 80020f0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80020fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80020fe:	e7e9      	b.n	80020d4 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002100:	f7ff f830 	bl	8001164 <HAL_GetTick>
 8002104:	eba0 000a 	sub.w	r0, r0, sl
 8002108:	4548      	cmp	r0, r9
 800210a:	d207      	bcs.n	800211c <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800210c:	9a01      	ldr	r2, [sp, #4]
 800210e:	b102      	cbz	r2, 8002112 <SPI_WaitFifoStateUntilTimeout+0x7e>
 8002110:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002112:	9b01      	ldr	r3, [sp, #4]
 8002114:	3b01      	subs	r3, #1
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	4691      	mov	r9, r2
 800211a:	e7de      	b.n	80020da <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800211c:	6832      	ldr	r2, [r6, #0]
 800211e:	6853      	ldr	r3, [r2, #4]
 8002120:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8002124:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002126:	6873      	ldr	r3, [r6, #4]
 8002128:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800212c:	d00b      	beq.n	8002146 <SPI_WaitFifoStateUntilTimeout+0xb2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800212e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002134:	d014      	beq.n	8002160 <SPI_WaitFifoStateUntilTimeout+0xcc>
        hspi->State = HAL_SPI_STATE_READY;
 8002136:	2301      	movs	r3, #1
 8002138:	f886 305d 	strb.w	r3, [r6, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800213c:	2300      	movs	r3, #0
 800213e:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002142:	2003      	movs	r0, #3
 8002144:	e018      	b.n	8002178 <SPI_WaitFifoStateUntilTimeout+0xe4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002146:	68b3      	ldr	r3, [r6, #8]
 8002148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800214c:	bf18      	it	ne
 800214e:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8002152:	d1ec      	bne.n	800212e <SPI_WaitFifoStateUntilTimeout+0x9a>
          __HAL_SPI_DISABLE(hspi);
 8002154:	6832      	ldr	r2, [r6, #0]
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e7e6      	b.n	800212e <SPI_WaitFifoStateUntilTimeout+0x9a>
          SPI_RESET_CRC(hspi);
 8002160:	6832      	ldr	r2, [r6, #0]
 8002162:	6813      	ldr	r3, [r2, #0]
 8002164:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	6832      	ldr	r2, [r6, #0]
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	e7df      	b.n	8002136 <SPI_WaitFifoStateUntilTimeout+0xa2>
    }
  }

  return HAL_OK;
 8002176:	2000      	movs	r0, #0
}
 8002178:	b002      	add	sp, #8
 800217a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800217e:	bf00      	nop
 8002180:	20000018 	.word	0x20000018

08002184 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	4604      	mov	r4, r0
 800218a:	460d      	mov	r5, r1
 800218c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800218e:	9200      	str	r2, [sp, #0]
 8002190:	460b      	mov	r3, r1
 8002192:	2200      	movs	r2, #0
 8002194:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002198:	f7ff ff7c 	bl	8002094 <SPI_WaitFifoStateUntilTimeout>
 800219c:	bb18      	cbnz	r0, 80021e6 <SPI_EndRxTxTransaction+0x62>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800219e:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <SPI_EndRxTxTransaction+0x98>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <SPI_EndRxTxTransaction+0x9c>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	0d5b      	lsrs	r3, r3, #21
 80021aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021b4:	6863      	ldr	r3, [r4, #4]
 80021b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021ba:	d01a      	beq.n	80021f2 <SPI_EndRxTxTransaction+0x6e>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80021bc:	9b03      	ldr	r3, [sp, #12]
 80021be:	b13b      	cbz	r3, 80021d0 <SPI_EndRxTxTransaction+0x4c>
      {
        break;
      }
      count--;
 80021c0:	9b03      	ldr	r3, [sp, #12]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80021ce:	d1f5      	bne.n	80021bc <SPI_EndRxTxTransaction+0x38>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80021d0:	9600      	str	r6, [sp, #0]
 80021d2:	462b      	mov	r3, r5
 80021d4:	2200      	movs	r2, #0
 80021d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80021da:	4620      	mov	r0, r4
 80021dc:	f7ff ff5a 	bl	8002094 <SPI_WaitFifoStateUntilTimeout>
 80021e0:	b9b0      	cbnz	r0, 8002210 <SPI_EndRxTxTransaction+0x8c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80021e2:	b004      	add	sp, #16
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021e6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80021e8:	f043 0320 	orr.w	r3, r3, #32
 80021ec:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80021ee:	2003      	movs	r0, #3
 80021f0:	e7f7      	b.n	80021e2 <SPI_EndRxTxTransaction+0x5e>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021f2:	9600      	str	r6, [sp, #0]
 80021f4:	462b      	mov	r3, r5
 80021f6:	2200      	movs	r2, #0
 80021f8:	2180      	movs	r1, #128	@ 0x80
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff fee6 	bl	8001fcc <SPI_WaitFlagStateUntilTimeout>
 8002200:	2800      	cmp	r0, #0
 8002202:	d0e5      	beq.n	80021d0 <SPI_EndRxTxTransaction+0x4c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002204:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002206:	f043 0320 	orr.w	r3, r3, #32
 800220a:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 800220c:	2003      	movs	r0, #3
 800220e:	e7e8      	b.n	80021e2 <SPI_EndRxTxTransaction+0x5e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002210:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002212:	f043 0320 	orr.w	r3, r3, #32
 8002216:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002218:	2003      	movs	r0, #3
 800221a:	e7e2      	b.n	80021e2 <SPI_EndRxTxTransaction+0x5e>
 800221c:	20000018 	.word	0x20000018
 8002220:	165e9f81 	.word	0x165e9f81

08002224 <SPI_EndRxTransaction>:
{
 8002224:	b570      	push	{r4, r5, r6, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	4604      	mov	r4, r0
 800222a:	460d      	mov	r5, r1
 800222c:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800222e:	6843      	ldr	r3, [r0, #4]
 8002230:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002234:	d01f      	beq.n	8002276 <SPI_EndRxTransaction+0x52>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002236:	6863      	ldr	r3, [r4, #4]
 8002238:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800223c:	d028      	beq.n	8002290 <SPI_EndRxTransaction+0x6c>
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800223e:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <SPI_EndRxTransaction+0xbc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a28      	ldr	r2, [pc, #160]	@ (80022e4 <SPI_EndRxTransaction+0xc0>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	0d5b      	lsrs	r3, r3, #21
 800224a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	9303      	str	r3, [sp, #12]
      if (count == 0U)
 8002254:	9b03      	ldr	r3, [sp, #12]
 8002256:	b13b      	cbz	r3, 8002268 <SPI_EndRxTransaction+0x44>
      count--;
 8002258:	9b03      	ldr	r3, [sp, #12]
 800225a:	3b01      	subs	r3, #1
 800225c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800225e:	6820      	ldr	r0, [r4, #0]
 8002260:	6880      	ldr	r0, [r0, #8]
 8002262:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002266:	d1f5      	bne.n	8002254 <SPI_EndRxTransaction+0x30>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002268:	6863      	ldr	r3, [r4, #4]
 800226a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800226e:	d01e      	beq.n	80022ae <SPI_EndRxTransaction+0x8a>
  return HAL_OK;
 8002270:	2000      	movs	r0, #0
}
 8002272:	b004      	add	sp, #16
 8002274:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002276:	6883      	ldr	r3, [r0, #8]
 8002278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227c:	bf18      	it	ne
 800227e:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8002282:	d1d8      	bne.n	8002236 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8002284:	6802      	ldr	r2, [r0, #0]
 8002286:	6813      	ldr	r3, [r2, #0]
 8002288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e7d2      	b.n	8002236 <SPI_EndRxTransaction+0x12>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002290:	9600      	str	r6, [sp, #0]
 8002292:	462b      	mov	r3, r5
 8002294:	2200      	movs	r2, #0
 8002296:	2180      	movs	r1, #128	@ 0x80
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff fe97 	bl	8001fcc <SPI_WaitFlagStateUntilTimeout>
 800229e:	2800      	cmp	r0, #0
 80022a0:	d0e2      	beq.n	8002268 <SPI_EndRxTransaction+0x44>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022a2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80022a4:	f043 0320 	orr.w	r3, r3, #32
 80022a8:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 80022aa:	2003      	movs	r0, #3
 80022ac:	e7e1      	b.n	8002272 <SPI_EndRxTransaction+0x4e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022ae:	68a3      	ldr	r3, [r4, #8]
 80022b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b4:	bf18      	it	ne
 80022b6:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 80022ba:	d001      	beq.n	80022c0 <SPI_EndRxTransaction+0x9c>
  return HAL_OK;
 80022bc:	2000      	movs	r0, #0
 80022be:	e7d8      	b.n	8002272 <SPI_EndRxTransaction+0x4e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022c0:	9600      	str	r6, [sp, #0]
 80022c2:	462b      	mov	r3, r5
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff fee2 	bl	8002094 <SPI_WaitFifoStateUntilTimeout>
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d0ce      	beq.n	8002272 <SPI_EndRxTransaction+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022d4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80022d6:	f043 0320 	orr.w	r3, r3, #32
 80022da:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 80022dc:	2003      	movs	r0, #3
 80022de:	e7c8      	b.n	8002272 <SPI_EndRxTransaction+0x4e>
 80022e0:	20000018 	.word	0x20000018
 80022e4:	165e9f81 	.word	0x165e9f81

080022e8 <HAL_SPI_MspInit>:
}
 80022e8:	4770      	bx	lr

080022ea <HAL_SPI_Init>:
  if (hspi == NULL)
 80022ea:	2800      	cmp	r0, #0
 80022ec:	f000 808e 	beq.w	800240c <HAL_SPI_Init+0x122>
{
 80022f0:	b510      	push	{r4, lr}
 80022f2:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022f4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80022f6:	b933      	cbnz	r3, 8002306 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022f8:	6843      	ldr	r3, [r0, #4]
 80022fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022fe:	d005      	beq.n	800230c <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002300:	2300      	movs	r3, #0
 8002302:	61c3      	str	r3, [r0, #28]
 8002304:	e002      	b.n	800230c <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800230a:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800230c:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8002310:	2b00      	cmp	r3, #0
 8002312:	d05a      	beq.n	80023ca <HAL_SPI_Init+0xe0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002314:	2302      	movs	r3, #2
 8002316:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002322:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002324:	68e3      	ldr	r3, [r4, #12]
 8002326:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800232a:	d954      	bls.n	80023d6 <HAL_SPI_Init+0xec>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800232c:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800232e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002332:	bf18      	it	ne
 8002334:	f5b3 6fe0 	cmpne.w	r3, #1792	@ 0x700
 8002338:	d001      	beq.n	800233e <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800233e:	6863      	ldr	r3, [r4, #4]
 8002340:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002344:	68a1      	ldr	r1, [r4, #8]
 8002346:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 800234a:	430b      	orrs	r3, r1
 800234c:	6921      	ldr	r1, [r4, #16]
 800234e:	f001 0102 	and.w	r1, r1, #2
 8002352:	430b      	orrs	r3, r1
 8002354:	6961      	ldr	r1, [r4, #20]
 8002356:	f001 0101 	and.w	r1, r1, #1
 800235a:	430b      	orrs	r3, r1
 800235c:	69a1      	ldr	r1, [r4, #24]
 800235e:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8002362:	430b      	orrs	r3, r1
 8002364:	69e1      	ldr	r1, [r4, #28]
 8002366:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 800236a:	430b      	orrs	r3, r1
 800236c:	6a21      	ldr	r1, [r4, #32]
 800236e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8002372:	430b      	orrs	r3, r1
 8002374:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002376:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 800237a:	6820      	ldr	r0, [r4, #0]
 800237c:	430b      	orrs	r3, r1
 800237e:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002380:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002386:	d029      	beq.n	80023dc <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002388:	8b63      	ldrh	r3, [r4, #26]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002390:	f001 0110 	and.w	r1, r1, #16
 8002394:	430b      	orrs	r3, r1
 8002396:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002398:	f001 0108 	and.w	r1, r1, #8
 800239c:	430b      	orrs	r3, r1
 800239e:	68e1      	ldr	r1, [r4, #12]
 80023a0:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6821      	ldr	r1, [r4, #0]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023b2:	d027      	beq.n	8002404 <HAL_SPI_Init+0x11a>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023b4:	6822      	ldr	r2, [r4, #0]
 80023b6:	69d3      	ldr	r3, [r2, #28]
 80023b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023bc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023be:	2000      	movs	r0, #0
 80023c0:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023c2:	2301      	movs	r3, #1
 80023c4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 80023c8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80023ca:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7ff ff8a 	bl	80022e8 <HAL_SPI_MspInit>
 80023d4:	e79e      	b.n	8002314 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023da:	e7a8      	b.n	800232e <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80023dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023de:	b92b      	cbnz	r3, 80023ec <HAL_SPI_Init+0x102>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023e0:	68e3      	ldr	r3, [r4, #12]
 80023e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023e6:	d90a      	bls.n	80023fe <HAL_SPI_Init+0x114>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80023e8:	2302      	movs	r3, #2
 80023ea:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80023ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d1ca      	bne.n	8002388 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80023f2:	6821      	ldr	r1, [r4, #0]
 80023f4:	680b      	ldr	r3, [r1, #0]
 80023f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023fa:	600b      	str	r3, [r1, #0]
 80023fc:	e7c4      	b.n	8002388 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80023fe:	2301      	movs	r3, #1
 8002400:	6323      	str	r3, [r4, #48]	@ 0x30
 8002402:	e7f3      	b.n	80023ec <HAL_SPI_Init+0x102>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8002408:	611a      	str	r2, [r3, #16]
 800240a:	e7d3      	b.n	80023b4 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 800240c:	2001      	movs	r0, #1
}
 800240e:	4770      	bx	lr

08002410 <HAL_SPI_Transmit>:
{
 8002410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002414:	b083      	sub	sp, #12
 8002416:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8002418:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800241c:	2b01      	cmp	r3, #1
 800241e:	f000 810e 	beq.w	800263e <HAL_SPI_Transmit+0x22e>
 8002422:	4604      	mov	r4, r0
 8002424:	4689      	mov	r9, r1
 8002426:	4690      	mov	r8, r2
 8002428:	2301      	movs	r3, #1
 800242a:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800242e:	f7fe fe99 	bl	8001164 <HAL_GetTick>
 8002432:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002434:	f894 605d 	ldrb.w	r6, [r4, #93]	@ 0x5d
 8002438:	b2f6      	uxtb	r6, r6
 800243a:	2e01      	cmp	r6, #1
 800243c:	f040 80ec 	bne.w	8002618 <HAL_SPI_Transmit+0x208>
  if ((pData == NULL) || (Size == 0U))
 8002440:	f1b8 0f00 	cmp.w	r8, #0
 8002444:	bf18      	it	ne
 8002446:	f1b9 0f00 	cmpne.w	r9, #0
 800244a:	f000 80e6 	beq.w	800261a <HAL_SPI_Transmit+0x20a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800244e:	2303      	movs	r3, #3
 8002450:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002454:	2300      	movs	r3, #0
 8002456:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002458:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800245c:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002460:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002464:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002466:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800246a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800246e:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002470:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002472:	68a3      	ldr	r3, [r4, #8]
 8002474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002478:	d022      	beq.n	80024c0 <HAL_SPI_Transmit+0xb0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800247a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800247c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002480:	d029      	beq.n	80024d6 <HAL_SPI_Transmit+0xc6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800248a:	d103      	bne.n	8002494 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002492:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002494:	68e3      	ldr	r3, [r4, #12]
 8002496:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800249a:	d94d      	bls.n	8002538 <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800249c:	6863      	ldr	r3, [r4, #4]
 800249e:	b113      	cbz	r3, 80024a6 <HAL_SPI_Transmit+0x96>
 80024a0:	f1b8 0f01 	cmp.w	r8, #1
 80024a4:	d12e      	bne.n	8002504 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	8812      	ldrh	r2, [r2, #0]
 80024ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80024b0:	3302      	adds	r3, #2
 80024b2:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80024b4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80024be:	e021      	b.n	8002504 <HAL_SPI_Transmit+0xf4>
    __HAL_SPI_DISABLE(hspi);
 80024c0:	6822      	ldr	r2, [r4, #0]
 80024c2:	6813      	ldr	r3, [r2, #0]
 80024c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024c8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	6813      	ldr	r3, [r2, #0]
 80024ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e7d1      	b.n	800247a <HAL_SPI_Transmit+0x6a>
    SPI_RESET_CRC(hspi);
 80024d6:	6822      	ldr	r2, [r4, #0]
 80024d8:	6813      	ldr	r3, [r2, #0]
 80024da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	6822      	ldr	r2, [r4, #0]
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e7ca      	b.n	8002482 <HAL_SPI_Transmit+0x72>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024ec:	f7fe fe3a 	bl	8001164 <HAL_GetTick>
 80024f0:	1bc0      	subs	r0, r0, r7
 80024f2:	42a8      	cmp	r0, r5
 80024f4:	d303      	bcc.n	80024fe <HAL_SPI_Transmit+0xee>
 80024f6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80024fa:	f040 8098 	bne.w	800262e <HAL_SPI_Transmit+0x21e>
 80024fe:	2d00      	cmp	r5, #0
 8002500:	f000 8097 	beq.w	8002632 <HAL_SPI_Transmit+0x222>
    while (hspi->TxXferCount > 0U)
 8002504:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d066      	beq.n	80025da <HAL_SPI_Transmit+0x1ca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	f012 0f02 	tst.w	r2, #2
 8002514:	d0ea      	beq.n	80024ec <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002516:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002518:	8812      	ldrh	r2, [r2, #0]
 800251a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800251c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800251e:	3302      	adds	r3, #2
 8002520:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002522:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8002526:	fa1f fc8c 	uxth.w	ip, ip
 800252a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800252e:	fa1f fc8c 	uxth.w	ip, ip
 8002532:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8002536:	e7e5      	b.n	8002504 <HAL_SPI_Transmit+0xf4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002538:	6863      	ldr	r3, [r4, #4]
 800253a:	b113      	cbz	r3, 8002542 <HAL_SPI_Transmit+0x132>
 800253c:	f1b8 0f01 	cmp.w	r8, #1
 8002540:	d133      	bne.n	80025aa <HAL_SPI_Transmit+0x19a>
      if (hspi->TxXferCount > 1U)
 8002542:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d90c      	bls.n	8002564 <HAL_SPI_Transmit+0x154>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800254a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	8812      	ldrh	r2, [r2, #0]
 8002550:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002552:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002554:	3302      	adds	r3, #2
 8002556:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002558:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b02      	subs	r3, #2
 800255e:	b29b      	uxth	r3, r3
 8002560:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002562:	e022      	b.n	80025aa <HAL_SPI_Transmit+0x19a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002564:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800256c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800256e:	3301      	adds	r3, #1
 8002570:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002572:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29b      	uxth	r3, r3
 800257a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800257c:	e015      	b.n	80025aa <HAL_SPI_Transmit+0x19a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800257e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002584:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002586:	3301      	adds	r3, #1
 8002588:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800258a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29b      	uxth	r3, r3
 8002592:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002594:	e009      	b.n	80025aa <HAL_SPI_Transmit+0x19a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002596:	f7fe fde5 	bl	8001164 <HAL_GetTick>
 800259a:	1bc0      	subs	r0, r0, r7
 800259c:	42a8      	cmp	r0, r5
 800259e:	d302      	bcc.n	80025a6 <HAL_SPI_Transmit+0x196>
 80025a0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80025a4:	d147      	bne.n	8002636 <HAL_SPI_Transmit+0x226>
 80025a6:	2d00      	cmp	r5, #0
 80025a8:	d047      	beq.n	800263a <HAL_SPI_Transmit+0x22a>
    while (hspi->TxXferCount > 0U)
 80025aa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	b1a3      	cbz	r3, 80025da <HAL_SPI_Transmit+0x1ca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025b0:	6822      	ldr	r2, [r4, #0]
 80025b2:	6893      	ldr	r3, [r2, #8]
 80025b4:	f013 0f02 	tst.w	r3, #2
 80025b8:	d0ed      	beq.n	8002596 <HAL_SPI_Transmit+0x186>
        if (hspi->TxXferCount > 1U)
 80025ba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d9dd      	bls.n	800257e <HAL_SPI_Transmit+0x16e>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025ca:	3302      	adds	r3, #2
 80025cc:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80025ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b02      	subs	r3, #2
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80025d8:	e7e7      	b.n	80025aa <HAL_SPI_Transmit+0x19a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80025dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e0:	d014      	beq.n	800260c <HAL_SPI_Transmit+0x1fc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025e2:	463a      	mov	r2, r7
 80025e4:	4629      	mov	r1, r5
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7ff fdcc 	bl	8002184 <SPI_EndRxTxTransaction>
 80025ec:	b108      	cbz	r0, 80025f2 <HAL_SPI_Transmit+0x1e2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ee:	2320      	movs	r3, #32
 80025f0:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025f2:	68a3      	ldr	r3, [r4, #8]
 80025f4:	b933      	cbnz	r3, 8002604 <HAL_SPI_Transmit+0x1f4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	9201      	str	r2, [sp, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002604:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002606:	b943      	cbnz	r3, 800261a <HAL_SPI_Transmit+0x20a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002608:	2600      	movs	r6, #0
 800260a:	e006      	b.n	800261a <HAL_SPI_Transmit+0x20a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	6813      	ldr	r3, [r2, #0]
 8002610:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e7e4      	b.n	80025e2 <HAL_SPI_Transmit+0x1d2>
    errorcode = HAL_BUSY;
 8002618:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800261a:	2301      	movs	r3, #1
 800261c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8002620:	2300      	movs	r3, #0
 8002622:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8002626:	4630      	mov	r0, r6
 8002628:	b003      	add	sp, #12
 800262a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 800262e:	2603      	movs	r6, #3
 8002630:	e7f3      	b.n	800261a <HAL_SPI_Transmit+0x20a>
 8002632:	2603      	movs	r6, #3
 8002634:	e7f1      	b.n	800261a <HAL_SPI_Transmit+0x20a>
          errorcode = HAL_TIMEOUT;
 8002636:	2603      	movs	r6, #3
 8002638:	e7ef      	b.n	800261a <HAL_SPI_Transmit+0x20a>
 800263a:	2603      	movs	r6, #3
 800263c:	e7ed      	b.n	800261a <HAL_SPI_Transmit+0x20a>
  __HAL_LOCK(hspi);
 800263e:	2602      	movs	r6, #2
 8002640:	e7f1      	b.n	8002626 <HAL_SPI_Transmit+0x216>

08002642 <HAL_SPI_TransmitReceive>:
{
 8002642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002646:	b085      	sub	sp, #20
 8002648:	461f      	mov	r7, r3
 800264a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  __IO uint32_t tmpreg = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8002650:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 8002654:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8002658:	2b01      	cmp	r3, #1
 800265a:	f000 81f7 	beq.w	8002a4c <HAL_SPI_TransmitReceive+0x40a>
 800265e:	4604      	mov	r4, r0
 8002660:	468a      	mov	sl, r1
 8002662:	4693      	mov	fp, r2
 8002664:	2301      	movs	r3, #1
 8002666:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800266a:	f7fe fd7b 	bl	8001164 <HAL_GetTick>
 800266e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002670:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8002674:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002676:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8002678:	6822      	ldr	r2, [r4, #0]
 800267a:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800267e:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002682:	2b01      	cmp	r3, #1
 8002684:	d00a      	beq.n	800269c <HAL_SPI_TransmitReceive+0x5a>
 8002686:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 800268a:	f040 81c6 	bne.w	8002a1a <HAL_SPI_TransmitReceive+0x3d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800268e:	68a1      	ldr	r1, [r4, #8]
 8002690:	2900      	cmp	r1, #0
 8002692:	f040 81cd 	bne.w	8002a30 <HAL_SPI_TransmitReceive+0x3ee>
 8002696:	2b04      	cmp	r3, #4
 8002698:	f040 81cc 	bne.w	8002a34 <HAL_SPI_TransmitReceive+0x3f2>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800269c:	f1bb 0f00 	cmp.w	fp, #0
 80026a0:	bf18      	it	ne
 80026a2:	f1ba 0f00 	cmpne.w	sl, #0
 80026a6:	f000 81c7 	beq.w	8002a38 <HAL_SPI_TransmitReceive+0x3f6>
 80026aa:	2f00      	cmp	r7, #0
 80026ac:	f000 81c6 	beq.w	8002a3c <HAL_SPI_TransmitReceive+0x3fa>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026b0:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d002      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0x7e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026ba:	2305      	movs	r3, #5
 80026bc:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026c4:	f8c4 b040 	str.w	fp, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80026c8:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80026cc:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026d0:	f8c4 a038 	str.w	sl, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80026d4:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80026d6:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 80026d8:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80026da:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80026de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026e2:	d029      	beq.n	8002738 <HAL_SPI_TransmitReceive+0xf6>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80026e4:	68e3      	ldr	r3, [r4, #12]
 80026e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026ea:	d801      	bhi.n	80026f0 <HAL_SPI_TransmitReceive+0xae>
 80026ec:	2f01      	cmp	r7, #1
 80026ee:	d92d      	bls.n	800274c <HAL_SPI_TransmitReceive+0x10a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026f0:	6822      	ldr	r2, [r4, #0]
 80026f2:	6853      	ldr	r3, [r2, #4]
 80026f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026f8:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002702:	d103      	bne.n	800270c <HAL_SPI_TransmitReceive+0xca>
    __HAL_SPI_ENABLE(hspi);
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800270a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800270c:	68e3      	ldr	r3, [r4, #12]
 800270e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002712:	d97d      	bls.n	8002810 <HAL_SPI_TransmitReceive+0x1ce>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002714:	6863      	ldr	r3, [r4, #4]
 8002716:	b10b      	cbz	r3, 800271c <HAL_SPI_TransmitReceive+0xda>
 8002718:	2f01      	cmp	r7, #1
 800271a:	d10b      	bne.n	8002734 <HAL_SPI_TransmitReceive+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800271c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	8812      	ldrh	r2, [r2, #0]
 8002722:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002724:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002726:	3302      	adds	r3, #2
 8002728:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800272a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29b      	uxth	r3, r3
 8002732:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002734:	2701      	movs	r7, #1
 8002736:	e042      	b.n	80027be <HAL_SPI_TransmitReceive+0x17c>
    SPI_RESET_CRC(hspi);
 8002738:	6813      	ldr	r3, [r2, #0]
 800273a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	6822      	ldr	r2, [r4, #0]
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e7cb      	b.n	80026e4 <HAL_SPI_TransmitReceive+0xa2>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800274c:	6822      	ldr	r2, [r4, #0]
 800274e:	6853      	ldr	r3, [r2, #4]
 8002750:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002754:	6053      	str	r3, [r2, #4]
 8002756:	e7d0      	b.n	80026fa <HAL_SPI_TransmitReceive+0xb8>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8002758:	f018 0f04 	tst.w	r8, #4
 800275c:	d107      	bne.n	800276e <HAL_SPI_TransmitReceive+0x12c>
 800275e:	f019 0f08 	tst.w	r9, #8
 8002762:	d004      	beq.n	800276e <HAL_SPI_TransmitReceive+0x12c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8002764:	6822      	ldr	r2, [r4, #0]
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800276c:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	6813      	ldr	r3, [r2, #0]
 8002772:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002776:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8002778:	2700      	movs	r7, #0
 800277a:	e000      	b.n	800277e <HAL_SPI_TransmitReceive+0x13c>
 800277c:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	f012 0f01 	tst.w	r2, #1
 8002786:	d011      	beq.n	80027ac <HAL_SPI_TransmitReceive+0x16a>
 8002788:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800278c:	b292      	uxth	r2, r2
 800278e:	b16a      	cbz	r2, 80027ac <HAL_SPI_TransmitReceive+0x16a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002794:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002796:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002798:	3302      	adds	r3, #2
 800279a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800279c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 80027aa:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027ac:	f7fe fcda 	bl	8001164 <HAL_GetTick>
 80027b0:	1b80      	subs	r0, r0, r6
 80027b2:	42a8      	cmp	r0, r5
 80027b4:	d303      	bcc.n	80027be <HAL_SPI_TransmitReceive+0x17c>
 80027b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80027ba:	f040 8141 	bne.w	8002a40 <HAL_SPI_TransmitReceive+0x3fe>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027be:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b92b      	cbnz	r3, 80027d0 <HAL_SPI_TransmitReceive+0x18e>
 80027c4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80d1 	beq.w	8002972 <HAL_SPI_TransmitReceive+0x330>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	f012 0f02 	tst.w	r2, #2
 80027d8:	d0d1      	beq.n	800277e <HAL_SPI_TransmitReceive+0x13c>
 80027da:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80027dc:	b292      	uxth	r2, r2
 80027de:	2a00      	cmp	r2, #0
 80027e0:	d0cd      	beq.n	800277e <HAL_SPI_TransmitReceive+0x13c>
 80027e2:	2f00      	cmp	r7, #0
 80027e4:	d0cb      	beq.n	800277e <HAL_SPI_TransmitReceive+0x13c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027e6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80027e8:	8812      	ldrh	r2, [r2, #0]
 80027ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80027ee:	3302      	adds	r3, #2
 80027f0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80027f2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80027fc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1bb      	bne.n	800277c <HAL_SPI_TransmitReceive+0x13a>
 8002804:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800280a:	d0a5      	beq.n	8002758 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 0U;
 800280c:	2700      	movs	r7, #0
 800280e:	e7b6      	b.n	800277e <HAL_SPI_TransmitReceive+0x13c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002810:	6863      	ldr	r3, [r4, #4]
 8002812:	b10b      	cbz	r3, 8002818 <HAL_SPI_TransmitReceive+0x1d6>
 8002814:	2f01      	cmp	r7, #1
 8002816:	d10f      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x1f6>
      if (hspi->TxXferCount > 1U)
 8002818:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d90d      	bls.n	800283c <HAL_SPI_TransmitReceive+0x1fa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002820:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	8812      	ldrh	r2, [r2, #0]
 8002826:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002828:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800282a:	3302      	adds	r3, #2
 800282c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800282e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b02      	subs	r3, #2
 8002834:	b29b      	uxth	r3, r3
 8002836:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002838:	2701      	movs	r7, #1
 800283a:	e065      	b.n	8002908 <HAL_SPI_TransmitReceive+0x2c6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800283c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002844:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002846:	3301      	adds	r3, #1
 8002848:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800284a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29b      	uxth	r3, r3
 8002852:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002854:	e7f0      	b.n	8002838 <HAL_SPI_TransmitReceive+0x1f6>
        if (hspi->TxXferCount > 1U)
 8002856:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002858:	b292      	uxth	r2, r2
 800285a:	2a01      	cmp	r2, #1
 800285c:	d913      	bls.n	8002886 <HAL_SPI_TransmitReceive+0x244>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800285e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002860:	8812      	ldrh	r2, [r2, #0]
 8002862:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002864:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002866:	3302      	adds	r3, #2
 8002868:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800286a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b02      	subs	r3, #2
 8002870:	b29b      	uxth	r3, r3
 8002872:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002874:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002876:	b29b      	uxth	r3, r3
 8002878:	bb1b      	cbnz	r3, 80028c2 <HAL_SPI_TransmitReceive+0x280>
 800287a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002880:	d00d      	beq.n	800289e <HAL_SPI_TransmitReceive+0x25c>
        txallowed = 0U;
 8002882:	2700      	movs	r7, #0
 8002884:	e052      	b.n	800292c <HAL_SPI_TransmitReceive+0x2ea>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002886:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800288c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800288e:	3301      	adds	r3, #1
 8002890:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8002892:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29b      	uxth	r3, r3
 800289a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800289c:	e7ea      	b.n	8002874 <HAL_SPI_TransmitReceive+0x232>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800289e:	f018 0f04 	tst.w	r8, #4
 80028a2:	d107      	bne.n	80028b4 <HAL_SPI_TransmitReceive+0x272>
 80028a4:	f019 0f08 	tst.w	r9, #8
 80028a8:	d004      	beq.n	80028b4 <HAL_SPI_TransmitReceive+0x272>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80028aa:	6822      	ldr	r2, [r4, #0]
 80028ac:	6813      	ldr	r3, [r2, #0]
 80028ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028b2:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80028b4:	6822      	ldr	r2, [r4, #0]
 80028b6:	6813      	ldr	r3, [r2, #0]
 80028b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028bc:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 80028be:	2700      	movs	r7, #0
 80028c0:	e034      	b.n	800292c <HAL_SPI_TransmitReceive+0x2ea>
 80028c2:	2700      	movs	r7, #0
 80028c4:	e032      	b.n	800292c <HAL_SPI_TransmitReceive+0x2ea>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028c6:	6822      	ldr	r2, [r4, #0]
 80028c8:	6853      	ldr	r3, [r2, #4]
 80028ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028ce:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80028d0:	2701      	movs	r7, #1
 80028d2:	e00d      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x2ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028d4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80028d6:	7b1b      	ldrb	r3, [r3, #12]
 80028d8:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80028da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80028dc:	3301      	adds	r3, #1
 80028de:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 80028e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 80028ee:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028f0:	f7fe fc38 	bl	8001164 <HAL_GetTick>
 80028f4:	1b80      	subs	r0, r0, r6
 80028f6:	42a8      	cmp	r0, r5
 80028f8:	d303      	bcc.n	8002902 <HAL_SPI_TransmitReceive+0x2c0>
 80028fa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80028fe:	f040 80a1 	bne.w	8002a44 <HAL_SPI_TransmitReceive+0x402>
 8002902:	2d00      	cmp	r5, #0
 8002904:	f000 80a0 	beq.w	8002a48 <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002908:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800290a:	b29b      	uxth	r3, r3
 800290c:	b923      	cbnz	r3, 8002918 <HAL_SPI_TransmitReceive+0x2d6>
 800290e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d02c      	beq.n	8002972 <HAL_SPI_TransmitReceive+0x330>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	f012 0f02 	tst.w	r2, #2
 8002920:	d004      	beq.n	800292c <HAL_SPI_TransmitReceive+0x2ea>
 8002922:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002924:	b292      	uxth	r2, r2
 8002926:	b10a      	cbz	r2, 800292c <HAL_SPI_TransmitReceive+0x2ea>
 8002928:	2f00      	cmp	r7, #0
 800292a:	d194      	bne.n	8002856 <HAL_SPI_TransmitReceive+0x214>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	f012 0f01 	tst.w	r2, #1
 8002934:	d0dc      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0x2ae>
 8002936:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800293a:	b292      	uxth	r2, r2
 800293c:	2a00      	cmp	r2, #0
 800293e:	d0d7      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0x2ae>
        if (hspi->RxXferCount > 1U)
 8002940:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8002944:	b292      	uxth	r2, r2
 8002946:	2a01      	cmp	r2, #1
 8002948:	d9c4      	bls.n	80028d4 <HAL_SPI_TransmitReceive+0x292>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800294e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002950:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002952:	3302      	adds	r3, #2
 8002954:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002956:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b02      	subs	r3, #2
 800295e:	b29b      	uxth	r3, r3
 8002960:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002964:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d9ab      	bls.n	80028c6 <HAL_SPI_TransmitReceive+0x284>
        txallowed = 1U;
 800296e:	2701      	movs	r7, #1
 8002970:	e7be      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x2ae>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002972:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002978:	d017      	beq.n	80029aa <HAL_SPI_TransmitReceive+0x368>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	f012 0f10 	tst.w	r2, #16
 8002982:	d048      	beq.n	8002a16 <HAL_SPI_TransmitReceive+0x3d4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002984:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002986:	f042 0202 	orr.w	r2, r2, #2
 800298a:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800298c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002990:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 8002992:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002994:	4632      	mov	r2, r6
 8002996:	4629      	mov	r1, r5
 8002998:	4620      	mov	r0, r4
 800299a:	f7ff fbf3 	bl	8002184 <SPI_EndRxTxTransaction>
 800299e:	2800      	cmp	r0, #0
 80029a0:	d03c      	beq.n	8002a1c <HAL_SPI_TransmitReceive+0x3da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a2:	2320      	movs	r3, #32
 80029a4:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80029a6:	2701      	movs	r7, #1
 80029a8:	e038      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x3da>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80029aa:	9600      	str	r6, [sp, #0]
 80029ac:	462b      	mov	r3, r5
 80029ae:	2201      	movs	r2, #1
 80029b0:	4611      	mov	r1, r2
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7ff fb0a 	bl	8001fcc <SPI_WaitFlagStateUntilTimeout>
 80029b8:	b9e0      	cbnz	r0, 80029f4 <HAL_SPI_TransmitReceive+0x3b2>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029ba:	68e3      	ldr	r3, [r4, #12]
 80029bc:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029c0:	d01e      	beq.n	8002a00 <HAL_SPI_TransmitReceive+0x3be>
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80029c2:	6827      	ldr	r7, [r4, #0]
      tmpreg8 = *ptmpreg8;
 80029c4:	7b3b      	ldrb	r3, [r7, #12]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 80029cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80029d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d1d1      	bne.n	800297a <HAL_SPI_TransmitReceive+0x338>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80029d6:	9600      	str	r6, [sp, #0]
 80029d8:	462b      	mov	r3, r5
 80029da:	2201      	movs	r2, #1
 80029dc:	4611      	mov	r1, r2
 80029de:	4620      	mov	r0, r4
 80029e0:	f7ff faf4 	bl	8001fcc <SPI_WaitFlagStateUntilTimeout>
 80029e4:	b988      	cbnz	r0, 8002a0a <HAL_SPI_TransmitReceive+0x3c8>
        tmpreg8 = *ptmpreg8;
 80029e6:	7b3b      	ldrb	r3, [r7, #12]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 80029ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80029f2:	e7c2      	b.n	800297a <HAL_SPI_TransmitReceive+0x338>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80029f4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	6623      	str	r3, [r4, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 80029fc:	2703      	movs	r7, #3
      goto error;
 80029fe:	e00d      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x3da>
      tmpreg = READ_REG(hspi->Instance->DR);
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8002a06:	9b03      	ldr	r3, [sp, #12]
 8002a08:	e7b7      	b.n	800297a <HAL_SPI_TransmitReceive+0x338>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002a0a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	6623      	str	r3, [r4, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 8002a12:	2703      	movs	r7, #3
          goto error;
 8002a14:	e002      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x3da>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a16:	2700      	movs	r7, #0
 8002a18:	e7bc      	b.n	8002994 <HAL_SPI_TransmitReceive+0x352>
    errorcode = HAL_BUSY;
 8002a1a:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8002a22:	2300      	movs	r3, #0
 8002a24:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8002a28:	4638      	mov	r0, r7
 8002a2a:	b005      	add	sp, #20
 8002a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 8002a30:	2702      	movs	r7, #2
 8002a32:	e7f3      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x3da>
 8002a34:	2702      	movs	r7, #2
 8002a36:	e7f1      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x3da>
    errorcode = HAL_ERROR;
 8002a38:	2701      	movs	r7, #1
 8002a3a:	e7ef      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x3da>
 8002a3c:	2701      	movs	r7, #1
 8002a3e:	e7ed      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x3da>
        errorcode = HAL_TIMEOUT;
 8002a40:	2703      	movs	r7, #3
 8002a42:	e7eb      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x3da>
        errorcode = HAL_TIMEOUT;
 8002a44:	2703      	movs	r7, #3
 8002a46:	e7e9      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x3da>
 8002a48:	2703      	movs	r7, #3
 8002a4a:	e7e7      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x3da>
  __HAL_LOCK(hspi);
 8002a4c:	2702      	movs	r7, #2
 8002a4e:	e7eb      	b.n	8002a28 <HAL_SPI_TransmitReceive+0x3e6>

08002a50 <HAL_SPI_Transmit_DMA>:
{
 8002a50:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8002a52:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	f000 809d 	beq.w	8002b96 <HAL_SPI_Transmit_DMA+0x146>
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a64:	f890 505d 	ldrb.w	r5, [r0, #93]	@ 0x5d
 8002a68:	b2ed      	uxtb	r5, r5
 8002a6a:	429d      	cmp	r5, r3
 8002a6c:	f040 808d 	bne.w	8002b8a <HAL_SPI_Transmit_DMA+0x13a>
  if ((pData == NULL) || (Size == 0U))
 8002a70:	2a00      	cmp	r2, #0
 8002a72:	bf18      	it	ne
 8002a74:	2900      	cmpne	r1, #0
 8002a76:	f000 8089 	beq.w	8002b8c <HAL_SPI_Transmit_DMA+0x13c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a84:	6381      	str	r1, [r0, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002a86:	8782      	strh	r2, [r0, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002a88:	87c2      	strh	r2, [r0, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a8a:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002a8c:	6503      	str	r3, [r0, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002a8e:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8002a90:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002a94:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a98:	6883      	ldr	r3, [r0, #8]
 8002a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a9e:	d03d      	beq.n	8002b1c <HAL_SPI_Transmit_DMA+0xcc>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002aa0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aa6:	d044      	beq.n	8002b32 <HAL_SPI_Transmit_DMA+0xe2>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002aa8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002aaa:	4a3c      	ldr	r2, [pc, #240]	@ (8002b9c <HAL_SPI_Transmit_DMA+0x14c>)
 8002aac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002aae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002ab0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba0 <HAL_SPI_Transmit_DMA+0x150>)
 8002ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002ab4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba4 <HAL_SPI_Transmit_DMA+0x154>)
 8002ab8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8002aba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002abc:	2200      	movs	r2, #0
 8002abe:	651a      	str	r2, [r3, #80]	@ 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002ac0:	6822      	ldr	r2, [r4, #0]
 8002ac2:	6853      	ldr	r3, [r2, #4]
 8002ac4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ac8:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002aca:	68e3      	ldr	r3, [r4, #12]
 8002acc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ad0:	d804      	bhi.n	8002adc <HAL_SPI_Transmit_DMA+0x8c>
 8002ad2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ada:	d035      	beq.n	8002b48 <HAL_SPI_Transmit_DMA+0xf8>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002adc:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8002ade:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	320c      	adds	r2, #12
 8002ae4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002ae6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002ae8:	f7fe fc9c 	bl	8001424 <HAL_DMA_Start_IT>
 8002aec:	4601      	mov	r1, r0
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d143      	bne.n	8002b7a <HAL_SPI_Transmit_DMA+0x12a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002afa:	d103      	bne.n	8002b04 <HAL_SPI_Transmit_DMA+0xb4>
    __HAL_SPI_ENABLE(hspi);
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b02:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002b04:	6822      	ldr	r2, [r4, #0]
 8002b06:	6853      	ldr	r3, [r2, #4]
 8002b08:	f043 0320 	orr.w	r3, r3, #32
 8002b0c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	6853      	ldr	r3, [r2, #4]
 8002b12:	f043 0302 	orr.w	r3, r3, #2
 8002b16:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b18:	460d      	mov	r5, r1
 8002b1a:	e037      	b.n	8002b8c <HAL_SPI_Transmit_DMA+0x13c>
    __HAL_SPI_DISABLE(hspi);
 8002b1c:	6802      	ldr	r2, [r0, #0]
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b24:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8002b26:	6802      	ldr	r2, [r0, #0]
 8002b28:	6813      	ldr	r3, [r2, #0]
 8002b2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	e7b6      	b.n	8002aa0 <HAL_SPI_Transmit_DMA+0x50>
    SPI_RESET_CRC(hspi);
 8002b32:	6822      	ldr	r2, [r4, #0]
 8002b34:	6813      	ldr	r3, [r2, #0]
 8002b36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	6822      	ldr	r2, [r4, #0]
 8002b3e:	6813      	ldr	r3, [r2, #0]
 8002b40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e7af      	b.n	8002aa8 <HAL_SPI_Transmit_DMA+0x58>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002b48:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002b4a:	f013 0f01 	tst.w	r3, #1
 8002b4e:	d109      	bne.n	8002b64 <HAL_SPI_Transmit_DMA+0x114>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002b50:	6822      	ldr	r2, [r4, #0]
 8002b52:	6853      	ldr	r3, [r2, #4]
 8002b54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b58:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002b5a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002b5c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002b60:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002b62:	e7bb      	b.n	8002adc <HAL_SPI_Transmit_DMA+0x8c>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002b64:	6822      	ldr	r2, [r4, #0]
 8002b66:	6853      	ldr	r3, [r2, #4]
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b6c:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002b6e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002b70:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002b74:	3301      	adds	r3, #1
 8002b76:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002b78:	e7b0      	b.n	8002adc <HAL_SPI_Transmit_DMA+0x8c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b7a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    goto error;
 8002b88:	e000      	b.n	8002b8c <HAL_SPI_Transmit_DMA+0x13c>
    errorcode = HAL_BUSY;
 8002b8a:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8002b92:	4628      	mov	r0, r5
 8002b94:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 8002b96:	2502      	movs	r5, #2
 8002b98:	e7fb      	b.n	8002b92 <HAL_SPI_Transmit_DMA+0x142>
 8002b9a:	bf00      	nop
 8002b9c:	08002dd9 	.word	0x08002dd9
 8002ba0:	08002e1f 	.word	0x08002e1f
 8002ba4:	08002dfd 	.word	0x08002dfd

08002ba8 <HAL_SPI_TransmitReceive_DMA>:
{
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002bac:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
 8002bb0:	2801      	cmp	r0, #1
 8002bb2:	f000 8103 	beq.w	8002dbc <HAL_SPI_TransmitReceive_DMA+0x214>
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  tmp_state           = hspi->State;
 8002bbc:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
 8002bc0:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8002bc2:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002bc4:	2801      	cmp	r0, #1
 8002bc6:	d00a      	beq.n	8002bde <HAL_SPI_TransmitReceive_DMA+0x36>
 8002bc8:	f5b5 7f82 	cmp.w	r5, #260	@ 0x104
 8002bcc:	f040 80e9 	bne.w	8002da2 <HAL_SPI_TransmitReceive_DMA+0x1fa>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bd0:	68a5      	ldr	r5, [r4, #8]
 8002bd2:	2d00      	cmp	r5, #0
 8002bd4:	f040 80ea 	bne.w	8002dac <HAL_SPI_TransmitReceive_DMA+0x204>
 8002bd8:	2804      	cmp	r0, #4
 8002bda:	f040 80e9 	bne.w	8002db0 <HAL_SPI_TransmitReceive_DMA+0x208>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bde:	2a00      	cmp	r2, #0
 8002be0:	bf18      	it	ne
 8002be2:	2900      	cmpne	r1, #0
 8002be4:	f000 80e6 	beq.w	8002db4 <HAL_SPI_TransmitReceive_DMA+0x20c>
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80e5 	beq.w	8002db8 <HAL_SPI_TransmitReceive_DMA+0x210>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bee:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
 8002bf2:	b2c0      	uxtb	r0, r0
 8002bf4:	2804      	cmp	r0, #4
 8002bf6:	d002      	beq.n	8002bfe <HAL_SPI_TransmitReceive_DMA+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bf8:	2005      	movs	r0, #5
 8002bfa:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bfe:	2000      	movs	r0, #0
 8002c00:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c02:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c04:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c06:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c08:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002c0a:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002c0e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8002c12:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002c14:	6520      	str	r0, [r4, #80]	@ 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002c18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c1c:	d031      	beq.n	8002c82 <HAL_SPI_TransmitReceive_DMA+0xda>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002c1e:	6822      	ldr	r2, [r4, #0]
 8002c20:	6853      	ldr	r3, [r2, #4]
 8002c22:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8002c26:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c28:	68e3      	ldr	r3, [r4, #12]
 8002c2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c2e:	d933      	bls.n	8002c98 <HAL_SPI_TransmitReceive_DMA+0xf0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c30:	6822      	ldr	r2, [r4, #0]
 8002c32:	6853      	ldr	r3, [r2, #4]
 8002c34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c38:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002c3a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d074      	beq.n	8002d2e <HAL_SPI_TransmitReceive_DMA+0x186>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002c44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c46:	4a5e      	ldr	r2, [pc, #376]	@ (8002dc0 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8002c48:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002c4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c4c:	4a5d      	ldr	r2, [pc, #372]	@ (8002dc4 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 8002c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002c50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c52:	4a5d      	ldr	r2, [pc, #372]	@ (8002dc8 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8002c54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8002c56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c58:	2200      	movs	r2, #0
 8002c5a:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002c5c:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 8002c5e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002c66:	310c      	adds	r1, #12
 8002c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c6a:	f7fe fbdb 	bl	8001424 <HAL_DMA_Start_IT>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d064      	beq.n	8002d3c <HAL_SPI_TransmitReceive_DMA+0x194>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c72:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002c74:	f043 0310 	orr.w	r3, r3, #16
 8002c78:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
    goto error;
 8002c80:	e090      	b.n	8002da4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    SPI_RESET_CRC(hspi);
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	6813      	ldr	r3, [r2, #0]
 8002c86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	6822      	ldr	r2, [r4, #0]
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e7c2      	b.n	8002c1e <HAL_SPI_TransmitReceive_DMA+0x76>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c98:	6822      	ldr	r2, [r4, #0]
 8002c9a:	6853      	ldr	r3, [r2, #4]
 8002c9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ca0:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ca2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002caa:	d01a      	beq.n	8002ce2 <HAL_SPI_TransmitReceive_DMA+0x13a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cb4:	d1c1      	bne.n	8002c3a <HAL_SPI_TransmitReceive_DMA+0x92>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	6853      	ldr	r3, [r2, #4]
 8002cba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cbe:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002cc0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002cc4:	f013 0f01 	tst.w	r3, #1
 8002cc8:	d124      	bne.n	8002d14 <HAL_SPI_TransmitReceive_DMA+0x16c>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	6853      	ldr	r3, [r2, #4]
 8002cce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cd2:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002cd4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002cd8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002cdc:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8002ce0:	e7ab      	b.n	8002c3a <HAL_SPI_TransmitReceive_DMA+0x92>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002ce2:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8002ce4:	f013 0f01 	tst.w	r3, #1
 8002ce8:	d109      	bne.n	8002cfe <HAL_SPI_TransmitReceive_DMA+0x156>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002cea:	6822      	ldr	r2, [r4, #0]
 8002cec:	6853      	ldr	r3, [r2, #4]
 8002cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cf2:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002cf4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002cf6:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002cfa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002cfc:	e7d6      	b.n	8002cac <HAL_SPI_TransmitReceive_DMA+0x104>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	6853      	ldr	r3, [r2, #4]
 8002d02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d06:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002d08:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002d0a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002d0e:	3301      	adds	r3, #1
 8002d10:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002d12:	e7cb      	b.n	8002cac <HAL_SPI_TransmitReceive_DMA+0x104>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	6853      	ldr	r3, [r2, #4]
 8002d18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d1c:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002d1e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002d22:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002d26:	3301      	adds	r3, #1
 8002d28:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8002d2c:	e785      	b.n	8002c3a <HAL_SPI_TransmitReceive_DMA+0x92>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002d2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002d30:	4a26      	ldr	r2, [pc, #152]	@ (8002dcc <HAL_SPI_TransmitReceive_DMA+0x224>)
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002d34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002d36:	4a26      	ldr	r2, [pc, #152]	@ (8002dd0 <HAL_SPI_TransmitReceive_DMA+0x228>)
 8002d38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d3a:	e789      	b.n	8002c50 <HAL_SPI_TransmitReceive_DMA+0xa8>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d3c:	6822      	ldr	r2, [r4, #0]
 8002d3e:	6853      	ldr	r3, [r2, #4]
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002d46:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6413      	str	r3, [r2, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002d4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d4e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002d50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d52:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002d54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d56:	6513      	str	r3, [r2, #80]	@ 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002d58:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8002d5a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	320c      	adds	r2, #12
 8002d60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002d62:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002d64:	f7fe fb5e 	bl	8001424 <HAL_DMA_Start_IT>
 8002d68:	b998      	cbnz	r0, 8002d92 <HAL_SPI_TransmitReceive_DMA+0x1ea>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002d72:	d103      	bne.n	8002d7c <HAL_SPI_TransmitReceive_DMA+0x1d4>
    __HAL_SPI_ENABLE(hspi);
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d7a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	6853      	ldr	r3, [r2, #4]
 8002d80:	f043 0320 	orr.w	r3, r3, #32
 8002d84:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d86:	6822      	ldr	r2, [r4, #0]
 8002d88:	6853      	ldr	r3, [r2, #4]
 8002d8a:	f043 0302 	orr.w	r3, r3, #2
 8002d8e:	6053      	str	r3, [r2, #4]
 8002d90:	e008      	b.n	8002da4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d92:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002d94:	f043 0310 	orr.w	r3, r3, #16
 8002d98:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
    goto error;
 8002da0:	e000      	b.n	8002da4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    errorcode = HAL_BUSY;
 8002da2:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8002da4:	2300      	movs	r3, #0
 8002da6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8002daa:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 8002dac:	2002      	movs	r0, #2
 8002dae:	e7f9      	b.n	8002da4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
 8002db0:	2002      	movs	r0, #2
 8002db2:	e7f7      	b.n	8002da4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    errorcode = HAL_ERROR;
 8002db4:	2001      	movs	r0, #1
 8002db6:	e7f5      	b.n	8002da4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
 8002db8:	2001      	movs	r0, #1
 8002dba:	e7f3      	b.n	8002da4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  __HAL_LOCK(hspi);
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	e7f4      	b.n	8002daa <HAL_SPI_TransmitReceive_DMA+0x202>
 8002dc0:	08002df1 	.word	0x08002df1
 8002dc4:	08002f93 	.word	0x08002f93
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002de5 	.word	0x08002de5
 8002dd0:	08002e8f 	.word	0x08002e8f

08002dd4 <HAL_SPI_RxCpltCallback>:
}
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_SPI_TxHalfCpltCallback>:
}
 8002dd6:	4770      	bx	lr

08002dd8 <SPI_DMAHalfTransmitCplt>:
{
 8002dd8:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002dda:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8002ddc:	f7ff fffb 	bl	8002dd6 <HAL_SPI_TxHalfCpltCallback>
}
 8002de0:	bd08      	pop	{r3, pc}

08002de2 <HAL_SPI_RxHalfCpltCallback>:
}
 8002de2:	4770      	bx	lr

08002de4 <SPI_DMAHalfReceiveCplt>:
{
 8002de4:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002de6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8002de8:	f7ff fffb 	bl	8002de2 <HAL_SPI_RxHalfCpltCallback>
}
 8002dec:	bd08      	pop	{r3, pc}

08002dee <HAL_SPI_TxRxHalfCpltCallback>:
}
 8002dee:	4770      	bx	lr

08002df0 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8002df0:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002df2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8002df4:	f7ff fffb 	bl	8002dee <HAL_SPI_TxRxHalfCpltCallback>
}
 8002df8:	bd08      	pop	{r3, pc}

08002dfa <HAL_SPI_ErrorCallback>:
}
 8002dfa:	4770      	bx	lr

08002dfc <SPI_DMAError>:
{
 8002dfc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dfe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e00:	6802      	ldr	r2, [r0, #0]
 8002e02:	6853      	ldr	r3, [r2, #4]
 8002e04:	f023 0303 	bic.w	r3, r3, #3
 8002e08:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e0a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002e0c:	f043 0310 	orr.w	r3, r3, #16
 8002e10:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8002e18:	f7ff ffef 	bl	8002dfa <HAL_SPI_ErrorCallback>
}
 8002e1c:	bd08      	pop	{r3, pc}

08002e1e <SPI_DMATransmitCplt>:
{
 8002e1e:	b530      	push	{r4, r5, lr}
 8002e20:	b083      	sub	sp, #12
 8002e22:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e24:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  tickstart = HAL_GetTick();
 8002e26:	f7fe f99d 	bl	8001164 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002e2a:	682b      	ldr	r3, [r5, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002e32:	d123      	bne.n	8002e7c <SPI_DMATransmitCplt+0x5e>
 8002e34:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e36:	6821      	ldr	r1, [r4, #0]
 8002e38:	684b      	ldr	r3, [r1, #4]
 8002e3a:	f023 0320 	bic.w	r3, r3, #32
 8002e3e:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e40:	6821      	ldr	r1, [r4, #0]
 8002e42:	684b      	ldr	r3, [r1, #4]
 8002e44:	f023 0302 	bic.w	r3, r3, #2
 8002e48:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e4a:	2164      	movs	r1, #100	@ 0x64
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7ff f999 	bl	8002184 <SPI_EndRxTxTransaction>
 8002e52:	b118      	cbz	r0, 8002e5c <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e54:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002e56:	f043 0320 	orr.w	r3, r3, #32
 8002e5a:	6623      	str	r3, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e5c:	68a3      	ldr	r3, [r4, #8]
 8002e5e:	b933      	cbnz	r3, 8002e6e <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	9201      	str	r2, [sp, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e78:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002e7a:	b923      	cbnz	r3, 8002e86 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f7fd ffa1 	bl	8000dc4 <HAL_SPI_TxCpltCallback>
}
 8002e82:	b003      	add	sp, #12
 8002e84:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7ff ffb7 	bl	8002dfa <HAL_SPI_ErrorCallback>
      return;
 8002e8c:	e7f9      	b.n	8002e82 <SPI_DMATransmitCplt+0x64>

08002e8e <SPI_DMAReceiveCplt>:
{
 8002e8e:	b570      	push	{r4, r5, r6, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e94:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __IO uint32_t tmpreg = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8002e9a:	f88d 300b 	strb.w	r3, [sp, #11]
  tickstart = HAL_GetTick();
 8002e9e:	f7fe f961 	bl	8001164 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002ea2:	682b      	ldr	r3, [r5, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002eaa:	d131      	bne.n	8002f10 <SPI_DMAReceiveCplt+0x82>
 8002eac:	4606      	mov	r6, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002eae:	6822      	ldr	r2, [r4, #0]
 8002eb0:	6853      	ldr	r3, [r2, #4]
 8002eb2:	f023 0320 	bic.w	r3, r3, #32
 8002eb6:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eb8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ebe:	d02c      	beq.n	8002f1a <SPI_DMAReceiveCplt+0x8c>
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002ec0:	68a3      	ldr	r3, [r4, #8]
 8002ec2:	b91b      	cbnz	r3, 8002ecc <SPI_DMAReceiveCplt+0x3e>
 8002ec4:	6863      	ldr	r3, [r4, #4]
 8002ec6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eca:	d058      	beq.n	8002f7e <SPI_DMAReceiveCplt+0xf0>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ecc:	6822      	ldr	r2, [r4, #0]
 8002ece:	6853      	ldr	r3, [r2, #4]
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ed6:	4632      	mov	r2, r6
 8002ed8:	2164      	movs	r1, #100	@ 0x64
 8002eda:	4620      	mov	r0, r4
 8002edc:	f7ff f9a2 	bl	8002224 <SPI_EndRxTransaction>
 8002ee0:	b108      	cbz	r0, 8002ee6 <SPI_DMAReceiveCplt+0x58>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->RxXferCount = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	f012 0f10 	tst.w	r2, #16
 8002efa:	d006      	beq.n	8002f0a <SPI_DMAReceiveCplt+0x7c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002efc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002efe:	f042 0202 	orr.w	r2, r2, #2
 8002f02:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002f04:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002f08:	609a      	str	r2, [r3, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f0a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d13c      	bne.n	8002f8a <SPI_DMAReceiveCplt+0xfc>
  HAL_SPI_RxCpltCallback(hspi);
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7ff ff5f 	bl	8002dd4 <HAL_SPI_RxCpltCallback>
}
 8002f16:	b004      	add	sp, #16
 8002f18:	bd70      	pop	{r4, r5, r6, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f1a:	9000      	str	r0, [sp, #0]
 8002f1c:	2364      	movs	r3, #100	@ 0x64
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4611      	mov	r1, r2
 8002f22:	4620      	mov	r0, r4
 8002f24:	f7ff f852 	bl	8001fcc <SPI_WaitFlagStateUntilTimeout>
 8002f28:	b118      	cbz	r0, 8002f32 <SPI_DMAReceiveCplt+0xa4>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002f2a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	6623      	str	r3, [r4, #96]	@ 0x60
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f32:	68e3      	ldr	r3, [r4, #12]
 8002f34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f38:	d904      	bls.n	8002f44 <SPI_DMAReceiveCplt+0xb6>
        tmpreg = READ_REG(hspi->Instance->DR);
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 8002f40:	9b03      	ldr	r3, [sp, #12]
 8002f42:	e7bd      	b.n	8002ec0 <SPI_DMAReceiveCplt+0x32>
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f44:	6825      	ldr	r5, [r4, #0]
        tmpreg8 = *ptmpreg8;
 8002f46:	7b2b      	ldrb	r3, [r5, #12]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8002f4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
        if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002f52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d1b3      	bne.n	8002ec0 <SPI_DMAReceiveCplt+0x32>
          if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f58:	9600      	str	r6, [sp, #0]
 8002f5a:	2364      	movs	r3, #100	@ 0x64
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4620      	mov	r0, r4
 8002f62:	f7ff f833 	bl	8001fcc <SPI_WaitFlagStateUntilTimeout>
 8002f66:	b118      	cbz	r0, 8002f70 <SPI_DMAReceiveCplt+0xe2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002f68:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002f6a:	f043 0302 	orr.w	r3, r3, #2
 8002f6e:	6623      	str	r3, [r4, #96]	@ 0x60
          tmpreg8 = *ptmpreg8;
 8002f70:	7b2b      	ldrb	r3, [r5, #12]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f88d 300b 	strb.w	r3, [sp, #11]
          UNUSED(tmpreg8);
 8002f78:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002f7c:	e7a0      	b.n	8002ec0 <SPI_DMAReceiveCplt+0x32>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f7e:	6822      	ldr	r2, [r4, #0]
 8002f80:	6853      	ldr	r3, [r2, #4]
 8002f82:	f023 0303 	bic.w	r3, r3, #3
 8002f86:	6053      	str	r3, [r2, #4]
 8002f88:	e7a5      	b.n	8002ed6 <SPI_DMAReceiveCplt+0x48>
      HAL_SPI_ErrorCallback(hspi);
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7ff ff35 	bl	8002dfa <HAL_SPI_ErrorCallback>
      return;
 8002f90:	e7c1      	b.n	8002f16 <SPI_DMAReceiveCplt+0x88>

08002f92 <SPI_DMATransmitReceiveCplt>:
{
 8002f92:	b570      	push	{r4, r5, r6, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f98:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __IO uint32_t tmpreg = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8002f9e:	f88d 300b 	strb.w	r3, [sp, #11]
  tickstart = HAL_GetTick();
 8002fa2:	f7fe f8df 	bl	8001164 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002fa6:	682b      	ldr	r3, [r5, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002fae:	d12e      	bne.n	800300e <SPI_DMATransmitReceiveCplt+0x7c>
 8002fb0:	4606      	mov	r6, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002fb2:	6821      	ldr	r1, [r4, #0]
 8002fb4:	684b      	ldr	r3, [r1, #4]
 8002fb6:	f023 0320 	bic.w	r3, r3, #32
 8002fba:	604b      	str	r3, [r1, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fbc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc2:	d029      	beq.n	8003018 <SPI_DMATransmitReceiveCplt+0x86>
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002fc4:	4632      	mov	r2, r6
 8002fc6:	2164      	movs	r1, #100	@ 0x64
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7ff f8db 	bl	8002184 <SPI_EndRxTxTransaction>
 8002fce:	b118      	cbz	r0, 8002fd8 <SPI_DMATransmitReceiveCplt+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fd0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002fd2:	f043 0320 	orr.w	r3, r3, #32
 8002fd6:	6623      	str	r3, [r4, #96]	@ 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002fd8:	6822      	ldr	r2, [r4, #0]
 8002fda:	6853      	ldr	r3, [r2, #4]
 8002fdc:	f023 0303 	bic.w	r3, r3, #3
 8002fe0:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8002fe6:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	f012 0f10 	tst.w	r2, #16
 8002ff8:	d006      	beq.n	8003008 <SPI_DMATransmitReceiveCplt+0x76>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002ffa:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002ffc:	f042 0202 	orr.w	r2, r2, #2
 8003000:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003002:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8003006:	609a      	str	r2, [r3, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003008:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800300a:	2b00      	cmp	r3, #0
 800300c:	d134      	bne.n	8003078 <SPI_DMATransmitReceiveCplt+0xe6>
  HAL_SPI_TxRxCpltCallback(hspi);
 800300e:	4620      	mov	r0, r4
 8003010:	f7fd fef2 	bl	8000df8 <HAL_SPI_TxRxCpltCallback>
}
 8003014:	b004      	add	sp, #16
 8003016:	bd70      	pop	{r4, r5, r6, pc}
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_8BIT))
 8003018:	68e3      	ldr	r3, [r4, #12]
 800301a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800301e:	d102      	bne.n	8003026 <SPI_DMATransmitReceiveCplt+0x94>
 8003020:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003022:	2b01      	cmp	r3, #1
 8003024:	d012      	beq.n	800304c <SPI_DMATransmitReceiveCplt+0xba>
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_HALF_FULL, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003026:	9600      	str	r6, [sp, #0]
 8003028:	2364      	movs	r3, #100	@ 0x64
 800302a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800302e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003032:	4620      	mov	r0, r4
 8003034:	f7ff f82e 	bl	8002094 <SPI_WaitFifoStateUntilTimeout>
 8003038:	b118      	cbz	r0, 8003042 <SPI_DMATransmitReceiveCplt+0xb0>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800303a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	6623      	str	r3, [r4, #96]	@ 0x60
        tmpreg = READ_REG(hspi->Instance->DR);
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 8003048:	9b03      	ldr	r3, [sp, #12]
 800304a:	e7bb      	b.n	8002fc4 <SPI_DMATransmitReceiveCplt+0x32>
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_QUARTER_FULL, SPI_DEFAULT_TIMEOUT,
 800304c:	9000      	str	r0, [sp, #0]
 800304e:	2364      	movs	r3, #100	@ 0x64
 8003050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003054:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003058:	4620      	mov	r0, r4
 800305a:	f7ff f81b 	bl	8002094 <SPI_WaitFifoStateUntilTimeout>
 800305e:	b118      	cbz	r0, 8003068 <SPI_DMATransmitReceiveCplt+0xd6>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003060:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003062:	f043 0302 	orr.w	r3, r3, #2
 8003066:	6623      	str	r3, [r4, #96]	@ 0x60
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003068:	6823      	ldr	r3, [r4, #0]
        tmpreg8 = *ptmpreg8;
 800306a:	7b1b      	ldrb	r3, [r3, #12]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8003072:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003076:	e7a5      	b.n	8002fc4 <SPI_DMATransmitReceiveCplt+0x32>
      HAL_SPI_ErrorCallback(hspi);
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff febe 	bl	8002dfa <HAL_SPI_ErrorCallback>
      return;
 800307e:	e7c9      	b.n	8003014 <SPI_DMATransmitReceiveCplt+0x82>

08003080 <HAL_SPI_IRQHandler>:
{
 8003080:	b510      	push	{r4, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003086:	6802      	ldr	r2, [r0, #0]
 8003088:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800308a:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800308c:	f003 0041 	and.w	r0, r3, #65	@ 0x41
 8003090:	2801      	cmp	r0, #1
 8003092:	d067      	beq.n	8003164 <HAL_SPI_IRQHandler+0xe4>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003094:	f013 0f02 	tst.w	r3, #2
 8003098:	d002      	beq.n	80030a0 <HAL_SPI_IRQHandler+0x20>
 800309a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800309e:	d168      	bne.n	8003172 <HAL_SPI_IRQHandler+0xf2>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80030a0:	f413 7fb0 	tst.w	r3, #352	@ 0x160
 80030a4:	d068      	beq.n	8003178 <HAL_SPI_IRQHandler+0xf8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80030a6:	f011 0f20 	tst.w	r1, #32
 80030aa:	d065      	beq.n	8003178 <HAL_SPI_IRQHandler+0xf8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80030ac:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80030b0:	d00f      	beq.n	80030d2 <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80030b2:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
 80030b6:	b2c0      	uxtb	r0, r0
 80030b8:	2803      	cmp	r0, #3
 80030ba:	d05f      	beq.n	800317c <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80030bc:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80030be:	f040 0004 	orr.w	r0, r0, #4
 80030c2:	6620      	str	r0, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c4:	2000      	movs	r0, #0
 80030c6:	9000      	str	r0, [sp, #0]
 80030c8:	68d0      	ldr	r0, [r2, #12]
 80030ca:	9000      	str	r0, [sp, #0]
 80030cc:	6890      	ldr	r0, [r2, #8]
 80030ce:	9000      	str	r0, [sp, #0]
 80030d0:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80030d2:	f013 0f20 	tst.w	r3, #32
 80030d6:	d00c      	beq.n	80030f2 <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80030d8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80030da:	f040 0001 	orr.w	r0, r0, #1
 80030de:	6620      	str	r0, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80030e0:	2000      	movs	r0, #0
 80030e2:	9002      	str	r0, [sp, #8]
 80030e4:	6890      	ldr	r0, [r2, #8]
 80030e6:	9002      	str	r0, [sp, #8]
 80030e8:	6810      	ldr	r0, [r2, #0]
 80030ea:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80030ee:	6010      	str	r0, [r2, #0]
 80030f0:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80030f2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80030f6:	d009      	beq.n	800310c <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80030f8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80030fa:	f043 0308 	orr.w	r3, r3, #8
 80030fe:	6623      	str	r3, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003100:	2300      	movs	r3, #0
 8003102:	9303      	str	r3, [sp, #12]
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	9303      	str	r3, [sp, #12]
 800310a:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800310c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800310e:	2b00      	cmp	r3, #0
 8003110:	d032      	beq.n	8003178 <HAL_SPI_IRQHandler+0xf8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003112:	6822      	ldr	r2, [r4, #0]
 8003114:	6853      	ldr	r3, [r2, #4]
 8003116:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800311a:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800311c:	2301      	movs	r3, #1
 800311e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003122:	f011 0f03 	tst.w	r1, #3
 8003126:	d031      	beq.n	800318c <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003128:	6822      	ldr	r2, [r4, #0]
 800312a:	6853      	ldr	r3, [r2, #4]
 800312c:	f023 0303 	bic.w	r3, r3, #3
 8003130:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003132:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003134:	b14b      	cbz	r3, 800314a <HAL_SPI_IRQHandler+0xca>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003136:	4a17      	ldr	r2, [pc, #92]	@ (8003194 <HAL_SPI_IRQHandler+0x114>)
 8003138:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800313a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800313c:	f7fe f9ac 	bl	8001498 <HAL_DMA_Abort_IT>
 8003140:	b118      	cbz	r0, 800314a <HAL_SPI_IRQHandler+0xca>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003142:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003148:	6623      	str	r3, [r4, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800314a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800314c:	b1a3      	cbz	r3, 8003178 <HAL_SPI_IRQHandler+0xf8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800314e:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <HAL_SPI_IRQHandler+0x114>)
 8003150:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003152:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003154:	f7fe f9a0 	bl	8001498 <HAL_DMA_Abort_IT>
 8003158:	b170      	cbz	r0, 8003178 <HAL_SPI_IRQHandler+0xf8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800315a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800315c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003160:	6623      	str	r3, [r4, #96]	@ 0x60
 8003162:	e009      	b.n	8003178 <HAL_SPI_IRQHandler+0xf8>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003164:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8003168:	d094      	beq.n	8003094 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 800316a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800316c:	4620      	mov	r0, r4
 800316e:	4798      	blx	r3
    return;
 8003170:	e002      	b.n	8003178 <HAL_SPI_IRQHandler+0xf8>
    hspi->TxISR(hspi);
 8003172:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003174:	4620      	mov	r0, r4
 8003176:	4798      	blx	r3
}
 8003178:	b004      	add	sp, #16
 800317a:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800317c:	2300      	movs	r3, #0
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	68d3      	ldr	r3, [r2, #12]
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	6893      	ldr	r3, [r2, #8]
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	9b01      	ldr	r3, [sp, #4]
        return;
 800318a:	e7f5      	b.n	8003178 <HAL_SPI_IRQHandler+0xf8>
        HAL_SPI_ErrorCallback(hspi);
 800318c:	4620      	mov	r0, r4
 800318e:	f7ff fe34 	bl	8002dfa <HAL_SPI_ErrorCallback>
    return;
 8003192:	e7f1      	b.n	8003178 <HAL_SPI_IRQHandler+0xf8>
 8003194:	08003199 	.word	0x08003199

08003198 <SPI_DMAAbortOnError>:
{
 8003198:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800319a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hspi->RxXferCount = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80031a2:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80031a4:	f7ff fe29 	bl	8002dfa <HAL_SPI_ErrorCallback>
}
 80031a8:	bd08      	pop	{r3, pc}

080031aa <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ae:	4770      	bx	lr

080031b0 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_IRQHandler>:
{
 80031b2:	b510      	push	{r4, lr}
 80031b4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031b6:	6803      	ldr	r3, [r0, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	f012 0f02 	tst.w	r2, #2
 80031be:	d011      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	f012 0f02 	tst.w	r2, #2
 80031c6:	d00d      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031c8:	f06f 0202 	mvn.w	r2, #2
 80031cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d2:	6803      	ldr	r3, [r0, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f013 0f03 	tst.w	r3, #3
 80031da:	d079      	beq.n	80032d0 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80031dc:	f7ff ffe6 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e0:	2300      	movs	r3, #0
 80031e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	f012 0f04 	tst.w	r2, #4
 80031ec:	d012      	beq.n	8003214 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	f012 0f04 	tst.w	r2, #4
 80031f4:	d00e      	beq.n	8003214 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f6:	f06f 0204 	mvn.w	r2, #4
 80031fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fc:	2302      	movs	r3, #2
 80031fe:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003208:	d068      	beq.n	80032dc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff ffce 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003210:	2300      	movs	r3, #0
 8003212:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	f012 0f08 	tst.w	r2, #8
 800321c:	d012      	beq.n	8003244 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	f012 0f08 	tst.w	r2, #8
 8003224:	d00e      	beq.n	8003244 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003226:	f06f 0208 	mvn.w	r2, #8
 800322a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322c:	2304      	movs	r3, #4
 800322e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f013 0f03 	tst.w	r3, #3
 8003238:	d057      	beq.n	80032ea <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	4620      	mov	r0, r4
 800323c:	f7ff ffb6 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003240:	2300      	movs	r3, #0
 8003242:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	f012 0f10 	tst.w	r2, #16
 800324c:	d012      	beq.n	8003274 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	f012 0f10 	tst.w	r2, #16
 8003254:	d00e      	beq.n	8003274 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003256:	f06f 0210 	mvn.w	r2, #16
 800325a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800325c:	2308      	movs	r3, #8
 800325e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003268:	d046      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800326a:	4620      	mov	r0, r4
 800326c:	f7ff ff9e 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003270:	2300      	movs	r3, #0
 8003272:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	f012 0f01 	tst.w	r2, #1
 800327c:	d003      	beq.n	8003286 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	f012 0f01 	tst.w	r2, #1
 8003284:	d13f      	bne.n	8003306 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800328e:	d003      	beq.n	8003298 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8003296:	d13d      	bne.n	8003314 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80032a8:	d13b      	bne.n	8003322 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80032b2:	d003      	beq.n	80032bc <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80032ba:	d139      	bne.n	8003330 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	f012 0f20 	tst.w	r2, #32
 80032c4:	d003      	beq.n	80032ce <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	f012 0f20 	tst.w	r2, #32
 80032cc:	d137      	bne.n	800333e <HAL_TIM_IRQHandler+0x18c>
}
 80032ce:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d0:	f7ff ff6b 	bl	80031aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d4:	4620      	mov	r0, r4
 80032d6:	f7ff ff6a 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
 80032da:	e781      	b.n	80031e0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032dc:	4620      	mov	r0, r4
 80032de:	f7ff ff64 	bl	80031aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e2:	4620      	mov	r0, r4
 80032e4:	f7ff ff63 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
 80032e8:	e792      	b.n	8003210 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	4620      	mov	r0, r4
 80032ec:	f7ff ff5d 	bl	80031aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff ff5c 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
 80032f6:	e7a3      	b.n	8003240 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f8:	4620      	mov	r0, r4
 80032fa:	f7ff ff56 	bl	80031aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fe:	4620      	mov	r0, r4
 8003300:	f7ff ff55 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
 8003304:	e7b4      	b.n	8003270 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003306:	f06f 0201 	mvn.w	r2, #1
 800330a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800330c:	4620      	mov	r0, r4
 800330e:	f7fd fd21 	bl	8000d54 <HAL_TIM_PeriodElapsedCallback>
 8003312:	e7b8      	b.n	8003286 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003314:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003318:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800331a:	4620      	mov	r0, r4
 800331c:	f000 f817 	bl	800334e <HAL_TIMEx_BreakCallback>
 8003320:	e7ba      	b.n	8003298 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003322:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003326:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003328:	4620      	mov	r0, r4
 800332a:	f000 f811 	bl	8003350 <HAL_TIMEx_Break2Callback>
 800332e:	e7bc      	b.n	80032aa <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003330:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003334:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003336:	4620      	mov	r0, r4
 8003338:	f7ff ff3a 	bl	80031b0 <HAL_TIM_TriggerCallback>
 800333c:	e7be      	b.n	80032bc <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800333e:	f06f 0220 	mvn.w	r2, #32
 8003342:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003344:	4620      	mov	r0, r4
 8003346:	f000 f801 	bl	800334c <HAL_TIMEx_CommutCallback>
}
 800334a:	e7c0      	b.n	80032ce <HAL_TIM_IRQHandler+0x11c>

0800334c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800334c:	4770      	bx	lr

0800334e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800334e:	4770      	bx	lr

08003350 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003350:	4770      	bx	lr
	...

08003354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003354:	b510      	push	{r4, lr}
 8003356:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003358:	6883      	ldr	r3, [r0, #8]
 800335a:	6902      	ldr	r2, [r0, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	6942      	ldr	r2, [r0, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	69c2      	ldr	r2, [r0, #28]
 8003364:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003366:	6801      	ldr	r1, [r0, #0]
 8003368:	6808      	ldr	r0, [r1, #0]
 800336a:	4a93      	ldr	r2, [pc, #588]	@ (80035b8 <UART_SetConfig+0x264>)
 800336c:	4002      	ands	r2, r0
 800336e:	431a      	orrs	r2, r3
 8003370:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	6853      	ldr	r3, [r2, #4]
 8003376:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800337a:	68e1      	ldr	r1, [r4, #12]
 800337c:	430b      	orrs	r3, r1
 800337e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003380:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8003382:	6a23      	ldr	r3, [r4, #32]
 8003384:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003386:	6821      	ldr	r1, [r4, #0]
 8003388:	688b      	ldr	r3, [r1, #8]
 800338a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	4a89      	ldr	r2, [pc, #548]	@ (80035bc <UART_SetConfig+0x268>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d019      	beq.n	80033ce <UART_SetConfig+0x7a>
 800339a:	4a89      	ldr	r2, [pc, #548]	@ (80035c0 <UART_SetConfig+0x26c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d029      	beq.n	80033f4 <UART_SetConfig+0xa0>
 80033a0:	4a88      	ldr	r2, [pc, #544]	@ (80035c4 <UART_SetConfig+0x270>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d03e      	beq.n	8003424 <UART_SetConfig+0xd0>
 80033a6:	4a88      	ldr	r2, [pc, #544]	@ (80035c8 <UART_SetConfig+0x274>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d062      	beq.n	8003472 <UART_SetConfig+0x11e>
 80033ac:	4a87      	ldr	r2, [pc, #540]	@ (80035cc <UART_SetConfig+0x278>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d071      	beq.n	8003496 <UART_SetConfig+0x142>
 80033b2:	4a87      	ldr	r2, [pc, #540]	@ (80035d0 <UART_SetConfig+0x27c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	f000 8083 	beq.w	80034c0 <UART_SetConfig+0x16c>
 80033ba:	4a86      	ldr	r2, [pc, #536]	@ (80035d4 <UART_SetConfig+0x280>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	f000 8094 	beq.w	80034ea <UART_SetConfig+0x196>
 80033c2:	4a85      	ldr	r2, [pc, #532]	@ (80035d8 <UART_SetConfig+0x284>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	f000 80a5 	beq.w	8003514 <UART_SetConfig+0x1c0>
 80033ca:	2310      	movs	r3, #16
 80033cc:	e03a      	b.n	8003444 <UART_SetConfig+0xf0>
 80033ce:	4b83      	ldr	r3, [pc, #524]	@ (80035dc <UART_SetConfig+0x288>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d809      	bhi.n	80033f0 <UART_SetConfig+0x9c>
 80033dc:	e8df f003 	tbb	[pc, r3]
 80033e0:	06ae0402 	.word	0x06ae0402
 80033e4:	2301      	movs	r3, #1
 80033e6:	e02d      	b.n	8003444 <UART_SetConfig+0xf0>
 80033e8:	2304      	movs	r3, #4
 80033ea:	e02b      	b.n	8003444 <UART_SetConfig+0xf0>
 80033ec:	2308      	movs	r3, #8
 80033ee:	e029      	b.n	8003444 <UART_SetConfig+0xf0>
 80033f0:	2310      	movs	r3, #16
 80033f2:	e027      	b.n	8003444 <UART_SetConfig+0xf0>
 80033f4:	4b79      	ldr	r3, [pc, #484]	@ (80035dc <UART_SetConfig+0x288>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d80e      	bhi.n	8003420 <UART_SetConfig+0xcc>
 8003402:	e8df f003 	tbb	[pc, r3]
 8003406:	0d07      	.short	0x0d07
 8003408:	0d090d0d 	.word	0x0d090d0d
 800340c:	0d9d0d0d 	.word	0x0d9d0d0d
 8003410:	0d0d      	.short	0x0d0d
 8003412:	0b          	.byte	0x0b
 8003413:	00          	.byte	0x00
 8003414:	2300      	movs	r3, #0
 8003416:	e015      	b.n	8003444 <UART_SetConfig+0xf0>
 8003418:	2304      	movs	r3, #4
 800341a:	e013      	b.n	8003444 <UART_SetConfig+0xf0>
 800341c:	2308      	movs	r3, #8
 800341e:	e011      	b.n	8003444 <UART_SetConfig+0xf0>
 8003420:	2310      	movs	r3, #16
 8003422:	e00f      	b.n	8003444 <UART_SetConfig+0xf0>
 8003424:	4b6d      	ldr	r3, [pc, #436]	@ (80035dc <UART_SetConfig+0x288>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800342e:	2b20      	cmp	r3, #32
 8003430:	f000 8088 	beq.w	8003544 <UART_SetConfig+0x1f0>
 8003434:	d819      	bhi.n	800346a <UART_SetConfig+0x116>
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8086 	beq.w	8003548 <UART_SetConfig+0x1f4>
 800343c:	2b10      	cmp	r3, #16
 800343e:	f040 8085 	bne.w	800354c <UART_SetConfig+0x1f8>
 8003442:	2304      	movs	r3, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003444:	69e0      	ldr	r0, [r4, #28]
 8003446:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800344a:	f000 80ab 	beq.w	80035a4 <UART_SetConfig+0x250>
      }
    }
  }
  else
  {
    switch (clocksource)
 800344e:	2b08      	cmp	r3, #8
 8003450:	f200 810c 	bhi.w	800366c <UART_SetConfig+0x318>
 8003454:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003458:	00fb00e8 	.word	0x00fb00e8
 800345c:	010a00e6 	.word	0x010a00e6
 8003460:	010a00fe 	.word	0x010a00fe
 8003464:	010a010a 	.word	0x010a010a
 8003468:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 800346a:	2b30      	cmp	r3, #48	@ 0x30
 800346c:	d170      	bne.n	8003550 <UART_SetConfig+0x1fc>
 800346e:	2308      	movs	r3, #8
 8003470:	e7e8      	b.n	8003444 <UART_SetConfig+0xf0>
 8003472:	4b5a      	ldr	r3, [pc, #360]	@ (80035dc <UART_SetConfig+0x288>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003478:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800347c:	2b80      	cmp	r3, #128	@ 0x80
 800347e:	d069      	beq.n	8003554 <UART_SetConfig+0x200>
 8003480:	d805      	bhi.n	800348e <UART_SetConfig+0x13a>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d068      	beq.n	8003558 <UART_SetConfig+0x204>
 8003486:	2b40      	cmp	r3, #64	@ 0x40
 8003488:	d168      	bne.n	800355c <UART_SetConfig+0x208>
 800348a:	2304      	movs	r3, #4
 800348c:	e7da      	b.n	8003444 <UART_SetConfig+0xf0>
 800348e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003490:	d166      	bne.n	8003560 <UART_SetConfig+0x20c>
 8003492:	2308      	movs	r3, #8
 8003494:	e7d6      	b.n	8003444 <UART_SetConfig+0xf0>
 8003496:	4b51      	ldr	r3, [pc, #324]	@ (80035dc <UART_SetConfig+0x288>)
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a4:	d05e      	beq.n	8003564 <UART_SetConfig+0x210>
 80034a6:	d806      	bhi.n	80034b6 <UART_SetConfig+0x162>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d05d      	beq.n	8003568 <UART_SetConfig+0x214>
 80034ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b0:	d15c      	bne.n	800356c <UART_SetConfig+0x218>
 80034b2:	2304      	movs	r3, #4
 80034b4:	e7c6      	b.n	8003444 <UART_SetConfig+0xf0>
 80034b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034ba:	d159      	bne.n	8003570 <UART_SetConfig+0x21c>
 80034bc:	2308      	movs	r3, #8
 80034be:	e7c1      	b.n	8003444 <UART_SetConfig+0xf0>
 80034c0:	4b46      	ldr	r3, [pc, #280]	@ (80035dc <UART_SetConfig+0x288>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80034ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ce:	d051      	beq.n	8003574 <UART_SetConfig+0x220>
 80034d0:	d806      	bhi.n	80034e0 <UART_SetConfig+0x18c>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d050      	beq.n	8003578 <UART_SetConfig+0x224>
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034da:	d14f      	bne.n	800357c <UART_SetConfig+0x228>
 80034dc:	2304      	movs	r3, #4
 80034de:	e7b1      	b.n	8003444 <UART_SetConfig+0xf0>
 80034e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034e4:	d14c      	bne.n	8003580 <UART_SetConfig+0x22c>
 80034e6:	2308      	movs	r3, #8
 80034e8:	e7ac      	b.n	8003444 <UART_SetConfig+0xf0>
 80034ea:	4b3c      	ldr	r3, [pc, #240]	@ (80035dc <UART_SetConfig+0x288>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f8:	d044      	beq.n	8003584 <UART_SetConfig+0x230>
 80034fa:	d806      	bhi.n	800350a <UART_SetConfig+0x1b6>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d043      	beq.n	8003588 <UART_SetConfig+0x234>
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003504:	d142      	bne.n	800358c <UART_SetConfig+0x238>
 8003506:	2304      	movs	r3, #4
 8003508:	e79c      	b.n	8003444 <UART_SetConfig+0xf0>
 800350a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800350e:	d13f      	bne.n	8003590 <UART_SetConfig+0x23c>
 8003510:	2308      	movs	r3, #8
 8003512:	e797      	b.n	8003444 <UART_SetConfig+0xf0>
 8003514:	4b31      	ldr	r3, [pc, #196]	@ (80035dc <UART_SetConfig+0x288>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800351e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003522:	d037      	beq.n	8003594 <UART_SetConfig+0x240>
 8003524:	d805      	bhi.n	8003532 <UART_SetConfig+0x1de>
 8003526:	b3bb      	cbz	r3, 8003598 <UART_SetConfig+0x244>
 8003528:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800352c:	d136      	bne.n	800359c <UART_SetConfig+0x248>
 800352e:	2304      	movs	r3, #4
 8003530:	e788      	b.n	8003444 <UART_SetConfig+0xf0>
 8003532:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003536:	d133      	bne.n	80035a0 <UART_SetConfig+0x24c>
 8003538:	2308      	movs	r3, #8
 800353a:	e783      	b.n	8003444 <UART_SetConfig+0xf0>
 800353c:	2302      	movs	r3, #2
 800353e:	e781      	b.n	8003444 <UART_SetConfig+0xf0>
 8003540:	2302      	movs	r3, #2
 8003542:	e77f      	b.n	8003444 <UART_SetConfig+0xf0>
 8003544:	2302      	movs	r3, #2
 8003546:	e77d      	b.n	8003444 <UART_SetConfig+0xf0>
 8003548:	2300      	movs	r3, #0
 800354a:	e77b      	b.n	8003444 <UART_SetConfig+0xf0>
 800354c:	2310      	movs	r3, #16
 800354e:	e779      	b.n	8003444 <UART_SetConfig+0xf0>
 8003550:	2310      	movs	r3, #16
 8003552:	e777      	b.n	8003444 <UART_SetConfig+0xf0>
 8003554:	2302      	movs	r3, #2
 8003556:	e775      	b.n	8003444 <UART_SetConfig+0xf0>
 8003558:	2300      	movs	r3, #0
 800355a:	e773      	b.n	8003444 <UART_SetConfig+0xf0>
 800355c:	2310      	movs	r3, #16
 800355e:	e771      	b.n	8003444 <UART_SetConfig+0xf0>
 8003560:	2310      	movs	r3, #16
 8003562:	e76f      	b.n	8003444 <UART_SetConfig+0xf0>
 8003564:	2302      	movs	r3, #2
 8003566:	e76d      	b.n	8003444 <UART_SetConfig+0xf0>
 8003568:	2300      	movs	r3, #0
 800356a:	e76b      	b.n	8003444 <UART_SetConfig+0xf0>
 800356c:	2310      	movs	r3, #16
 800356e:	e769      	b.n	8003444 <UART_SetConfig+0xf0>
 8003570:	2310      	movs	r3, #16
 8003572:	e767      	b.n	8003444 <UART_SetConfig+0xf0>
 8003574:	2302      	movs	r3, #2
 8003576:	e765      	b.n	8003444 <UART_SetConfig+0xf0>
 8003578:	2301      	movs	r3, #1
 800357a:	e763      	b.n	8003444 <UART_SetConfig+0xf0>
 800357c:	2310      	movs	r3, #16
 800357e:	e761      	b.n	8003444 <UART_SetConfig+0xf0>
 8003580:	2310      	movs	r3, #16
 8003582:	e75f      	b.n	8003444 <UART_SetConfig+0xf0>
 8003584:	2302      	movs	r3, #2
 8003586:	e75d      	b.n	8003444 <UART_SetConfig+0xf0>
 8003588:	2300      	movs	r3, #0
 800358a:	e75b      	b.n	8003444 <UART_SetConfig+0xf0>
 800358c:	2310      	movs	r3, #16
 800358e:	e759      	b.n	8003444 <UART_SetConfig+0xf0>
 8003590:	2310      	movs	r3, #16
 8003592:	e757      	b.n	8003444 <UART_SetConfig+0xf0>
 8003594:	2302      	movs	r3, #2
 8003596:	e755      	b.n	8003444 <UART_SetConfig+0xf0>
 8003598:	2300      	movs	r3, #0
 800359a:	e753      	b.n	8003444 <UART_SetConfig+0xf0>
 800359c:	2310      	movs	r3, #16
 800359e:	e751      	b.n	8003444 <UART_SetConfig+0xf0>
 80035a0:	2310      	movs	r3, #16
 80035a2:	e74f      	b.n	8003444 <UART_SetConfig+0xf0>
    switch (clocksource)
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d85b      	bhi.n	8003660 <UART_SetConfig+0x30c>
 80035a8:	e8df f003 	tbb	[pc, r3]
 80035ac:	5a3a341a 	.word	0x5a3a341a
 80035b0:	5a5a5a37 	.word	0x5a5a5a37
 80035b4:	1e          	.byte	0x1e
 80035b5:	00          	.byte	0x00
 80035b6:	bf00      	nop
 80035b8:	efff69f3 	.word	0xefff69f3
 80035bc:	40011000 	.word	0x40011000
 80035c0:	40004400 	.word	0x40004400
 80035c4:	40004800 	.word	0x40004800
 80035c8:	40004c00 	.word	0x40004c00
 80035cc:	40005000 	.word	0x40005000
 80035d0:	40011400 	.word	0x40011400
 80035d4:	40007800 	.word	0x40007800
 80035d8:	40007c00 	.word	0x40007c00
 80035dc:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e0:	f7fe fcd4 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d03d      	beq.n	8003664 <UART_SetConfig+0x310>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035e8:	6862      	ldr	r2, [r4, #4]
 80035ea:	0853      	lsrs	r3, r2, #1
 80035ec:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80035f0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f4:	f1a3 0110 	sub.w	r1, r3, #16
 80035f8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80035fc:	4291      	cmp	r1, r2
 80035fe:	d833      	bhi.n	8003668 <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003600:	b29a      	uxth	r2, r3
 8003602:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003606:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800360a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	60d3      	str	r3, [r2, #12]
 8003610:	2000      	movs	r0, #0
 8003612:	e030      	b.n	8003676 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003614:	f7fe fcca 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
        break;
 8003618:	e7e4      	b.n	80035e4 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 800361a:	f7fe fba7 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
        break;
 800361e:	e7e1      	b.n	80035e4 <UART_SetConfig+0x290>
        pclk = (uint32_t) HSI_VALUE;
 8003620:	4817      	ldr	r0, [pc, #92]	@ (8003680 <UART_SetConfig+0x32c>)
 8003622:	e7e1      	b.n	80035e8 <UART_SetConfig+0x294>
    switch (clocksource)
 8003624:	4816      	ldr	r0, [pc, #88]	@ (8003680 <UART_SetConfig+0x32c>)
 8003626:	e002      	b.n	800362e <UART_SetConfig+0x2da>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003628:	f7fe fcb0 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 800362c:	b300      	cbz	r0, 8003670 <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800362e:	6863      	ldr	r3, [r4, #4]
 8003630:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003634:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003638:	f1a0 0210 	sub.w	r2, r0, #16
 800363c:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8003640:	429a      	cmp	r2, r3
 8003642:	d817      	bhi.n	8003674 <UART_SetConfig+0x320>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	b280      	uxth	r0, r0
 8003648:	60d8      	str	r0, [r3, #12]
 800364a:	2000      	movs	r0, #0
 800364c:	e013      	b.n	8003676 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 800364e:	f7fe fcad 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
        break;
 8003652:	e7eb      	b.n	800362c <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8003654:	f7fe fb8a 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
        break;
 8003658:	e7e8      	b.n	800362c <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 800365a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800365e:	e7e6      	b.n	800362e <UART_SetConfig+0x2da>
    switch (clocksource)
 8003660:	2001      	movs	r0, #1
 8003662:	e008      	b.n	8003676 <UART_SetConfig+0x322>
 8003664:	2000      	movs	r0, #0
 8003666:	e006      	b.n	8003676 <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8003668:	2001      	movs	r0, #1
 800366a:	e004      	b.n	8003676 <UART_SetConfig+0x322>
    switch (clocksource)
 800366c:	2001      	movs	r0, #1
 800366e:	e002      	b.n	8003676 <UART_SetConfig+0x322>
 8003670:	2000      	movs	r0, #0
 8003672:	e000      	b.n	8003676 <UART_SetConfig+0x322>
      }
      else
      {
        ret = HAL_ERROR;
 8003674:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003676:	2300      	movs	r3, #0
 8003678:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800367a:	66e3      	str	r3, [r4, #108]	@ 0x6c

  return ret;
}
 800367c:	bd10      	pop	{r4, pc}
 800367e:	bf00      	nop
 8003680:	00f42400 	.word	0x00f42400

08003684 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003684:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003686:	f013 0f01 	tst.w	r3, #1
 800368a:	d006      	beq.n	800369a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800368c:	6802      	ldr	r2, [r0, #0]
 800368e:	6853      	ldr	r3, [r2, #4]
 8003690:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003694:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8003696:	430b      	orrs	r3, r1
 8003698:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800369c:	f013 0f02 	tst.w	r3, #2
 80036a0:	d006      	beq.n	80036b0 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a2:	6802      	ldr	r2, [r0, #0]
 80036a4:	6853      	ldr	r3, [r2, #4]
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036aa:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80036b2:	f013 0f04 	tst.w	r3, #4
 80036b6:	d006      	beq.n	80036c6 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036b8:	6802      	ldr	r2, [r0, #0]
 80036ba:	6853      	ldr	r3, [r2, #4]
 80036bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036c0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80036c2:	430b      	orrs	r3, r1
 80036c4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036c6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80036c8:	f013 0f08 	tst.w	r3, #8
 80036cc:	d006      	beq.n	80036dc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ce:	6802      	ldr	r2, [r0, #0]
 80036d0:	6853      	ldr	r3, [r2, #4]
 80036d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80036d6:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80036d8:	430b      	orrs	r3, r1
 80036da:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036dc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80036de:	f013 0f10 	tst.w	r3, #16
 80036e2:	d006      	beq.n	80036f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036e4:	6802      	ldr	r2, [r0, #0]
 80036e6:	6893      	ldr	r3, [r2, #8]
 80036e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036ec:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80036ee:	430b      	orrs	r3, r1
 80036f0:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036f2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80036f4:	f013 0f20 	tst.w	r3, #32
 80036f8:	d006      	beq.n	8003708 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036fa:	6802      	ldr	r2, [r0, #0]
 80036fc:	6893      	ldr	r3, [r2, #8]
 80036fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003702:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003704:	430b      	orrs	r3, r1
 8003706:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003708:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800370a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800370e:	d00a      	beq.n	8003726 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003710:	6802      	ldr	r2, [r0, #0]
 8003712:	6853      	ldr	r3, [r2, #4]
 8003714:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003718:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800371a:	430b      	orrs	r3, r1
 800371c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800371e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003720:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003724:	d00b      	beq.n	800373e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003726:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003728:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800372c:	d006      	beq.n	800373c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800372e:	6802      	ldr	r2, [r0, #0]
 8003730:	6853      	ldr	r3, [r2, #4]
 8003732:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003736:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003738:	430b      	orrs	r3, r1
 800373a:	6053      	str	r3, [r2, #4]
  }
}
 800373c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800373e:	6802      	ldr	r2, [r0, #0]
 8003740:	6853      	ldr	r3, [r2, #4]
 8003742:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003746:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8003748:	430b      	orrs	r3, r1
 800374a:	6053      	str	r3, [r2, #4]
 800374c:	e7eb      	b.n	8003726 <UART_AdvFeatureConfig+0xa2>

0800374e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800374e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003752:	4605      	mov	r5, r0
 8003754:	460f      	mov	r7, r1
 8003756:	4616      	mov	r6, r2
 8003758:	4699      	mov	r9, r3
 800375a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375e:	682b      	ldr	r3, [r5, #0]
 8003760:	69dc      	ldr	r4, [r3, #28]
 8003762:	ea37 0404 	bics.w	r4, r7, r4
 8003766:	bf0c      	ite	eq
 8003768:	2401      	moveq	r4, #1
 800376a:	2400      	movne	r4, #0
 800376c:	42b4      	cmp	r4, r6
 800376e:	d155      	bne.n	800381c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003770:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003774:	d0f3      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003776:	f7fd fcf5 	bl	8001164 <HAL_GetTick>
 800377a:	eba0 0009 	sub.w	r0, r0, r9
 800377e:	4540      	cmp	r0, r8
 8003780:	d82e      	bhi.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x92>
 8003782:	f1b8 0f00 	cmp.w	r8, #0
 8003786:	d02b      	beq.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x92>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	f012 0f04 	tst.w	r2, #4
 8003790:	d0e5      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003798:	d0e1      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800379a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800379e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a0:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	e852 3f00 	ldrex	r3, [r2]
 80037a6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	e842 3100 	strex	r1, r3, [r2]
 80037ae:	2900      	cmp	r1, #0
 80037b0:	d1f6      	bne.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	f102 0308 	add.w	r3, r2, #8
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	3208      	adds	r2, #8
 80037c2:	e842 3100 	strex	r1, r3, [r2]
 80037c6:	2900      	cmp	r1, #0
 80037c8:	d1f3      	bne.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x64>

          huart->gState = HAL_UART_STATE_READY;
 80037ca:	2320      	movs	r3, #32
 80037cc:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80037ce:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037d2:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037d6:	2300      	movs	r3, #0
 80037d8:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78

          return HAL_TIMEOUT;
 80037dc:	2003      	movs	r0, #3
 80037de:	e01e      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037e0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	e852 3f00 	ldrex	r3, [r2]
 80037e6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	e842 3100 	strex	r1, r3, [r2]
 80037ee:	2900      	cmp	r1, #0
 80037f0:	d1f6      	bne.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	f102 0308 	add.w	r3, r2, #8
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	3208      	adds	r2, #8
 8003802:	e842 3100 	strex	r1, r3, [r2]
 8003806:	2900      	cmp	r1, #0
 8003808:	d1f3      	bne.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xa4>
        huart->gState = HAL_UART_STATE_READY;
 800380a:	2320      	movs	r3, #32
 800380c:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800380e:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
        __HAL_UNLOCK(huart);
 8003812:	2300      	movs	r3, #0
 8003814:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
        return HAL_TIMEOUT;
 8003818:	2003      	movs	r0, #3
 800381a:	e000      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0xd0>
        }
      }
    }
  }
  return HAL_OK;
 800381c:	2000      	movs	r0, #0
}
 800381e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003822 <HAL_UART_Transmit>:
{
 8003822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800382a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800382c:	2b20      	cmp	r3, #32
 800382e:	d14e      	bne.n	80038ce <HAL_UART_Transmit+0xac>
 8003830:	4604      	mov	r4, r0
 8003832:	460d      	mov	r5, r1
 8003834:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003836:	2a00      	cmp	r2, #0
 8003838:	bf18      	it	ne
 800383a:	2900      	cmpne	r1, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 800383e:	2001      	movs	r0, #1
 8003840:	e046      	b.n	80038d0 <HAL_UART_Transmit+0xae>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003842:	2300      	movs	r3, #0
 8003844:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003848:	2321      	movs	r3, #33	@ 0x21
 800384a:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800384c:	f7fd fc8a 	bl	8001164 <HAL_GetTick>
 8003850:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8003852:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003856:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385a:	68a3      	ldr	r3, [r4, #8]
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003860:	d002      	beq.n	8003868 <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 8003862:	f04f 0800 	mov.w	r8, #0
 8003866:	e011      	b.n	800388c <HAL_UART_Transmit+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003868:	6923      	ldr	r3, [r4, #16]
 800386a:	b313      	cbz	r3, 80038b2 <HAL_UART_Transmit+0x90>
      pdata16bits = NULL;
 800386c:	f04f 0800 	mov.w	r8, #0
 8003870:	e00c      	b.n	800388c <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003872:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003876:	6822      	ldr	r2, [r4, #0]
 8003878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387c:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800387e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8003882:	b292      	uxth	r2, r2
 8003884:	3a01      	subs	r2, #1
 8003886:	b292      	uxth	r2, r2
 8003888:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800388c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8003890:	b29b      	uxth	r3, r3
 8003892:	b18b      	cbz	r3, 80038b8 <HAL_UART_Transmit+0x96>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003894:	9600      	str	r6, [sp, #0]
 8003896:	463b      	mov	r3, r7
 8003898:	2200      	movs	r2, #0
 800389a:	2180      	movs	r1, #128	@ 0x80
 800389c:	4620      	mov	r0, r4
 800389e:	f7ff ff56 	bl	800374e <UART_WaitOnFlagUntilTimeout>
 80038a2:	b9c0      	cbnz	r0, 80038d6 <HAL_UART_Transmit+0xb4>
      if (pdata8bits == NULL)
 80038a4:	2d00      	cmp	r5, #0
 80038a6:	d0e4      	beq.n	8003872 <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038b0:	e7e5      	b.n	800387e <HAL_UART_Transmit+0x5c>
      pdata16bits = (const uint16_t *) pData;
 80038b2:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80038b4:	2500      	movs	r5, #0
 80038b6:	e7e9      	b.n	800388c <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038b8:	9600      	str	r6, [sp, #0]
 80038ba:	463b      	mov	r3, r7
 80038bc:	2200      	movs	r2, #0
 80038be:	2140      	movs	r1, #64	@ 0x40
 80038c0:	4620      	mov	r0, r4
 80038c2:	f7ff ff44 	bl	800374e <UART_WaitOnFlagUntilTimeout>
 80038c6:	b940      	cbnz	r0, 80038da <HAL_UART_Transmit+0xb8>
    huart->gState = HAL_UART_STATE_READY;
 80038c8:	2320      	movs	r3, #32
 80038ca:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80038cc:	e000      	b.n	80038d0 <HAL_UART_Transmit+0xae>
    return HAL_BUSY;
 80038ce:	2002      	movs	r0, #2
}
 80038d0:	b002      	add	sp, #8
 80038d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 80038d6:	2003      	movs	r0, #3
 80038d8:	e7fa      	b.n	80038d0 <HAL_UART_Transmit+0xae>
      return HAL_TIMEOUT;
 80038da:	2003      	movs	r0, #3
 80038dc:	e7f8      	b.n	80038d0 <HAL_UART_Transmit+0xae>

080038de <HAL_UART_Receive>:
{
 80038de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038e2:	b083      	sub	sp, #12
 80038e4:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80038e6:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d178      	bne.n	80039e0 <HAL_UART_Receive+0x102>
 80038ee:	4604      	mov	r4, r0
 80038f0:	460d      	mov	r5, r1
 80038f2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80038f4:	2a00      	cmp	r2, #0
 80038f6:	bf18      	it	ne
 80038f8:	2900      	cmpne	r1, #0
 80038fa:	d101      	bne.n	8003900 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 80038fc:	2001      	movs	r0, #1
 80038fe:	e070      	b.n	80039e2 <HAL_UART_Receive+0x104>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	2300      	movs	r3, #0
 8003902:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003906:	2222      	movs	r2, #34	@ 0x22
 8003908:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390c:	6603      	str	r3, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 800390e:	f7fd fc29 	bl	8001164 <HAL_GetTick>
 8003912:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8003914:	f8a4 8058 	strh.w	r8, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003918:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 800391c:	68a3      	ldr	r3, [r4, #8]
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003922:	d006      	beq.n	8003932 <HAL_UART_Receive+0x54>
 8003924:	b9a3      	cbnz	r3, 8003950 <HAL_UART_Receive+0x72>
 8003926:	6922      	ldr	r2, [r4, #16]
 8003928:	b972      	cbnz	r2, 8003948 <HAL_UART_Receive+0x6a>
 800392a:	22ff      	movs	r2, #255	@ 0xff
 800392c:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8003930:	e014      	b.n	800395c <HAL_UART_Receive+0x7e>
 8003932:	6922      	ldr	r2, [r4, #16]
 8003934:	b922      	cbnz	r2, 8003940 <HAL_UART_Receive+0x62>
 8003936:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800393a:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800393e:	e00d      	b.n	800395c <HAL_UART_Receive+0x7e>
 8003940:	22ff      	movs	r2, #255	@ 0xff
 8003942:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8003946:	e009      	b.n	800395c <HAL_UART_Receive+0x7e>
 8003948:	227f      	movs	r2, #127	@ 0x7f
 800394a:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800394e:	e005      	b.n	800395c <HAL_UART_Receive+0x7e>
 8003950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003954:	d00a      	beq.n	800396c <HAL_UART_Receive+0x8e>
 8003956:	2200      	movs	r2, #0
 8003958:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 800395c:	f8b4 805c 	ldrh.w	r8, [r4, #92]	@ 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003964:	d00c      	beq.n	8003980 <HAL_UART_Receive+0xa2>
      pdata16bits = NULL;
 8003966:	f04f 0900 	mov.w	r9, #0
 800396a:	e01f      	b.n	80039ac <HAL_UART_Receive+0xce>
    UART_MASK_COMPUTATION(huart);
 800396c:	6922      	ldr	r2, [r4, #16]
 800396e:	b91a      	cbnz	r2, 8003978 <HAL_UART_Receive+0x9a>
 8003970:	227f      	movs	r2, #127	@ 0x7f
 8003972:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8003976:	e7f1      	b.n	800395c <HAL_UART_Receive+0x7e>
 8003978:	223f      	movs	r2, #63	@ 0x3f
 800397a:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800397e:	e7ed      	b.n	800395c <HAL_UART_Receive+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003980:	6923      	ldr	r3, [r4, #16]
 8003982:	b113      	cbz	r3, 800398a <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 8003984:	f04f 0900 	mov.w	r9, #0
 8003988:	e010      	b.n	80039ac <HAL_UART_Receive+0xce>
      pdata16bits = (uint16_t *) pData;
 800398a:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800398c:	2500      	movs	r5, #0
 800398e:	e00d      	b.n	80039ac <HAL_UART_Receive+0xce>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003994:	fa5f f388 	uxtb.w	r3, r8
 8003998:	4013      	ands	r3, r2
 800399a:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 800399e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 80039a2:	b292      	uxth	r2, r2
 80039a4:	3a01      	subs	r2, #1
 80039a6:	b292      	uxth	r2, r2
 80039a8:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80039ac:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	b183      	cbz	r3, 80039d6 <HAL_UART_Receive+0xf8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039b4:	9600      	str	r6, [sp, #0]
 80039b6:	463b      	mov	r3, r7
 80039b8:	2200      	movs	r2, #0
 80039ba:	2120      	movs	r1, #32
 80039bc:	4620      	mov	r0, r4
 80039be:	f7ff fec6 	bl	800374e <UART_WaitOnFlagUntilTimeout>
 80039c2:	b988      	cbnz	r0, 80039e8 <HAL_UART_Receive+0x10a>
      if (pdata8bits == NULL)
 80039c4:	2d00      	cmp	r5, #0
 80039c6:	d1e3      	bne.n	8003990 <HAL_UART_Receive+0xb2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	ea08 0303 	and.w	r3, r8, r3
 80039d0:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 80039d4:	e7e3      	b.n	800399e <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 80039d6:	2320      	movs	r3, #32
 80039d8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 80039dc:	2000      	movs	r0, #0
 80039de:	e000      	b.n	80039e2 <HAL_UART_Receive+0x104>
    return HAL_BUSY;
 80039e0:	2002      	movs	r0, #2
}
 80039e2:	b003      	add	sp, #12
 80039e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80039e8:	2003      	movs	r0, #3
 80039ea:	e7fa      	b.n	80039e2 <HAL_UART_Receive+0x104>

080039ec <UART_CheckIdleState>:
{
 80039ec:	b530      	push	{r4, r5, lr}
 80039ee:	b083      	sub	sp, #12
 80039f0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80039f8:	f7fd fbb4 	bl	8001164 <HAL_GetTick>
 80039fc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	f012 0f08 	tst.w	r2, #8
 8003a06:	d10f      	bne.n	8003a28 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f013 0f04 	tst.w	r3, #4
 8003a10:	d118      	bne.n	8003a44 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8003a12:	2320      	movs	r3, #32
 8003a14:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a16:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a1e:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8003a20:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 8003a24:	b003      	add	sp, #12
 8003a26:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2200      	movs	r2, #0
 8003a32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a36:	4620      	mov	r0, r4
 8003a38:	f7ff fe89 	bl	800374e <UART_WaitOnFlagUntilTimeout>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d0e3      	beq.n	8003a08 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8003a40:	2003      	movs	r0, #3
 8003a42:	e7ef      	b.n	8003a24 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a52:	4620      	mov	r0, r4
 8003a54:	f7ff fe7b 	bl	800374e <UART_WaitOnFlagUntilTimeout>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d0da      	beq.n	8003a12 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8003a5c:	2003      	movs	r0, #3
 8003a5e:	e7e1      	b.n	8003a24 <UART_CheckIdleState+0x38>

08003a60 <HAL_UART_Init>:
  if (huart == NULL)
 8003a60:	b368      	cbz	r0, 8003abe <HAL_UART_Init+0x5e>
{
 8003a62:	b510      	push	{r4, lr}
 8003a64:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003a66:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8003a68:	b303      	cbz	r3, 8003aac <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003a6a:	2324      	movs	r3, #36	@ 0x24
 8003a6c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8003a6e:	6822      	ldr	r2, [r4, #0]
 8003a70:	6813      	ldr	r3, [r2, #0]
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7ff fc6b 	bl	8003354 <UART_SetConfig>
 8003a7e:	2801      	cmp	r0, #1
 8003a80:	d013      	beq.n	8003aaa <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a84:	b9bb      	cbnz	r3, 8003ab6 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a86:	6822      	ldr	r2, [r4, #0]
 8003a88:	6853      	ldr	r3, [r2, #4]
 8003a8a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003a8e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	6893      	ldr	r3, [r2, #8]
 8003a94:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003a98:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	6813      	ldr	r3, [r2, #0]
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7ff ffa1 	bl	80039ec <UART_CheckIdleState>
}
 8003aaa:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003aac:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8003ab0:	f7fd fa46 	bl	8000f40 <HAL_UART_MspInit>
 8003ab4:	e7d9      	b.n	8003a6a <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7ff fde4 	bl	8003684 <UART_AdvFeatureConfig>
 8003abc:	e7e3      	b.n	8003a86 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8003abe:	2001      	movs	r0, #1
}
 8003ac0:	4770      	bx	lr
	...

08003ac4 <std>:
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	4604      	mov	r4, r0
 8003aca:	e9c0 3300 	strd	r3, r3, [r0]
 8003ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ad2:	6083      	str	r3, [r0, #8]
 8003ad4:	8181      	strh	r1, [r0, #12]
 8003ad6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ad8:	81c2      	strh	r2, [r0, #14]
 8003ada:	6183      	str	r3, [r0, #24]
 8003adc:	4619      	mov	r1, r3
 8003ade:	2208      	movs	r2, #8
 8003ae0:	305c      	adds	r0, #92	@ 0x5c
 8003ae2:	f000 fab5 	bl	8004050 <memset>
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b1c <std+0x58>)
 8003ae8:	6263      	str	r3, [r4, #36]	@ 0x24
 8003aea:	4b0d      	ldr	r3, [pc, #52]	@ (8003b20 <std+0x5c>)
 8003aec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003aee:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <std+0x60>)
 8003af0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003af2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b28 <std+0x64>)
 8003af4:	6323      	str	r3, [r4, #48]	@ 0x30
 8003af6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b2c <std+0x68>)
 8003af8:	6224      	str	r4, [r4, #32]
 8003afa:	429c      	cmp	r4, r3
 8003afc:	d006      	beq.n	8003b0c <std+0x48>
 8003afe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b02:	4294      	cmp	r4, r2
 8003b04:	d002      	beq.n	8003b0c <std+0x48>
 8003b06:	33d0      	adds	r3, #208	@ 0xd0
 8003b08:	429c      	cmp	r4, r3
 8003b0a:	d105      	bne.n	8003b18 <std+0x54>
 8003b0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b14:	f000 bb0e 	b.w	8004134 <__retarget_lock_init_recursive>
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	bf00      	nop
 8003b1c:	08003ea1 	.word	0x08003ea1
 8003b20:	08003ec3 	.word	0x08003ec3
 8003b24:	08003efb 	.word	0x08003efb
 8003b28:	08003f1f 	.word	0x08003f1f
 8003b2c:	2000047c 	.word	0x2000047c

08003b30 <stdio_exit_handler>:
 8003b30:	4a02      	ldr	r2, [pc, #8]	@ (8003b3c <stdio_exit_handler+0xc>)
 8003b32:	4903      	ldr	r1, [pc, #12]	@ (8003b40 <stdio_exit_handler+0x10>)
 8003b34:	4803      	ldr	r0, [pc, #12]	@ (8003b44 <stdio_exit_handler+0x14>)
 8003b36:	f000 b869 	b.w	8003c0c <_fwalk_sglue>
 8003b3a:	bf00      	nop
 8003b3c:	20000024 	.word	0x20000024
 8003b40:	08004a01 	.word	0x08004a01
 8003b44:	20000034 	.word	0x20000034

08003b48 <cleanup_stdio>:
 8003b48:	6841      	ldr	r1, [r0, #4]
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <cleanup_stdio+0x34>)
 8003b4c:	4299      	cmp	r1, r3
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	4604      	mov	r4, r0
 8003b52:	d001      	beq.n	8003b58 <cleanup_stdio+0x10>
 8003b54:	f000 ff54 	bl	8004a00 <_fflush_r>
 8003b58:	68a1      	ldr	r1, [r4, #8]
 8003b5a:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <cleanup_stdio+0x38>)
 8003b5c:	4299      	cmp	r1, r3
 8003b5e:	d002      	beq.n	8003b66 <cleanup_stdio+0x1e>
 8003b60:	4620      	mov	r0, r4
 8003b62:	f000 ff4d 	bl	8004a00 <_fflush_r>
 8003b66:	68e1      	ldr	r1, [r4, #12]
 8003b68:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <cleanup_stdio+0x3c>)
 8003b6a:	4299      	cmp	r1, r3
 8003b6c:	d004      	beq.n	8003b78 <cleanup_stdio+0x30>
 8003b6e:	4620      	mov	r0, r4
 8003b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b74:	f000 bf44 	b.w	8004a00 <_fflush_r>
 8003b78:	bd10      	pop	{r4, pc}
 8003b7a:	bf00      	nop
 8003b7c:	2000047c 	.word	0x2000047c
 8003b80:	200004e4 	.word	0x200004e4
 8003b84:	2000054c 	.word	0x2000054c

08003b88 <global_stdio_init.part.0>:
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <global_stdio_init.part.0+0x30>)
 8003b8c:	4c0b      	ldr	r4, [pc, #44]	@ (8003bbc <global_stdio_init.part.0+0x34>)
 8003b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc0 <global_stdio_init.part.0+0x38>)
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	4620      	mov	r0, r4
 8003b94:	2200      	movs	r2, #0
 8003b96:	2104      	movs	r1, #4
 8003b98:	f7ff ff94 	bl	8003ac4 <std>
 8003b9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	2109      	movs	r1, #9
 8003ba4:	f7ff ff8e 	bl	8003ac4 <std>
 8003ba8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003bac:	2202      	movs	r2, #2
 8003bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb2:	2112      	movs	r1, #18
 8003bb4:	f7ff bf86 	b.w	8003ac4 <std>
 8003bb8:	200005b4 	.word	0x200005b4
 8003bbc:	2000047c 	.word	0x2000047c
 8003bc0:	08003b31 	.word	0x08003b31

08003bc4 <__sfp_lock_acquire>:
 8003bc4:	4801      	ldr	r0, [pc, #4]	@ (8003bcc <__sfp_lock_acquire+0x8>)
 8003bc6:	f000 bab6 	b.w	8004136 <__retarget_lock_acquire_recursive>
 8003bca:	bf00      	nop
 8003bcc:	200005bd 	.word	0x200005bd

08003bd0 <__sfp_lock_release>:
 8003bd0:	4801      	ldr	r0, [pc, #4]	@ (8003bd8 <__sfp_lock_release+0x8>)
 8003bd2:	f000 bab1 	b.w	8004138 <__retarget_lock_release_recursive>
 8003bd6:	bf00      	nop
 8003bd8:	200005bd 	.word	0x200005bd

08003bdc <__sinit>:
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	4604      	mov	r4, r0
 8003be0:	f7ff fff0 	bl	8003bc4 <__sfp_lock_acquire>
 8003be4:	6a23      	ldr	r3, [r4, #32]
 8003be6:	b11b      	cbz	r3, 8003bf0 <__sinit+0x14>
 8003be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bec:	f7ff bff0 	b.w	8003bd0 <__sfp_lock_release>
 8003bf0:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <__sinit+0x28>)
 8003bf2:	6223      	str	r3, [r4, #32]
 8003bf4:	4b04      	ldr	r3, [pc, #16]	@ (8003c08 <__sinit+0x2c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f5      	bne.n	8003be8 <__sinit+0xc>
 8003bfc:	f7ff ffc4 	bl	8003b88 <global_stdio_init.part.0>
 8003c00:	e7f2      	b.n	8003be8 <__sinit+0xc>
 8003c02:	bf00      	nop
 8003c04:	08003b49 	.word	0x08003b49
 8003c08:	200005b4 	.word	0x200005b4

08003c0c <_fwalk_sglue>:
 8003c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c10:	4607      	mov	r7, r0
 8003c12:	4688      	mov	r8, r1
 8003c14:	4614      	mov	r4, r2
 8003c16:	2600      	movs	r6, #0
 8003c18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c1c:	f1b9 0901 	subs.w	r9, r9, #1
 8003c20:	d505      	bpl.n	8003c2e <_fwalk_sglue+0x22>
 8003c22:	6824      	ldr	r4, [r4, #0]
 8003c24:	2c00      	cmp	r4, #0
 8003c26:	d1f7      	bne.n	8003c18 <_fwalk_sglue+0xc>
 8003c28:	4630      	mov	r0, r6
 8003c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c2e:	89ab      	ldrh	r3, [r5, #12]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d907      	bls.n	8003c44 <_fwalk_sglue+0x38>
 8003c34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	d003      	beq.n	8003c44 <_fwalk_sglue+0x38>
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	4638      	mov	r0, r7
 8003c40:	47c0      	blx	r8
 8003c42:	4306      	orrs	r6, r0
 8003c44:	3568      	adds	r5, #104	@ 0x68
 8003c46:	e7e9      	b.n	8003c1c <_fwalk_sglue+0x10>

08003c48 <iprintf>:
 8003c48:	b40f      	push	{r0, r1, r2, r3}
 8003c4a:	b507      	push	{r0, r1, r2, lr}
 8003c4c:	4906      	ldr	r1, [pc, #24]	@ (8003c68 <iprintf+0x20>)
 8003c4e:	ab04      	add	r3, sp, #16
 8003c50:	6808      	ldr	r0, [r1, #0]
 8003c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c56:	6881      	ldr	r1, [r0, #8]
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	f000 fba7 	bl	80043ac <_vfiprintf_r>
 8003c5e:	b003      	add	sp, #12
 8003c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c64:	b004      	add	sp, #16
 8003c66:	4770      	bx	lr
 8003c68:	20000030 	.word	0x20000030

08003c6c <_puts_r>:
 8003c6c:	6a03      	ldr	r3, [r0, #32]
 8003c6e:	b570      	push	{r4, r5, r6, lr}
 8003c70:	6884      	ldr	r4, [r0, #8]
 8003c72:	4605      	mov	r5, r0
 8003c74:	460e      	mov	r6, r1
 8003c76:	b90b      	cbnz	r3, 8003c7c <_puts_r+0x10>
 8003c78:	f7ff ffb0 	bl	8003bdc <__sinit>
 8003c7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c7e:	07db      	lsls	r3, r3, #31
 8003c80:	d405      	bmi.n	8003c8e <_puts_r+0x22>
 8003c82:	89a3      	ldrh	r3, [r4, #12]
 8003c84:	0598      	lsls	r0, r3, #22
 8003c86:	d402      	bmi.n	8003c8e <_puts_r+0x22>
 8003c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c8a:	f000 fa54 	bl	8004136 <__retarget_lock_acquire_recursive>
 8003c8e:	89a3      	ldrh	r3, [r4, #12]
 8003c90:	0719      	lsls	r1, r3, #28
 8003c92:	d502      	bpl.n	8003c9a <_puts_r+0x2e>
 8003c94:	6923      	ldr	r3, [r4, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d135      	bne.n	8003d06 <_puts_r+0x9a>
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	f000 f981 	bl	8003fa4 <__swsetup_r>
 8003ca2:	b380      	cbz	r0, 8003d06 <_puts_r+0x9a>
 8003ca4:	f04f 35ff 	mov.w	r5, #4294967295
 8003ca8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003caa:	07da      	lsls	r2, r3, #31
 8003cac:	d405      	bmi.n	8003cba <_puts_r+0x4e>
 8003cae:	89a3      	ldrh	r3, [r4, #12]
 8003cb0:	059b      	lsls	r3, r3, #22
 8003cb2:	d402      	bmi.n	8003cba <_puts_r+0x4e>
 8003cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cb6:	f000 fa3f 	bl	8004138 <__retarget_lock_release_recursive>
 8003cba:	4628      	mov	r0, r5
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da04      	bge.n	8003ccc <_puts_r+0x60>
 8003cc2:	69a2      	ldr	r2, [r4, #24]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	dc17      	bgt.n	8003cf8 <_puts_r+0x8c>
 8003cc8:	290a      	cmp	r1, #10
 8003cca:	d015      	beq.n	8003cf8 <_puts_r+0x8c>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	6022      	str	r2, [r4, #0]
 8003cd2:	7019      	strb	r1, [r3, #0]
 8003cd4:	68a3      	ldr	r3, [r4, #8]
 8003cd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	60a3      	str	r3, [r4, #8]
 8003cde:	2900      	cmp	r1, #0
 8003ce0:	d1ed      	bne.n	8003cbe <_puts_r+0x52>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da11      	bge.n	8003d0a <_puts_r+0x9e>
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	210a      	movs	r1, #10
 8003cea:	4628      	mov	r0, r5
 8003cec:	f000 f91b 	bl	8003f26 <__swbuf_r>
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d0d7      	beq.n	8003ca4 <_puts_r+0x38>
 8003cf4:	250a      	movs	r5, #10
 8003cf6:	e7d7      	b.n	8003ca8 <_puts_r+0x3c>
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f000 f913 	bl	8003f26 <__swbuf_r>
 8003d00:	3001      	adds	r0, #1
 8003d02:	d1e7      	bne.n	8003cd4 <_puts_r+0x68>
 8003d04:	e7ce      	b.n	8003ca4 <_puts_r+0x38>
 8003d06:	3e01      	subs	r6, #1
 8003d08:	e7e4      	b.n	8003cd4 <_puts_r+0x68>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	6022      	str	r2, [r4, #0]
 8003d10:	220a      	movs	r2, #10
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	e7ee      	b.n	8003cf4 <_puts_r+0x88>
	...

08003d18 <puts>:
 8003d18:	4b02      	ldr	r3, [pc, #8]	@ (8003d24 <puts+0xc>)
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	f7ff bfa5 	b.w	8003c6c <_puts_r>
 8003d22:	bf00      	nop
 8003d24:	20000030 	.word	0x20000030

08003d28 <setbuf>:
 8003d28:	fab1 f281 	clz	r2, r1
 8003d2c:	0952      	lsrs	r2, r2, #5
 8003d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d32:	0052      	lsls	r2, r2, #1
 8003d34:	f000 b800 	b.w	8003d38 <setvbuf>

08003d38 <setvbuf>:
 8003d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d3c:	461d      	mov	r5, r3
 8003d3e:	4b57      	ldr	r3, [pc, #348]	@ (8003e9c <setvbuf+0x164>)
 8003d40:	681f      	ldr	r7, [r3, #0]
 8003d42:	4604      	mov	r4, r0
 8003d44:	460e      	mov	r6, r1
 8003d46:	4690      	mov	r8, r2
 8003d48:	b127      	cbz	r7, 8003d54 <setvbuf+0x1c>
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	b913      	cbnz	r3, 8003d54 <setvbuf+0x1c>
 8003d4e:	4638      	mov	r0, r7
 8003d50:	f7ff ff44 	bl	8003bdc <__sinit>
 8003d54:	f1b8 0f02 	cmp.w	r8, #2
 8003d58:	d006      	beq.n	8003d68 <setvbuf+0x30>
 8003d5a:	f1b8 0f01 	cmp.w	r8, #1
 8003d5e:	f200 809a 	bhi.w	8003e96 <setvbuf+0x15e>
 8003d62:	2d00      	cmp	r5, #0
 8003d64:	f2c0 8097 	blt.w	8003e96 <setvbuf+0x15e>
 8003d68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d6a:	07d9      	lsls	r1, r3, #31
 8003d6c:	d405      	bmi.n	8003d7a <setvbuf+0x42>
 8003d6e:	89a3      	ldrh	r3, [r4, #12]
 8003d70:	059a      	lsls	r2, r3, #22
 8003d72:	d402      	bmi.n	8003d7a <setvbuf+0x42>
 8003d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d76:	f000 f9de 	bl	8004136 <__retarget_lock_acquire_recursive>
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	f000 fe3f 	bl	8004a00 <_fflush_r>
 8003d82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d84:	b141      	cbz	r1, 8003d98 <setvbuf+0x60>
 8003d86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d8a:	4299      	cmp	r1, r3
 8003d8c:	d002      	beq.n	8003d94 <setvbuf+0x5c>
 8003d8e:	4638      	mov	r0, r7
 8003d90:	f000 f9e2 	bl	8004158 <_free_r>
 8003d94:	2300      	movs	r3, #0
 8003d96:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61a3      	str	r3, [r4, #24]
 8003d9c:	6063      	str	r3, [r4, #4]
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	d503      	bpl.n	8003dac <setvbuf+0x74>
 8003da4:	6921      	ldr	r1, [r4, #16]
 8003da6:	4638      	mov	r0, r7
 8003da8:	f000 f9d6 	bl	8004158 <_free_r>
 8003dac:	89a3      	ldrh	r3, [r4, #12]
 8003dae:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003db2:	f023 0303 	bic.w	r3, r3, #3
 8003db6:	f1b8 0f02 	cmp.w	r8, #2
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	d061      	beq.n	8003e82 <setvbuf+0x14a>
 8003dbe:	ab01      	add	r3, sp, #4
 8003dc0:	466a      	mov	r2, sp
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	4638      	mov	r0, r7
 8003dc6:	f000 fe43 	bl	8004a50 <__swhatbuf_r>
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	4318      	orrs	r0, r3
 8003dce:	81a0      	strh	r0, [r4, #12]
 8003dd0:	bb2d      	cbnz	r5, 8003e1e <setvbuf+0xe6>
 8003dd2:	9d00      	ldr	r5, [sp, #0]
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	f000 fa09 	bl	80041ec <malloc>
 8003dda:	4606      	mov	r6, r0
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d152      	bne.n	8003e86 <setvbuf+0x14e>
 8003de0:	f8dd 9000 	ldr.w	r9, [sp]
 8003de4:	45a9      	cmp	r9, r5
 8003de6:	d140      	bne.n	8003e6a <setvbuf+0x132>
 8003de8:	f04f 35ff 	mov.w	r5, #4294967295
 8003dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003df0:	f043 0202 	orr.w	r2, r3, #2
 8003df4:	81a2      	strh	r2, [r4, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	60a2      	str	r2, [r4, #8]
 8003dfa:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8003dfe:	6022      	str	r2, [r4, #0]
 8003e00:	6122      	str	r2, [r4, #16]
 8003e02:	2201      	movs	r2, #1
 8003e04:	6162      	str	r2, [r4, #20]
 8003e06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003e08:	07d6      	lsls	r6, r2, #31
 8003e0a:	d404      	bmi.n	8003e16 <setvbuf+0xde>
 8003e0c:	0598      	lsls	r0, r3, #22
 8003e0e:	d402      	bmi.n	8003e16 <setvbuf+0xde>
 8003e10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e12:	f000 f991 	bl	8004138 <__retarget_lock_release_recursive>
 8003e16:	4628      	mov	r0, r5
 8003e18:	b003      	add	sp, #12
 8003e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e1e:	2e00      	cmp	r6, #0
 8003e20:	d0d8      	beq.n	8003dd4 <setvbuf+0x9c>
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	b913      	cbnz	r3, 8003e2c <setvbuf+0xf4>
 8003e26:	4638      	mov	r0, r7
 8003e28:	f7ff fed8 	bl	8003bdc <__sinit>
 8003e2c:	f1b8 0f01 	cmp.w	r8, #1
 8003e30:	bf08      	it	eq
 8003e32:	89a3      	ldrheq	r3, [r4, #12]
 8003e34:	6026      	str	r6, [r4, #0]
 8003e36:	bf04      	itt	eq
 8003e38:	f043 0301 	orreq.w	r3, r3, #1
 8003e3c:	81a3      	strheq	r3, [r4, #12]
 8003e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e42:	f013 0208 	ands.w	r2, r3, #8
 8003e46:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003e4a:	d01e      	beq.n	8003e8a <setvbuf+0x152>
 8003e4c:	07d9      	lsls	r1, r3, #31
 8003e4e:	bf41      	itttt	mi
 8003e50:	2200      	movmi	r2, #0
 8003e52:	426d      	negmi	r5, r5
 8003e54:	60a2      	strmi	r2, [r4, #8]
 8003e56:	61a5      	strmi	r5, [r4, #24]
 8003e58:	bf58      	it	pl
 8003e5a:	60a5      	strpl	r5, [r4, #8]
 8003e5c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003e5e:	07d2      	lsls	r2, r2, #31
 8003e60:	d401      	bmi.n	8003e66 <setvbuf+0x12e>
 8003e62:	059b      	lsls	r3, r3, #22
 8003e64:	d513      	bpl.n	8003e8e <setvbuf+0x156>
 8003e66:	2500      	movs	r5, #0
 8003e68:	e7d5      	b.n	8003e16 <setvbuf+0xde>
 8003e6a:	4648      	mov	r0, r9
 8003e6c:	f000 f9be 	bl	80041ec <malloc>
 8003e70:	4606      	mov	r6, r0
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d0b8      	beq.n	8003de8 <setvbuf+0xb0>
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e7c:	81a3      	strh	r3, [r4, #12]
 8003e7e:	464d      	mov	r5, r9
 8003e80:	e7cf      	b.n	8003e22 <setvbuf+0xea>
 8003e82:	2500      	movs	r5, #0
 8003e84:	e7b2      	b.n	8003dec <setvbuf+0xb4>
 8003e86:	46a9      	mov	r9, r5
 8003e88:	e7f5      	b.n	8003e76 <setvbuf+0x13e>
 8003e8a:	60a2      	str	r2, [r4, #8]
 8003e8c:	e7e6      	b.n	8003e5c <setvbuf+0x124>
 8003e8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e90:	f000 f952 	bl	8004138 <__retarget_lock_release_recursive>
 8003e94:	e7e7      	b.n	8003e66 <setvbuf+0x12e>
 8003e96:	f04f 35ff 	mov.w	r5, #4294967295
 8003e9a:	e7bc      	b.n	8003e16 <setvbuf+0xde>
 8003e9c:	20000030 	.word	0x20000030

08003ea0 <__sread>:
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea8:	f000 f8fc 	bl	80040a4 <_read_r>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	bfab      	itete	ge
 8003eb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8003eb4:	181b      	addge	r3, r3, r0
 8003eb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003eba:	bfac      	ite	ge
 8003ebc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ebe:	81a3      	strhlt	r3, [r4, #12]
 8003ec0:	bd10      	pop	{r4, pc}

08003ec2 <__swrite>:
 8003ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec6:	461f      	mov	r7, r3
 8003ec8:	898b      	ldrh	r3, [r1, #12]
 8003eca:	05db      	lsls	r3, r3, #23
 8003ecc:	4605      	mov	r5, r0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	4616      	mov	r6, r2
 8003ed2:	d505      	bpl.n	8003ee0 <__swrite+0x1e>
 8003ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed8:	2302      	movs	r3, #2
 8003eda:	2200      	movs	r2, #0
 8003edc:	f000 f8d0 	bl	8004080 <_lseek_r>
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ee6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003eea:	81a3      	strh	r3, [r4, #12]
 8003eec:	4632      	mov	r2, r6
 8003eee:	463b      	mov	r3, r7
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef6:	f000 b8e7 	b.w	80040c8 <_write_r>

08003efa <__sseek>:
 8003efa:	b510      	push	{r4, lr}
 8003efc:	460c      	mov	r4, r1
 8003efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f02:	f000 f8bd 	bl	8004080 <_lseek_r>
 8003f06:	1c43      	adds	r3, r0, #1
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	bf15      	itete	ne
 8003f0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f16:	81a3      	strheq	r3, [r4, #12]
 8003f18:	bf18      	it	ne
 8003f1a:	81a3      	strhne	r3, [r4, #12]
 8003f1c:	bd10      	pop	{r4, pc}

08003f1e <__sclose>:
 8003f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f22:	f000 b89d 	b.w	8004060 <_close_r>

08003f26 <__swbuf_r>:
 8003f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f28:	460e      	mov	r6, r1
 8003f2a:	4614      	mov	r4, r2
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	b118      	cbz	r0, 8003f38 <__swbuf_r+0x12>
 8003f30:	6a03      	ldr	r3, [r0, #32]
 8003f32:	b90b      	cbnz	r3, 8003f38 <__swbuf_r+0x12>
 8003f34:	f7ff fe52 	bl	8003bdc <__sinit>
 8003f38:	69a3      	ldr	r3, [r4, #24]
 8003f3a:	60a3      	str	r3, [r4, #8]
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	071a      	lsls	r2, r3, #28
 8003f40:	d501      	bpl.n	8003f46 <__swbuf_r+0x20>
 8003f42:	6923      	ldr	r3, [r4, #16]
 8003f44:	b943      	cbnz	r3, 8003f58 <__swbuf_r+0x32>
 8003f46:	4621      	mov	r1, r4
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f000 f82b 	bl	8003fa4 <__swsetup_r>
 8003f4e:	b118      	cbz	r0, 8003f58 <__swbuf_r+0x32>
 8003f50:	f04f 37ff 	mov.w	r7, #4294967295
 8003f54:	4638      	mov	r0, r7
 8003f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	6922      	ldr	r2, [r4, #16]
 8003f5c:	1a98      	subs	r0, r3, r2
 8003f5e:	6963      	ldr	r3, [r4, #20]
 8003f60:	b2f6      	uxtb	r6, r6
 8003f62:	4283      	cmp	r3, r0
 8003f64:	4637      	mov	r7, r6
 8003f66:	dc05      	bgt.n	8003f74 <__swbuf_r+0x4e>
 8003f68:	4621      	mov	r1, r4
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 fd48 	bl	8004a00 <_fflush_r>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d1ed      	bne.n	8003f50 <__swbuf_r+0x2a>
 8003f74:	68a3      	ldr	r3, [r4, #8]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	60a3      	str	r3, [r4, #8]
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	6022      	str	r2, [r4, #0]
 8003f80:	701e      	strb	r6, [r3, #0]
 8003f82:	6962      	ldr	r2, [r4, #20]
 8003f84:	1c43      	adds	r3, r0, #1
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d004      	beq.n	8003f94 <__swbuf_r+0x6e>
 8003f8a:	89a3      	ldrh	r3, [r4, #12]
 8003f8c:	07db      	lsls	r3, r3, #31
 8003f8e:	d5e1      	bpl.n	8003f54 <__swbuf_r+0x2e>
 8003f90:	2e0a      	cmp	r6, #10
 8003f92:	d1df      	bne.n	8003f54 <__swbuf_r+0x2e>
 8003f94:	4621      	mov	r1, r4
 8003f96:	4628      	mov	r0, r5
 8003f98:	f000 fd32 	bl	8004a00 <_fflush_r>
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d0d9      	beq.n	8003f54 <__swbuf_r+0x2e>
 8003fa0:	e7d6      	b.n	8003f50 <__swbuf_r+0x2a>
	...

08003fa4 <__swsetup_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4b29      	ldr	r3, [pc, #164]	@ (800404c <__swsetup_r+0xa8>)
 8003fa8:	4605      	mov	r5, r0
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	460c      	mov	r4, r1
 8003fae:	b118      	cbz	r0, 8003fb8 <__swsetup_r+0x14>
 8003fb0:	6a03      	ldr	r3, [r0, #32]
 8003fb2:	b90b      	cbnz	r3, 8003fb8 <__swsetup_r+0x14>
 8003fb4:	f7ff fe12 	bl	8003bdc <__sinit>
 8003fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fbc:	0719      	lsls	r1, r3, #28
 8003fbe:	d422      	bmi.n	8004006 <__swsetup_r+0x62>
 8003fc0:	06da      	lsls	r2, r3, #27
 8003fc2:	d407      	bmi.n	8003fd4 <__swsetup_r+0x30>
 8003fc4:	2209      	movs	r2, #9
 8003fc6:	602a      	str	r2, [r5, #0]
 8003fc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fcc:	81a3      	strh	r3, [r4, #12]
 8003fce:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd2:	e033      	b.n	800403c <__swsetup_r+0x98>
 8003fd4:	0758      	lsls	r0, r3, #29
 8003fd6:	d512      	bpl.n	8003ffe <__swsetup_r+0x5a>
 8003fd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fda:	b141      	cbz	r1, 8003fee <__swsetup_r+0x4a>
 8003fdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fe0:	4299      	cmp	r1, r3
 8003fe2:	d002      	beq.n	8003fea <__swsetup_r+0x46>
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f000 f8b7 	bl	8004158 <_free_r>
 8003fea:	2300      	movs	r3, #0
 8003fec:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fee:	89a3      	ldrh	r3, [r4, #12]
 8003ff0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ff4:	81a3      	strh	r3, [r4, #12]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	6063      	str	r3, [r4, #4]
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	f043 0308 	orr.w	r3, r3, #8
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	6923      	ldr	r3, [r4, #16]
 8004008:	b94b      	cbnz	r3, 800401e <__swsetup_r+0x7a>
 800400a:	89a3      	ldrh	r3, [r4, #12]
 800400c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004014:	d003      	beq.n	800401e <__swsetup_r+0x7a>
 8004016:	4621      	mov	r1, r4
 8004018:	4628      	mov	r0, r5
 800401a:	f000 fd3f 	bl	8004a9c <__smakebuf_r>
 800401e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004022:	f013 0201 	ands.w	r2, r3, #1
 8004026:	d00a      	beq.n	800403e <__swsetup_r+0x9a>
 8004028:	2200      	movs	r2, #0
 800402a:	60a2      	str	r2, [r4, #8]
 800402c:	6962      	ldr	r2, [r4, #20]
 800402e:	4252      	negs	r2, r2
 8004030:	61a2      	str	r2, [r4, #24]
 8004032:	6922      	ldr	r2, [r4, #16]
 8004034:	b942      	cbnz	r2, 8004048 <__swsetup_r+0xa4>
 8004036:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800403a:	d1c5      	bne.n	8003fc8 <__swsetup_r+0x24>
 800403c:	bd38      	pop	{r3, r4, r5, pc}
 800403e:	0799      	lsls	r1, r3, #30
 8004040:	bf58      	it	pl
 8004042:	6962      	ldrpl	r2, [r4, #20]
 8004044:	60a2      	str	r2, [r4, #8]
 8004046:	e7f4      	b.n	8004032 <__swsetup_r+0x8e>
 8004048:	2000      	movs	r0, #0
 800404a:	e7f7      	b.n	800403c <__swsetup_r+0x98>
 800404c:	20000030 	.word	0x20000030

08004050 <memset>:
 8004050:	4402      	add	r2, r0
 8004052:	4603      	mov	r3, r0
 8004054:	4293      	cmp	r3, r2
 8004056:	d100      	bne.n	800405a <memset+0xa>
 8004058:	4770      	bx	lr
 800405a:	f803 1b01 	strb.w	r1, [r3], #1
 800405e:	e7f9      	b.n	8004054 <memset+0x4>

08004060 <_close_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	4d06      	ldr	r5, [pc, #24]	@ (800407c <_close_r+0x1c>)
 8004064:	2300      	movs	r3, #0
 8004066:	4604      	mov	r4, r0
 8004068:	4608      	mov	r0, r1
 800406a:	602b      	str	r3, [r5, #0]
 800406c:	f7fc fffa 	bl	8001064 <_close>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d102      	bne.n	800407a <_close_r+0x1a>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	b103      	cbz	r3, 800407a <_close_r+0x1a>
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	200005b8 	.word	0x200005b8

08004080 <_lseek_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4d07      	ldr	r5, [pc, #28]	@ (80040a0 <_lseek_r+0x20>)
 8004084:	4604      	mov	r4, r0
 8004086:	4608      	mov	r0, r1
 8004088:	4611      	mov	r1, r2
 800408a:	2200      	movs	r2, #0
 800408c:	602a      	str	r2, [r5, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	f7fc ffe9 	bl	8001066 <_lseek>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_lseek_r+0x1e>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	b103      	cbz	r3, 800409e <_lseek_r+0x1e>
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	200005b8 	.word	0x200005b8

080040a4 <_read_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4d07      	ldr	r5, [pc, #28]	@ (80040c4 <_read_r+0x20>)
 80040a8:	4604      	mov	r4, r0
 80040aa:	4608      	mov	r0, r1
 80040ac:	4611      	mov	r1, r2
 80040ae:	2200      	movs	r2, #0
 80040b0:	602a      	str	r2, [r5, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f7fc ffc8 	bl	8001048 <_read>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_read_r+0x1e>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_read_r+0x1e>
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	200005b8 	.word	0x200005b8

080040c8 <_write_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4d07      	ldr	r5, [pc, #28]	@ (80040e8 <_write_r+0x20>)
 80040cc:	4604      	mov	r4, r0
 80040ce:	4608      	mov	r0, r1
 80040d0:	4611      	mov	r1, r2
 80040d2:	2200      	movs	r2, #0
 80040d4:	602a      	str	r2, [r5, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f7fc ffaa 	bl	8001030 <_write>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_write_r+0x1e>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_write_r+0x1e>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	200005b8 	.word	0x200005b8

080040ec <__libc_init_array>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004124 <__libc_init_array+0x38>)
 80040f0:	4c0d      	ldr	r4, [pc, #52]	@ (8004128 <__libc_init_array+0x3c>)
 80040f2:	1b64      	subs	r4, r4, r5
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	2600      	movs	r6, #0
 80040f8:	42a6      	cmp	r6, r4
 80040fa:	d109      	bne.n	8004110 <__libc_init_array+0x24>
 80040fc:	4d0b      	ldr	r5, [pc, #44]	@ (800412c <__libc_init_array+0x40>)
 80040fe:	4c0c      	ldr	r4, [pc, #48]	@ (8004130 <__libc_init_array+0x44>)
 8004100:	f000 fd48 	bl	8004b94 <_init>
 8004104:	1b64      	subs	r4, r4, r5
 8004106:	10a4      	asrs	r4, r4, #2
 8004108:	2600      	movs	r6, #0
 800410a:	42a6      	cmp	r6, r4
 800410c:	d105      	bne.n	800411a <__libc_init_array+0x2e>
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f855 3b04 	ldr.w	r3, [r5], #4
 8004114:	4798      	blx	r3
 8004116:	3601      	adds	r6, #1
 8004118:	e7ee      	b.n	80040f8 <__libc_init_array+0xc>
 800411a:	f855 3b04 	ldr.w	r3, [r5], #4
 800411e:	4798      	blx	r3
 8004120:	3601      	adds	r6, #1
 8004122:	e7f2      	b.n	800410a <__libc_init_array+0x1e>
 8004124:	08004c40 	.word	0x08004c40
 8004128:	08004c40 	.word	0x08004c40
 800412c:	08004c40 	.word	0x08004c40
 8004130:	08004c44 	.word	0x08004c44

08004134 <__retarget_lock_init_recursive>:
 8004134:	4770      	bx	lr

08004136 <__retarget_lock_acquire_recursive>:
 8004136:	4770      	bx	lr

08004138 <__retarget_lock_release_recursive>:
 8004138:	4770      	bx	lr

0800413a <memcpy>:
 800413a:	440a      	add	r2, r1
 800413c:	4291      	cmp	r1, r2
 800413e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004142:	d100      	bne.n	8004146 <memcpy+0xc>
 8004144:	4770      	bx	lr
 8004146:	b510      	push	{r4, lr}
 8004148:	f811 4b01 	ldrb.w	r4, [r1], #1
 800414c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004150:	4291      	cmp	r1, r2
 8004152:	d1f9      	bne.n	8004148 <memcpy+0xe>
 8004154:	bd10      	pop	{r4, pc}
	...

08004158 <_free_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	4605      	mov	r5, r0
 800415c:	2900      	cmp	r1, #0
 800415e:	d041      	beq.n	80041e4 <_free_r+0x8c>
 8004160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004164:	1f0c      	subs	r4, r1, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	bfb8      	it	lt
 800416a:	18e4      	addlt	r4, r4, r3
 800416c:	f000 f8e8 	bl	8004340 <__malloc_lock>
 8004170:	4a1d      	ldr	r2, [pc, #116]	@ (80041e8 <_free_r+0x90>)
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	b933      	cbnz	r3, 8004184 <_free_r+0x2c>
 8004176:	6063      	str	r3, [r4, #4]
 8004178:	6014      	str	r4, [r2, #0]
 800417a:	4628      	mov	r0, r5
 800417c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004180:	f000 b8e4 	b.w	800434c <__malloc_unlock>
 8004184:	42a3      	cmp	r3, r4
 8004186:	d908      	bls.n	800419a <_free_r+0x42>
 8004188:	6820      	ldr	r0, [r4, #0]
 800418a:	1821      	adds	r1, r4, r0
 800418c:	428b      	cmp	r3, r1
 800418e:	bf01      	itttt	eq
 8004190:	6819      	ldreq	r1, [r3, #0]
 8004192:	685b      	ldreq	r3, [r3, #4]
 8004194:	1809      	addeq	r1, r1, r0
 8004196:	6021      	streq	r1, [r4, #0]
 8004198:	e7ed      	b.n	8004176 <_free_r+0x1e>
 800419a:	461a      	mov	r2, r3
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b10b      	cbz	r3, 80041a4 <_free_r+0x4c>
 80041a0:	42a3      	cmp	r3, r4
 80041a2:	d9fa      	bls.n	800419a <_free_r+0x42>
 80041a4:	6811      	ldr	r1, [r2, #0]
 80041a6:	1850      	adds	r0, r2, r1
 80041a8:	42a0      	cmp	r0, r4
 80041aa:	d10b      	bne.n	80041c4 <_free_r+0x6c>
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	4401      	add	r1, r0
 80041b0:	1850      	adds	r0, r2, r1
 80041b2:	4283      	cmp	r3, r0
 80041b4:	6011      	str	r1, [r2, #0]
 80041b6:	d1e0      	bne.n	800417a <_free_r+0x22>
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	6053      	str	r3, [r2, #4]
 80041be:	4408      	add	r0, r1
 80041c0:	6010      	str	r0, [r2, #0]
 80041c2:	e7da      	b.n	800417a <_free_r+0x22>
 80041c4:	d902      	bls.n	80041cc <_free_r+0x74>
 80041c6:	230c      	movs	r3, #12
 80041c8:	602b      	str	r3, [r5, #0]
 80041ca:	e7d6      	b.n	800417a <_free_r+0x22>
 80041cc:	6820      	ldr	r0, [r4, #0]
 80041ce:	1821      	adds	r1, r4, r0
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf04      	itt	eq
 80041d4:	6819      	ldreq	r1, [r3, #0]
 80041d6:	685b      	ldreq	r3, [r3, #4]
 80041d8:	6063      	str	r3, [r4, #4]
 80041da:	bf04      	itt	eq
 80041dc:	1809      	addeq	r1, r1, r0
 80041de:	6021      	streq	r1, [r4, #0]
 80041e0:	6054      	str	r4, [r2, #4]
 80041e2:	e7ca      	b.n	800417a <_free_r+0x22>
 80041e4:	bd38      	pop	{r3, r4, r5, pc}
 80041e6:	bf00      	nop
 80041e8:	200005c4 	.word	0x200005c4

080041ec <malloc>:
 80041ec:	4b02      	ldr	r3, [pc, #8]	@ (80041f8 <malloc+0xc>)
 80041ee:	4601      	mov	r1, r0
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f000 b825 	b.w	8004240 <_malloc_r>
 80041f6:	bf00      	nop
 80041f8:	20000030 	.word	0x20000030

080041fc <sbrk_aligned>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	4e0f      	ldr	r6, [pc, #60]	@ (800423c <sbrk_aligned+0x40>)
 8004200:	460c      	mov	r4, r1
 8004202:	6831      	ldr	r1, [r6, #0]
 8004204:	4605      	mov	r5, r0
 8004206:	b911      	cbnz	r1, 800420e <sbrk_aligned+0x12>
 8004208:	f000 fca6 	bl	8004b58 <_sbrk_r>
 800420c:	6030      	str	r0, [r6, #0]
 800420e:	4621      	mov	r1, r4
 8004210:	4628      	mov	r0, r5
 8004212:	f000 fca1 	bl	8004b58 <_sbrk_r>
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	d103      	bne.n	8004222 <sbrk_aligned+0x26>
 800421a:	f04f 34ff 	mov.w	r4, #4294967295
 800421e:	4620      	mov	r0, r4
 8004220:	bd70      	pop	{r4, r5, r6, pc}
 8004222:	1cc4      	adds	r4, r0, #3
 8004224:	f024 0403 	bic.w	r4, r4, #3
 8004228:	42a0      	cmp	r0, r4
 800422a:	d0f8      	beq.n	800421e <sbrk_aligned+0x22>
 800422c:	1a21      	subs	r1, r4, r0
 800422e:	4628      	mov	r0, r5
 8004230:	f000 fc92 	bl	8004b58 <_sbrk_r>
 8004234:	3001      	adds	r0, #1
 8004236:	d1f2      	bne.n	800421e <sbrk_aligned+0x22>
 8004238:	e7ef      	b.n	800421a <sbrk_aligned+0x1e>
 800423a:	bf00      	nop
 800423c:	200005c0 	.word	0x200005c0

08004240 <_malloc_r>:
 8004240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004244:	1ccd      	adds	r5, r1, #3
 8004246:	f025 0503 	bic.w	r5, r5, #3
 800424a:	3508      	adds	r5, #8
 800424c:	2d0c      	cmp	r5, #12
 800424e:	bf38      	it	cc
 8004250:	250c      	movcc	r5, #12
 8004252:	2d00      	cmp	r5, #0
 8004254:	4606      	mov	r6, r0
 8004256:	db01      	blt.n	800425c <_malloc_r+0x1c>
 8004258:	42a9      	cmp	r1, r5
 800425a:	d904      	bls.n	8004266 <_malloc_r+0x26>
 800425c:	230c      	movs	r3, #12
 800425e:	6033      	str	r3, [r6, #0]
 8004260:	2000      	movs	r0, #0
 8004262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004266:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800433c <_malloc_r+0xfc>
 800426a:	f000 f869 	bl	8004340 <__malloc_lock>
 800426e:	f8d8 3000 	ldr.w	r3, [r8]
 8004272:	461c      	mov	r4, r3
 8004274:	bb44      	cbnz	r4, 80042c8 <_malloc_r+0x88>
 8004276:	4629      	mov	r1, r5
 8004278:	4630      	mov	r0, r6
 800427a:	f7ff ffbf 	bl	80041fc <sbrk_aligned>
 800427e:	1c43      	adds	r3, r0, #1
 8004280:	4604      	mov	r4, r0
 8004282:	d158      	bne.n	8004336 <_malloc_r+0xf6>
 8004284:	f8d8 4000 	ldr.w	r4, [r8]
 8004288:	4627      	mov	r7, r4
 800428a:	2f00      	cmp	r7, #0
 800428c:	d143      	bne.n	8004316 <_malloc_r+0xd6>
 800428e:	2c00      	cmp	r4, #0
 8004290:	d04b      	beq.n	800432a <_malloc_r+0xea>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	4639      	mov	r1, r7
 8004296:	4630      	mov	r0, r6
 8004298:	eb04 0903 	add.w	r9, r4, r3
 800429c:	f000 fc5c 	bl	8004b58 <_sbrk_r>
 80042a0:	4581      	cmp	r9, r0
 80042a2:	d142      	bne.n	800432a <_malloc_r+0xea>
 80042a4:	6821      	ldr	r1, [r4, #0]
 80042a6:	1a6d      	subs	r5, r5, r1
 80042a8:	4629      	mov	r1, r5
 80042aa:	4630      	mov	r0, r6
 80042ac:	f7ff ffa6 	bl	80041fc <sbrk_aligned>
 80042b0:	3001      	adds	r0, #1
 80042b2:	d03a      	beq.n	800432a <_malloc_r+0xea>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	442b      	add	r3, r5
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	f8d8 3000 	ldr.w	r3, [r8]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	bb62      	cbnz	r2, 800431c <_malloc_r+0xdc>
 80042c2:	f8c8 7000 	str.w	r7, [r8]
 80042c6:	e00f      	b.n	80042e8 <_malloc_r+0xa8>
 80042c8:	6822      	ldr	r2, [r4, #0]
 80042ca:	1b52      	subs	r2, r2, r5
 80042cc:	d420      	bmi.n	8004310 <_malloc_r+0xd0>
 80042ce:	2a0b      	cmp	r2, #11
 80042d0:	d917      	bls.n	8004302 <_malloc_r+0xc2>
 80042d2:	1961      	adds	r1, r4, r5
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	6025      	str	r5, [r4, #0]
 80042d8:	bf18      	it	ne
 80042da:	6059      	strne	r1, [r3, #4]
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	bf08      	it	eq
 80042e0:	f8c8 1000 	streq.w	r1, [r8]
 80042e4:	5162      	str	r2, [r4, r5]
 80042e6:	604b      	str	r3, [r1, #4]
 80042e8:	4630      	mov	r0, r6
 80042ea:	f000 f82f 	bl	800434c <__malloc_unlock>
 80042ee:	f104 000b 	add.w	r0, r4, #11
 80042f2:	1d23      	adds	r3, r4, #4
 80042f4:	f020 0007 	bic.w	r0, r0, #7
 80042f8:	1ac2      	subs	r2, r0, r3
 80042fa:	bf1c      	itt	ne
 80042fc:	1a1b      	subne	r3, r3, r0
 80042fe:	50a3      	strne	r3, [r4, r2]
 8004300:	e7af      	b.n	8004262 <_malloc_r+0x22>
 8004302:	6862      	ldr	r2, [r4, #4]
 8004304:	42a3      	cmp	r3, r4
 8004306:	bf0c      	ite	eq
 8004308:	f8c8 2000 	streq.w	r2, [r8]
 800430c:	605a      	strne	r2, [r3, #4]
 800430e:	e7eb      	b.n	80042e8 <_malloc_r+0xa8>
 8004310:	4623      	mov	r3, r4
 8004312:	6864      	ldr	r4, [r4, #4]
 8004314:	e7ae      	b.n	8004274 <_malloc_r+0x34>
 8004316:	463c      	mov	r4, r7
 8004318:	687f      	ldr	r7, [r7, #4]
 800431a:	e7b6      	b.n	800428a <_malloc_r+0x4a>
 800431c:	461a      	mov	r2, r3
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	42a3      	cmp	r3, r4
 8004322:	d1fb      	bne.n	800431c <_malloc_r+0xdc>
 8004324:	2300      	movs	r3, #0
 8004326:	6053      	str	r3, [r2, #4]
 8004328:	e7de      	b.n	80042e8 <_malloc_r+0xa8>
 800432a:	230c      	movs	r3, #12
 800432c:	6033      	str	r3, [r6, #0]
 800432e:	4630      	mov	r0, r6
 8004330:	f000 f80c 	bl	800434c <__malloc_unlock>
 8004334:	e794      	b.n	8004260 <_malloc_r+0x20>
 8004336:	6005      	str	r5, [r0, #0]
 8004338:	e7d6      	b.n	80042e8 <_malloc_r+0xa8>
 800433a:	bf00      	nop
 800433c:	200005c4 	.word	0x200005c4

08004340 <__malloc_lock>:
 8004340:	4801      	ldr	r0, [pc, #4]	@ (8004348 <__malloc_lock+0x8>)
 8004342:	f7ff bef8 	b.w	8004136 <__retarget_lock_acquire_recursive>
 8004346:	bf00      	nop
 8004348:	200005bc 	.word	0x200005bc

0800434c <__malloc_unlock>:
 800434c:	4801      	ldr	r0, [pc, #4]	@ (8004354 <__malloc_unlock+0x8>)
 800434e:	f7ff bef3 	b.w	8004138 <__retarget_lock_release_recursive>
 8004352:	bf00      	nop
 8004354:	200005bc 	.word	0x200005bc

08004358 <__sfputc_r>:
 8004358:	6893      	ldr	r3, [r2, #8]
 800435a:	3b01      	subs	r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	b410      	push	{r4}
 8004360:	6093      	str	r3, [r2, #8]
 8004362:	da08      	bge.n	8004376 <__sfputc_r+0x1e>
 8004364:	6994      	ldr	r4, [r2, #24]
 8004366:	42a3      	cmp	r3, r4
 8004368:	db01      	blt.n	800436e <__sfputc_r+0x16>
 800436a:	290a      	cmp	r1, #10
 800436c:	d103      	bne.n	8004376 <__sfputc_r+0x1e>
 800436e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004372:	f7ff bdd8 	b.w	8003f26 <__swbuf_r>
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	1c58      	adds	r0, r3, #1
 800437a:	6010      	str	r0, [r2, #0]
 800437c:	7019      	strb	r1, [r3, #0]
 800437e:	4608      	mov	r0, r1
 8004380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004384:	4770      	bx	lr

08004386 <__sfputs_r>:
 8004386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004388:	4606      	mov	r6, r0
 800438a:	460f      	mov	r7, r1
 800438c:	4614      	mov	r4, r2
 800438e:	18d5      	adds	r5, r2, r3
 8004390:	42ac      	cmp	r4, r5
 8004392:	d101      	bne.n	8004398 <__sfputs_r+0x12>
 8004394:	2000      	movs	r0, #0
 8004396:	e007      	b.n	80043a8 <__sfputs_r+0x22>
 8004398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800439c:	463a      	mov	r2, r7
 800439e:	4630      	mov	r0, r6
 80043a0:	f7ff ffda 	bl	8004358 <__sfputc_r>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d1f3      	bne.n	8004390 <__sfputs_r+0xa>
 80043a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043ac <_vfiprintf_r>:
 80043ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b0:	460d      	mov	r5, r1
 80043b2:	b09d      	sub	sp, #116	@ 0x74
 80043b4:	4614      	mov	r4, r2
 80043b6:	4698      	mov	r8, r3
 80043b8:	4606      	mov	r6, r0
 80043ba:	b118      	cbz	r0, 80043c4 <_vfiprintf_r+0x18>
 80043bc:	6a03      	ldr	r3, [r0, #32]
 80043be:	b90b      	cbnz	r3, 80043c4 <_vfiprintf_r+0x18>
 80043c0:	f7ff fc0c 	bl	8003bdc <__sinit>
 80043c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043c6:	07d9      	lsls	r1, r3, #31
 80043c8:	d405      	bmi.n	80043d6 <_vfiprintf_r+0x2a>
 80043ca:	89ab      	ldrh	r3, [r5, #12]
 80043cc:	059a      	lsls	r2, r3, #22
 80043ce:	d402      	bmi.n	80043d6 <_vfiprintf_r+0x2a>
 80043d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043d2:	f7ff feb0 	bl	8004136 <__retarget_lock_acquire_recursive>
 80043d6:	89ab      	ldrh	r3, [r5, #12]
 80043d8:	071b      	lsls	r3, r3, #28
 80043da:	d501      	bpl.n	80043e0 <_vfiprintf_r+0x34>
 80043dc:	692b      	ldr	r3, [r5, #16]
 80043de:	b99b      	cbnz	r3, 8004408 <_vfiprintf_r+0x5c>
 80043e0:	4629      	mov	r1, r5
 80043e2:	4630      	mov	r0, r6
 80043e4:	f7ff fdde 	bl	8003fa4 <__swsetup_r>
 80043e8:	b170      	cbz	r0, 8004408 <_vfiprintf_r+0x5c>
 80043ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043ec:	07dc      	lsls	r4, r3, #31
 80043ee:	d504      	bpl.n	80043fa <_vfiprintf_r+0x4e>
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	b01d      	add	sp, #116	@ 0x74
 80043f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fa:	89ab      	ldrh	r3, [r5, #12]
 80043fc:	0598      	lsls	r0, r3, #22
 80043fe:	d4f7      	bmi.n	80043f0 <_vfiprintf_r+0x44>
 8004400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004402:	f7ff fe99 	bl	8004138 <__retarget_lock_release_recursive>
 8004406:	e7f3      	b.n	80043f0 <_vfiprintf_r+0x44>
 8004408:	2300      	movs	r3, #0
 800440a:	9309      	str	r3, [sp, #36]	@ 0x24
 800440c:	2320      	movs	r3, #32
 800440e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004412:	f8cd 800c 	str.w	r8, [sp, #12]
 8004416:	2330      	movs	r3, #48	@ 0x30
 8004418:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045c8 <_vfiprintf_r+0x21c>
 800441c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004420:	f04f 0901 	mov.w	r9, #1
 8004424:	4623      	mov	r3, r4
 8004426:	469a      	mov	sl, r3
 8004428:	f813 2b01 	ldrb.w	r2, [r3], #1
 800442c:	b10a      	cbz	r2, 8004432 <_vfiprintf_r+0x86>
 800442e:	2a25      	cmp	r2, #37	@ 0x25
 8004430:	d1f9      	bne.n	8004426 <_vfiprintf_r+0x7a>
 8004432:	ebba 0b04 	subs.w	fp, sl, r4
 8004436:	d00b      	beq.n	8004450 <_vfiprintf_r+0xa4>
 8004438:	465b      	mov	r3, fp
 800443a:	4622      	mov	r2, r4
 800443c:	4629      	mov	r1, r5
 800443e:	4630      	mov	r0, r6
 8004440:	f7ff ffa1 	bl	8004386 <__sfputs_r>
 8004444:	3001      	adds	r0, #1
 8004446:	f000 80a7 	beq.w	8004598 <_vfiprintf_r+0x1ec>
 800444a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800444c:	445a      	add	r2, fp
 800444e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004450:	f89a 3000 	ldrb.w	r3, [sl]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 809f 	beq.w	8004598 <_vfiprintf_r+0x1ec>
 800445a:	2300      	movs	r3, #0
 800445c:	f04f 32ff 	mov.w	r2, #4294967295
 8004460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004464:	f10a 0a01 	add.w	sl, sl, #1
 8004468:	9304      	str	r3, [sp, #16]
 800446a:	9307      	str	r3, [sp, #28]
 800446c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004470:	931a      	str	r3, [sp, #104]	@ 0x68
 8004472:	4654      	mov	r4, sl
 8004474:	2205      	movs	r2, #5
 8004476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800447a:	4853      	ldr	r0, [pc, #332]	@ (80045c8 <_vfiprintf_r+0x21c>)
 800447c:	f7fb fee0 	bl	8000240 <memchr>
 8004480:	9a04      	ldr	r2, [sp, #16]
 8004482:	b9d8      	cbnz	r0, 80044bc <_vfiprintf_r+0x110>
 8004484:	06d1      	lsls	r1, r2, #27
 8004486:	bf44      	itt	mi
 8004488:	2320      	movmi	r3, #32
 800448a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800448e:	0713      	lsls	r3, r2, #28
 8004490:	bf44      	itt	mi
 8004492:	232b      	movmi	r3, #43	@ 0x2b
 8004494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004498:	f89a 3000 	ldrb.w	r3, [sl]
 800449c:	2b2a      	cmp	r3, #42	@ 0x2a
 800449e:	d015      	beq.n	80044cc <_vfiprintf_r+0x120>
 80044a0:	9a07      	ldr	r2, [sp, #28]
 80044a2:	4654      	mov	r4, sl
 80044a4:	2000      	movs	r0, #0
 80044a6:	f04f 0c0a 	mov.w	ip, #10
 80044aa:	4621      	mov	r1, r4
 80044ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044b0:	3b30      	subs	r3, #48	@ 0x30
 80044b2:	2b09      	cmp	r3, #9
 80044b4:	d94b      	bls.n	800454e <_vfiprintf_r+0x1a2>
 80044b6:	b1b0      	cbz	r0, 80044e6 <_vfiprintf_r+0x13a>
 80044b8:	9207      	str	r2, [sp, #28]
 80044ba:	e014      	b.n	80044e6 <_vfiprintf_r+0x13a>
 80044bc:	eba0 0308 	sub.w	r3, r0, r8
 80044c0:	fa09 f303 	lsl.w	r3, r9, r3
 80044c4:	4313      	orrs	r3, r2
 80044c6:	9304      	str	r3, [sp, #16]
 80044c8:	46a2      	mov	sl, r4
 80044ca:	e7d2      	b.n	8004472 <_vfiprintf_r+0xc6>
 80044cc:	9b03      	ldr	r3, [sp, #12]
 80044ce:	1d19      	adds	r1, r3, #4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	9103      	str	r1, [sp, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bfbb      	ittet	lt
 80044d8:	425b      	neglt	r3, r3
 80044da:	f042 0202 	orrlt.w	r2, r2, #2
 80044de:	9307      	strge	r3, [sp, #28]
 80044e0:	9307      	strlt	r3, [sp, #28]
 80044e2:	bfb8      	it	lt
 80044e4:	9204      	strlt	r2, [sp, #16]
 80044e6:	7823      	ldrb	r3, [r4, #0]
 80044e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80044ea:	d10a      	bne.n	8004502 <_vfiprintf_r+0x156>
 80044ec:	7863      	ldrb	r3, [r4, #1]
 80044ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80044f0:	d132      	bne.n	8004558 <_vfiprintf_r+0x1ac>
 80044f2:	9b03      	ldr	r3, [sp, #12]
 80044f4:	1d1a      	adds	r2, r3, #4
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	9203      	str	r2, [sp, #12]
 80044fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044fe:	3402      	adds	r4, #2
 8004500:	9305      	str	r3, [sp, #20]
 8004502:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80045d8 <_vfiprintf_r+0x22c>
 8004506:	7821      	ldrb	r1, [r4, #0]
 8004508:	2203      	movs	r2, #3
 800450a:	4650      	mov	r0, sl
 800450c:	f7fb fe98 	bl	8000240 <memchr>
 8004510:	b138      	cbz	r0, 8004522 <_vfiprintf_r+0x176>
 8004512:	9b04      	ldr	r3, [sp, #16]
 8004514:	eba0 000a 	sub.w	r0, r0, sl
 8004518:	2240      	movs	r2, #64	@ 0x40
 800451a:	4082      	lsls	r2, r0
 800451c:	4313      	orrs	r3, r2
 800451e:	3401      	adds	r4, #1
 8004520:	9304      	str	r3, [sp, #16]
 8004522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004526:	4829      	ldr	r0, [pc, #164]	@ (80045cc <_vfiprintf_r+0x220>)
 8004528:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800452c:	2206      	movs	r2, #6
 800452e:	f7fb fe87 	bl	8000240 <memchr>
 8004532:	2800      	cmp	r0, #0
 8004534:	d03f      	beq.n	80045b6 <_vfiprintf_r+0x20a>
 8004536:	4b26      	ldr	r3, [pc, #152]	@ (80045d0 <_vfiprintf_r+0x224>)
 8004538:	bb1b      	cbnz	r3, 8004582 <_vfiprintf_r+0x1d6>
 800453a:	9b03      	ldr	r3, [sp, #12]
 800453c:	3307      	adds	r3, #7
 800453e:	f023 0307 	bic.w	r3, r3, #7
 8004542:	3308      	adds	r3, #8
 8004544:	9303      	str	r3, [sp, #12]
 8004546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004548:	443b      	add	r3, r7
 800454a:	9309      	str	r3, [sp, #36]	@ 0x24
 800454c:	e76a      	b.n	8004424 <_vfiprintf_r+0x78>
 800454e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004552:	460c      	mov	r4, r1
 8004554:	2001      	movs	r0, #1
 8004556:	e7a8      	b.n	80044aa <_vfiprintf_r+0xfe>
 8004558:	2300      	movs	r3, #0
 800455a:	3401      	adds	r4, #1
 800455c:	9305      	str	r3, [sp, #20]
 800455e:	4619      	mov	r1, r3
 8004560:	f04f 0c0a 	mov.w	ip, #10
 8004564:	4620      	mov	r0, r4
 8004566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800456a:	3a30      	subs	r2, #48	@ 0x30
 800456c:	2a09      	cmp	r2, #9
 800456e:	d903      	bls.n	8004578 <_vfiprintf_r+0x1cc>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0c6      	beq.n	8004502 <_vfiprintf_r+0x156>
 8004574:	9105      	str	r1, [sp, #20]
 8004576:	e7c4      	b.n	8004502 <_vfiprintf_r+0x156>
 8004578:	fb0c 2101 	mla	r1, ip, r1, r2
 800457c:	4604      	mov	r4, r0
 800457e:	2301      	movs	r3, #1
 8004580:	e7f0      	b.n	8004564 <_vfiprintf_r+0x1b8>
 8004582:	ab03      	add	r3, sp, #12
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	462a      	mov	r2, r5
 8004588:	4b12      	ldr	r3, [pc, #72]	@ (80045d4 <_vfiprintf_r+0x228>)
 800458a:	a904      	add	r1, sp, #16
 800458c:	4630      	mov	r0, r6
 800458e:	f3af 8000 	nop.w
 8004592:	4607      	mov	r7, r0
 8004594:	1c78      	adds	r0, r7, #1
 8004596:	d1d6      	bne.n	8004546 <_vfiprintf_r+0x19a>
 8004598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800459a:	07d9      	lsls	r1, r3, #31
 800459c:	d405      	bmi.n	80045aa <_vfiprintf_r+0x1fe>
 800459e:	89ab      	ldrh	r3, [r5, #12]
 80045a0:	059a      	lsls	r2, r3, #22
 80045a2:	d402      	bmi.n	80045aa <_vfiprintf_r+0x1fe>
 80045a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045a6:	f7ff fdc7 	bl	8004138 <__retarget_lock_release_recursive>
 80045aa:	89ab      	ldrh	r3, [r5, #12]
 80045ac:	065b      	lsls	r3, r3, #25
 80045ae:	f53f af1f 	bmi.w	80043f0 <_vfiprintf_r+0x44>
 80045b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045b4:	e71e      	b.n	80043f4 <_vfiprintf_r+0x48>
 80045b6:	ab03      	add	r3, sp, #12
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	462a      	mov	r2, r5
 80045bc:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <_vfiprintf_r+0x228>)
 80045be:	a904      	add	r1, sp, #16
 80045c0:	4630      	mov	r0, r6
 80045c2:	f000 f879 	bl	80046b8 <_printf_i>
 80045c6:	e7e4      	b.n	8004592 <_vfiprintf_r+0x1e6>
 80045c8:	08004c02 	.word	0x08004c02
 80045cc:	08004c0c 	.word	0x08004c0c
 80045d0:	00000000 	.word	0x00000000
 80045d4:	08004387 	.word	0x08004387
 80045d8:	08004c08 	.word	0x08004c08

080045dc <_printf_common>:
 80045dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e0:	4616      	mov	r6, r2
 80045e2:	4698      	mov	r8, r3
 80045e4:	688a      	ldr	r2, [r1, #8]
 80045e6:	690b      	ldr	r3, [r1, #16]
 80045e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045ec:	4293      	cmp	r3, r2
 80045ee:	bfb8      	it	lt
 80045f0:	4613      	movlt	r3, r2
 80045f2:	6033      	str	r3, [r6, #0]
 80045f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045f8:	4607      	mov	r7, r0
 80045fa:	460c      	mov	r4, r1
 80045fc:	b10a      	cbz	r2, 8004602 <_printf_common+0x26>
 80045fe:	3301      	adds	r3, #1
 8004600:	6033      	str	r3, [r6, #0]
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	0699      	lsls	r1, r3, #26
 8004606:	bf42      	ittt	mi
 8004608:	6833      	ldrmi	r3, [r6, #0]
 800460a:	3302      	addmi	r3, #2
 800460c:	6033      	strmi	r3, [r6, #0]
 800460e:	6825      	ldr	r5, [r4, #0]
 8004610:	f015 0506 	ands.w	r5, r5, #6
 8004614:	d106      	bne.n	8004624 <_printf_common+0x48>
 8004616:	f104 0a19 	add.w	sl, r4, #25
 800461a:	68e3      	ldr	r3, [r4, #12]
 800461c:	6832      	ldr	r2, [r6, #0]
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	42ab      	cmp	r3, r5
 8004622:	dc26      	bgt.n	8004672 <_printf_common+0x96>
 8004624:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004628:	6822      	ldr	r2, [r4, #0]
 800462a:	3b00      	subs	r3, #0
 800462c:	bf18      	it	ne
 800462e:	2301      	movne	r3, #1
 8004630:	0692      	lsls	r2, r2, #26
 8004632:	d42b      	bmi.n	800468c <_printf_common+0xb0>
 8004634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004638:	4641      	mov	r1, r8
 800463a:	4638      	mov	r0, r7
 800463c:	47c8      	blx	r9
 800463e:	3001      	adds	r0, #1
 8004640:	d01e      	beq.n	8004680 <_printf_common+0xa4>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	6922      	ldr	r2, [r4, #16]
 8004646:	f003 0306 	and.w	r3, r3, #6
 800464a:	2b04      	cmp	r3, #4
 800464c:	bf02      	ittt	eq
 800464e:	68e5      	ldreq	r5, [r4, #12]
 8004650:	6833      	ldreq	r3, [r6, #0]
 8004652:	1aed      	subeq	r5, r5, r3
 8004654:	68a3      	ldr	r3, [r4, #8]
 8004656:	bf0c      	ite	eq
 8004658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800465c:	2500      	movne	r5, #0
 800465e:	4293      	cmp	r3, r2
 8004660:	bfc4      	itt	gt
 8004662:	1a9b      	subgt	r3, r3, r2
 8004664:	18ed      	addgt	r5, r5, r3
 8004666:	2600      	movs	r6, #0
 8004668:	341a      	adds	r4, #26
 800466a:	42b5      	cmp	r5, r6
 800466c:	d11a      	bne.n	80046a4 <_printf_common+0xc8>
 800466e:	2000      	movs	r0, #0
 8004670:	e008      	b.n	8004684 <_printf_common+0xa8>
 8004672:	2301      	movs	r3, #1
 8004674:	4652      	mov	r2, sl
 8004676:	4641      	mov	r1, r8
 8004678:	4638      	mov	r0, r7
 800467a:	47c8      	blx	r9
 800467c:	3001      	adds	r0, #1
 800467e:	d103      	bne.n	8004688 <_printf_common+0xac>
 8004680:	f04f 30ff 	mov.w	r0, #4294967295
 8004684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004688:	3501      	adds	r5, #1
 800468a:	e7c6      	b.n	800461a <_printf_common+0x3e>
 800468c:	18e1      	adds	r1, r4, r3
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	2030      	movs	r0, #48	@ 0x30
 8004692:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004696:	4422      	add	r2, r4
 8004698:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800469c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046a0:	3302      	adds	r3, #2
 80046a2:	e7c7      	b.n	8004634 <_printf_common+0x58>
 80046a4:	2301      	movs	r3, #1
 80046a6:	4622      	mov	r2, r4
 80046a8:	4641      	mov	r1, r8
 80046aa:	4638      	mov	r0, r7
 80046ac:	47c8      	blx	r9
 80046ae:	3001      	adds	r0, #1
 80046b0:	d0e6      	beq.n	8004680 <_printf_common+0xa4>
 80046b2:	3601      	adds	r6, #1
 80046b4:	e7d9      	b.n	800466a <_printf_common+0x8e>
	...

080046b8 <_printf_i>:
 80046b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046bc:	7e0f      	ldrb	r7, [r1, #24]
 80046be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046c0:	2f78      	cmp	r7, #120	@ 0x78
 80046c2:	4691      	mov	r9, r2
 80046c4:	4680      	mov	r8, r0
 80046c6:	460c      	mov	r4, r1
 80046c8:	469a      	mov	sl, r3
 80046ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ce:	d807      	bhi.n	80046e0 <_printf_i+0x28>
 80046d0:	2f62      	cmp	r7, #98	@ 0x62
 80046d2:	d80a      	bhi.n	80046ea <_printf_i+0x32>
 80046d4:	2f00      	cmp	r7, #0
 80046d6:	f000 80d2 	beq.w	800487e <_printf_i+0x1c6>
 80046da:	2f58      	cmp	r7, #88	@ 0x58
 80046dc:	f000 80b9 	beq.w	8004852 <_printf_i+0x19a>
 80046e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046e8:	e03a      	b.n	8004760 <_printf_i+0xa8>
 80046ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046ee:	2b15      	cmp	r3, #21
 80046f0:	d8f6      	bhi.n	80046e0 <_printf_i+0x28>
 80046f2:	a101      	add	r1, pc, #4	@ (adr r1, 80046f8 <_printf_i+0x40>)
 80046f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046f8:	08004751 	.word	0x08004751
 80046fc:	08004765 	.word	0x08004765
 8004700:	080046e1 	.word	0x080046e1
 8004704:	080046e1 	.word	0x080046e1
 8004708:	080046e1 	.word	0x080046e1
 800470c:	080046e1 	.word	0x080046e1
 8004710:	08004765 	.word	0x08004765
 8004714:	080046e1 	.word	0x080046e1
 8004718:	080046e1 	.word	0x080046e1
 800471c:	080046e1 	.word	0x080046e1
 8004720:	080046e1 	.word	0x080046e1
 8004724:	08004865 	.word	0x08004865
 8004728:	0800478f 	.word	0x0800478f
 800472c:	0800481f 	.word	0x0800481f
 8004730:	080046e1 	.word	0x080046e1
 8004734:	080046e1 	.word	0x080046e1
 8004738:	08004887 	.word	0x08004887
 800473c:	080046e1 	.word	0x080046e1
 8004740:	0800478f 	.word	0x0800478f
 8004744:	080046e1 	.word	0x080046e1
 8004748:	080046e1 	.word	0x080046e1
 800474c:	08004827 	.word	0x08004827
 8004750:	6833      	ldr	r3, [r6, #0]
 8004752:	1d1a      	adds	r2, r3, #4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6032      	str	r2, [r6, #0]
 8004758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800475c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004760:	2301      	movs	r3, #1
 8004762:	e09d      	b.n	80048a0 <_printf_i+0x1e8>
 8004764:	6833      	ldr	r3, [r6, #0]
 8004766:	6820      	ldr	r0, [r4, #0]
 8004768:	1d19      	adds	r1, r3, #4
 800476a:	6031      	str	r1, [r6, #0]
 800476c:	0606      	lsls	r6, r0, #24
 800476e:	d501      	bpl.n	8004774 <_printf_i+0xbc>
 8004770:	681d      	ldr	r5, [r3, #0]
 8004772:	e003      	b.n	800477c <_printf_i+0xc4>
 8004774:	0645      	lsls	r5, r0, #25
 8004776:	d5fb      	bpl.n	8004770 <_printf_i+0xb8>
 8004778:	f9b3 5000 	ldrsh.w	r5, [r3]
 800477c:	2d00      	cmp	r5, #0
 800477e:	da03      	bge.n	8004788 <_printf_i+0xd0>
 8004780:	232d      	movs	r3, #45	@ 0x2d
 8004782:	426d      	negs	r5, r5
 8004784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004788:	4859      	ldr	r0, [pc, #356]	@ (80048f0 <_printf_i+0x238>)
 800478a:	230a      	movs	r3, #10
 800478c:	e011      	b.n	80047b2 <_printf_i+0xfa>
 800478e:	6821      	ldr	r1, [r4, #0]
 8004790:	6833      	ldr	r3, [r6, #0]
 8004792:	0608      	lsls	r0, r1, #24
 8004794:	f853 5b04 	ldr.w	r5, [r3], #4
 8004798:	d402      	bmi.n	80047a0 <_printf_i+0xe8>
 800479a:	0649      	lsls	r1, r1, #25
 800479c:	bf48      	it	mi
 800479e:	b2ad      	uxthmi	r5, r5
 80047a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80047a2:	4853      	ldr	r0, [pc, #332]	@ (80048f0 <_printf_i+0x238>)
 80047a4:	6033      	str	r3, [r6, #0]
 80047a6:	bf14      	ite	ne
 80047a8:	230a      	movne	r3, #10
 80047aa:	2308      	moveq	r3, #8
 80047ac:	2100      	movs	r1, #0
 80047ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047b2:	6866      	ldr	r6, [r4, #4]
 80047b4:	60a6      	str	r6, [r4, #8]
 80047b6:	2e00      	cmp	r6, #0
 80047b8:	bfa2      	ittt	ge
 80047ba:	6821      	ldrge	r1, [r4, #0]
 80047bc:	f021 0104 	bicge.w	r1, r1, #4
 80047c0:	6021      	strge	r1, [r4, #0]
 80047c2:	b90d      	cbnz	r5, 80047c8 <_printf_i+0x110>
 80047c4:	2e00      	cmp	r6, #0
 80047c6:	d04b      	beq.n	8004860 <_printf_i+0x1a8>
 80047c8:	4616      	mov	r6, r2
 80047ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ce:	fb03 5711 	mls	r7, r3, r1, r5
 80047d2:	5dc7      	ldrb	r7, [r0, r7]
 80047d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047d8:	462f      	mov	r7, r5
 80047da:	42bb      	cmp	r3, r7
 80047dc:	460d      	mov	r5, r1
 80047de:	d9f4      	bls.n	80047ca <_printf_i+0x112>
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d10b      	bne.n	80047fc <_printf_i+0x144>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	07df      	lsls	r7, r3, #31
 80047e8:	d508      	bpl.n	80047fc <_printf_i+0x144>
 80047ea:	6923      	ldr	r3, [r4, #16]
 80047ec:	6861      	ldr	r1, [r4, #4]
 80047ee:	4299      	cmp	r1, r3
 80047f0:	bfde      	ittt	le
 80047f2:	2330      	movle	r3, #48	@ 0x30
 80047f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047fc:	1b92      	subs	r2, r2, r6
 80047fe:	6122      	str	r2, [r4, #16]
 8004800:	f8cd a000 	str.w	sl, [sp]
 8004804:	464b      	mov	r3, r9
 8004806:	aa03      	add	r2, sp, #12
 8004808:	4621      	mov	r1, r4
 800480a:	4640      	mov	r0, r8
 800480c:	f7ff fee6 	bl	80045dc <_printf_common>
 8004810:	3001      	adds	r0, #1
 8004812:	d14a      	bne.n	80048aa <_printf_i+0x1f2>
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	b004      	add	sp, #16
 800481a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	f043 0320 	orr.w	r3, r3, #32
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	4833      	ldr	r0, [pc, #204]	@ (80048f4 <_printf_i+0x23c>)
 8004828:	2778      	movs	r7, #120	@ 0x78
 800482a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	6831      	ldr	r1, [r6, #0]
 8004832:	061f      	lsls	r7, r3, #24
 8004834:	f851 5b04 	ldr.w	r5, [r1], #4
 8004838:	d402      	bmi.n	8004840 <_printf_i+0x188>
 800483a:	065f      	lsls	r7, r3, #25
 800483c:	bf48      	it	mi
 800483e:	b2ad      	uxthmi	r5, r5
 8004840:	6031      	str	r1, [r6, #0]
 8004842:	07d9      	lsls	r1, r3, #31
 8004844:	bf44      	itt	mi
 8004846:	f043 0320 	orrmi.w	r3, r3, #32
 800484a:	6023      	strmi	r3, [r4, #0]
 800484c:	b11d      	cbz	r5, 8004856 <_printf_i+0x19e>
 800484e:	2310      	movs	r3, #16
 8004850:	e7ac      	b.n	80047ac <_printf_i+0xf4>
 8004852:	4827      	ldr	r0, [pc, #156]	@ (80048f0 <_printf_i+0x238>)
 8004854:	e7e9      	b.n	800482a <_printf_i+0x172>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	f023 0320 	bic.w	r3, r3, #32
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	e7f6      	b.n	800484e <_printf_i+0x196>
 8004860:	4616      	mov	r6, r2
 8004862:	e7bd      	b.n	80047e0 <_printf_i+0x128>
 8004864:	6833      	ldr	r3, [r6, #0]
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	6961      	ldr	r1, [r4, #20]
 800486a:	1d18      	adds	r0, r3, #4
 800486c:	6030      	str	r0, [r6, #0]
 800486e:	062e      	lsls	r6, r5, #24
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	d501      	bpl.n	8004878 <_printf_i+0x1c0>
 8004874:	6019      	str	r1, [r3, #0]
 8004876:	e002      	b.n	800487e <_printf_i+0x1c6>
 8004878:	0668      	lsls	r0, r5, #25
 800487a:	d5fb      	bpl.n	8004874 <_printf_i+0x1bc>
 800487c:	8019      	strh	r1, [r3, #0]
 800487e:	2300      	movs	r3, #0
 8004880:	6123      	str	r3, [r4, #16]
 8004882:	4616      	mov	r6, r2
 8004884:	e7bc      	b.n	8004800 <_printf_i+0x148>
 8004886:	6833      	ldr	r3, [r6, #0]
 8004888:	1d1a      	adds	r2, r3, #4
 800488a:	6032      	str	r2, [r6, #0]
 800488c:	681e      	ldr	r6, [r3, #0]
 800488e:	6862      	ldr	r2, [r4, #4]
 8004890:	2100      	movs	r1, #0
 8004892:	4630      	mov	r0, r6
 8004894:	f7fb fcd4 	bl	8000240 <memchr>
 8004898:	b108      	cbz	r0, 800489e <_printf_i+0x1e6>
 800489a:	1b80      	subs	r0, r0, r6
 800489c:	6060      	str	r0, [r4, #4]
 800489e:	6863      	ldr	r3, [r4, #4]
 80048a0:	6123      	str	r3, [r4, #16]
 80048a2:	2300      	movs	r3, #0
 80048a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048a8:	e7aa      	b.n	8004800 <_printf_i+0x148>
 80048aa:	6923      	ldr	r3, [r4, #16]
 80048ac:	4632      	mov	r2, r6
 80048ae:	4649      	mov	r1, r9
 80048b0:	4640      	mov	r0, r8
 80048b2:	47d0      	blx	sl
 80048b4:	3001      	adds	r0, #1
 80048b6:	d0ad      	beq.n	8004814 <_printf_i+0x15c>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	079b      	lsls	r3, r3, #30
 80048bc:	d413      	bmi.n	80048e6 <_printf_i+0x22e>
 80048be:	68e0      	ldr	r0, [r4, #12]
 80048c0:	9b03      	ldr	r3, [sp, #12]
 80048c2:	4298      	cmp	r0, r3
 80048c4:	bfb8      	it	lt
 80048c6:	4618      	movlt	r0, r3
 80048c8:	e7a6      	b.n	8004818 <_printf_i+0x160>
 80048ca:	2301      	movs	r3, #1
 80048cc:	4632      	mov	r2, r6
 80048ce:	4649      	mov	r1, r9
 80048d0:	4640      	mov	r0, r8
 80048d2:	47d0      	blx	sl
 80048d4:	3001      	adds	r0, #1
 80048d6:	d09d      	beq.n	8004814 <_printf_i+0x15c>
 80048d8:	3501      	adds	r5, #1
 80048da:	68e3      	ldr	r3, [r4, #12]
 80048dc:	9903      	ldr	r1, [sp, #12]
 80048de:	1a5b      	subs	r3, r3, r1
 80048e0:	42ab      	cmp	r3, r5
 80048e2:	dcf2      	bgt.n	80048ca <_printf_i+0x212>
 80048e4:	e7eb      	b.n	80048be <_printf_i+0x206>
 80048e6:	2500      	movs	r5, #0
 80048e8:	f104 0619 	add.w	r6, r4, #25
 80048ec:	e7f5      	b.n	80048da <_printf_i+0x222>
 80048ee:	bf00      	nop
 80048f0:	08004c13 	.word	0x08004c13
 80048f4:	08004c24 	.word	0x08004c24

080048f8 <__sflush_r>:
 80048f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004900:	0716      	lsls	r6, r2, #28
 8004902:	4605      	mov	r5, r0
 8004904:	460c      	mov	r4, r1
 8004906:	d454      	bmi.n	80049b2 <__sflush_r+0xba>
 8004908:	684b      	ldr	r3, [r1, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	dc02      	bgt.n	8004914 <__sflush_r+0x1c>
 800490e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	dd48      	ble.n	80049a6 <__sflush_r+0xae>
 8004914:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004916:	2e00      	cmp	r6, #0
 8004918:	d045      	beq.n	80049a6 <__sflush_r+0xae>
 800491a:	2300      	movs	r3, #0
 800491c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004920:	682f      	ldr	r7, [r5, #0]
 8004922:	6a21      	ldr	r1, [r4, #32]
 8004924:	602b      	str	r3, [r5, #0]
 8004926:	d030      	beq.n	800498a <__sflush_r+0x92>
 8004928:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	0759      	lsls	r1, r3, #29
 800492e:	d505      	bpl.n	800493c <__sflush_r+0x44>
 8004930:	6863      	ldr	r3, [r4, #4]
 8004932:	1ad2      	subs	r2, r2, r3
 8004934:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004936:	b10b      	cbz	r3, 800493c <__sflush_r+0x44>
 8004938:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800493a:	1ad2      	subs	r2, r2, r3
 800493c:	2300      	movs	r3, #0
 800493e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004940:	6a21      	ldr	r1, [r4, #32]
 8004942:	4628      	mov	r0, r5
 8004944:	47b0      	blx	r6
 8004946:	1c43      	adds	r3, r0, #1
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	d106      	bne.n	800495a <__sflush_r+0x62>
 800494c:	6829      	ldr	r1, [r5, #0]
 800494e:	291d      	cmp	r1, #29
 8004950:	d82b      	bhi.n	80049aa <__sflush_r+0xb2>
 8004952:	4a2a      	ldr	r2, [pc, #168]	@ (80049fc <__sflush_r+0x104>)
 8004954:	410a      	asrs	r2, r1
 8004956:	07d6      	lsls	r6, r2, #31
 8004958:	d427      	bmi.n	80049aa <__sflush_r+0xb2>
 800495a:	2200      	movs	r2, #0
 800495c:	6062      	str	r2, [r4, #4]
 800495e:	04d9      	lsls	r1, r3, #19
 8004960:	6922      	ldr	r2, [r4, #16]
 8004962:	6022      	str	r2, [r4, #0]
 8004964:	d504      	bpl.n	8004970 <__sflush_r+0x78>
 8004966:	1c42      	adds	r2, r0, #1
 8004968:	d101      	bne.n	800496e <__sflush_r+0x76>
 800496a:	682b      	ldr	r3, [r5, #0]
 800496c:	b903      	cbnz	r3, 8004970 <__sflush_r+0x78>
 800496e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004972:	602f      	str	r7, [r5, #0]
 8004974:	b1b9      	cbz	r1, 80049a6 <__sflush_r+0xae>
 8004976:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800497a:	4299      	cmp	r1, r3
 800497c:	d002      	beq.n	8004984 <__sflush_r+0x8c>
 800497e:	4628      	mov	r0, r5
 8004980:	f7ff fbea 	bl	8004158 <_free_r>
 8004984:	2300      	movs	r3, #0
 8004986:	6363      	str	r3, [r4, #52]	@ 0x34
 8004988:	e00d      	b.n	80049a6 <__sflush_r+0xae>
 800498a:	2301      	movs	r3, #1
 800498c:	4628      	mov	r0, r5
 800498e:	47b0      	blx	r6
 8004990:	4602      	mov	r2, r0
 8004992:	1c50      	adds	r0, r2, #1
 8004994:	d1c9      	bne.n	800492a <__sflush_r+0x32>
 8004996:	682b      	ldr	r3, [r5, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0c6      	beq.n	800492a <__sflush_r+0x32>
 800499c:	2b1d      	cmp	r3, #29
 800499e:	d001      	beq.n	80049a4 <__sflush_r+0xac>
 80049a0:	2b16      	cmp	r3, #22
 80049a2:	d11e      	bne.n	80049e2 <__sflush_r+0xea>
 80049a4:	602f      	str	r7, [r5, #0]
 80049a6:	2000      	movs	r0, #0
 80049a8:	e022      	b.n	80049f0 <__sflush_r+0xf8>
 80049aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ae:	b21b      	sxth	r3, r3
 80049b0:	e01b      	b.n	80049ea <__sflush_r+0xf2>
 80049b2:	690f      	ldr	r7, [r1, #16]
 80049b4:	2f00      	cmp	r7, #0
 80049b6:	d0f6      	beq.n	80049a6 <__sflush_r+0xae>
 80049b8:	0793      	lsls	r3, r2, #30
 80049ba:	680e      	ldr	r6, [r1, #0]
 80049bc:	bf08      	it	eq
 80049be:	694b      	ldreq	r3, [r1, #20]
 80049c0:	600f      	str	r7, [r1, #0]
 80049c2:	bf18      	it	ne
 80049c4:	2300      	movne	r3, #0
 80049c6:	eba6 0807 	sub.w	r8, r6, r7
 80049ca:	608b      	str	r3, [r1, #8]
 80049cc:	f1b8 0f00 	cmp.w	r8, #0
 80049d0:	dde9      	ble.n	80049a6 <__sflush_r+0xae>
 80049d2:	6a21      	ldr	r1, [r4, #32]
 80049d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80049d6:	4643      	mov	r3, r8
 80049d8:	463a      	mov	r2, r7
 80049da:	4628      	mov	r0, r5
 80049dc:	47b0      	blx	r6
 80049de:	2800      	cmp	r0, #0
 80049e0:	dc08      	bgt.n	80049f4 <__sflush_r+0xfc>
 80049e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f4:	4407      	add	r7, r0
 80049f6:	eba8 0800 	sub.w	r8, r8, r0
 80049fa:	e7e7      	b.n	80049cc <__sflush_r+0xd4>
 80049fc:	dfbffffe 	.word	0xdfbffffe

08004a00 <_fflush_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	690b      	ldr	r3, [r1, #16]
 8004a04:	4605      	mov	r5, r0
 8004a06:	460c      	mov	r4, r1
 8004a08:	b913      	cbnz	r3, 8004a10 <_fflush_r+0x10>
 8004a0a:	2500      	movs	r5, #0
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	b118      	cbz	r0, 8004a1a <_fflush_r+0x1a>
 8004a12:	6a03      	ldr	r3, [r0, #32]
 8004a14:	b90b      	cbnz	r3, 8004a1a <_fflush_r+0x1a>
 8004a16:	f7ff f8e1 	bl	8003bdc <__sinit>
 8004a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f3      	beq.n	8004a0a <_fflush_r+0xa>
 8004a22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a24:	07d0      	lsls	r0, r2, #31
 8004a26:	d404      	bmi.n	8004a32 <_fflush_r+0x32>
 8004a28:	0599      	lsls	r1, r3, #22
 8004a2a:	d402      	bmi.n	8004a32 <_fflush_r+0x32>
 8004a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a2e:	f7ff fb82 	bl	8004136 <__retarget_lock_acquire_recursive>
 8004a32:	4628      	mov	r0, r5
 8004a34:	4621      	mov	r1, r4
 8004a36:	f7ff ff5f 	bl	80048f8 <__sflush_r>
 8004a3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a3c:	07da      	lsls	r2, r3, #31
 8004a3e:	4605      	mov	r5, r0
 8004a40:	d4e4      	bmi.n	8004a0c <_fflush_r+0xc>
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	059b      	lsls	r3, r3, #22
 8004a46:	d4e1      	bmi.n	8004a0c <_fflush_r+0xc>
 8004a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a4a:	f7ff fb75 	bl	8004138 <__retarget_lock_release_recursive>
 8004a4e:	e7dd      	b.n	8004a0c <_fflush_r+0xc>

08004a50 <__swhatbuf_r>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	460c      	mov	r4, r1
 8004a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	b096      	sub	sp, #88	@ 0x58
 8004a5c:	4615      	mov	r5, r2
 8004a5e:	461e      	mov	r6, r3
 8004a60:	da0d      	bge.n	8004a7e <__swhatbuf_r+0x2e>
 8004a62:	89a3      	ldrh	r3, [r4, #12]
 8004a64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a68:	f04f 0100 	mov.w	r1, #0
 8004a6c:	bf14      	ite	ne
 8004a6e:	2340      	movne	r3, #64	@ 0x40
 8004a70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a74:	2000      	movs	r0, #0
 8004a76:	6031      	str	r1, [r6, #0]
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	b016      	add	sp, #88	@ 0x58
 8004a7c:	bd70      	pop	{r4, r5, r6, pc}
 8004a7e:	466a      	mov	r2, sp
 8004a80:	f000 f848 	bl	8004b14 <_fstat_r>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	dbec      	blt.n	8004a62 <__swhatbuf_r+0x12>
 8004a88:	9901      	ldr	r1, [sp, #4]
 8004a8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a92:	4259      	negs	r1, r3
 8004a94:	4159      	adcs	r1, r3
 8004a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a9a:	e7eb      	b.n	8004a74 <__swhatbuf_r+0x24>

08004a9c <__smakebuf_r>:
 8004a9c:	898b      	ldrh	r3, [r1, #12]
 8004a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aa0:	079d      	lsls	r5, r3, #30
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	d507      	bpl.n	8004ab8 <__smakebuf_r+0x1c>
 8004aa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	6163      	str	r3, [r4, #20]
 8004ab4:	b003      	add	sp, #12
 8004ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab8:	ab01      	add	r3, sp, #4
 8004aba:	466a      	mov	r2, sp
 8004abc:	f7ff ffc8 	bl	8004a50 <__swhatbuf_r>
 8004ac0:	9f00      	ldr	r7, [sp, #0]
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	f7ff fbba 	bl	8004240 <_malloc_r>
 8004acc:	b948      	cbnz	r0, 8004ae2 <__smakebuf_r+0x46>
 8004ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ad2:	059a      	lsls	r2, r3, #22
 8004ad4:	d4ee      	bmi.n	8004ab4 <__smakebuf_r+0x18>
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	f043 0302 	orr.w	r3, r3, #2
 8004ade:	81a3      	strh	r3, [r4, #12]
 8004ae0:	e7e2      	b.n	8004aa8 <__smakebuf_r+0xc>
 8004ae2:	89a3      	ldrh	r3, [r4, #12]
 8004ae4:	6020      	str	r0, [r4, #0]
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	9b01      	ldr	r3, [sp, #4]
 8004aee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004af2:	b15b      	cbz	r3, 8004b0c <__smakebuf_r+0x70>
 8004af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004af8:	4630      	mov	r0, r6
 8004afa:	f000 f81d 	bl	8004b38 <_isatty_r>
 8004afe:	b128      	cbz	r0, 8004b0c <__smakebuf_r+0x70>
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	431d      	orrs	r5, r3
 8004b10:	81a5      	strh	r5, [r4, #12]
 8004b12:	e7cf      	b.n	8004ab4 <__smakebuf_r+0x18>

08004b14 <_fstat_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4d07      	ldr	r5, [pc, #28]	@ (8004b34 <_fstat_r+0x20>)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	f7fc faa1 	bl	8001068 <_fstat>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	d102      	bne.n	8004b30 <_fstat_r+0x1c>
 8004b2a:	682b      	ldr	r3, [r5, #0]
 8004b2c:	b103      	cbz	r3, 8004b30 <_fstat_r+0x1c>
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	bd38      	pop	{r3, r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	200005b8 	.word	0x200005b8

08004b38 <_isatty_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4d06      	ldr	r5, [pc, #24]	@ (8004b54 <_isatty_r+0x1c>)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4604      	mov	r4, r0
 8004b40:	4608      	mov	r0, r1
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	f7fc fa91 	bl	800106a <_isatty>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_isatty_r+0x1a>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_isatty_r+0x1a>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	200005b8 	.word	0x200005b8

08004b58 <_sbrk_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d06      	ldr	r5, [pc, #24]	@ (8004b74 <_sbrk_r+0x1c>)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	602b      	str	r3, [r5, #0]
 8004b64:	f000 f808 	bl	8004b78 <_sbrk>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_sbrk_r+0x1a>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_sbrk_r+0x1a>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	200005b8 	.word	0x200005b8

08004b78 <_sbrk>:
 8004b78:	4a04      	ldr	r2, [pc, #16]	@ (8004b8c <_sbrk+0x14>)
 8004b7a:	6811      	ldr	r1, [r2, #0]
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	b909      	cbnz	r1, 8004b84 <_sbrk+0xc>
 8004b80:	4903      	ldr	r1, [pc, #12]	@ (8004b90 <_sbrk+0x18>)
 8004b82:	6011      	str	r1, [r2, #0]
 8004b84:	6810      	ldr	r0, [r2, #0]
 8004b86:	4403      	add	r3, r0
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	4770      	bx	lr
 8004b8c:	200005c8 	.word	0x200005c8
 8004b90:	200005d0 	.word	0x200005d0

08004b94 <_init>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr

08004ba0 <_fini>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr
