
FinalTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .apptext      00000000  00000000  00000000  000050bc  2**0
                  CONTENTS
  2 .apptext      00000000  20040000  20040000  000050bc  2**0
                  CONTENTS
  3 .text         00003a38  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000074  08003c38  08003c38  00004c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08003cac  08003cac  000050bc  2**0
                  CONTENTS
  6 .ARM          00000008  08003cac  08003cac  00004cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08003cb4  08003cb4  000050bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08003cb4  08003cb4  00004cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08003cb8  08003cb8  00004cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000000bc  20000000  08003cbc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000494  200000bc  08003d78  000050bc  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  20000550  08003d78  00005550  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000050bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000105f8  00000000  00000000  000050ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002102  00000000  00000000  000156e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00005d0f  00000000  00000000  000177e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000009e8  00000000  00000000  0001d4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000776  00000000  00000000  0001dee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e054  00000000  00000000  0001e656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000125a4  00000000  00000000  0004c6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011c931  00000000  00000000  0005ec4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0017b57f  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000022dc  00000000  00000000  0017b5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000054  00000000  00000000  0017d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000bc 	.word	0x200000bc
 800021c:	00000000 	.word	0x00000000
 8000220:	08003c20 	.word	0x08003c20

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c0 	.word	0x200000c0
 800023c:	08003c20 	.word	0x08003c20

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <InitDMA>:

void (* myFunc)(uint8_t *, uint8_t);

DMA_HandleTypeDef DMAHandle;
void InitDMA()
{
 80005d0:	b500      	push	{lr}
 80005d2:	b083      	sub	sp, #12
	__HAL_RCC_DMA2_CLK_ENABLE();
 80005d4:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <InitDMA+0x64>)
 80005d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80005dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80005de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e0:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 80005e4:	9200      	str	r2, [sp, #0]
 80005e6:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80005ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80005ee:	645a      	str	r2, [r3, #68]	@ 0x44
 80005f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b01      	ldr	r3, [sp, #4]


	DMAHandle.Instance = DMA2_Stream0;
 80005fa:	480f      	ldr	r0, [pc, #60]	@ (8000638 <InitDMA+0x68>)
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <InitDMA+0x6c>)
 80005fe:	6003      	str	r3, [r0, #0]
	DMAHandle.Init.Channel = DMA_CHANNEL_0;
 8000600:	2300      	movs	r3, #0
 8000602:	6043      	str	r3, [r0, #4]
	DMAHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000604:	2280      	movs	r2, #128	@ 0x80
 8000606:	6082      	str	r2, [r0, #8]
	DMAHandle.Init.PeriphInc = DMA_PINC_DISABLE;
 8000608:	60c3      	str	r3, [r0, #12]
	DMAHandle.Init.MemInc = DMA_MINC_DISABLE;
 800060a:	6103      	str	r3, [r0, #16]
	DMAHandle.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800060c:	6183      	str	r3, [r0, #24]
	DMAHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800060e:	6143      	str	r3, [r0, #20]
	DMAHandle.Init.Mode = DMA_CIRCULAR;
 8000610:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000614:	61c2      	str	r2, [r0, #28]
	DMAHandle.Init.Priority = DMA_PRIORITY_VERY_HIGH;				// Table 9.7 Textbook
 8000616:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800061a:	6202      	str	r2, [r0, #32]
	DMAHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;				//
 800061c:	2204      	movs	r2, #4
 800061e:	6242      	str	r2, [r0, #36]	@ 0x24
	DMAHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;		// Table 9.12 Textbook
 8000620:	2203      	movs	r2, #3
 8000622:	6282      	str	r2, [r0, #40]	@ 0x28
	DMAHandle.Init.MemBurst = DMA_MBURST_SINGLE;				// Table 9.13 Textbook
 8000624:	62c3      	str	r3, [r0, #44]	@ 0x2c
	DMAHandle.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8000626:	6303      	str	r3, [r0, #48]	@ 0x30
	//DMAHandle.XferHalfCpltCallback = NULL;
	//DMAHandle.XferErrorCallback = NULL;


	//HAL_DMA_Start(&DMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
	HAL_DMA_Init(&DMAHandle);
 8000628:	f000 fd0a 	bl	8001040 <HAL_DMA_Init>

	//HAL_DMA_RegisterCallback(&hdma, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
}
 800062c:	b003      	add	sp, #12
 800062e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	200000d8 	.word	0x200000d8
 800063c:	40026410 	.word	0x40026410

08000640 <switchGameButtonInit>:


void switchGameButtonInit()
{
 8000640:	b500      	push	{lr}
 8000642:	b087      	sub	sp, #28
	GPIO_InitTypeDef switch_game_button_handler = {0};
 8000644:	2300      	movs	r3, #0
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	9303      	str	r3, [sp, #12]
 800064c:	9304      	str	r3, [sp, #16]
 800064e:	9305      	str	r3, [sp, #20]

	switch_game_button_handler.Pin = SWITCH_GAME_BUTTON_PIN;
 8000650:	2301      	movs	r3, #1
 8000652:	9301      	str	r3, [sp, #4]
	switch_game_button_handler.Mode = GPIO_MODE_IT_FALLING;
 8000654:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000658:	9302      	str	r3, [sp, #8]
	switch_game_button_handler.Pull = GPIO_PULLDOWN;
 800065a:	2302      	movs	r3, #2
 800065c:	9303      	str	r3, [sp, #12]
	switch_game_button_handler.Speed = GPIO_SPEED_HIGH;
 800065e:	2303      	movs	r3, #3
 8000660:	9304      	str	r3, [sp, #16]

	HAL_GPIO_Init(SWITCH_GAME_BUTTON_PORT, &switch_game_button_handler);
 8000662:	a901      	add	r1, sp, #4
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <switchGameButtonInit+0x38>)
 8000666:	f000 fd51 	bl	800110c <HAL_GPIO_Init>

	// Enable the Interrupt
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800066a:	2006      	movs	r0, #6
 800066c:	f000 fc5e 	bl	8000f2c <HAL_NVIC_EnableIRQ>
}
 8000670:	b007      	add	sp, #28
 8000672:	f85d fb04 	ldr.w	pc, [sp], #4
 8000676:	bf00      	nop
 8000678:	40020000 	.word	0x40020000

0800067c <EXTI0_IRQHandler>:

	SimpleOS();
}

void EXTI0_IRQHandler()
{
 800067c:	b508      	push	{r3, lr}
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);

	EXTI->SWIER |= 1;
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <EXTI0_IRQHandler+0x2c>)
 8000680:	691a      	ldr	r2, [r3, #16]
 8000682:	f042 0201 	orr.w	r2, r2, #1
 8000686:	611a      	str	r2, [r3, #16]
	EXTI->PR |= 1;
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	f042 0201 	orr.w	r2, r2, #1
 800068e:	615a      	str	r2, [r3, #20]

	//NVIC_ClearPendingIRQ(EXTI0_IRQn);

	printf("Num1 : %d, NUm2 : %d \r\n", num_to_inc1, num_to_inc2);
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <EXTI0_IRQHandler+0x30>)
 8000692:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8000696:	f893 1061 	ldrb.w	r1, [r3, #97]	@ 0x61
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <EXTI0_IRQHandler+0x34>)
 800069c:	f002 fb28 	bl	8002cf0 <iprintf>

	//asm volatile ("STR r14, %0" : addrToCopyTo);


	//asm volatile("MOV r14, #0xFFFFFFF9 ");
	asm volatile("STR %0, [r13, #32]" : "+r" (addr));
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <EXTI0_IRQHandler+0x38>)
 80006a2:	9308      	str	r3, [sp, #32]

}
 80006a4:	bd08      	pop	{r3, pc}
 80006a6:	bf00      	nop
 80006a8:	40013c00 	.word	0x40013c00
 80006ac:	200000d8 	.word	0x200000d8
 80006b0:	08003c58 	.word	0x08003c58
 80006b4:	0800074d 	.word	0x0800074d

080006b8 <SimpleOS>:
{

}

void SimpleOS()
{
 80006b8:	b508      	push	{r3, lr}
	++prog_index;
 80006ba:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <SimpleOS+0x4c>)
 80006bc:	7813      	ldrb	r3, [r2, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	7013      	strb	r3, [r2, #0]
	if(prog_index == MAX_NUMBER_OF_EXTERNAL_PROGRAMS)
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d00c      	beq.n	80006e2 <SimpleOS+0x2a>
	{
		prog_index = 0;
	}

	uint32_t new_sp_loc;
	if (prog_index == 0)
 80006c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <SimpleOS+0x4c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b96b      	cbnz	r3, 80006ea <SimpleOS+0x32>
	{
		// Adjust the stack pointer and go into the function
		new_sp_loc = (base_sp - STACK_SPACE_NEEDED_FOR_MAIN - STACK_SPACE_FOR_OS_CALL);
 80006ce:	480e      	ldr	r0, [pc, #56]	@ (8000708 <SimpleOS+0x50>)
 80006d0:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80006d2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
		asm volatile ("MOV sp, %0" :
 80006d6:	469d      	mov	sp, r3
				"+r" (new_sp_loc));
		// Now call the function
		myFunc(&num_to_inc1, 1);
 80006d8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80006da:	2101      	movs	r1, #1
 80006dc:	3061      	adds	r0, #97	@ 0x61
 80006de:	4798      	blx	r3
				"+r" (new_sp_loc));
		myFunc(&num_to_inc2, 2);
	}


}
 80006e0:	bd08      	pop	{r3, pc}
		prog_index = 0;
 80006e2:	4613      	mov	r3, r2
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e7ee      	b.n	80006c8 <SimpleOS+0x10>
	else if (prog_index == 1)
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d1f8      	bne.n	80006e0 <SimpleOS+0x28>
		new_sp_loc = base_sp - STACK_SPACE_NEEDED_FOR_MAIN - STACK_SPACE_FOR_OS_CALL -
 80006ee:	4806      	ldr	r0, [pc, #24]	@ (8000708 <SimpleOS+0x50>)
 80006f0:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80006f2:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
		asm volatile ("MOV sp, %0" :
 80006f6:	469d      	mov	sp, r3
		myFunc(&num_to_inc2, 2);
 80006f8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80006fa:	2102      	movs	r1, #2
 80006fc:	3060      	adds	r0, #96	@ 0x60
 80006fe:	4798      	blx	r3
}
 8000700:	e7ee      	b.n	80006e0 <SimpleOS+0x28>
 8000702:	bf00      	nop
 8000704:	20000000 	.word	0x20000000
 8000708:	200000d8 	.word	0x200000d8

0800070c <main>:
int main(void){
 800070c:	b508      	push	{r3, lr}
	Sys_Init();
 800070e:	f000 f9eb 	bl	8000ae8 <Sys_Init>
	InitDMA();
 8000712:	f7ff ff5d 	bl	80005d0 <InitDMA>
	spi_flash_interface_initialize_SPI();
 8000716:	f000 fa49 	bl	8000bac <spi_flash_interface_initialize_SPI>
	switchGameButtonInit();
 800071a:	f7ff ff91 	bl	8000640 <switchGameButtonInit>
	spi_flash_read_page(func, 200, 0x00);
 800071e:	4c09      	ldr	r4, [pc, #36]	@ (8000744 <main+0x38>)
 8000720:	2200      	movs	r2, #0
 8000722:	21c8      	movs	r1, #200	@ 0xc8
 8000724:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8000728:	f000 fa60 	bl	8000bec <spi_flash_read_page>
	asm("STR r13, %0" : "=m" (base_sp));
 800072c:	f8c4 d064 	str.w	sp, [r4, #100]	@ 0x64
	myFunc = (void (*) (uint8_t *, uint8_t) )(func+1);
 8000730:	f104 036d 	add.w	r3, r4, #109	@ 0x6d
 8000734:	66a3      	str	r3, [r4, #104]	@ 0x68
	printf("DONE\r\n");
 8000736:	4804      	ldr	r0, [pc, #16]	@ (8000748 <main+0x3c>)
 8000738:	f002 fb42 	bl	8002dc0 <puts>
	SimpleOS();
 800073c:	f7ff ffbc 	bl	80006b8 <SimpleOS>
	while(1)
 8000740:	e7fe      	b.n	8000740 <main+0x34>
 8000742:	bf00      	nop
 8000744:	200000d8 	.word	0x200000d8
 8000748:	08003c70 	.word	0x08003c70

0800074c <justCallTheOS>:
{
 800074c:	b508      	push	{r3, lr}
	uint32_t new_sp_location = (base_sp - STACK_SPACE_NEEDED_FOR_MAIN);
 800074e:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <justCallTheOS+0x14>)
 8000750:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000752:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
	asm volatile("MOV sp, %0" : "+r" (new_sp_location));
 8000756:	469d      	mov	sp, r3
	SimpleOS();
 8000758:	f7ff ffae 	bl	80006b8 <SimpleOS>
}
 800075c:	bd08      	pop	{r3, pc}
 800075e:	bf00      	nop
 8000760:	200000d8 	.word	0x200000d8

08000764 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000764:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <SCB_EnableICache+0x2c>)
 800076e:	2200      	movs	r2, #0
 8000770:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000774:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000778:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800077c:	695a      	ldr	r2, [r3, #20]
 800077e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000782:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000784:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000788:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000794:	b410      	push	{r4}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <SCB_EnableDCache+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800079e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007a2:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007a6:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80007aa:	e000      	b.n	80007ae <SCB_EnableDCache+0x1a>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80007ac:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007ae:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007b2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80007b6:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80007ba:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80007be:	490b      	ldr	r1, [pc, #44]	@ (80007ec <SCB_EnableDCache+0x58>)
 80007c0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80007c4:	4613      	mov	r3, r2
 80007c6:	3a01      	subs	r2, #1
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f2      	bne.n	80007b2 <SCB_EnableDCache+0x1e>
    } while(sets-- != 0U);
 80007cc:	1e43      	subs	r3, r0, #1
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d1ec      	bne.n	80007ac <SCB_EnableDCache+0x18>
 80007d2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007d6:	694b      	ldr	r3, [r1, #20]
 80007d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007dc:	614b      	str	r3, [r1, #20]
 80007de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007e2:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80007e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80007f0:	b500      	push	{lr}
 80007f2:	b093      	sub	sp, #76	@ 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007fc:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000806:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000808:	2219      	movs	r2, #25
 800080a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800080c:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8000810:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000812:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000814:	2309      	movs	r3, #9
 8000816:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000818:	2307      	movs	r3, #7
 800081a:	930c      	str	r3, [sp, #48]	@ 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800081c:	4668      	mov	r0, sp
 800081e:	f000 fdbb 	bl	8001398 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000822:	b100      	cbz	r0, 8000826 <SystemClock_Config+0x36>
    while(1) { ; }
 8000824:	e7fe      	b.n	8000824 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000826:	f000 fd79 	bl	800131c <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800082a:	b100      	cbz	r0, 800082e <SystemClock_Config+0x3e>
    while(1) { ; }
 800082c:	e7fe      	b.n	800082c <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800082e:	230f      	movs	r3, #15
 8000830:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2302      	movs	r3, #2
 8000834:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800083e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000844:	9311      	str	r3, [sp, #68]	@ 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000846:	2107      	movs	r1, #7
 8000848:	a80d      	add	r0, sp, #52	@ 0x34
 800084a:	f001 f81b 	bl	8001884 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800084e:	b100      	cbz	r0, 8000852 <SystemClock_Config+0x62>
    while(1) { ; }
 8000850:	e7fe      	b.n	8000850 <SystemClock_Config+0x60>
  }
}
 8000852:	b013      	add	sp, #76	@ 0x4c
 8000854:	f85d fb04 	ldr.w	pc, [sp], #4

08000858 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000858:	b508      	push	{r3, lr}
  /* Enable I-Cache */
  SCB_EnableICache();
 800085a:	f7ff ff83 	bl	8000764 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 800085e:	f7ff ff99 	bl	8000794 <SCB_EnableDCache>
}
 8000862:	bd08      	pop	{r3, pc}

08000864 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 8000864:	b0a4      	sub	sp, #144	@ 0x90
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b9f      	ldr	r3, [pc, #636]	@ (8000ae4 <Clock_Inits+0x280>)
 8000868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800086a:	f042 0201 	orr.w	r2, r2, #1
 800086e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000872:	f002 0201 	and.w	r2, r2, #1
 8000876:	9201      	str	r2, [sp, #4]
 8000878:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800087c:	f042 0202 	orr.w	r2, r2, #2
 8000880:	631a      	str	r2, [r3, #48]	@ 0x30
 8000882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000884:	f002 0202 	and.w	r2, r2, #2
 8000888:	9202      	str	r2, [sp, #8]
 800088a:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800088c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800088e:	f042 0204 	orr.w	r2, r2, #4
 8000892:	631a      	str	r2, [r3, #48]	@ 0x30
 8000894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000896:	f002 0204 	and.w	r2, r2, #4
 800089a:	9203      	str	r2, [sp, #12]
 800089c:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008a0:	f042 0208 	orr.w	r2, r2, #8
 80008a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80008a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008a8:	f002 0208 	and.w	r2, r2, #8
 80008ac:	9204      	str	r2, [sp, #16]
 80008ae:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80008b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008b2:	f042 0210 	orr.w	r2, r2, #16
 80008b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80008b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008ba:	f002 0210 	and.w	r2, r2, #16
 80008be:	9205      	str	r2, [sp, #20]
 80008c0:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80008c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008c4:	f042 0220 	orr.w	r2, r2, #32
 80008c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80008ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008cc:	f002 0220 	and.w	r2, r2, #32
 80008d0:	9206      	str	r2, [sp, #24]
 80008d2:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80008d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80008da:	631a      	str	r2, [r3, #48]	@ 0x30
 80008dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008de:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80008e2:	9207      	str	r2, [sp, #28]
 80008e4:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80008ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80008ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008f0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80008f4:	9208      	str	r2, [sp, #32]
 80008f6:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80008f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80008fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000902:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000906:	9209      	str	r2, [sp, #36]	@ 0x24
 8000908:	9a09      	ldr	r2, [sp, #36]	@ 0x24
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800090a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800090c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000910:	631a      	str	r2, [r3, #48]	@ 0x30
 8000912:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000914:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000918:	920a      	str	r2, [sp, #40]	@ 0x28
 800091a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800091c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800091e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000922:	631a      	str	r2, [r3, #48]	@ 0x30
 8000924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000926:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800092a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800092c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000930:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000934:	645a      	str	r2, [r3, #68]	@ 0x44
 8000936:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000938:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800093c:	920c      	str	r2, [sp, #48]	@ 0x30
 800093e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000942:	f042 0201 	orr.w	r2, r2, #1
 8000946:	645a      	str	r2, [r3, #68]	@ 0x44
 8000948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800094a:	f002 0201 	and.w	r2, r2, #1
 800094e:	920d      	str	r2, [sp, #52]	@ 0x34
 8000950:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000954:	f042 0201 	orr.w	r2, r2, #1
 8000958:	641a      	str	r2, [r3, #64]	@ 0x40
 800095a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800095c:	f002 0201 	and.w	r2, r2, #1
 8000960:	920e      	str	r2, [sp, #56]	@ 0x38
 8000962:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000964:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000966:	f042 0202 	orr.w	r2, r2, #2
 800096a:	641a      	str	r2, [r3, #64]	@ 0x40
 800096c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800096e:	f002 0202 	and.w	r2, r2, #2
 8000972:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000974:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
	__HAL_RCC_TIM4_CLK_ENABLE();
 8000976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000978:	f042 0204 	orr.w	r2, r2, #4
 800097c:	641a      	str	r2, [r3, #64]	@ 0x40
 800097e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000980:	f002 0204 	and.w	r2, r2, #4
 8000984:	9210      	str	r2, [sp, #64]	@ 0x40
 8000986:	9a10      	ldr	r2, [sp, #64]	@ 0x40
	__HAL_RCC_TIM5_CLK_ENABLE();
 8000988:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800098a:	f042 0208 	orr.w	r2, r2, #8
 800098e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000990:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000992:	f002 0208 	and.w	r2, r2, #8
 8000996:	9211      	str	r2, [sp, #68]	@ 0x44
 8000998:	9a11      	ldr	r2, [sp, #68]	@ 0x44
	__HAL_RCC_TIM6_CLK_ENABLE();
 800099a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800099c:	f042 0210 	orr.w	r2, r2, #16
 80009a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80009a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009a4:	f002 0210 	and.w	r2, r2, #16
 80009a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80009aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
	__HAL_RCC_TIM7_CLK_ENABLE();
 80009ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009ae:	f042 0220 	orr.w	r2, r2, #32
 80009b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80009b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009b6:	f002 0220 	and.w	r2, r2, #32
 80009ba:	9213      	str	r2, [sp, #76]	@ 0x4c
 80009bc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
	__HAL_RCC_TIM8_CLK_ENABLE();
 80009be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009c0:	f042 0202 	orr.w	r2, r2, #2
 80009c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80009c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009c8:	f002 0202 	and.w	r2, r2, #2
 80009cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80009ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
	__HAL_RCC_TIM9_CLK_ENABLE();
 80009d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80009d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80009d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009da:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 80009de:	9215      	str	r2, [sp, #84]	@ 0x54
 80009e0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
	__HAL_RCC_TIM10_CLK_ENABLE();
 80009e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009e4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80009e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80009ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009ec:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80009f0:	9216      	str	r2, [sp, #88]	@ 0x58
 80009f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
	__HAL_RCC_TIM11_CLK_ENABLE();
 80009f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009f6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80009fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80009fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009fe:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8000a02:	9217      	str	r2, [sp, #92]	@ 0x5c
 8000a04:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
	__HAL_RCC_TIM12_CLK_ENABLE();
 8000a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a10:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000a14:	9218      	str	r2, [sp, #96]	@ 0x60
 8000a16:	9a18      	ldr	r2, [sp, #96]	@ 0x60
	__HAL_RCC_TIM13_CLK_ENABLE();
 8000a18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a22:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000a26:	9219      	str	r2, [sp, #100]	@ 0x64
 8000a28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
	__HAL_RCC_TIM14_CLK_ENABLE();
 8000a2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a30:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a34:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000a38:	921a      	str	r2, [sp, #104]	@ 0x68
 8000a3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000a3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000a42:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a46:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000a4a:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000a4c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 8000a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a50:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000a54:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a58:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8000a5c:	921c      	str	r2, [sp, #112]	@ 0x70
 8000a5e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a66:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a6a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000a6e:	921d      	str	r2, [sp, #116]	@ 0x74
 8000a70:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
	__HAL_RCC_ADC2_CLK_ENABLE();
 8000a72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a78:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a7c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000a80:	921e      	str	r2, [sp, #120]	@ 0x78
 8000a82:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
	__HAL_RCC_ADC3_CLK_ENABLE();
 8000a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a8a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a8e:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8000a92:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000a94:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a98:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000a9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000aa0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	9220      	str	r2, [sp, #128]	@ 0x80
 8000aa6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000aa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000aaa:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000aae:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ab0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ab2:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000ab6:	9221      	str	r2, [sp, #132]	@ 0x84
 8000ab8:	9a21      	ldr	r2, [sp, #132]	@ 0x84

	// JPEG Clock
	__HAL_RCC_JPEG_CLK_ENABLE();
 8000aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000abc:	f042 0202 	orr.w	r2, r2, #2
 8000ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac4:	f002 0202 	and.w	r2, r2, #2
 8000ac8:	9222      	str	r2, [sp, #136]	@ 0x88
 8000aca:	9a22      	ldr	r2, [sp, #136]	@ 0x88

	// DMA2D Clock
	__HAL_RCC_DMA2D_CLK_ENABLE();
 8000acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ace:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ada:	9323      	str	r3, [sp, #140]	@ 0x8c
 8000adc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c

}
 8000ade:	b024      	add	sp, #144	@ 0x90
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <Sys_Init>:
void Sys_Init(void) {
 8000ae8:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 8000aea:	f7ff feb5 	bl	8000858 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8000aee:	f000 f9a1 	bl	8000e34 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000af2:	f7ff fe7d 	bl	80007f0 <SystemClock_Config>
	Clock_Inits();
 8000af6:	f7ff feb5 	bl	8000864 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 8000afa:	4a06      	ldr	r2, [pc, #24]	@ (8000b14 <Sys_Init+0x2c>)
 8000afc:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <Sys_Init+0x30>)
 8000b02:	f000 f911 	bl	8000d28 <initUart>
	setbuf(stdout, NULL);
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <Sys_Init+0x34>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	6898      	ldr	r0, [r3, #8]
 8000b0e:	f002 f95f 	bl	8002dd0 <setbuf>
}
 8000b12:	bd08      	pop	{r3, pc}
 8000b14:	40011000 	.word	0x40011000
 8000b18:	20000374 	.word	0x20000374
 8000b1c:	2000006c 	.word	0x2000006c

08000b20 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000b20:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000b22:	f000 f99d 	bl	8000e60 <HAL_IncTick>
}
 8000b26:	bd08      	pop	{r3, pc}

08000b28 <spi_flash_gpio_init>:
/** =============================================================
 *  Initialization Function
    ============================================================= */

void spi_flash_gpio_init()
{
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
	// Initialize the MOSI and MISO pins
	GPIO_InitTypeDef spi_pins_init_struct = {0};
 8000b2c:	2400      	movs	r4, #0
 8000b2e:	9405      	str	r4, [sp, #20]
 8000b30:	9406      	str	r4, [sp, #24]
 8000b32:	9407      	str	r4, [sp, #28]
 8000b34:	9408      	str	r4, [sp, #32]
 8000b36:	9409      	str	r4, [sp, #36]	@ 0x24

	spi_pins_init_struct.Pin = MOSI_PIN | MISO_PIN;
 8000b38:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b3c:	9305      	str	r3, [sp, #20]
	spi_pins_init_struct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	9306      	str	r3, [sp, #24]
	spi_pins_init_struct.Pull = GPIO_NOPULL;
	spi_pins_init_struct.Speed = GPIO_SPEED_HIGH;
 8000b42:	2503      	movs	r5, #3
 8000b44:	9508      	str	r5, [sp, #32]
	spi_pins_init_struct.Alternate = GPIO_AF5_SPI2;			// From Table 13 of stm32f769xx_Datasheet
 8000b46:	2305      	movs	r3, #5
 8000b48:	9309      	str	r3, [sp, #36]	@ 0x24
	HAL_GPIO_Init(MOSI_MISO_PORT, &spi_pins_init_struct);
 8000b4a:	a905      	add	r1, sp, #20
 8000b4c:	4814      	ldr	r0, [pc, #80]	@ (8000ba0 <spi_flash_gpio_init+0x78>)
 8000b4e:	f000 fadd 	bl	800110c <HAL_GPIO_Init>

	// Initialize the SCLK PIN
	spi_pins_init_struct.Pin = SCLK_PIN;
 8000b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b56:	9305      	str	r3, [sp, #20]

	HAL_GPIO_Init(SCLK_PORT, &spi_pins_init_struct);
 8000b58:	a905      	add	r1, sp, #20
 8000b5a:	4812      	ldr	r0, [pc, #72]	@ (8000ba4 <spi_flash_gpio_init+0x7c>)
 8000b5c:	f000 fad6 	bl	800110c <HAL_GPIO_Init>

	// Initialize the NSS Pins as normal GPIO Pins

	GPIO_InitTypeDef nss_control_pin_init_struct = {0};
 8000b60:	9400      	str	r4, [sp, #0]
 8000b62:	9401      	str	r4, [sp, #4]
 8000b64:	9402      	str	r4, [sp, #8]
 8000b66:	9403      	str	r4, [sp, #12]
 8000b68:	9404      	str	r4, [sp, #16]

	nss_control_pin_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9301      	str	r3, [sp, #4]
	nss_control_pin_init_struct.Pull = GPIO_NOPULL;
	nss_control_pin_init_struct.Speed = GPIO_SPEED_HIGH;
 8000b6e:	9503      	str	r5, [sp, #12]

	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000b70:	e011      	b.n	8000b96 <spi_flash_gpio_init+0x6e>
	{
		nss_control_pin_init_struct.Pin = cartridge_nss_pin_numbers[i];
 8000b72:	4d0d      	ldr	r5, [pc, #52]	@ (8000ba8 <spi_flash_gpio_init+0x80>)
 8000b74:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 8000b78:	9300      	str	r3, [sp, #0]
		HAL_GPIO_Init(cartridge_nss_ports[i], &nss_control_pin_init_struct);
 8000b7a:	eb05 0684 	add.w	r6, r5, r4, lsl #2
 8000b7e:	4669      	mov	r1, sp
 8000b80:	68b0      	ldr	r0, [r6, #8]
 8000b82:	f000 fac3 	bl	800110c <HAL_GPIO_Init>

		// MAKE SURE IT IS HIGH TO START
		HAL_GPIO_WritePin(cartridge_nss_ports[i], cartridge_nss_pin_numbers[i], GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8000b8c:	68b0      	ldr	r0, [r6, #8]
 8000b8e:	f000 fbbf 	bl	8001310 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000b92:	3401      	adds	r4, #1
 8000b94:	b2e4      	uxtb	r4, r4
 8000b96:	2c02      	cmp	r4, #2
 8000b98:	d9eb      	bls.n	8000b72 <spi_flash_gpio_init+0x4a>
	}

}
 8000b9a:	b00a      	add	sp, #40	@ 0x28
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	20000040 	.word	0x20000040

08000bac <spi_flash_interface_initialize_SPI>:

void spi_flash_interface_initialize_SPI()
{
 8000bac:	b508      	push	{r3, lr}
	spi_flash_gpio_init();
 8000bae:	f7ff ffbb 	bl	8000b28 <spi_flash_gpio_init>

	flash_spi_handle.Instance = SPI2;
 8000bb2:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <spi_flash_interface_initialize_SPI+0x38>)
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <spi_flash_interface_initialize_SPI+0x3c>)
 8000bb6:	6003      	str	r3, [r0, #0]
	flash_spi_handle.Init.Mode = SPI_MODE_MASTER; // Set master mode
 8000bb8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000bbc:	6043      	str	r3, [r0, #4]
	flash_spi_handle.Init.TIMode = SPI_TIMODE_DISABLE; // Use Motorola mode, not TI mode
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	6243      	str	r3, [r0, #36]	@ 0x24
	flash_spi_handle.Init.Direction = SPI_DIRECTION_2LINES; //Subject to change?
 8000bc2:	6083      	str	r3, [r0, #8]
	flash_spi_handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc4:	6203      	str	r3, [r0, #32]
	flash_spi_handle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bca:	60c2      	str	r2, [r0, #12]
	flash_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bcc:	6103      	str	r3, [r0, #16]
	flash_spi_handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bce:	6143      	str	r3, [r0, #20]
	flash_spi_handle.Init.NSS = SPI_NSS_SOFT;
 8000bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bd4:	6182      	str	r2, [r0, #24]
	flash_spi_handle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bd6:	6343      	str	r3, [r0, #52]	@ 0x34
	flash_spi_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000bd8:	2338      	movs	r3, #56	@ 0x38
 8000bda:	61c3      	str	r3, [r0, #28]

	HAL_SPI_Init(&flash_spi_handle);
 8000bdc:	f001 f85b 	bl	8001c96 <HAL_SPI_Init>
}
 8000be0:	bd08      	pop	{r3, pc}
 8000be2:	bf00      	nop
 8000be4:	20000310 	.word	0x20000310
 8000be8:	40003800 	.word	0x40003800

08000bec <spi_flash_read_page>:

}

void spi_flash_read_page(uint8_t * const databuf, uint16_t const datalen,
		uint32_t const addr)
{
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	4606      	mov	r6, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	4614      	mov	r4, r2
	HAL_GPIO_WritePin(cartridge_nss_ports[0], cartridge_nss_pin_numbers[0], GPIO_PIN_RESET);
 8000bf6:	4d15      	ldr	r5, [pc, #84]	@ (8000c4c <spi_flash_read_page+0x60>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	8829      	ldrh	r1, [r5, #0]
 8000bfc:	68a8      	ldr	r0, [r5, #8]
 8000bfe:	f000 fb87 	bl	8001310 <HAL_GPIO_WritePin>

	uint8_t setup_sequence[4];
	setup_sequence[0] = 0x03; // The write instruction
 8000c02:	2303      	movs	r3, #3
 8000c04:	f88d 300c 	strb.w	r3, [sp, #12]
	setup_sequence[1] = (uint8_t) (addr >> 16);
 8000c08:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8000c0c:	f88d 300d 	strb.w	r3, [sp, #13]
	setup_sequence[2] = (uint8_t) (addr >> 8);
 8000c10:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8000c14:	f88d 300e 	strb.w	r3, [sp, #14]
	setup_sequence[3] = (uint8_t) (addr);
 8000c18:	f88d 400f 	strb.w	r4, [sp, #15]

	HAL_SPI_Transmit(&flash_spi_handle, setup_sequence, 4, HAL_MAX_DELAY);
 8000c1c:	4c0c      	ldr	r4, [pc, #48]	@ (8000c50 <spi_flash_read_page+0x64>)
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	2204      	movs	r2, #4
 8000c24:	a903      	add	r1, sp, #12
 8000c26:	4620      	mov	r0, r4
 8000c28:	f001 f8c8 	bl	8001dbc <HAL_SPI_Transmit>

	HAL_SPI_TransmitReceive(&flash_spi_handle, databuf, databuf, datalen, HAL_MAX_DELAY);
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	463b      	mov	r3, r7
 8000c34:	4632      	mov	r2, r6
 8000c36:	4631      	mov	r1, r6
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f001 f9d8 	bl	8001fee <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(cartridge_nss_ports[0], cartridge_nss_pin_numbers[0], GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	8829      	ldrh	r1, [r5, #0]
 8000c42:	68a8      	ldr	r0, [r5, #8]
 8000c44:	f000 fb64 	bl	8001310 <HAL_GPIO_WritePin>
}
 8000c48:	b005      	add	sp, #20
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	20000040 	.word	0x20000040
 8000c50:	20000310 	.word	0x20000310

08000c54 <HAL_UART_MspInit>:
UART_HandleTypeDef USB_UART;

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000c54:	b530      	push	{r4, r5, lr}
 8000c56:	b08b      	sub	sp, #44	@ 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000c58:	6803      	ldr	r3, [r0, #0]
 8000c5a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d14 <HAL_UART_MspInit+0xc0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d004      	beq.n	8000c6a <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000c60:	4a2d      	ldr	r2, [pc, #180]	@ (8000d18 <HAL_UART_MspInit+0xc4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d02c      	beq.n	8000cc0 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000c66:	b00b      	add	sp, #44	@ 0x2c
 8000c68:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000c6a:	4c2c      	ldr	r4, [pc, #176]	@ (8000d1c <HAL_UART_MspInit+0xc8>)
 8000c6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6323      	str	r3, [r4, #48]	@ 0x30
 8000c74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	9301      	str	r3, [sp, #4]
 8000c7c:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000c7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c82:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c90:	2307      	movs	r3, #7
 8000c92:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000c94:	4d22      	ldr	r5, [pc, #136]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000c96:	a905      	add	r1, sp, #20
 8000c98:	4628      	mov	r0, r5
 8000c9a:	f000 fa37 	bl	800110c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ca2:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000ca4:	a905      	add	r1, sp, #20
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	f000 fa30 	bl	800110c <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000cac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6463      	str	r3, [r4, #68]	@ 0x44
 8000cb4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	9302      	str	r3, [sp, #8]
 8000cbc:	9b02      	ldr	r3, [sp, #8]
 8000cbe:	e7d2      	b.n	8000c66 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000cc0:	4c16      	ldr	r4, [pc, #88]	@ (8000d1c <HAL_UART_MspInit+0xc8>)
 8000cc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8000cca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	9303      	str	r3, [sp, #12]
 8000cd2:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000cd4:	2340      	movs	r3, #64	@ 0x40
 8000cd6:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000ce8:	4d0e      	ldr	r5, [pc, #56]	@ (8000d24 <HAL_UART_MspInit+0xd0>)
 8000cea:	a905      	add	r1, sp, #20
 8000cec:	4628      	mov	r0, r5
 8000cee:	f000 fa0d 	bl	800110c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cf2:	2380      	movs	r3, #128	@ 0x80
 8000cf4:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000cf6:	a905      	add	r1, sp, #20
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	f000 fa07 	bl	800110c <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000cfe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000d00:	f043 0320 	orr.w	r3, r3, #32
 8000d04:	6463      	str	r3, [r4, #68]	@ 0x44
 8000d06:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000d08:	f003 0320 	and.w	r3, r3, #32
 8000d0c:	9304      	str	r3, [sp, #16]
 8000d0e:	9b04      	ldr	r3, [sp, #16]
}
 8000d10:	e7a9      	b.n	8000c66 <HAL_UART_MspInit+0x12>
 8000d12:	bf00      	nop
 8000d14:	40011000 	.word	0x40011000
 8000d18:	40011400 	.word	0x40011400
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020800 	.word	0x40020800

08000d28 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000d28:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000d2a:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000d2c:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	2200      	movs	r2, #0
 8000d30:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000d32:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000d34:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000d36:	210c      	movs	r1, #12
 8000d38:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000d3a:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000d3c:	f001 fee4 	bl	8002b08 <HAL_UART_Init>
}
 8000d40:	bd08      	pop	{r3, pc}
	...

08000d44 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000d44:	b510      	push	{r4, lr}
 8000d46:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000d48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4c:	b292      	uxth	r2, r2
 8000d4e:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <_write+0x14>)
 8000d50:	f001 fdbb 	bl	80028ca <HAL_UART_Transmit>
	return len;
}
 8000d54:	4620      	mov	r0, r4
 8000d56:	bd10      	pop	{r4, pc}
 8000d58:	20000374 	.word	0x20000374

08000d5c <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000d5c:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000d5e:	2200      	movs	r2, #0
 8000d60:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	2201      	movs	r2, #1
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <_read+0x18>)
 8000d6a:	f001 fe0c 	bl	8002986 <HAL_UART_Receive>
	return len;
}
 8000d6e:	2001      	movs	r0, #1
 8000d70:	bd08      	pop	{r3, pc}
 8000d72:	bf00      	nop
 8000d74:	20000374 	.word	0x20000374

08000d78 <_close>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3
__attribute__((weak)) void _close(void){}
 8000d78:	4770      	bx	lr

08000d7a <_lseek>:
__attribute__((weak)) void _lseek(void){}
 8000d7a:	4770      	bx	lr

08000d7c <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8000d7c:	4770      	bx	lr

08000d7e <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 8000d7e:	4770      	bx	lr

08000d80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d80:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000d84:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d86:	490e      	ldr	r1, [pc, #56]	@ (8000dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d88:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc4 <LoopForever+0xe>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d9c:	4c0b      	ldr	r4, [pc, #44]	@ (8000dcc <LoopForever+0x16>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000daa:	f000 f813 	bl	8000dd4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dae:	f002 f9f1 	bl	8003194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fcab 	bl	800070c <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   r0, =_estack
 8000db8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8000dc4:	08003cbc 	.word	0x08003cbc
  ldr r2, =_sbss
 8000dc8:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8000dcc:	20000550 	.word	0x20000550

08000dd0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4a03      	ldr	r2, [pc, #12]	@ (8000de4 <SystemInit+0x10>)
 8000dd6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000dda:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000de8:	4770      	bx	lr
	...

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b510      	push	{r4, lr}
 8000dee:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <HAL_InitTick+0x40>)
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e30 <HAL_InitTick+0x44>)
 8000dfe:	6810      	ldr	r0, [r2, #0]
 8000e00:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e04:	f000 f8a0 	bl	8000f48 <HAL_SYSTICK_Config>
 8000e08:	b968      	cbnz	r0, 8000e26 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	2c0f      	cmp	r4, #15
 8000e0c:	d901      	bls.n	8000e12 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e0e:	2001      	movs	r0, #1
 8000e10:	e00a      	b.n	8000e28 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e12:	2200      	movs	r2, #0
 8000e14:	4621      	mov	r1, r4
 8000e16:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1a:	f000 f877 	bl	8000f0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1e:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <HAL_InitTick+0x40>)
 8000e20:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2000      	movs	r0, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000e26:	2001      	movs	r0, #1
}
 8000e28:	bd10      	pop	{r4, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000058 	.word	0x20000058
 8000e30:	20000054 	.word	0x20000054

08000e34 <HAL_Init>:
{
 8000e34:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <HAL_Init+0x28>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e46:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f84d 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f7ff ffcc 	bl	8000dec <HAL_InitTick>
  HAL_MspInit();
 8000e54:	f7ff ffc8 	bl	8000de8 <HAL_MspInit>
}
 8000e58:	2000      	movs	r0, #0
 8000e5a:	bd08      	pop	{r3, pc}
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e60:	4a03      	ldr	r2, [pc, #12]	@ (8000e70 <HAL_IncTick+0x10>)
 8000e62:	6811      	ldr	r1, [r2, #0]
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_IncTick+0x14>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	440b      	add	r3, r1
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200003fc 	.word	0x200003fc
 8000e74:	20000058 	.word	0x20000058

08000e78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e78:	4b01      	ldr	r3, [pc, #4]	@ (8000e80 <HAL_GetTick+0x8>)
 8000e7a:	6818      	ldr	r0, [r3, #0]
}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200003fc 	.word	0x200003fc

08000e84 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8000e84:	2800      	cmp	r0, #0
 8000e86:	db04      	blt.n	8000e92 <__NVIC_SetPriority+0xe>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	0109      	lsls	r1, r1, #4
 8000e8a:	b2c9      	uxtb	r1, r1
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_SetPriority+0x1c>)
 8000e8e:	5419      	strb	r1, [r3, r0]
 8000e90:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	f000 000f 	and.w	r0, r0, #15
 8000e96:	0109      	lsls	r1, r1, #4
 8000e98:	b2c9      	uxtb	r1, r1
 8000e9a:	4b02      	ldr	r3, [pc, #8]	@ (8000ea4 <__NVIC_SetPriority+0x20>)
 8000e9c:	5419      	strb	r1, [r3, r0]
}
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e400 	.word	0xe000e400
 8000ea4:	e000ed14 	.word	0xe000ed14

08000ea8 <NVIC_EncodePriority>:
{
 8000ea8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eaa:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eae:	f1c0 0c07 	rsb	ip, r0, #7
 8000eb2:	f1bc 0f04 	cmp.w	ip, #4
 8000eb6:	bf28      	it	cs
 8000eb8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebc:	1d03      	adds	r3, r0, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d90f      	bls.n	8000ee2 <NVIC_EncodePriority+0x3a>
 8000ec2:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 3eff 	mov.w	lr, #4294967295
 8000ec8:	fa0e f00c 	lsl.w	r0, lr, ip
 8000ecc:	ea21 0100 	bic.w	r1, r1, r0
 8000ed0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed2:	fa0e fe03 	lsl.w	lr, lr, r3
 8000ed6:	ea22 020e 	bic.w	r2, r2, lr
}
 8000eda:	ea41 0002 	orr.w	r0, r1, r2
 8000ede:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e7ee      	b.n	8000ec4 <NVIC_EncodePriority+0x1c>
	...

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4906      	ldr	r1, [pc, #24]	@ (8000f04 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000eea:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ef0:	041b      	lsls	r3, r3, #16
 8000ef2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	0200      	lsls	r0, r0, #8
 8000ef6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000efc:	4a02      	ldr	r2, [pc, #8]	@ (8000f08 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000efe:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000f00:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00
 8000f08:	05fa0000 	.word	0x05fa0000

08000f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0c:	b510      	push	{r4, lr}
 8000f0e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <HAL_NVIC_SetPriority+0x1c>)
 8000f12:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f14:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000f18:	f7ff ffc6 	bl	8000ea8 <NVIC_EncodePriority>
 8000f1c:	4601      	mov	r1, r0
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f7ff ffb0 	bl	8000e84 <__NVIC_SetPriority>
}
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	db07      	blt.n	8000f40 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f30:	f000 021f 	and.w	r2, r0, #31
 8000f34:	0940      	lsrs	r0, r0, #5
 8000f36:	2301      	movs	r3, #1
 8000f38:	4093      	lsls	r3, r2
 8000f3a:	4a02      	ldr	r2, [pc, #8]	@ (8000f44 <HAL_NVIC_EnableIRQ+0x18>)
 8000f3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	3801      	subs	r0, #1
 8000f4a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000f4e:	d20b      	bcs.n	8000f68 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000f54:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <HAL_SYSTICK_Config+0x24>)
 8000f58:	21f0      	movs	r1, #240	@ 0xf0
 8000f5a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5e:	2000      	movs	r0, #0
 8000f60:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	2207      	movs	r2, #7
 8000f64:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f66:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f68:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f70:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f72:	6801      	ldr	r1, [r0, #0]
 8000f74:	b2ca      	uxtb	r2, r1
 8000f76:	3a10      	subs	r2, #16
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <DMA_CalcBaseAndBitshift+0x34>)
 8000f7a:	fba3 4302 	umull	r4, r3, r3, r2
 8000f7e:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f80:	4c09      	ldr	r4, [pc, #36]	@ (8000fa8 <DMA_CalcBaseAndBitshift+0x38>)
 8000f82:	5ce3      	ldrb	r3, [r4, r3]
 8000f84:	65c3      	str	r3, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000f86:	2a5f      	cmp	r2, #95	@ 0x5f
 8000f88:	d907      	bls.n	8000f9a <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <DMA_CalcBaseAndBitshift+0x3c>)
 8000f8c:	400b      	ands	r3, r1
 8000f8e:	3304      	adds	r3, #4
 8000f90:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000f92:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f98:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <DMA_CalcBaseAndBitshift+0x3c>)
 8000f9c:	400b      	ands	r3, r1
 8000f9e:	6583      	str	r3, [r0, #88]	@ 0x58
 8000fa0:	e7f7      	b.n	8000f92 <DMA_CalcBaseAndBitshift+0x22>
 8000fa2:	bf00      	nop
 8000fa4:	aaaaaaab 	.word	0xaaaaaaab
 8000fa8:	08003c50 	.word	0x08003c50
 8000fac:	fffffc00 	.word	0xfffffc00

08000fb0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000fb0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000fb2:	6982      	ldr	r2, [r0, #24]
 8000fb4:	b992      	cbnz	r2, 8000fdc <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d00a      	beq.n	8000fd0 <DMA_CheckFifoParam+0x20>
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d002      	beq.n	8000fc4 <DMA_CheckFifoParam+0x14>
 8000fbe:	b10b      	cbz	r3, 8000fc4 <DMA_CheckFifoParam+0x14>
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fc4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000fc6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000fca:	d128      	bne.n	800101e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000fcc:	2000      	movs	r0, #0
 8000fce:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000fd0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000fd6:	d024      	beq.n	8001022 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000fd8:	2000      	movs	r0, #0
 8000fda:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000fdc:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8000fe0:	d009      	beq.n	8000ff6 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d925      	bls.n	8001032 <DMA_CheckFifoParam+0x82>
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d125      	bne.n	8001036 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000fec:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000ff0:	d123      	bne.n	800103a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	4770      	bx	lr
    switch (tmp)
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d803      	bhi.n	8001002 <DMA_CheckFifoParam+0x52>
 8000ffa:	e8df f003 	tbb	[pc, r3]
 8000ffe:	0414      	.short	0x0414
 8001000:	0a14      	.short	0x0a14
 8001002:	2000      	movs	r0, #0
 8001004:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001006:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001008:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800100c:	d10d      	bne.n	800102a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800100e:	2000      	movs	r0, #0
 8001010:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001012:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001014:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001018:	d009      	beq.n	800102e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800101a:	2000      	movs	r0, #0
 800101c:	4770      	bx	lr
        status = HAL_ERROR;
 800101e:	2001      	movs	r0, #1
 8001020:	4770      	bx	lr
        status = HAL_ERROR;
 8001022:	2001      	movs	r0, #1
 8001024:	4770      	bx	lr
      status = HAL_ERROR;
 8001026:	2001      	movs	r0, #1
 8001028:	4770      	bx	lr
        status = HAL_ERROR;
 800102a:	2001      	movs	r0, #1
 800102c:	4770      	bx	lr
        status = HAL_ERROR;
 800102e:	2001      	movs	r0, #1
 8001030:	4770      	bx	lr
      status = HAL_ERROR;
 8001032:	2001      	movs	r0, #1
 8001034:	4770      	bx	lr
    switch (tmp)
 8001036:	2000      	movs	r0, #0
 8001038:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800103a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800103c:	4770      	bx	lr
	...

08001040 <HAL_DMA_Init>:
{
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ff18 	bl	8000e78 <HAL_GetTick>
  if(hdma == NULL)
 8001048:	2c00      	cmp	r4, #0
 800104a:	d05b      	beq.n	8001104 <HAL_DMA_Init+0xc4>
 800104c:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800104e:	2302      	movs	r3, #2
 8001050:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001054:	2300      	movs	r3, #0
 8001056:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800105a:	6822      	ldr	r2, [r4, #0]
 800105c:	6813      	ldr	r3, [r2, #0]
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	f012 0f01 	tst.w	r2, #1
 800106c:	d00a      	beq.n	8001084 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800106e:	f7ff ff03 	bl	8000e78 <HAL_GetTick>
 8001072:	1b43      	subs	r3, r0, r5
 8001074:	2b05      	cmp	r3, #5
 8001076:	d9f5      	bls.n	8001064 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001078:	2320      	movs	r3, #32
 800107a:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800107c:	2003      	movs	r0, #3
 800107e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001082:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001084:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001086:	4920      	ldr	r1, [pc, #128]	@ (8001108 <HAL_DMA_Init+0xc8>)
 8001088:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800108a:	6862      	ldr	r2, [r4, #4]
 800108c:	68a0      	ldr	r0, [r4, #8]
 800108e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001090:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001092:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001094:	6920      	ldr	r0, [r4, #16]
 8001096:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001098:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109c:	69a0      	ldr	r0, [r4, #24]
 800109e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a0:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a4:	6a20      	ldr	r0, [r4, #32]
 80010a6:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a8:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80010ac:	2904      	cmp	r1, #4
 80010ae:	d01e      	beq.n	80010ee <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80010b0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80010b2:	6826      	ldr	r6, [r4, #0]
 80010b4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010b6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80010ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80010bc:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d107      	bne.n	80010d2 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80010c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80010c4:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010c6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80010c8:	b11b      	cbz	r3, 80010d2 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff ff70 	bl	8000fb0 <DMA_CheckFifoParam>
 80010d0:	b990      	cbnz	r0, 80010f8 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80010d2:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff ff4b 	bl	8000f70 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010da:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80010dc:	233f      	movs	r3, #63	@ 0x3f
 80010de:	4093      	lsls	r3, r2
 80010e0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e2:	2000      	movs	r0, #0
 80010e4:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80010e6:	2301      	movs	r3, #1
 80010e8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80010ec:	e7c9      	b.n	8001082 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80010f0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80010f2:	4301      	orrs	r1, r0
 80010f4:	430a      	orrs	r2, r1
 80010f6:	e7db      	b.n	80010b0 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010f8:	2340      	movs	r3, #64	@ 0x40
 80010fa:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80010fc:	2001      	movs	r0, #1
 80010fe:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001102:	e7be      	b.n	8001082 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001104:	2001      	movs	r0, #1
 8001106:	e7bc      	b.n	8001082 <HAL_DMA_Init+0x42>
 8001108:	e010803f 	.word	0xe010803f

0800110c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800110c:	2300      	movs	r3, #0
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f200 80f4 	bhi.w	80012fc <HAL_GPIO_Init+0x1f0>
{
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	e066      	b.n	80011e8 <HAL_GPIO_Init+0xdc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800111c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001120:	2403      	movs	r4, #3
 8001122:	fa04 f40e 	lsl.w	r4, r4, lr
 8001126:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800112a:	68cc      	ldr	r4, [r1, #12]
 800112c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001130:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001132:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001134:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001136:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113a:	684a      	ldr	r2, [r1, #4]
 800113c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001140:	409a      	lsls	r2, r3
 8001142:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001144:	6042      	str	r2, [r0, #4]
 8001146:	e05d      	b.n	8001204 <HAL_GPIO_Init+0xf8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001148:	08dc      	lsrs	r4, r3, #3
 800114a:	3408      	adds	r4, #8
 800114c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001150:	f003 0507 	and.w	r5, r3, #7
 8001154:	00ad      	lsls	r5, r5, #2
 8001156:	f04f 0e0f 	mov.w	lr, #15
 800115a:	fa0e fe05 	lsl.w	lr, lr, r5
 800115e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001162:	690a      	ldr	r2, [r1, #16]
 8001164:	40aa      	lsls	r2, r5
 8001166:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 800116a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800116e:	e05d      	b.n	800122c <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001170:	2209      	movs	r2, #9
 8001172:	e000      	b.n	8001176 <HAL_GPIO_Init+0x6a>
 8001174:	2200      	movs	r2, #0
 8001176:	fa02 f20e 	lsl.w	r2, r2, lr
 800117a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 800117c:	3402      	adds	r4, #2
 800117e:	4d60      	ldr	r5, [pc, #384]	@ (8001300 <HAL_GPIO_Init+0x1f4>)
 8001180:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001184:	4a5f      	ldr	r2, [pc, #380]	@ (8001304 <HAL_GPIO_Init+0x1f8>)
 8001186:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001188:	ea6f 020c 	mvn.w	r2, ip
 800118c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001190:	684e      	ldr	r6, [r1, #4]
 8001192:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001196:	d001      	beq.n	800119c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001198:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800119c:	4c59      	ldr	r4, [pc, #356]	@ (8001304 <HAL_GPIO_Init+0x1f8>)
 800119e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80011a0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011a6:	684e      	ldr	r6, [r1, #4]
 80011a8:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80011ac:	d001      	beq.n	80011b2 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80011ae:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80011b2:	4c54      	ldr	r4, [pc, #336]	@ (8001304 <HAL_GPIO_Init+0x1f8>)
 80011b4:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80011b6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011bc:	684e      	ldr	r6, [r1, #4]
 80011be:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80011c2:	d001      	beq.n	80011c8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80011c4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80011c8:	4c4e      	ldr	r4, [pc, #312]	@ (8001304 <HAL_GPIO_Init+0x1f8>)
 80011ca:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011cc:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d0:	684d      	ldr	r5, [r1, #4]
 80011d2:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80011d6:	d001      	beq.n	80011dc <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80011d8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80011dc:	4c49      	ldr	r4, [pc, #292]	@ (8001304 <HAL_GPIO_Init+0x1f8>)
 80011de:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80011e0:	3301      	adds	r3, #1
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	f200 8088 	bhi.w	80012f8 <HAL_GPIO_Init+0x1ec>
    ioposition = ((uint32_t)0x01) << position;
 80011e8:	2201      	movs	r2, #1
 80011ea:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ec:	680c      	ldr	r4, [r1, #0]
 80011ee:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80011f2:	ea32 0404 	bics.w	r4, r2, r4
 80011f6:	d1f3      	bne.n	80011e0 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f8:	684c      	ldr	r4, [r1, #4]
 80011fa:	f004 0403 	and.w	r4, r4, #3
 80011fe:	3c01      	subs	r4, #1
 8001200:	2c01      	cmp	r4, #1
 8001202:	d98a      	bls.n	800111a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001204:	684a      	ldr	r2, [r1, #4]
 8001206:	f002 0203 	and.w	r2, r2, #3
 800120a:	2a03      	cmp	r2, #3
 800120c:	d009      	beq.n	8001222 <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 800120e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001210:	005d      	lsls	r5, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	40aa      	lsls	r2, r5
 8001216:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800121a:	688a      	ldr	r2, [r1, #8]
 800121c:	40aa      	lsls	r2, r5
 800121e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001220:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	684a      	ldr	r2, [r1, #4]
 8001224:	f002 0203 	and.w	r2, r2, #3
 8001228:	2a02      	cmp	r2, #2
 800122a:	d08d      	beq.n	8001148 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800122c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800122e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f20e 	lsl.w	r2, r2, lr
 8001238:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800123c:	684a      	ldr	r2, [r1, #4]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	fa02 f20e 	lsl.w	r2, r2, lr
 8001246:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001248:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800124a:	684a      	ldr	r2, [r1, #4]
 800124c:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001250:	d0c6      	beq.n	80011e0 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	4a2d      	ldr	r2, [pc, #180]	@ (8001308 <HAL_GPIO_Init+0x1fc>)
 8001254:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001256:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800125a:	6454      	str	r4, [r2, #68]	@ 0x44
 800125c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800125e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001262:	9201      	str	r2, [sp, #4]
 8001264:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001266:	089c      	lsrs	r4, r3, #2
 8001268:	1ca5      	adds	r5, r4, #2
 800126a:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <HAL_GPIO_Init+0x1f4>)
 800126c:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001270:	f003 0e03 	and.w	lr, r3, #3
 8001274:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f20e 	lsl.w	r2, r2, lr
 800127e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001282:	4a22      	ldr	r2, [pc, #136]	@ (800130c <HAL_GPIO_Init+0x200>)
 8001284:	4290      	cmp	r0, r2
 8001286:	f43f af75 	beq.w	8001174 <HAL_GPIO_Init+0x68>
 800128a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800128e:	4290      	cmp	r0, r2
 8001290:	d022      	beq.n	80012d8 <HAL_GPIO_Init+0x1cc>
 8001292:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001296:	4290      	cmp	r0, r2
 8001298:	d020      	beq.n	80012dc <HAL_GPIO_Init+0x1d0>
 800129a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800129e:	4290      	cmp	r0, r2
 80012a0:	d01e      	beq.n	80012e0 <HAL_GPIO_Init+0x1d4>
 80012a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80012a6:	4290      	cmp	r0, r2
 80012a8:	d01c      	beq.n	80012e4 <HAL_GPIO_Init+0x1d8>
 80012aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80012ae:	4290      	cmp	r0, r2
 80012b0:	d01a      	beq.n	80012e8 <HAL_GPIO_Init+0x1dc>
 80012b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80012b6:	4290      	cmp	r0, r2
 80012b8:	d018      	beq.n	80012ec <HAL_GPIO_Init+0x1e0>
 80012ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80012be:	4290      	cmp	r0, r2
 80012c0:	d016      	beq.n	80012f0 <HAL_GPIO_Init+0x1e4>
 80012c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80012c6:	4290      	cmp	r0, r2
 80012c8:	d014      	beq.n	80012f4 <HAL_GPIO_Init+0x1e8>
 80012ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80012ce:	4290      	cmp	r0, r2
 80012d0:	f43f af4e 	beq.w	8001170 <HAL_GPIO_Init+0x64>
 80012d4:	220a      	movs	r2, #10
 80012d6:	e74e      	b.n	8001176 <HAL_GPIO_Init+0x6a>
 80012d8:	2201      	movs	r2, #1
 80012da:	e74c      	b.n	8001176 <HAL_GPIO_Init+0x6a>
 80012dc:	2202      	movs	r2, #2
 80012de:	e74a      	b.n	8001176 <HAL_GPIO_Init+0x6a>
 80012e0:	2203      	movs	r2, #3
 80012e2:	e748      	b.n	8001176 <HAL_GPIO_Init+0x6a>
 80012e4:	2204      	movs	r2, #4
 80012e6:	e746      	b.n	8001176 <HAL_GPIO_Init+0x6a>
 80012e8:	2205      	movs	r2, #5
 80012ea:	e744      	b.n	8001176 <HAL_GPIO_Init+0x6a>
 80012ec:	2206      	movs	r2, #6
 80012ee:	e742      	b.n	8001176 <HAL_GPIO_Init+0x6a>
 80012f0:	2207      	movs	r2, #7
 80012f2:	e740      	b.n	8001176 <HAL_GPIO_Init+0x6a>
 80012f4:	2208      	movs	r2, #8
 80012f6:	e73e      	b.n	8001176 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80012f8:	b002      	add	sp, #8
 80012fa:	bd70      	pop	{r4, r5, r6, pc}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40013800 	.word	0x40013800
 8001304:	40013c00 	.word	0x40013c00
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000

08001310 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	b10a      	cbz	r2, 8001316 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	6181      	str	r1, [r0, #24]
 8001314:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001316:	0409      	lsls	r1, r1, #16
 8001318:	6181      	str	r1, [r0, #24]
  }
}
 800131a:	4770      	bx	lr

0800131c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800131c:	b510      	push	{r4, lr}
 800131e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_PWREx_EnableOverDrive+0x74>)
 8001322:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001324:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001328:	641a      	str	r2, [r3, #64]	@ 0x40
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001334:	4a17      	ldr	r2, [pc, #92]	@ (8001394 <HAL_PWREx_EnableOverDrive+0x78>)
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800133e:	f7ff fd9b 	bl	8000e78 <HAL_GetTick>
 8001342:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <HAL_PWREx_EnableOverDrive+0x78>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800134c:	d108      	bne.n	8001360 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800134e:	f7ff fd93 	bl	8000e78 <HAL_GetTick>
 8001352:	1b00      	subs	r0, r0, r4
 8001354:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001358:	d9f4      	bls.n	8001344 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800135a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800135c:	b002      	add	sp, #8
 800135e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001360:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <HAL_PWREx_EnableOverDrive+0x78>)
 8001362:	6813      	ldr	r3, [r2, #0]
 8001364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001368:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800136a:	f7ff fd85 	bl	8000e78 <HAL_GetTick>
 800136e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <HAL_PWREx_EnableOverDrive+0x78>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001378:	d107      	bne.n	800138a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800137a:	f7ff fd7d 	bl	8000e78 <HAL_GetTick>
 800137e:	1b00      	subs	r0, r0, r4
 8001380:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001384:	d9f4      	bls.n	8001370 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001386:	2003      	movs	r0, #3
 8001388:	e7e8      	b.n	800135c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800138a:	2000      	movs	r0, #0
 800138c:	e7e6      	b.n	800135c <HAL_PWREx_EnableOverDrive+0x40>
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40007000 	.word	0x40007000

08001398 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001398:	2800      	cmp	r0, #0
 800139a:	f000 8206 	beq.w	80017aa <HAL_RCC_OscConfig+0x412>
{
 800139e:	b570      	push	{r4, r5, r6, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a4:	6803      	ldr	r3, [r0, #0]
 80013a6:	f013 0f01 	tst.w	r3, #1
 80013aa:	d029      	beq.n	8001400 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ac:	4b95      	ldr	r3, [pc, #596]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d01a      	beq.n	80013ee <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b8:	4b92      	ldr	r3, [pc, #584]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d00f      	beq.n	80013e4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c4:	6863      	ldr	r3, [r4, #4]
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ca:	d040      	beq.n	800144e <HAL_RCC_OscConfig+0xb6>
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d154      	bne.n	800147a <HAL_RCC_OscConfig+0xe2>
 80013d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e039      	b.n	8001458 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e4:	4b87      	ldr	r3, [pc, #540]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80013ec:	d0ea      	beq.n	80013c4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ee:	4b85      	ldr	r3, [pc, #532]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80013f6:	d003      	beq.n	8001400 <HAL_RCC_OscConfig+0x68>
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 81d7 	beq.w	80017ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	f013 0f02 	tst.w	r3, #2
 8001406:	d074      	beq.n	80014f2 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001408:	4b7e      	ldr	r3, [pc, #504]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f013 0f0c 	tst.w	r3, #12
 8001410:	d05e      	beq.n	80014d0 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001412:	4b7c      	ldr	r3, [pc, #496]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b08      	cmp	r3, #8
 800141c:	d053      	beq.n	80014c6 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800141e:	68e3      	ldr	r3, [r4, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 8089 	beq.w	8001538 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001426:	4a77      	ldr	r2, [pc, #476]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001428:	6813      	ldr	r3, [r2, #0]
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fd22 	bl	8000e78 <HAL_GetTick>
 8001434:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001436:	4b73      	ldr	r3, [pc, #460]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f013 0f02 	tst.w	r3, #2
 800143e:	d172      	bne.n	8001526 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff fd1a 	bl	8000e78 <HAL_GetTick>
 8001444:	1b40      	subs	r0, r0, r5
 8001446:	2802      	cmp	r0, #2
 8001448:	d9f5      	bls.n	8001436 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800144a:	2003      	movs	r0, #3
 800144c:	e1b4      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144e:	4a6d      	ldr	r2, [pc, #436]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001450:	6813      	ldr	r3, [r2, #0]
 8001452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001456:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	6863      	ldr	r3, [r4, #4]
 800145a:	b32b      	cbz	r3, 80014a8 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800145c:	f7ff fd0c 	bl	8000e78 <HAL_GetTick>
 8001460:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	4b68      	ldr	r3, [pc, #416]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800146a:	d1c9      	bne.n	8001400 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fd04 	bl	8000e78 <HAL_GetTick>
 8001470:	1b40      	subs	r0, r0, r5
 8001472:	2864      	cmp	r0, #100	@ 0x64
 8001474:	d9f5      	bls.n	8001462 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001476:	2003      	movs	r0, #3
 8001478:	e19e      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800147e:	d009      	beq.n	8001494 <HAL_RCC_OscConfig+0xfc>
 8001480:	4b60      	ldr	r3, [pc, #384]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e7e1      	b.n	8001458 <HAL_RCC_OscConfig+0xc0>
 8001494:	4b5b      	ldr	r3, [pc, #364]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e7d7      	b.n	8001458 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80014a8:	f7ff fce6 	bl	8000e78 <HAL_GetTick>
 80014ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	4b55      	ldr	r3, [pc, #340]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80014b6:	d0a3      	beq.n	8001400 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fcde 	bl	8000e78 <HAL_GetTick>
 80014bc:	1b40      	subs	r0, r0, r5
 80014be:	2864      	cmp	r0, #100	@ 0x64
 80014c0:	d9f5      	bls.n	80014ae <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80014c2:	2003      	movs	r0, #3
 80014c4:	e178      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80014ce:	d1a6      	bne.n	800141e <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f013 0f02 	tst.w	r3, #2
 80014d8:	d003      	beq.n	80014e2 <HAL_RCC_OscConfig+0x14a>
 80014da:	68e3      	ldr	r3, [r4, #12]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	f040 8168 	bne.w	80017b2 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e2:	4a48      	ldr	r2, [pc, #288]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	6813      	ldr	r3, [r2, #0]
 80014e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80014ea:	6921      	ldr	r1, [r4, #16]
 80014ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014f0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	f013 0f08 	tst.w	r3, #8
 80014f8:	d046      	beq.n	8001588 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014fa:	6963      	ldr	r3, [r4, #20]
 80014fc:	b383      	cbz	r3, 8001560 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fe:	4a41      	ldr	r2, [pc, #260]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001500:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001508:	f7ff fcb6 	bl	8000e78 <HAL_GetTick>
 800150c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	4b3d      	ldr	r3, [pc, #244]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001512:	f013 0f02 	tst.w	r3, #2
 8001516:	d137      	bne.n	8001588 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fcae 	bl	8000e78 <HAL_GetTick>
 800151c:	1b40      	subs	r0, r0, r5
 800151e:	2802      	cmp	r0, #2
 8001520:	d9f5      	bls.n	800150e <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8001522:	2003      	movs	r0, #3
 8001524:	e148      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001526:	4a37      	ldr	r2, [pc, #220]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001528:	6813      	ldr	r3, [r2, #0]
 800152a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800152e:	6921      	ldr	r1, [r4, #16]
 8001530:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e7dc      	b.n	80014f2 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8001538:	4a32      	ldr	r2, [pc, #200]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001542:	f7ff fc99 	bl	8000e78 <HAL_GetTick>
 8001546:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001548:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f013 0f02 	tst.w	r3, #2
 8001550:	d0cf      	beq.n	80014f2 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff fc91 	bl	8000e78 <HAL_GetTick>
 8001556:	1b40      	subs	r0, r0, r5
 8001558:	2802      	cmp	r0, #2
 800155a:	d9f5      	bls.n	8001548 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 800155c:	2003      	movs	r0, #3
 800155e:	e12b      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001560:	4a28      	ldr	r2, [pc, #160]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001562:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156a:	f7ff fc85 	bl	8000e78 <HAL_GetTick>
 800156e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001570:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001574:	f013 0f02 	tst.w	r3, #2
 8001578:	d006      	beq.n	8001588 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff fc7d 	bl	8000e78 <HAL_GetTick>
 800157e:	1b40      	subs	r0, r0, r5
 8001580:	2802      	cmp	r0, #2
 8001582:	d9f5      	bls.n	8001570 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001584:	2003      	movs	r0, #3
 8001586:	e117      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	f013 0f04 	tst.w	r3, #4
 800158e:	d07d      	beq.n	800168c <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001590:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001598:	d11e      	bne.n	80015d8 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 800159c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800159e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80015a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015ae:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b0:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_RCC_OscConfig+0x270>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80015b8:	d010      	beq.n	80015dc <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ba:	68a3      	ldr	r3, [r4, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d025      	beq.n	800160c <HAL_RCC_OscConfig+0x274>
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d13b      	bne.n	800163c <HAL_RCC_OscConfig+0x2a4>
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	671a      	str	r2, [r3, #112]	@ 0x70
 80015ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80015d0:	f022 0204 	bic.w	r2, r2, #4
 80015d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80015d6:	e01e      	b.n	8001616 <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 80015d8:	2500      	movs	r5, #0
 80015da:	e7e9      	b.n	80015b0 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 80015dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <HAL_RCC_OscConfig+0x270>)
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015e6:	f7ff fc47 	bl	8000e78 <HAL_GetTick>
 80015ea:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80015f4:	d1e1      	bne.n	80015ba <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7ff fc3f 	bl	8000e78 <HAL_GetTick>
 80015fa:	1b80      	subs	r0, r0, r6
 80015fc:	2864      	cmp	r0, #100	@ 0x64
 80015fe:	d9f5      	bls.n	80015ec <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8001600:	2003      	movs	r0, #3
 8001602:	e0d9      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160c:	4a72      	ldr	r2, [pc, #456]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 800160e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001616:	68a3      	ldr	r3, [r4, #8]
 8001618:	b333      	cbz	r3, 8001668 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff fc2d 	bl	8000e78 <HAL_GetTick>
 800161e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001620:	4b6d      	ldr	r3, [pc, #436]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001624:	f013 0f02 	tst.w	r3, #2
 8001628:	d12f      	bne.n	800168a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fc25 	bl	8000e78 <HAL_GetTick>
 800162e:	1b80      	subs	r0, r0, r6
 8001630:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001634:	4298      	cmp	r0, r3
 8001636:	d9f3      	bls.n	8001620 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001638:	2003      	movs	r0, #3
 800163a:	e0bd      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163c:	2b05      	cmp	r3, #5
 800163e:	d009      	beq.n	8001654 <HAL_RCC_OscConfig+0x2bc>
 8001640:	4b65      	ldr	r3, [pc, #404]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 8001642:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	671a      	str	r2, [r3, #112]	@ 0x70
 800164a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800164c:	f022 0204 	bic.w	r2, r2, #4
 8001650:	671a      	str	r2, [r3, #112]	@ 0x70
 8001652:	e7e0      	b.n	8001616 <HAL_RCC_OscConfig+0x27e>
 8001654:	4b60      	ldr	r3, [pc, #384]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 8001656:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001658:	f042 0204 	orr.w	r2, r2, #4
 800165c:	671a      	str	r2, [r3, #112]	@ 0x70
 800165e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	671a      	str	r2, [r3, #112]	@ 0x70
 8001666:	e7d6      	b.n	8001616 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fc06 	bl	8000e78 <HAL_GetTick>
 800166c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166e:	4b5a      	ldr	r3, [pc, #360]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001672:	f013 0f02 	tst.w	r3, #2
 8001676:	d008      	beq.n	800168a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff fbfe 	bl	8000e78 <HAL_GetTick>
 800167c:	1b80      	subs	r0, r0, r6
 800167e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001682:	4298      	cmp	r0, r3
 8001684:	d9f3      	bls.n	800166e <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8001686:	2003      	movs	r0, #3
 8001688:	e096      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800168a:	b9fd      	cbnz	r5, 80016cc <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168c:	69a3      	ldr	r3, [r4, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8091 	beq.w	80017b6 <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001694:	4a50      	ldr	r2, [pc, #320]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 8001696:	6892      	ldr	r2, [r2, #8]
 8001698:	f002 020c 	and.w	r2, r2, #12
 800169c:	2a08      	cmp	r2, #8
 800169e:	d059      	beq.n	8001754 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d019      	beq.n	80016d8 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a4:	4a4c      	ldr	r2, [pc, #304]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fbe3 	bl	8000e78 <HAL_GetTick>
 80016b2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b4:	4b48      	ldr	r3, [pc, #288]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80016bc:	d048      	beq.n	8001750 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff fbdb 	bl	8000e78 <HAL_GetTick>
 80016c2:	1b00      	subs	r0, r0, r4
 80016c4:	2802      	cmp	r0, #2
 80016c6:	d9f5      	bls.n	80016b4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80016c8:	2003      	movs	r0, #3
 80016ca:	e075      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016cc:	4a42      	ldr	r2, [pc, #264]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 80016ce:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80016d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d6:	e7d9      	b.n	800168c <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80016d8:	4a3f      	ldr	r2, [pc, #252]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 80016da:	6813      	ldr	r3, [r2, #0]
 80016dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80016e2:	f7ff fbc9 	bl	8000e78 <HAL_GetTick>
 80016e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e8:	4b3b      	ldr	r3, [pc, #236]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80016f0:	d006      	beq.n	8001700 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f2:	f7ff fbc1 	bl	8000e78 <HAL_GetTick>
 80016f6:	1b40      	subs	r0, r0, r5
 80016f8:	2802      	cmp	r0, #2
 80016fa:	d9f5      	bls.n	80016e8 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80016fc:	2003      	movs	r0, #3
 80016fe:	e05b      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001700:	69e3      	ldr	r3, [r4, #28]
 8001702:	6a22      	ldr	r2, [r4, #32]
 8001704:	4313      	orrs	r3, r2
 8001706:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001708:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800170c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800170e:	0852      	lsrs	r2, r2, #1
 8001710:	3a01      	subs	r2, #1
 8001712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001716:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001718:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800171c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800171e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001722:	4a2d      	ldr	r2, [pc, #180]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 8001724:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001726:	6813      	ldr	r3, [r2, #0]
 8001728:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800172c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800172e:	f7ff fba3 	bl	8000e78 <HAL_GetTick>
 8001732:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001734:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800173c:	d106      	bne.n	800174c <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fb9b 	bl	8000e78 <HAL_GetTick>
 8001742:	1b00      	subs	r0, r0, r4
 8001744:	2802      	cmp	r0, #2
 8001746:	d9f5      	bls.n	8001734 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8001748:	2003      	movs	r0, #3
 800174a:	e035      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800174c:	2000      	movs	r0, #0
 800174e:	e033      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
 8001750:	2000      	movs	r0, #0
 8001752:	e031      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 8001754:	4a20      	ldr	r2, [pc, #128]	@ (80017d8 <HAL_RCC_OscConfig+0x440>)
 8001756:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001758:	2b01      	cmp	r3, #1
 800175a:	d02f      	beq.n	80017bc <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8001760:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001762:	428b      	cmp	r3, r1
 8001764:	d12c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001766:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 800176a:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176c:	428b      	cmp	r3, r1
 800176e:	d129      	bne.n	80017c4 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001770:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001772:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001776:	4013      	ands	r3, r2
 8001778:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800177c:	d124      	bne.n	80017c8 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800177e:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8001782:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001784:	085b      	lsrs	r3, r3, #1
 8001786:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001788:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800178c:	d11e      	bne.n	80017cc <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800178e:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 8001792:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001794:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8001798:	d11a      	bne.n	80017d0 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800179a:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 800179e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a0:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 80017a4:	d116      	bne.n	80017d4 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 80017a6:	2000      	movs	r0, #0
 80017a8:	e006      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
}
 80017ac:	4770      	bx	lr
        return HAL_ERROR;
 80017ae:	2001      	movs	r0, #1
 80017b0:	e002      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
 80017b4:	e000      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
}
 80017b8:	b002      	add	sp, #8
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80017bc:	2001      	movs	r0, #1
 80017be:	e7fb      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
 80017c0:	2001      	movs	r0, #1
 80017c2:	e7f9      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
 80017c4:	2001      	movs	r0, #1
 80017c6:	e7f7      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
 80017c8:	2001      	movs	r0, #1
 80017ca:	e7f5      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
 80017cc:	2001      	movs	r0, #1
 80017ce:	e7f3      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
 80017d0:	2001      	movs	r0, #1
 80017d2:	e7f1      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
 80017d4:	2001      	movs	r0, #1
 80017d6:	e7ef      	b.n	80017b8 <HAL_RCC_OscConfig+0x420>
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017dc:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017de:	4b26      	ldr	r3, [pc, #152]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d041      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0x92>
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d141      	bne.n	8001872 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80017fc:	d012      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001800:	6859      	ldr	r1, [r3, #4]
 8001802:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001806:	481d      	ldr	r0, [pc, #116]	@ (800187c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001808:	2300      	movs	r3, #0
 800180a:	fba1 0100 	umull	r0, r1, r1, r0
 800180e:	f7fe fd67 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001812:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800181a:	3301      	adds	r3, #1
 800181c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800181e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001822:	e027      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001826:	6858      	ldr	r0, [r3, #4]
 8001828:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800182c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001830:	ebbc 0c00 	subs.w	ip, ip, r0
 8001834:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001838:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800183c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001840:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001844:	ebb1 010c 	subs.w	r1, r1, ip
 8001848:	eb63 030e 	sbc.w	r3, r3, lr
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001852:	00c9      	lsls	r1, r1, #3
 8001854:	eb11 0c00 	adds.w	ip, r1, r0
 8001858:	f143 0300 	adc.w	r3, r3, #0
 800185c:	0299      	lsls	r1, r3, #10
 800185e:	2300      	movs	r3, #0
 8001860:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001864:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001868:	f7fe fd3a 	bl	80002e0 <__aeabi_uldivmod>
 800186c:	e7d1      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800186e:	4803      	ldr	r0, [pc, #12]	@ (800187c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001870:	e000      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001872:	4803      	ldr	r0, [pc, #12]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001874:	bd08      	pop	{r3, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	017d7840 	.word	0x017d7840
 8001880:	00f42400 	.word	0x00f42400

08001884 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001884:	2800      	cmp	r0, #0
 8001886:	f000 80a0 	beq.w	80019ca <HAL_RCC_ClockConfig+0x146>
{
 800188a:	b570      	push	{r4, r5, r6, lr}
 800188c:	460d      	mov	r5, r1
 800188e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001890:	4b52      	ldr	r3, [pc, #328]	@ (80019dc <HAL_RCC_ClockConfig+0x158>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	428b      	cmp	r3, r1
 800189a:	d20b      	bcs.n	80018b4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189c:	4a4f      	ldr	r2, [pc, #316]	@ (80019dc <HAL_RCC_ClockConfig+0x158>)
 800189e:	6813      	ldr	r3, [r2, #0]
 80018a0:	f023 030f 	bic.w	r3, r3, #15
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a8:	6813      	ldr	r3, [r2, #0]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	428b      	cmp	r3, r1
 80018b0:	f040 808d 	bne.w	80019ce <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	f013 0f02 	tst.w	r3, #2
 80018ba:	d017      	beq.n	80018ec <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	f013 0f04 	tst.w	r3, #4
 80018c0:	d004      	beq.n	80018cc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c2:	4a47      	ldr	r2, [pc, #284]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 80018c4:	6893      	ldr	r3, [r2, #8]
 80018c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018ca:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	f013 0f08 	tst.w	r3, #8
 80018d2:	d004      	beq.n	80018de <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d4:	4a42      	ldr	r2, [pc, #264]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 80018d6:	6893      	ldr	r3, [r2, #8]
 80018d8:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018dc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018de:	4a40      	ldr	r2, [pc, #256]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 80018e0:	6893      	ldr	r3, [r2, #8]
 80018e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018e6:	68a1      	ldr	r1, [r4, #8]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	f013 0f01 	tst.w	r3, #1
 80018f2:	d031      	beq.n	8001958 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f4:	6863      	ldr	r3, [r4, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d020      	beq.n	800193c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d025      	beq.n	800194a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	4a38      	ldr	r2, [pc, #224]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	f012 0f02 	tst.w	r2, #2
 8001906:	d064      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001908:	4935      	ldr	r1, [pc, #212]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 800190a:	688a      	ldr	r2, [r1, #8]
 800190c:	f022 0203 	bic.w	r2, r2, #3
 8001910:	4313      	orrs	r3, r2
 8001912:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001914:	f7ff fab0 	bl	8000e78 <HAL_GetTick>
 8001918:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	4b31      	ldr	r3, [pc, #196]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	6862      	ldr	r2, [r4, #4]
 8001924:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001928:	d016      	beq.n	8001958 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192a:	f7ff faa5 	bl	8000e78 <HAL_GetTick>
 800192e:	1b80      	subs	r0, r0, r6
 8001930:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001934:	4298      	cmp	r0, r3
 8001936:	d9f0      	bls.n	800191a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001938:	2003      	movs	r0, #3
 800193a:	e045      	b.n	80019c8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193c:	4a28      	ldr	r2, [pc, #160]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001944:	d1e0      	bne.n	8001908 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001946:	2001      	movs	r0, #1
 8001948:	e03e      	b.n	80019c8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4a25      	ldr	r2, [pc, #148]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001952:	d1d9      	bne.n	8001908 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
 8001956:	e037      	b.n	80019c8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001958:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_RCC_ClockConfig+0x158>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	42ab      	cmp	r3, r5
 8001962:	d90a      	bls.n	800197a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001964:	4a1d      	ldr	r2, [pc, #116]	@ (80019dc <HAL_RCC_ClockConfig+0x158>)
 8001966:	6813      	ldr	r3, [r2, #0]
 8001968:	f023 030f 	bic.w	r3, r3, #15
 800196c:	432b      	orrs	r3, r5
 800196e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001970:	6813      	ldr	r3, [r2, #0]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	42ab      	cmp	r3, r5
 8001978:	d12d      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	f013 0f04 	tst.w	r3, #4
 8001980:	d006      	beq.n	8001990 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001982:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 8001984:	6893      	ldr	r3, [r2, #8]
 8001986:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800198a:	68e1      	ldr	r1, [r4, #12]
 800198c:	430b      	orrs	r3, r1
 800198e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	f013 0f08 	tst.w	r3, #8
 8001996:	d007      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001998:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 800199a:	6893      	ldr	r3, [r2, #8]
 800199c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80019a0:	6921      	ldr	r1, [r4, #16]
 80019a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019a6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019a8:	f7ff ff18 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019b4:	4a0b      	ldr	r2, [pc, #44]	@ (80019e4 <HAL_RCC_ClockConfig+0x160>)
 80019b6:	5cd3      	ldrb	r3, [r2, r3]
 80019b8:	40d8      	lsrs	r0, r3
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_RCC_ClockConfig+0x164>)
 80019bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_RCC_ClockConfig+0x168>)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	f7ff fa13 	bl	8000dec <HAL_InitTick>
  return HAL_OK;
 80019c6:	2000      	movs	r0, #0
}
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80019ca:	2001      	movs	r0, #1
}
 80019cc:	4770      	bx	lr
      return HAL_ERROR;
 80019ce:	2001      	movs	r0, #1
 80019d0:	e7fa      	b.n	80019c8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80019d2:	2001      	movs	r0, #1
 80019d4:	e7f8      	b.n	80019c8 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
 80019d8:	e7f6      	b.n	80019c8 <HAL_RCC_ClockConfig+0x144>
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00
 80019e0:	40023800 	.word	0x40023800
 80019e4:	08003c38 	.word	0x08003c38
 80019e8:	20000054 	.word	0x20000054
 80019ec:	2000005c 	.word	0x2000005c

080019f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80019f0:	4b01      	ldr	r3, [pc, #4]	@ (80019f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000054 	.word	0x20000054

080019fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019fe:	f7ff fff7 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a02:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a0a:	4a03      	ldr	r2, [pc, #12]	@ (8001a18 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a0e:	40d8      	lsrs	r0, r3
 8001a10:	bd08      	pop	{r3, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	08003c48 	.word	0x08003c48

08001a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a1c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a1e:	f7ff ffe7 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a22:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a2a:	4a03      	ldr	r2, [pc, #12]	@ (8001a38 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a2c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a2e:	40d8      	lsrs	r0, r3
 8001a30:	bd08      	pop	{r3, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	08003c48 	.word	0x08003c48

08001a3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	4605      	mov	r5, r0
 8001a44:	4688      	mov	r8, r1
 8001a46:	4617      	mov	r7, r2
 8001a48:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001a4a:	f7ff fa15 	bl	8000e78 <HAL_GetTick>
 8001a4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001a50:	1a1b      	subs	r3, r3, r0
 8001a52:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8001a56:	f7ff fa0f 	bl	8000e78 <HAL_GetTick>
 8001a5a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001a5c:	4b28      	ldr	r3, [pc, #160]	@ (8001b00 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001a64:	fb09 f303 	mul.w	r3, r9, r3
 8001a68:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a6a:	682b      	ldr	r3, [r5, #0]
 8001a6c:	689c      	ldr	r4, [r3, #8]
 8001a6e:	ea38 0404 	bics.w	r4, r8, r4
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	42bb      	cmp	r3, r7
 8001a7a:	d03d      	beq.n	8001af8 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a7c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001a80:	d0f3      	beq.n	8001a6a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001a82:	f7ff f9f9 	bl	8000e78 <HAL_GetTick>
 8001a86:	eba0 000a 	sub.w	r0, r0, sl
 8001a8a:	4548      	cmp	r0, r9
 8001a8c:	d207      	bcs.n	8001a9e <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001a8e:	9a01      	ldr	r2, [sp, #4]
 8001a90:	b102      	cbz	r2, 8001a94 <SPI_WaitFlagStateUntilTimeout+0x58>
 8001a92:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8001a94:	9b01      	ldr	r3, [sp, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	4691      	mov	r9, r2
 8001a9c:	e7e5      	b.n	8001a6a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a9e:	682a      	ldr	r2, [r5, #0]
 8001aa0:	6853      	ldr	r3, [r2, #4]
 8001aa2:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8001aa6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aa8:	686b      	ldr	r3, [r5, #4]
 8001aaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001aae:	d00b      	beq.n	8001ac8 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ab0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ab6:	d014      	beq.n	8001ae2 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	e018      	b.n	8001afa <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ac8:	68ab      	ldr	r3, [r5, #8]
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ace:	bf18      	it	ne
 8001ad0:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8001ad4:	d1ec      	bne.n	8001ab0 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8001ad6:	682a      	ldr	r2, [r5, #0]
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e7e6      	b.n	8001ab0 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8001ae2:	682a      	ldr	r2, [r5, #0]
 8001ae4:	6813      	ldr	r3, [r2, #0]
 8001ae6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	682a      	ldr	r2, [r5, #0]
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e7df      	b.n	8001ab8 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8001af8:	2000      	movs	r0, #0
}
 8001afa:	b002      	add	sp, #8
 8001afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b00:	20000054 	.word	0x20000054

08001b04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	4606      	mov	r6, r0
 8001b0c:	460d      	mov	r5, r1
 8001b0e:	4614      	mov	r4, r2
 8001b10:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001b18:	f7ff f9ae 	bl	8000e78 <HAL_GetTick>
 8001b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001b1e:	1a1b      	subs	r3, r3, r0
 8001b20:	eb03 0907 	add.w	r9, r3, r7
  tmp_tickstart = HAL_GetTick();
 8001b24:	f7ff f9a8 	bl	8000e78 <HAL_GetTick>
 8001b28:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001b2a:	f8d6 8000 	ldr.w	r8, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001b2e:	4b30      	ldr	r3, [pc, #192]	@ (8001bf0 <SPI_WaitFifoStateUntilTimeout+0xec>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b36:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001b3a:	0d1b      	lsrs	r3, r3, #20
 8001b3c:	fb09 f303 	mul.w	r3, r9, r3
 8001b40:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8001b42:	e002      	b.n	8001b4a <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8001b44:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001b48:	d112      	bne.n	8001b70 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8001b4a:	6833      	ldr	r3, [r6, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	ea03 0c05 	and.w	ip, r3, r5
 8001b52:	45a4      	cmp	ip, r4
 8001b54:	d047      	beq.n	8001be6 <SPI_WaitFifoStateUntilTimeout+0xe2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001b56:	f5b5 6fc0 	cmp.w	r5, #1536	@ 0x600
 8001b5a:	bf08      	it	eq
 8001b5c:	2c00      	cmpeq	r4, #0
 8001b5e:	d1f1      	bne.n	8001b44 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8001b60:	f898 300c 	ldrb.w	r3, [r8, #12]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8001b6a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001b6e:	e7e9      	b.n	8001b44 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b70:	f7ff f982 	bl	8000e78 <HAL_GetTick>
 8001b74:	eba0 000a 	sub.w	r0, r0, sl
 8001b78:	4548      	cmp	r0, r9
 8001b7a:	d207      	bcs.n	8001b8c <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001b7c:	9a01      	ldr	r2, [sp, #4]
 8001b7e:	b102      	cbz	r2, 8001b82 <SPI_WaitFifoStateUntilTimeout+0x7e>
 8001b80:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8001b82:	9b01      	ldr	r3, [sp, #4]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	4691      	mov	r9, r2
 8001b8a:	e7de      	b.n	8001b4a <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b8c:	6832      	ldr	r2, [r6, #0]
 8001b8e:	6853      	ldr	r3, [r2, #4]
 8001b90:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8001b94:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b96:	6873      	ldr	r3, [r6, #4]
 8001b98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b9c:	d00b      	beq.n	8001bb6 <SPI_WaitFifoStateUntilTimeout+0xb2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b9e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8001ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ba4:	d014      	beq.n	8001bd0 <SPI_WaitFifoStateUntilTimeout+0xcc>
        hspi->State = HAL_SPI_STATE_READY;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f886 305d 	strb.w	r3, [r6, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001bac:	2300      	movs	r3, #0
 8001bae:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	e018      	b.n	8001be8 <SPI_WaitFifoStateUntilTimeout+0xe4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bb6:	68b3      	ldr	r3, [r6, #8]
 8001bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bbc:	bf18      	it	ne
 8001bbe:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8001bc2:	d1ec      	bne.n	8001b9e <SPI_WaitFifoStateUntilTimeout+0x9a>
          __HAL_SPI_DISABLE(hspi);
 8001bc4:	6832      	ldr	r2, [r6, #0]
 8001bc6:	6813      	ldr	r3, [r2, #0]
 8001bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e7e6      	b.n	8001b9e <SPI_WaitFifoStateUntilTimeout+0x9a>
          SPI_RESET_CRC(hspi);
 8001bd0:	6832      	ldr	r2, [r6, #0]
 8001bd2:	6813      	ldr	r3, [r2, #0]
 8001bd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	6832      	ldr	r2, [r6, #0]
 8001bdc:	6813      	ldr	r3, [r2, #0]
 8001bde:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e7df      	b.n	8001ba6 <SPI_WaitFifoStateUntilTimeout+0xa2>
    }
  }

  return HAL_OK;
 8001be6:	2000      	movs	r0, #0
}
 8001be8:	b002      	add	sp, #8
 8001bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000054 	.word	0x20000054

08001bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b570      	push	{r4, r5, r6, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	460d      	mov	r5, r1
 8001bfc:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001bfe:	9200      	str	r2, [sp, #0]
 8001c00:	460b      	mov	r3, r1
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001c08:	f7ff ff7c 	bl	8001b04 <SPI_WaitFifoStateUntilTimeout>
 8001c0c:	bb18      	cbnz	r0, 8001c56 <SPI_EndRxTxTransaction+0x62>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c8c <SPI_EndRxTxTransaction+0x98>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1f      	ldr	r2, [pc, #124]	@ (8001c90 <SPI_EndRxTxTransaction+0x9c>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	0d5b      	lsrs	r3, r3, #21
 8001c1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c24:	6863      	ldr	r3, [r4, #4]
 8001c26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c2a:	d01a      	beq.n	8001c62 <SPI_EndRxTxTransaction+0x6e>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001c2c:	9b03      	ldr	r3, [sp, #12]
 8001c2e:	b13b      	cbz	r3, 8001c40 <SPI_EndRxTxTransaction+0x4c>
      {
        break;
      }
      count--;
 8001c30:	9b03      	ldr	r3, [sp, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c3e:	d1f5      	bne.n	8001c2c <SPI_EndRxTxTransaction+0x38>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c40:	9600      	str	r6, [sp, #0]
 8001c42:	462b      	mov	r3, r5
 8001c44:	2200      	movs	r2, #0
 8001c46:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff ff5a 	bl	8001b04 <SPI_WaitFifoStateUntilTimeout>
 8001c50:	b9b0      	cbnz	r0, 8001c80 <SPI_EndRxTxTransaction+0x8c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001c52:	b004      	add	sp, #16
 8001c54:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c56:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001c58:	f043 0320 	orr.w	r3, r3, #32
 8001c5c:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001c5e:	2003      	movs	r0, #3
 8001c60:	e7f7      	b.n	8001c52 <SPI_EndRxTxTransaction+0x5e>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c62:	9600      	str	r6, [sp, #0]
 8001c64:	462b      	mov	r3, r5
 8001c66:	2200      	movs	r2, #0
 8001c68:	2180      	movs	r1, #128	@ 0x80
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff fee6 	bl	8001a3c <SPI_WaitFlagStateUntilTimeout>
 8001c70:	2800      	cmp	r0, #0
 8001c72:	d0e5      	beq.n	8001c40 <SPI_EndRxTxTransaction+0x4c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c74:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001c76:	f043 0320 	orr.w	r3, r3, #32
 8001c7a:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	e7e8      	b.n	8001c52 <SPI_EndRxTxTransaction+0x5e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c80:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001c82:	f043 0320 	orr.w	r3, r3, #32
 8001c86:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001c88:	2003      	movs	r0, #3
 8001c8a:	e7e2      	b.n	8001c52 <SPI_EndRxTxTransaction+0x5e>
 8001c8c:	20000054 	.word	0x20000054
 8001c90:	165e9f81 	.word	0x165e9f81

08001c94 <HAL_SPI_MspInit>:
}
 8001c94:	4770      	bx	lr

08001c96 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001c96:	2800      	cmp	r0, #0
 8001c98:	f000 808e 	beq.w	8001db8 <HAL_SPI_Init+0x122>
{
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ca0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001ca2:	b933      	cbnz	r3, 8001cb2 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ca4:	6843      	ldr	r3, [r0, #4]
 8001ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001caa:	d005      	beq.n	8001cb8 <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61c3      	str	r3, [r0, #28]
 8001cb0:	e002      	b.n	8001cb8 <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cb6:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cb8:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d05a      	beq.n	8001d76 <HAL_SPI_Init+0xe0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001cc6:	6822      	ldr	r2, [r4, #0]
 8001cc8:	6813      	ldr	r3, [r2, #0]
 8001cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001cce:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cd0:	68e3      	ldr	r3, [r4, #12]
 8001cd2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001cd6:	d954      	bls.n	8001d82 <HAL_SPI_Init+0xec>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001cd8:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001cda:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001cde:	bf18      	it	ne
 8001ce0:	f5b3 6fe0 	cmpne.w	r3, #1792	@ 0x700
 8001ce4:	d001      	beq.n	8001cea <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cea:	6863      	ldr	r3, [r4, #4]
 8001cec:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8001cf0:	68a1      	ldr	r1, [r4, #8]
 8001cf2:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	6921      	ldr	r1, [r4, #16]
 8001cfa:	f001 0102 	and.w	r1, r1, #2
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	6961      	ldr	r1, [r4, #20]
 8001d02:	f001 0101 	and.w	r1, r1, #1
 8001d06:	430b      	orrs	r3, r1
 8001d08:	69a1      	ldr	r1, [r4, #24]
 8001d0a:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	69e1      	ldr	r1, [r4, #28]
 8001d12:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8001d16:	430b      	orrs	r3, r1
 8001d18:	6a21      	ldr	r1, [r4, #32]
 8001d1a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001d22:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8001d26:	6820      	ldr	r0, [r4, #0]
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d32:	d029      	beq.n	8001d88 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d34:	8b63      	ldrh	r3, [r4, #26]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001d3c:	f001 0110 	and.w	r1, r1, #16
 8001d40:	430b      	orrs	r3, r1
 8001d42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d44:	f001 0108 	and.w	r1, r1, #8
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	68e1      	ldr	r1, [r4, #12]
 8001d4c:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8001d50:	430b      	orrs	r3, r1
 8001d52:	6821      	ldr	r1, [r4, #0]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d58:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d5e:	d027      	beq.n	8001db0 <HAL_SPI_Init+0x11a>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	69d3      	ldr	r3, [r2, #28]
 8001d64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d68:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8001d74:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001d76:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7ff ff8a 	bl	8001c94 <HAL_SPI_MspInit>
 8001d80:	e79e      	b.n	8001cc0 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d86:	e7a8      	b.n	8001cda <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001d88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001d8a:	b92b      	cbnz	r3, 8001d98 <HAL_SPI_Init+0x102>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d8c:	68e3      	ldr	r3, [r4, #12]
 8001d8e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001d92:	d90a      	bls.n	8001daa <HAL_SPI_Init+0x114>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001d94:	2302      	movs	r3, #2
 8001d96:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8001d98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d1ca      	bne.n	8001d34 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8001d9e:	6821      	ldr	r1, [r4, #0]
 8001da0:	680b      	ldr	r3, [r1, #0]
 8001da2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001da6:	600b      	str	r3, [r1, #0]
 8001da8:	e7c4      	b.n	8001d34 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001daa:	2301      	movs	r3, #1
 8001dac:	6323      	str	r3, [r4, #48]	@ 0x30
 8001dae:	e7f3      	b.n	8001d98 <HAL_SPI_Init+0x102>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	e7d3      	b.n	8001d60 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
}
 8001dba:	4770      	bx	lr

08001dbc <HAL_SPI_Transmit>:
{
 8001dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8001dc4:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	f000 810e 	beq.w	8001fea <HAL_SPI_Transmit+0x22e>
 8001dce:	4604      	mov	r4, r0
 8001dd0:	4689      	mov	r9, r1
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8001dda:	f7ff f84d 	bl	8000e78 <HAL_GetTick>
 8001dde:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001de0:	f894 605d 	ldrb.w	r6, [r4, #93]	@ 0x5d
 8001de4:	b2f6      	uxtb	r6, r6
 8001de6:	2e01      	cmp	r6, #1
 8001de8:	f040 80ec 	bne.w	8001fc4 <HAL_SPI_Transmit+0x208>
  if ((pData == NULL) || (Size == 0U))
 8001dec:	f1b8 0f00 	cmp.w	r8, #0
 8001df0:	bf18      	it	ne
 8001df2:	f1b9 0f00 	cmpne.w	r9, #0
 8001df6:	f000 80e6 	beq.w	8001fc6 <HAL_SPI_Transmit+0x20a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e04:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001e08:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001e0c:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e10:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001e12:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001e16:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001e1a:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001e1c:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e1e:	68a3      	ldr	r3, [r4, #8]
 8001e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e24:	d022      	beq.n	8001e6c <HAL_SPI_Transmit+0xb0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e2c:	d029      	beq.n	8001e82 <HAL_SPI_Transmit+0xc6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001e36:	d103      	bne.n	8001e40 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e3e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e40:	68e3      	ldr	r3, [r4, #12]
 8001e42:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e46:	d94d      	bls.n	8001ee4 <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e48:	6863      	ldr	r3, [r4, #4]
 8001e4a:	b113      	cbz	r3, 8001e52 <HAL_SPI_Transmit+0x96>
 8001e4c:	f1b8 0f01 	cmp.w	r8, #1
 8001e50:	d12e      	bne.n	8001eb0 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e52:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	8812      	ldrh	r2, [r2, #0]
 8001e58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e5a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001e60:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001e6a:	e021      	b.n	8001eb0 <HAL_SPI_Transmit+0xf4>
    __HAL_SPI_DISABLE(hspi);
 8001e6c:	6822      	ldr	r2, [r4, #0]
 8001e6e:	6813      	ldr	r3, [r2, #0]
 8001e70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e74:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	e7d1      	b.n	8001e26 <HAL_SPI_Transmit+0x6a>
    SPI_RESET_CRC(hspi);
 8001e82:	6822      	ldr	r2, [r4, #0]
 8001e84:	6813      	ldr	r3, [r2, #0]
 8001e86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	6822      	ldr	r2, [r4, #0]
 8001e8e:	6813      	ldr	r3, [r2, #0]
 8001e90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e7ca      	b.n	8001e2e <HAL_SPI_Transmit+0x72>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e98:	f7fe ffee 	bl	8000e78 <HAL_GetTick>
 8001e9c:	1bc0      	subs	r0, r0, r7
 8001e9e:	42a8      	cmp	r0, r5
 8001ea0:	d303      	bcc.n	8001eaa <HAL_SPI_Transmit+0xee>
 8001ea2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001ea6:	f040 8098 	bne.w	8001fda <HAL_SPI_Transmit+0x21e>
 8001eaa:	2d00      	cmp	r5, #0
 8001eac:	f000 8097 	beq.w	8001fde <HAL_SPI_Transmit+0x222>
    while (hspi->TxXferCount > 0U)
 8001eb0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d066      	beq.n	8001f86 <HAL_SPI_Transmit+0x1ca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	f012 0f02 	tst.w	r2, #2
 8001ec0:	d0ea      	beq.n	8001e98 <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ec2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001ec4:	8812      	ldrh	r2, [r2, #0]
 8001ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ec8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001eca:	3302      	adds	r3, #2
 8001ecc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001ece:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8001ed2:	fa1f fc8c 	uxth.w	ip, ip
 8001ed6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001eda:	fa1f fc8c 	uxth.w	ip, ip
 8001ede:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8001ee2:	e7e5      	b.n	8001eb0 <HAL_SPI_Transmit+0xf4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ee4:	6863      	ldr	r3, [r4, #4]
 8001ee6:	b113      	cbz	r3, 8001eee <HAL_SPI_Transmit+0x132>
 8001ee8:	f1b8 0f01 	cmp.w	r8, #1
 8001eec:	d133      	bne.n	8001f56 <HAL_SPI_Transmit+0x19a>
      if (hspi->TxXferCount > 1U)
 8001eee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d90c      	bls.n	8001f10 <HAL_SPI_Transmit+0x154>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ef6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	8812      	ldrh	r2, [r2, #0]
 8001efc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001efe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f00:	3302      	adds	r3, #2
 8001f02:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001f04:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b02      	subs	r3, #2
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001f0e:	e022      	b.n	8001f56 <HAL_SPI_Transmit+0x19a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f10:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	7812      	ldrb	r2, [r2, #0]
 8001f16:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8001f18:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001f1e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001f28:	e015      	b.n	8001f56 <HAL_SPI_Transmit+0x19a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f2a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8001f30:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f32:	3301      	adds	r3, #1
 8001f34:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8001f36:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001f40:	e009      	b.n	8001f56 <HAL_SPI_Transmit+0x19a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f42:	f7fe ff99 	bl	8000e78 <HAL_GetTick>
 8001f46:	1bc0      	subs	r0, r0, r7
 8001f48:	42a8      	cmp	r0, r5
 8001f4a:	d302      	bcc.n	8001f52 <HAL_SPI_Transmit+0x196>
 8001f4c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001f50:	d147      	bne.n	8001fe2 <HAL_SPI_Transmit+0x226>
 8001f52:	2d00      	cmp	r5, #0
 8001f54:	d047      	beq.n	8001fe6 <HAL_SPI_Transmit+0x22a>
    while (hspi->TxXferCount > 0U)
 8001f56:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	b1a3      	cbz	r3, 8001f86 <HAL_SPI_Transmit+0x1ca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f5c:	6822      	ldr	r2, [r4, #0]
 8001f5e:	6893      	ldr	r3, [r2, #8]
 8001f60:	f013 0f02 	tst.w	r3, #2
 8001f64:	d0ed      	beq.n	8001f42 <HAL_SPI_Transmit+0x186>
        if (hspi->TxXferCount > 1U)
 8001f66:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d9dd      	bls.n	8001f2a <HAL_SPI_Transmit+0x16e>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f74:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f76:	3302      	adds	r3, #2
 8001f78:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001f7a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b02      	subs	r3, #2
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001f84:	e7e7      	b.n	8001f56 <HAL_SPI_Transmit+0x19a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f86:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f8c:	d014      	beq.n	8001fb8 <HAL_SPI_Transmit+0x1fc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f8e:	463a      	mov	r2, r7
 8001f90:	4629      	mov	r1, r5
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7ff fe2e 	bl	8001bf4 <SPI_EndRxTxTransaction>
 8001f98:	b108      	cbz	r0, 8001f9e <HAL_SPI_Transmit+0x1e2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f9e:	68a3      	ldr	r3, [r4, #8]
 8001fa0:	b933      	cbnz	r3, 8001fb0 <HAL_SPI_Transmit+0x1f4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	9201      	str	r2, [sp, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fb0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001fb2:	b943      	cbnz	r3, 8001fc6 <HAL_SPI_Transmit+0x20a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fb4:	2600      	movs	r6, #0
 8001fb6:	e006      	b.n	8001fc6 <HAL_SPI_Transmit+0x20a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001fb8:	6822      	ldr	r2, [r4, #0]
 8001fba:	6813      	ldr	r3, [r2, #0]
 8001fbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e7e4      	b.n	8001f8e <HAL_SPI_Transmit+0x1d2>
    errorcode = HAL_BUSY;
 8001fc4:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8001fd2:	4630      	mov	r0, r6
 8001fd4:	b003      	add	sp, #12
 8001fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8001fda:	2603      	movs	r6, #3
 8001fdc:	e7f3      	b.n	8001fc6 <HAL_SPI_Transmit+0x20a>
 8001fde:	2603      	movs	r6, #3
 8001fe0:	e7f1      	b.n	8001fc6 <HAL_SPI_Transmit+0x20a>
          errorcode = HAL_TIMEOUT;
 8001fe2:	2603      	movs	r6, #3
 8001fe4:	e7ef      	b.n	8001fc6 <HAL_SPI_Transmit+0x20a>
 8001fe6:	2603      	movs	r6, #3
 8001fe8:	e7ed      	b.n	8001fc6 <HAL_SPI_Transmit+0x20a>
  __HAL_LOCK(hspi);
 8001fea:	2602      	movs	r6, #2
 8001fec:	e7f1      	b.n	8001fd2 <HAL_SPI_Transmit+0x216>

08001fee <HAL_SPI_TransmitReceive>:
{
 8001fee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	461f      	mov	r7, r3
 8001ff6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  __IO uint32_t tmpreg = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8001ffc:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 8002000:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8002004:	2b01      	cmp	r3, #1
 8002006:	f000 81f7 	beq.w	80023f8 <HAL_SPI_TransmitReceive+0x40a>
 800200a:	4604      	mov	r4, r0
 800200c:	468a      	mov	sl, r1
 800200e:	4693      	mov	fp, r2
 8002010:	2301      	movs	r3, #1
 8002012:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8002016:	f7fe ff2f 	bl	8000e78 <HAL_GetTick>
 800201a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800201c:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8002020:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002022:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8002024:	6822      	ldr	r2, [r4, #0]
 8002026:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800202a:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800202e:	2b01      	cmp	r3, #1
 8002030:	d00a      	beq.n	8002048 <HAL_SPI_TransmitReceive+0x5a>
 8002032:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8002036:	f040 81c6 	bne.w	80023c6 <HAL_SPI_TransmitReceive+0x3d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800203a:	68a1      	ldr	r1, [r4, #8]
 800203c:	2900      	cmp	r1, #0
 800203e:	f040 81cd 	bne.w	80023dc <HAL_SPI_TransmitReceive+0x3ee>
 8002042:	2b04      	cmp	r3, #4
 8002044:	f040 81cc 	bne.w	80023e0 <HAL_SPI_TransmitReceive+0x3f2>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002048:	f1bb 0f00 	cmp.w	fp, #0
 800204c:	bf18      	it	ne
 800204e:	f1ba 0f00 	cmpne.w	sl, #0
 8002052:	f000 81c7 	beq.w	80023e4 <HAL_SPI_TransmitReceive+0x3f6>
 8002056:	2f00      	cmp	r7, #0
 8002058:	f000 81c6 	beq.w	80023e8 <HAL_SPI_TransmitReceive+0x3fa>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800205c:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b04      	cmp	r3, #4
 8002064:	d002      	beq.n	800206c <HAL_SPI_TransmitReceive+0x7e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002066:	2305      	movs	r3, #5
 8002068:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800206c:	2300      	movs	r3, #0
 800206e:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002070:	f8c4 b040 	str.w	fp, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002074:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002078:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800207c:	f8c4 a038 	str.w	sl, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002080:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002082:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 8002084:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002086:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002088:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800208a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800208e:	d029      	beq.n	80020e4 <HAL_SPI_TransmitReceive+0xf6>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002090:	68e3      	ldr	r3, [r4, #12]
 8002092:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002096:	d801      	bhi.n	800209c <HAL_SPI_TransmitReceive+0xae>
 8002098:	2f01      	cmp	r7, #1
 800209a:	d92d      	bls.n	80020f8 <HAL_SPI_TransmitReceive+0x10a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800209c:	6822      	ldr	r2, [r4, #0]
 800209e:	6853      	ldr	r3, [r2, #4]
 80020a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020a4:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80020ae:	d103      	bne.n	80020b8 <HAL_SPI_TransmitReceive+0xca>
    __HAL_SPI_ENABLE(hspi);
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020b6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020b8:	68e3      	ldr	r3, [r4, #12]
 80020ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80020be:	d97d      	bls.n	80021bc <HAL_SPI_TransmitReceive+0x1ce>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c0:	6863      	ldr	r3, [r4, #4]
 80020c2:	b10b      	cbz	r3, 80020c8 <HAL_SPI_TransmitReceive+0xda>
 80020c4:	2f01      	cmp	r7, #1
 80020c6:	d10b      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020c8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	8812      	ldrh	r2, [r2, #0]
 80020ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80020d2:	3302      	adds	r3, #2
 80020d4:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80020d6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29b      	uxth	r3, r3
 80020de:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80020e0:	2701      	movs	r7, #1
 80020e2:	e042      	b.n	800216a <HAL_SPI_TransmitReceive+0x17c>
    SPI_RESET_CRC(hspi);
 80020e4:	6813      	ldr	r3, [r2, #0]
 80020e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	6822      	ldr	r2, [r4, #0]
 80020ee:	6813      	ldr	r3, [r2, #0]
 80020f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e7cb      	b.n	8002090 <HAL_SPI_TransmitReceive+0xa2>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020f8:	6822      	ldr	r2, [r4, #0]
 80020fa:	6853      	ldr	r3, [r2, #4]
 80020fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002100:	6053      	str	r3, [r2, #4]
 8002102:	e7d0      	b.n	80020a6 <HAL_SPI_TransmitReceive+0xb8>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8002104:	f018 0f04 	tst.w	r8, #4
 8002108:	d107      	bne.n	800211a <HAL_SPI_TransmitReceive+0x12c>
 800210a:	f019 0f08 	tst.w	r9, #8
 800210e:	d004      	beq.n	800211a <HAL_SPI_TransmitReceive+0x12c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8002110:	6822      	ldr	r2, [r4, #0]
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002118:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800211a:	6822      	ldr	r2, [r4, #0]
 800211c:	6813      	ldr	r3, [r2, #0]
 800211e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002122:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8002124:	2700      	movs	r7, #0
 8002126:	e000      	b.n	800212a <HAL_SPI_TransmitReceive+0x13c>
 8002128:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	f012 0f01 	tst.w	r2, #1
 8002132:	d011      	beq.n	8002158 <HAL_SPI_TransmitReceive+0x16a>
 8002134:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8002138:	b292      	uxth	r2, r2
 800213a:	b16a      	cbz	r2, 8002158 <HAL_SPI_TransmitReceive+0x16a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002142:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002144:	3302      	adds	r3, #2
 8002146:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8002148:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29b      	uxth	r3, r3
 8002152:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8002156:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002158:	f7fe fe8e 	bl	8000e78 <HAL_GetTick>
 800215c:	1b80      	subs	r0, r0, r6
 800215e:	42a8      	cmp	r0, r5
 8002160:	d303      	bcc.n	800216a <HAL_SPI_TransmitReceive+0x17c>
 8002162:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002166:	f040 8141 	bne.w	80023ec <HAL_SPI_TransmitReceive+0x3fe>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800216a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800216c:	b29b      	uxth	r3, r3
 800216e:	b92b      	cbnz	r3, 800217c <HAL_SPI_TransmitReceive+0x18e>
 8002170:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80d1 	beq.w	800231e <HAL_SPI_TransmitReceive+0x330>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	f012 0f02 	tst.w	r2, #2
 8002184:	d0d1      	beq.n	800212a <HAL_SPI_TransmitReceive+0x13c>
 8002186:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002188:	b292      	uxth	r2, r2
 800218a:	2a00      	cmp	r2, #0
 800218c:	d0cd      	beq.n	800212a <HAL_SPI_TransmitReceive+0x13c>
 800218e:	2f00      	cmp	r7, #0
 8002190:	d0cb      	beq.n	800212a <HAL_SPI_TransmitReceive+0x13c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002192:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002194:	8812      	ldrh	r2, [r2, #0]
 8002196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002198:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800219a:	3302      	adds	r3, #2
 800219c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800219e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80021a8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1bb      	bne.n	8002128 <HAL_SPI_TransmitReceive+0x13a>
 80021b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021b6:	d0a5      	beq.n	8002104 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 0U;
 80021b8:	2700      	movs	r7, #0
 80021ba:	e7b6      	b.n	800212a <HAL_SPI_TransmitReceive+0x13c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021bc:	6863      	ldr	r3, [r4, #4]
 80021be:	b10b      	cbz	r3, 80021c4 <HAL_SPI_TransmitReceive+0x1d6>
 80021c0:	2f01      	cmp	r7, #1
 80021c2:	d10f      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x1f6>
      if (hspi->TxXferCount > 1U)
 80021c4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d90d      	bls.n	80021e8 <HAL_SPI_TransmitReceive+0x1fa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021cc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	8812      	ldrh	r2, [r2, #0]
 80021d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80021d6:	3302      	adds	r3, #2
 80021d8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80021da:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b02      	subs	r3, #2
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80021e4:	2701      	movs	r7, #1
 80021e6:	e065      	b.n	80022b4 <HAL_SPI_TransmitReceive+0x2c6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021e8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	7812      	ldrb	r2, [r2, #0]
 80021ee:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80021f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80021f2:	3301      	adds	r3, #1
 80021f4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80021f6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002200:	e7f0      	b.n	80021e4 <HAL_SPI_TransmitReceive+0x1f6>
        if (hspi->TxXferCount > 1U)
 8002202:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002204:	b292      	uxth	r2, r2
 8002206:	2a01      	cmp	r2, #1
 8002208:	d913      	bls.n	8002232 <HAL_SPI_TransmitReceive+0x244>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800220a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002210:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002212:	3302      	adds	r3, #2
 8002214:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002216:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b02      	subs	r3, #2
 800221c:	b29b      	uxth	r3, r3
 800221e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002220:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002222:	b29b      	uxth	r3, r3
 8002224:	bb1b      	cbnz	r3, 800226e <HAL_SPI_TransmitReceive+0x280>
 8002226:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800222c:	d00d      	beq.n	800224a <HAL_SPI_TransmitReceive+0x25c>
        txallowed = 0U;
 800222e:	2700      	movs	r7, #0
 8002230:	e052      	b.n	80022d8 <HAL_SPI_TransmitReceive+0x2ea>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002232:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8002238:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800223a:	3301      	adds	r3, #1
 800223c:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800223e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29b      	uxth	r3, r3
 8002246:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002248:	e7ea      	b.n	8002220 <HAL_SPI_TransmitReceive+0x232>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800224a:	f018 0f04 	tst.w	r8, #4
 800224e:	d107      	bne.n	8002260 <HAL_SPI_TransmitReceive+0x272>
 8002250:	f019 0f08 	tst.w	r9, #8
 8002254:	d004      	beq.n	8002260 <HAL_SPI_TransmitReceive+0x272>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8002256:	6822      	ldr	r2, [r4, #0]
 8002258:	6813      	ldr	r3, [r2, #0]
 800225a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800225e:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002260:	6822      	ldr	r2, [r4, #0]
 8002262:	6813      	ldr	r3, [r2, #0]
 8002264:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002268:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 800226a:	2700      	movs	r7, #0
 800226c:	e034      	b.n	80022d8 <HAL_SPI_TransmitReceive+0x2ea>
 800226e:	2700      	movs	r7, #0
 8002270:	e032      	b.n	80022d8 <HAL_SPI_TransmitReceive+0x2ea>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	6853      	ldr	r3, [r2, #4]
 8002276:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800227a:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800227c:	2701      	movs	r7, #1
 800227e:	e00d      	b.n	800229c <HAL_SPI_TransmitReceive+0x2ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002280:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002282:	7b1b      	ldrb	r3, [r3, #12]
 8002284:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8002286:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002288:	3301      	adds	r3, #1
 800228a:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 800228c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b29b      	uxth	r3, r3
 8002296:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 800229a:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800229c:	f7fe fdec 	bl	8000e78 <HAL_GetTick>
 80022a0:	1b80      	subs	r0, r0, r6
 80022a2:	42a8      	cmp	r0, r5
 80022a4:	d303      	bcc.n	80022ae <HAL_SPI_TransmitReceive+0x2c0>
 80022a6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80022aa:	f040 80a1 	bne.w	80023f0 <HAL_SPI_TransmitReceive+0x402>
 80022ae:	2d00      	cmp	r5, #0
 80022b0:	f000 80a0 	beq.w	80023f4 <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022b4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	b923      	cbnz	r3, 80022c4 <HAL_SPI_TransmitReceive+0x2d6>
 80022ba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02c      	beq.n	800231e <HAL_SPI_TransmitReceive+0x330>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	f012 0f02 	tst.w	r2, #2
 80022cc:	d004      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x2ea>
 80022ce:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80022d0:	b292      	uxth	r2, r2
 80022d2:	b10a      	cbz	r2, 80022d8 <HAL_SPI_TransmitReceive+0x2ea>
 80022d4:	2f00      	cmp	r7, #0
 80022d6:	d194      	bne.n	8002202 <HAL_SPI_TransmitReceive+0x214>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	f012 0f01 	tst.w	r2, #1
 80022e0:	d0dc      	beq.n	800229c <HAL_SPI_TransmitReceive+0x2ae>
 80022e2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80022e6:	b292      	uxth	r2, r2
 80022e8:	2a00      	cmp	r2, #0
 80022ea:	d0d7      	beq.n	800229c <HAL_SPI_TransmitReceive+0x2ae>
        if (hspi->RxXferCount > 1U)
 80022ec:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80022f0:	b292      	uxth	r2, r2
 80022f2:	2a01      	cmp	r2, #1
 80022f4:	d9c4      	bls.n	8002280 <HAL_SPI_TransmitReceive+0x292>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80022fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022fe:	3302      	adds	r3, #2
 8002300:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002302:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b02      	subs	r3, #2
 800230a:	b29b      	uxth	r3, r3
 800230c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002310:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d9ab      	bls.n	8002272 <HAL_SPI_TransmitReceive+0x284>
        txallowed = 1U;
 800231a:	2701      	movs	r7, #1
 800231c:	e7be      	b.n	800229c <HAL_SPI_TransmitReceive+0x2ae>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800231e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002324:	d017      	beq.n	8002356 <HAL_SPI_TransmitReceive+0x368>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	f012 0f10 	tst.w	r2, #16
 800232e:	d048      	beq.n	80023c2 <HAL_SPI_TransmitReceive+0x3d4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002330:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002332:	f042 0202 	orr.w	r2, r2, #2
 8002336:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002338:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800233c:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 800233e:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002340:	4632      	mov	r2, r6
 8002342:	4629      	mov	r1, r5
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff fc55 	bl	8001bf4 <SPI_EndRxTxTransaction>
 800234a:	2800      	cmp	r0, #0
 800234c:	d03c      	beq.n	80023c8 <HAL_SPI_TransmitReceive+0x3da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800234e:	2320      	movs	r3, #32
 8002350:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8002352:	2701      	movs	r7, #1
 8002354:	e038      	b.n	80023c8 <HAL_SPI_TransmitReceive+0x3da>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002356:	9600      	str	r6, [sp, #0]
 8002358:	462b      	mov	r3, r5
 800235a:	2201      	movs	r2, #1
 800235c:	4611      	mov	r1, r2
 800235e:	4620      	mov	r0, r4
 8002360:	f7ff fb6c 	bl	8001a3c <SPI_WaitFlagStateUntilTimeout>
 8002364:	b9e0      	cbnz	r0, 80023a0 <HAL_SPI_TransmitReceive+0x3b2>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002366:	68e3      	ldr	r3, [r4, #12]
 8002368:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800236c:	d01e      	beq.n	80023ac <HAL_SPI_TransmitReceive+0x3be>
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800236e:	6827      	ldr	r7, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8002370:	7b3b      	ldrb	r3, [r7, #12]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 8002378:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800237c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800237e:	2b02      	cmp	r3, #2
 8002380:	d1d1      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x338>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002382:	9600      	str	r6, [sp, #0]
 8002384:	462b      	mov	r3, r5
 8002386:	2201      	movs	r2, #1
 8002388:	4611      	mov	r1, r2
 800238a:	4620      	mov	r0, r4
 800238c:	f7ff fb56 	bl	8001a3c <SPI_WaitFlagStateUntilTimeout>
 8002390:	b988      	cbnz	r0, 80023b6 <HAL_SPI_TransmitReceive+0x3c8>
        tmpreg8 = *ptmpreg8;
 8002392:	7b3b      	ldrb	r3, [r7, #12]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 800239a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800239e:	e7c2      	b.n	8002326 <HAL_SPI_TransmitReceive+0x338>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80023a0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80023a2:	f043 0302 	orr.w	r3, r3, #2
 80023a6:	6623      	str	r3, [r4, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 80023a8:	2703      	movs	r7, #3
      goto error;
 80023aa:	e00d      	b.n	80023c8 <HAL_SPI_TransmitReceive+0x3da>
      tmpreg = READ_REG(hspi->Instance->DR);
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 80023b2:	9b03      	ldr	r3, [sp, #12]
 80023b4:	e7b7      	b.n	8002326 <HAL_SPI_TransmitReceive+0x338>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80023b6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6623      	str	r3, [r4, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 80023be:	2703      	movs	r7, #3
          goto error;
 80023c0:	e002      	b.n	80023c8 <HAL_SPI_TransmitReceive+0x3da>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023c2:	2700      	movs	r7, #0
 80023c4:	e7bc      	b.n	8002340 <HAL_SPI_TransmitReceive+0x352>
    errorcode = HAL_BUSY;
 80023c6:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80023ce:	2300      	movs	r3, #0
 80023d0:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80023d4:	4638      	mov	r0, r7
 80023d6:	b005      	add	sp, #20
 80023d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 80023dc:	2702      	movs	r7, #2
 80023de:	e7f3      	b.n	80023c8 <HAL_SPI_TransmitReceive+0x3da>
 80023e0:	2702      	movs	r7, #2
 80023e2:	e7f1      	b.n	80023c8 <HAL_SPI_TransmitReceive+0x3da>
    errorcode = HAL_ERROR;
 80023e4:	2701      	movs	r7, #1
 80023e6:	e7ef      	b.n	80023c8 <HAL_SPI_TransmitReceive+0x3da>
 80023e8:	2701      	movs	r7, #1
 80023ea:	e7ed      	b.n	80023c8 <HAL_SPI_TransmitReceive+0x3da>
        errorcode = HAL_TIMEOUT;
 80023ec:	2703      	movs	r7, #3
 80023ee:	e7eb      	b.n	80023c8 <HAL_SPI_TransmitReceive+0x3da>
        errorcode = HAL_TIMEOUT;
 80023f0:	2703      	movs	r7, #3
 80023f2:	e7e9      	b.n	80023c8 <HAL_SPI_TransmitReceive+0x3da>
 80023f4:	2703      	movs	r7, #3
 80023f6:	e7e7      	b.n	80023c8 <HAL_SPI_TransmitReceive+0x3da>
  __HAL_LOCK(hspi);
 80023f8:	2702      	movs	r7, #2
 80023fa:	e7eb      	b.n	80023d4 <HAL_SPI_TransmitReceive+0x3e6>

080023fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023fc:	b510      	push	{r4, lr}
 80023fe:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002400:	6883      	ldr	r3, [r0, #8]
 8002402:	6902      	ldr	r2, [r0, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	6942      	ldr	r2, [r0, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	69c2      	ldr	r2, [r0, #28]
 800240c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800240e:	6801      	ldr	r1, [r0, #0]
 8002410:	6808      	ldr	r0, [r1, #0]
 8002412:	4a93      	ldr	r2, [pc, #588]	@ (8002660 <UART_SetConfig+0x264>)
 8002414:	4002      	ands	r2, r0
 8002416:	431a      	orrs	r2, r3
 8002418:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800241a:	6822      	ldr	r2, [r4, #0]
 800241c:	6853      	ldr	r3, [r2, #4]
 800241e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002422:	68e1      	ldr	r1, [r4, #12]
 8002424:	430b      	orrs	r3, r1
 8002426:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002428:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 800242a:	6a23      	ldr	r3, [r4, #32]
 800242c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800242e:	6821      	ldr	r1, [r4, #0]
 8002430:	688b      	ldr	r3, [r1, #8]
 8002432:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	4a89      	ldr	r2, [pc, #548]	@ (8002664 <UART_SetConfig+0x268>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <UART_SetConfig+0x7a>
 8002442:	4a89      	ldr	r2, [pc, #548]	@ (8002668 <UART_SetConfig+0x26c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d029      	beq.n	800249c <UART_SetConfig+0xa0>
 8002448:	4a88      	ldr	r2, [pc, #544]	@ (800266c <UART_SetConfig+0x270>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d03e      	beq.n	80024cc <UART_SetConfig+0xd0>
 800244e:	4a88      	ldr	r2, [pc, #544]	@ (8002670 <UART_SetConfig+0x274>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d062      	beq.n	800251a <UART_SetConfig+0x11e>
 8002454:	4a87      	ldr	r2, [pc, #540]	@ (8002674 <UART_SetConfig+0x278>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d071      	beq.n	800253e <UART_SetConfig+0x142>
 800245a:	4a87      	ldr	r2, [pc, #540]	@ (8002678 <UART_SetConfig+0x27c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	f000 8083 	beq.w	8002568 <UART_SetConfig+0x16c>
 8002462:	4a86      	ldr	r2, [pc, #536]	@ (800267c <UART_SetConfig+0x280>)
 8002464:	4293      	cmp	r3, r2
 8002466:	f000 8094 	beq.w	8002592 <UART_SetConfig+0x196>
 800246a:	4a85      	ldr	r2, [pc, #532]	@ (8002680 <UART_SetConfig+0x284>)
 800246c:	4293      	cmp	r3, r2
 800246e:	f000 80a5 	beq.w	80025bc <UART_SetConfig+0x1c0>
 8002472:	2310      	movs	r3, #16
 8002474:	e03a      	b.n	80024ec <UART_SetConfig+0xf0>
 8002476:	4b83      	ldr	r3, [pc, #524]	@ (8002684 <UART_SetConfig+0x288>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b03      	cmp	r3, #3
 8002482:	d809      	bhi.n	8002498 <UART_SetConfig+0x9c>
 8002484:	e8df f003 	tbb	[pc, r3]
 8002488:	06ae0402 	.word	0x06ae0402
 800248c:	2301      	movs	r3, #1
 800248e:	e02d      	b.n	80024ec <UART_SetConfig+0xf0>
 8002490:	2304      	movs	r3, #4
 8002492:	e02b      	b.n	80024ec <UART_SetConfig+0xf0>
 8002494:	2308      	movs	r3, #8
 8002496:	e029      	b.n	80024ec <UART_SetConfig+0xf0>
 8002498:	2310      	movs	r3, #16
 800249a:	e027      	b.n	80024ec <UART_SetConfig+0xf0>
 800249c:	4b79      	ldr	r3, [pc, #484]	@ (8002684 <UART_SetConfig+0x288>)
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	d80e      	bhi.n	80024c8 <UART_SetConfig+0xcc>
 80024aa:	e8df f003 	tbb	[pc, r3]
 80024ae:	0d07      	.short	0x0d07
 80024b0:	0d090d0d 	.word	0x0d090d0d
 80024b4:	0d9d0d0d 	.word	0x0d9d0d0d
 80024b8:	0d0d      	.short	0x0d0d
 80024ba:	0b          	.byte	0x0b
 80024bb:	00          	.byte	0x00
 80024bc:	2300      	movs	r3, #0
 80024be:	e015      	b.n	80024ec <UART_SetConfig+0xf0>
 80024c0:	2304      	movs	r3, #4
 80024c2:	e013      	b.n	80024ec <UART_SetConfig+0xf0>
 80024c4:	2308      	movs	r3, #8
 80024c6:	e011      	b.n	80024ec <UART_SetConfig+0xf0>
 80024c8:	2310      	movs	r3, #16
 80024ca:	e00f      	b.n	80024ec <UART_SetConfig+0xf0>
 80024cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002684 <UART_SetConfig+0x288>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	f000 8088 	beq.w	80025ec <UART_SetConfig+0x1f0>
 80024dc:	d819      	bhi.n	8002512 <UART_SetConfig+0x116>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8086 	beq.w	80025f0 <UART_SetConfig+0x1f4>
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	f040 8085 	bne.w	80025f4 <UART_SetConfig+0x1f8>
 80024ea:	2304      	movs	r3, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ec:	69e0      	ldr	r0, [r4, #28]
 80024ee:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80024f2:	f000 80ab 	beq.w	800264c <UART_SetConfig+0x250>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	f200 810c 	bhi.w	8002714 <UART_SetConfig+0x318>
 80024fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002500:	00fb00e8 	.word	0x00fb00e8
 8002504:	010a00e6 	.word	0x010a00e6
 8002508:	010a00fe 	.word	0x010a00fe
 800250c:	010a010a 	.word	0x010a010a
 8002510:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002512:	2b30      	cmp	r3, #48	@ 0x30
 8002514:	d170      	bne.n	80025f8 <UART_SetConfig+0x1fc>
 8002516:	2308      	movs	r3, #8
 8002518:	e7e8      	b.n	80024ec <UART_SetConfig+0xf0>
 800251a:	4b5a      	ldr	r3, [pc, #360]	@ (8002684 <UART_SetConfig+0x288>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002520:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002524:	2b80      	cmp	r3, #128	@ 0x80
 8002526:	d069      	beq.n	80025fc <UART_SetConfig+0x200>
 8002528:	d805      	bhi.n	8002536 <UART_SetConfig+0x13a>
 800252a:	2b00      	cmp	r3, #0
 800252c:	d068      	beq.n	8002600 <UART_SetConfig+0x204>
 800252e:	2b40      	cmp	r3, #64	@ 0x40
 8002530:	d168      	bne.n	8002604 <UART_SetConfig+0x208>
 8002532:	2304      	movs	r3, #4
 8002534:	e7da      	b.n	80024ec <UART_SetConfig+0xf0>
 8002536:	2bc0      	cmp	r3, #192	@ 0xc0
 8002538:	d166      	bne.n	8002608 <UART_SetConfig+0x20c>
 800253a:	2308      	movs	r3, #8
 800253c:	e7d6      	b.n	80024ec <UART_SetConfig+0xf0>
 800253e:	4b51      	ldr	r3, [pc, #324]	@ (8002684 <UART_SetConfig+0x288>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800254c:	d05e      	beq.n	800260c <UART_SetConfig+0x210>
 800254e:	d806      	bhi.n	800255e <UART_SetConfig+0x162>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d05d      	beq.n	8002610 <UART_SetConfig+0x214>
 8002554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002558:	d15c      	bne.n	8002614 <UART_SetConfig+0x218>
 800255a:	2304      	movs	r3, #4
 800255c:	e7c6      	b.n	80024ec <UART_SetConfig+0xf0>
 800255e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002562:	d159      	bne.n	8002618 <UART_SetConfig+0x21c>
 8002564:	2308      	movs	r3, #8
 8002566:	e7c1      	b.n	80024ec <UART_SetConfig+0xf0>
 8002568:	4b46      	ldr	r3, [pc, #280]	@ (8002684 <UART_SetConfig+0x288>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002576:	d051      	beq.n	800261c <UART_SetConfig+0x220>
 8002578:	d806      	bhi.n	8002588 <UART_SetConfig+0x18c>
 800257a:	2b00      	cmp	r3, #0
 800257c:	d050      	beq.n	8002620 <UART_SetConfig+0x224>
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002582:	d14f      	bne.n	8002624 <UART_SetConfig+0x228>
 8002584:	2304      	movs	r3, #4
 8002586:	e7b1      	b.n	80024ec <UART_SetConfig+0xf0>
 8002588:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800258c:	d14c      	bne.n	8002628 <UART_SetConfig+0x22c>
 800258e:	2308      	movs	r3, #8
 8002590:	e7ac      	b.n	80024ec <UART_SetConfig+0xf0>
 8002592:	4b3c      	ldr	r3, [pc, #240]	@ (8002684 <UART_SetConfig+0x288>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002598:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800259c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025a0:	d044      	beq.n	800262c <UART_SetConfig+0x230>
 80025a2:	d806      	bhi.n	80025b2 <UART_SetConfig+0x1b6>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d043      	beq.n	8002630 <UART_SetConfig+0x234>
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ac:	d142      	bne.n	8002634 <UART_SetConfig+0x238>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e79c      	b.n	80024ec <UART_SetConfig+0xf0>
 80025b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80025b6:	d13f      	bne.n	8002638 <UART_SetConfig+0x23c>
 80025b8:	2308      	movs	r3, #8
 80025ba:	e797      	b.n	80024ec <UART_SetConfig+0xf0>
 80025bc:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <UART_SetConfig+0x288>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025ca:	d037      	beq.n	800263c <UART_SetConfig+0x240>
 80025cc:	d805      	bhi.n	80025da <UART_SetConfig+0x1de>
 80025ce:	b3bb      	cbz	r3, 8002640 <UART_SetConfig+0x244>
 80025d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025d4:	d136      	bne.n	8002644 <UART_SetConfig+0x248>
 80025d6:	2304      	movs	r3, #4
 80025d8:	e788      	b.n	80024ec <UART_SetConfig+0xf0>
 80025da:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80025de:	d133      	bne.n	8002648 <UART_SetConfig+0x24c>
 80025e0:	2308      	movs	r3, #8
 80025e2:	e783      	b.n	80024ec <UART_SetConfig+0xf0>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e781      	b.n	80024ec <UART_SetConfig+0xf0>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e77f      	b.n	80024ec <UART_SetConfig+0xf0>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e77d      	b.n	80024ec <UART_SetConfig+0xf0>
 80025f0:	2300      	movs	r3, #0
 80025f2:	e77b      	b.n	80024ec <UART_SetConfig+0xf0>
 80025f4:	2310      	movs	r3, #16
 80025f6:	e779      	b.n	80024ec <UART_SetConfig+0xf0>
 80025f8:	2310      	movs	r3, #16
 80025fa:	e777      	b.n	80024ec <UART_SetConfig+0xf0>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e775      	b.n	80024ec <UART_SetConfig+0xf0>
 8002600:	2300      	movs	r3, #0
 8002602:	e773      	b.n	80024ec <UART_SetConfig+0xf0>
 8002604:	2310      	movs	r3, #16
 8002606:	e771      	b.n	80024ec <UART_SetConfig+0xf0>
 8002608:	2310      	movs	r3, #16
 800260a:	e76f      	b.n	80024ec <UART_SetConfig+0xf0>
 800260c:	2302      	movs	r3, #2
 800260e:	e76d      	b.n	80024ec <UART_SetConfig+0xf0>
 8002610:	2300      	movs	r3, #0
 8002612:	e76b      	b.n	80024ec <UART_SetConfig+0xf0>
 8002614:	2310      	movs	r3, #16
 8002616:	e769      	b.n	80024ec <UART_SetConfig+0xf0>
 8002618:	2310      	movs	r3, #16
 800261a:	e767      	b.n	80024ec <UART_SetConfig+0xf0>
 800261c:	2302      	movs	r3, #2
 800261e:	e765      	b.n	80024ec <UART_SetConfig+0xf0>
 8002620:	2301      	movs	r3, #1
 8002622:	e763      	b.n	80024ec <UART_SetConfig+0xf0>
 8002624:	2310      	movs	r3, #16
 8002626:	e761      	b.n	80024ec <UART_SetConfig+0xf0>
 8002628:	2310      	movs	r3, #16
 800262a:	e75f      	b.n	80024ec <UART_SetConfig+0xf0>
 800262c:	2302      	movs	r3, #2
 800262e:	e75d      	b.n	80024ec <UART_SetConfig+0xf0>
 8002630:	2300      	movs	r3, #0
 8002632:	e75b      	b.n	80024ec <UART_SetConfig+0xf0>
 8002634:	2310      	movs	r3, #16
 8002636:	e759      	b.n	80024ec <UART_SetConfig+0xf0>
 8002638:	2310      	movs	r3, #16
 800263a:	e757      	b.n	80024ec <UART_SetConfig+0xf0>
 800263c:	2302      	movs	r3, #2
 800263e:	e755      	b.n	80024ec <UART_SetConfig+0xf0>
 8002640:	2300      	movs	r3, #0
 8002642:	e753      	b.n	80024ec <UART_SetConfig+0xf0>
 8002644:	2310      	movs	r3, #16
 8002646:	e751      	b.n	80024ec <UART_SetConfig+0xf0>
 8002648:	2310      	movs	r3, #16
 800264a:	e74f      	b.n	80024ec <UART_SetConfig+0xf0>
    switch (clocksource)
 800264c:	2b08      	cmp	r3, #8
 800264e:	d85b      	bhi.n	8002708 <UART_SetConfig+0x30c>
 8002650:	e8df f003 	tbb	[pc, r3]
 8002654:	5a3a341a 	.word	0x5a3a341a
 8002658:	5a5a5a37 	.word	0x5a5a5a37
 800265c:	1e          	.byte	0x1e
 800265d:	00          	.byte	0x00
 800265e:	bf00      	nop
 8002660:	efff69f3 	.word	0xefff69f3
 8002664:	40011000 	.word	0x40011000
 8002668:	40004400 	.word	0x40004400
 800266c:	40004800 	.word	0x40004800
 8002670:	40004c00 	.word	0x40004c00
 8002674:	40005000 	.word	0x40005000
 8002678:	40011400 	.word	0x40011400
 800267c:	40007800 	.word	0x40007800
 8002680:	40007c00 	.word	0x40007c00
 8002684:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 8002688:	f7ff f9b8 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800268c:	2800      	cmp	r0, #0
 800268e:	d03d      	beq.n	800270c <UART_SetConfig+0x310>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002690:	6862      	ldr	r2, [r4, #4]
 8002692:	0853      	lsrs	r3, r2, #1
 8002694:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002698:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800269c:	f1a3 0110 	sub.w	r1, r3, #16
 80026a0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80026a4:	4291      	cmp	r1, r2
 80026a6:	d833      	bhi.n	8002710 <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026ae:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80026b2:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80026b4:	6822      	ldr	r2, [r4, #0]
 80026b6:	60d3      	str	r3, [r2, #12]
 80026b8:	2000      	movs	r0, #0
 80026ba:	e030      	b.n	800271e <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 80026bc:	f7ff f9ae 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
        break;
 80026c0:	e7e4      	b.n	800268c <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 80026c2:	f7ff f88b 	bl	80017dc <HAL_RCC_GetSysClockFreq>
        break;
 80026c6:	e7e1      	b.n	800268c <UART_SetConfig+0x290>
        pclk = (uint32_t) HSI_VALUE;
 80026c8:	4817      	ldr	r0, [pc, #92]	@ (8002728 <UART_SetConfig+0x32c>)
 80026ca:	e7e1      	b.n	8002690 <UART_SetConfig+0x294>
    switch (clocksource)
 80026cc:	4816      	ldr	r0, [pc, #88]	@ (8002728 <UART_SetConfig+0x32c>)
 80026ce:	e002      	b.n	80026d6 <UART_SetConfig+0x2da>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026d0:	f7ff f994 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80026d4:	b300      	cbz	r0, 8002718 <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026d6:	6863      	ldr	r3, [r4, #4]
 80026d8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80026dc:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026e0:	f1a0 0210 	sub.w	r2, r0, #16
 80026e4:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d817      	bhi.n	800271c <UART_SetConfig+0x320>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	b280      	uxth	r0, r0
 80026f0:	60d8      	str	r0, [r3, #12]
 80026f2:	2000      	movs	r0, #0
 80026f4:	e013      	b.n	800271e <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 80026f6:	f7ff f991 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
        break;
 80026fa:	e7eb      	b.n	80026d4 <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 80026fc:	f7ff f86e 	bl	80017dc <HAL_RCC_GetSysClockFreq>
        break;
 8002700:	e7e8      	b.n	80026d4 <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 8002702:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002706:	e7e6      	b.n	80026d6 <UART_SetConfig+0x2da>
    switch (clocksource)
 8002708:	2001      	movs	r0, #1
 800270a:	e008      	b.n	800271e <UART_SetConfig+0x322>
 800270c:	2000      	movs	r0, #0
 800270e:	e006      	b.n	800271e <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8002710:	2001      	movs	r0, #1
 8002712:	e004      	b.n	800271e <UART_SetConfig+0x322>
    switch (clocksource)
 8002714:	2001      	movs	r0, #1
 8002716:	e002      	b.n	800271e <UART_SetConfig+0x322>
 8002718:	2000      	movs	r0, #0
 800271a:	e000      	b.n	800271e <UART_SetConfig+0x322>
      }
      else
      {
        ret = HAL_ERROR;
 800271c:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8002722:	66e3      	str	r3, [r4, #108]	@ 0x6c

  return ret;
}
 8002724:	bd10      	pop	{r4, pc}
 8002726:	bf00      	nop
 8002728:	00f42400 	.word	0x00f42400

0800272c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800272c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800272e:	f013 0f01 	tst.w	r3, #1
 8002732:	d006      	beq.n	8002742 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002734:	6802      	ldr	r2, [r0, #0]
 8002736:	6853      	ldr	r3, [r2, #4]
 8002738:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800273c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800273e:	430b      	orrs	r3, r1
 8002740:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002742:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002744:	f013 0f02 	tst.w	r3, #2
 8002748:	d006      	beq.n	8002758 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800274a:	6802      	ldr	r2, [r0, #0]
 800274c:	6853      	ldr	r3, [r2, #4]
 800274e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002752:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002754:	430b      	orrs	r3, r1
 8002756:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002758:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800275a:	f013 0f04 	tst.w	r3, #4
 800275e:	d006      	beq.n	800276e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002760:	6802      	ldr	r2, [r0, #0]
 8002762:	6853      	ldr	r3, [r2, #4]
 8002764:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002768:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800276a:	430b      	orrs	r3, r1
 800276c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800276e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002770:	f013 0f08 	tst.w	r3, #8
 8002774:	d006      	beq.n	8002784 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002776:	6802      	ldr	r2, [r0, #0]
 8002778:	6853      	ldr	r3, [r2, #4]
 800277a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800277e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002780:	430b      	orrs	r3, r1
 8002782:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002784:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002786:	f013 0f10 	tst.w	r3, #16
 800278a:	d006      	beq.n	800279a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800278c:	6802      	ldr	r2, [r0, #0]
 800278e:	6893      	ldr	r3, [r2, #8]
 8002790:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002794:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002796:	430b      	orrs	r3, r1
 8002798:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800279a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800279c:	f013 0f20 	tst.w	r3, #32
 80027a0:	d006      	beq.n	80027b0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027a2:	6802      	ldr	r2, [r0, #0]
 80027a4:	6893      	ldr	r3, [r2, #8]
 80027a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027aa:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80027b2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80027b6:	d00a      	beq.n	80027ce <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027b8:	6802      	ldr	r2, [r0, #0]
 80027ba:	6853      	ldr	r3, [r2, #4]
 80027bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027c0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80027c2:	430b      	orrs	r3, r1
 80027c4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027c6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80027c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027cc:	d00b      	beq.n	80027e6 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027ce:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80027d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80027d4:	d006      	beq.n	80027e4 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027d6:	6802      	ldr	r2, [r0, #0]
 80027d8:	6853      	ldr	r3, [r2, #4]
 80027da:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80027de:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6053      	str	r3, [r2, #4]
  }
}
 80027e4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027e6:	6802      	ldr	r2, [r0, #0]
 80027e8:	6853      	ldr	r3, [r2, #4]
 80027ea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80027ee:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80027f0:	430b      	orrs	r3, r1
 80027f2:	6053      	str	r3, [r2, #4]
 80027f4:	e7eb      	b.n	80027ce <UART_AdvFeatureConfig+0xa2>

080027f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027fa:	4605      	mov	r5, r0
 80027fc:	460f      	mov	r7, r1
 80027fe:	4616      	mov	r6, r2
 8002800:	4699      	mov	r9, r3
 8002802:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002806:	682b      	ldr	r3, [r5, #0]
 8002808:	69dc      	ldr	r4, [r3, #28]
 800280a:	ea37 0404 	bics.w	r4, r7, r4
 800280e:	bf0c      	ite	eq
 8002810:	2401      	moveq	r4, #1
 8002812:	2400      	movne	r4, #0
 8002814:	42b4      	cmp	r4, r6
 8002816:	d155      	bne.n	80028c4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002818:	f1b8 3fff 	cmp.w	r8, #4294967295
 800281c:	d0f3      	beq.n	8002806 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7fe fb2b 	bl	8000e78 <HAL_GetTick>
 8002822:	eba0 0009 	sub.w	r0, r0, r9
 8002826:	4540      	cmp	r0, r8
 8002828:	d82e      	bhi.n	8002888 <UART_WaitOnFlagUntilTimeout+0x92>
 800282a:	f1b8 0f00 	cmp.w	r8, #0
 800282e:	d02b      	beq.n	8002888 <UART_WaitOnFlagUntilTimeout+0x92>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002830:	682b      	ldr	r3, [r5, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	f012 0f04 	tst.w	r2, #4
 8002838:	d0e5      	beq.n	8002806 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8002840:	d0e1      	beq.n	8002806 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002842:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002846:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002848:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	e852 3f00 	ldrex	r3, [r2]
 800284e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002852:	e842 3100 	strex	r1, r3, [r2]
 8002856:	2900      	cmp	r1, #0
 8002858:	d1f6      	bne.n	8002848 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	f102 0308 	add.w	r3, r2, #8
 8002860:	e853 3f00 	ldrex	r3, [r3]
 8002864:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002868:	3208      	adds	r2, #8
 800286a:	e842 3100 	strex	r1, r3, [r2]
 800286e:	2900      	cmp	r1, #0
 8002870:	d1f3      	bne.n	800285a <UART_WaitOnFlagUntilTimeout+0x64>

          huart->gState = HAL_UART_STATE_READY;
 8002872:	2320      	movs	r3, #32
 8002874:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002876:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800287a:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800287e:	2300      	movs	r3, #0
 8002880:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002884:	2003      	movs	r0, #3
 8002886:	e01e      	b.n	80028c6 <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002888:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	e852 3f00 	ldrex	r3, [r2]
 800288e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	e842 3100 	strex	r1, r3, [r2]
 8002896:	2900      	cmp	r1, #0
 8002898:	d1f6      	bne.n	8002888 <UART_WaitOnFlagUntilTimeout+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800289a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	f102 0308 	add.w	r3, r2, #8
 80028a0:	e853 3f00 	ldrex	r3, [r3]
 80028a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	3208      	adds	r2, #8
 80028aa:	e842 3100 	strex	r1, r3, [r2]
 80028ae:	2900      	cmp	r1, #0
 80028b0:	d1f3      	bne.n	800289a <UART_WaitOnFlagUntilTimeout+0xa4>
        huart->gState = HAL_UART_STATE_READY;
 80028b2:	2320      	movs	r3, #32
 80028b4:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80028b6:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
        __HAL_UNLOCK(huart);
 80028ba:	2300      	movs	r3, #0
 80028bc:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
        return HAL_TIMEOUT;
 80028c0:	2003      	movs	r0, #3
 80028c2:	e000      	b.n	80028c6 <UART_WaitOnFlagUntilTimeout+0xd0>
        }
      }
    }
  }
  return HAL_OK;
 80028c4:	2000      	movs	r0, #0
}
 80028c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080028ca <HAL_UART_Transmit>:
{
 80028ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80028d2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d14e      	bne.n	8002976 <HAL_UART_Transmit+0xac>
 80028d8:	4604      	mov	r4, r0
 80028da:	460d      	mov	r5, r1
 80028dc:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80028de:	2a00      	cmp	r2, #0
 80028e0:	bf18      	it	ne
 80028e2:	2900      	cmpne	r1, #0
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 80028e6:	2001      	movs	r0, #1
 80028e8:	e046      	b.n	8002978 <HAL_UART_Transmit+0xae>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028f0:	2321      	movs	r3, #33	@ 0x21
 80028f2:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80028f4:	f7fe fac0 	bl	8000e78 <HAL_GetTick>
 80028f8:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80028fa:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 80028fe:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002902:	68a3      	ldr	r3, [r4, #8]
 8002904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002908:	d002      	beq.n	8002910 <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 800290a:	f04f 0800 	mov.w	r8, #0
 800290e:	e011      	b.n	8002934 <HAL_UART_Transmit+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002910:	6923      	ldr	r3, [r4, #16]
 8002912:	b313      	cbz	r3, 800295a <HAL_UART_Transmit+0x90>
      pdata16bits = NULL;
 8002914:	f04f 0800 	mov.w	r8, #0
 8002918:	e00c      	b.n	8002934 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800291a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800291e:	6822      	ldr	r2, [r4, #0]
 8002920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002924:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8002926:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800292a:	b292      	uxth	r2, r2
 800292c:	3a01      	subs	r2, #1
 800292e:	b292      	uxth	r2, r2
 8002930:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002934:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8002938:	b29b      	uxth	r3, r3
 800293a:	b18b      	cbz	r3, 8002960 <HAL_UART_Transmit+0x96>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800293c:	9600      	str	r6, [sp, #0]
 800293e:	463b      	mov	r3, r7
 8002940:	2200      	movs	r2, #0
 8002942:	2180      	movs	r1, #128	@ 0x80
 8002944:	4620      	mov	r0, r4
 8002946:	f7ff ff56 	bl	80027f6 <UART_WaitOnFlagUntilTimeout>
 800294a:	b9c0      	cbnz	r0, 800297e <HAL_UART_Transmit+0xb4>
      if (pdata8bits == NULL)
 800294c:	2d00      	cmp	r5, #0
 800294e:	d0e4      	beq.n	800291a <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002950:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002958:	e7e5      	b.n	8002926 <HAL_UART_Transmit+0x5c>
      pdata16bits = (const uint16_t *) pData;
 800295a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800295c:	2500      	movs	r5, #0
 800295e:	e7e9      	b.n	8002934 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002960:	9600      	str	r6, [sp, #0]
 8002962:	463b      	mov	r3, r7
 8002964:	2200      	movs	r2, #0
 8002966:	2140      	movs	r1, #64	@ 0x40
 8002968:	4620      	mov	r0, r4
 800296a:	f7ff ff44 	bl	80027f6 <UART_WaitOnFlagUntilTimeout>
 800296e:	b940      	cbnz	r0, 8002982 <HAL_UART_Transmit+0xb8>
    huart->gState = HAL_UART_STATE_READY;
 8002970:	2320      	movs	r3, #32
 8002972:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8002974:	e000      	b.n	8002978 <HAL_UART_Transmit+0xae>
    return HAL_BUSY;
 8002976:	2002      	movs	r0, #2
}
 8002978:	b002      	add	sp, #8
 800297a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 800297e:	2003      	movs	r0, #3
 8002980:	e7fa      	b.n	8002978 <HAL_UART_Transmit+0xae>
      return HAL_TIMEOUT;
 8002982:	2003      	movs	r0, #3
 8002984:	e7f8      	b.n	8002978 <HAL_UART_Transmit+0xae>

08002986 <HAL_UART_Receive>:
{
 8002986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800298a:	b083      	sub	sp, #12
 800298c:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800298e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8002992:	2b20      	cmp	r3, #32
 8002994:	d178      	bne.n	8002a88 <HAL_UART_Receive+0x102>
 8002996:	4604      	mov	r4, r0
 8002998:	460d      	mov	r5, r1
 800299a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800299c:	2a00      	cmp	r2, #0
 800299e:	bf18      	it	ne
 80029a0:	2900      	cmpne	r1, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 80029a4:	2001      	movs	r0, #1
 80029a6:	e070      	b.n	8002a8a <HAL_UART_Receive+0x104>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ae:	2222      	movs	r2, #34	@ 0x22
 80029b0:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b4:	6603      	str	r3, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 80029b6:	f7fe fa5f 	bl	8000e78 <HAL_GetTick>
 80029ba:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 80029bc:	f8a4 8058 	strh.w	r8, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 80029c0:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 80029c4:	68a3      	ldr	r3, [r4, #8]
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ca:	d006      	beq.n	80029da <HAL_UART_Receive+0x54>
 80029cc:	b9a3      	cbnz	r3, 80029f8 <HAL_UART_Receive+0x72>
 80029ce:	6922      	ldr	r2, [r4, #16]
 80029d0:	b972      	cbnz	r2, 80029f0 <HAL_UART_Receive+0x6a>
 80029d2:	22ff      	movs	r2, #255	@ 0xff
 80029d4:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80029d8:	e014      	b.n	8002a04 <HAL_UART_Receive+0x7e>
 80029da:	6922      	ldr	r2, [r4, #16]
 80029dc:	b922      	cbnz	r2, 80029e8 <HAL_UART_Receive+0x62>
 80029de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80029e2:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80029e6:	e00d      	b.n	8002a04 <HAL_UART_Receive+0x7e>
 80029e8:	22ff      	movs	r2, #255	@ 0xff
 80029ea:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80029ee:	e009      	b.n	8002a04 <HAL_UART_Receive+0x7e>
 80029f0:	227f      	movs	r2, #127	@ 0x7f
 80029f2:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80029f6:	e005      	b.n	8002a04 <HAL_UART_Receive+0x7e>
 80029f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029fc:	d00a      	beq.n	8002a14 <HAL_UART_Receive+0x8e>
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002a04:	f8b4 805c 	ldrh.w	r8, [r4, #92]	@ 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a0c:	d00c      	beq.n	8002a28 <HAL_UART_Receive+0xa2>
      pdata16bits = NULL;
 8002a0e:	f04f 0900 	mov.w	r9, #0
 8002a12:	e01f      	b.n	8002a54 <HAL_UART_Receive+0xce>
    UART_MASK_COMPUTATION(huart);
 8002a14:	6922      	ldr	r2, [r4, #16]
 8002a16:	b91a      	cbnz	r2, 8002a20 <HAL_UART_Receive+0x9a>
 8002a18:	227f      	movs	r2, #127	@ 0x7f
 8002a1a:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8002a1e:	e7f1      	b.n	8002a04 <HAL_UART_Receive+0x7e>
 8002a20:	223f      	movs	r2, #63	@ 0x3f
 8002a22:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8002a26:	e7ed      	b.n	8002a04 <HAL_UART_Receive+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a28:	6923      	ldr	r3, [r4, #16]
 8002a2a:	b113      	cbz	r3, 8002a32 <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 8002a2c:	f04f 0900 	mov.w	r9, #0
 8002a30:	e010      	b.n	8002a54 <HAL_UART_Receive+0xce>
      pdata16bits = (uint16_t *) pData;
 8002a32:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8002a34:	2500      	movs	r5, #0
 8002a36:	e00d      	b.n	8002a54 <HAL_UART_Receive+0xce>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a3c:	fa5f f388 	uxtb.w	r3, r8
 8002a40:	4013      	ands	r3, r2
 8002a42:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8002a46:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	3a01      	subs	r2, #1
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002a54:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	b183      	cbz	r3, 8002a7e <HAL_UART_Receive+0xf8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a5c:	9600      	str	r6, [sp, #0]
 8002a5e:	463b      	mov	r3, r7
 8002a60:	2200      	movs	r2, #0
 8002a62:	2120      	movs	r1, #32
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff fec6 	bl	80027f6 <UART_WaitOnFlagUntilTimeout>
 8002a6a:	b988      	cbnz	r0, 8002a90 <HAL_UART_Receive+0x10a>
      if (pdata8bits == NULL)
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	d1e3      	bne.n	8002a38 <HAL_UART_Receive+0xb2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	ea08 0303 	and.w	r3, r8, r3
 8002a78:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 8002a7c:	e7e3      	b.n	8002a46 <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8002a84:	2000      	movs	r0, #0
 8002a86:	e000      	b.n	8002a8a <HAL_UART_Receive+0x104>
    return HAL_BUSY;
 8002a88:	2002      	movs	r0, #2
}
 8002a8a:	b003      	add	sp, #12
 8002a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002a90:	2003      	movs	r0, #3
 8002a92:	e7fa      	b.n	8002a8a <HAL_UART_Receive+0x104>

08002a94 <UART_CheckIdleState>:
{
 8002a94:	b530      	push	{r4, r5, lr}
 8002a96:	b083      	sub	sp, #12
 8002a98:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8002aa0:	f7fe f9ea 	bl	8000e78 <HAL_GetTick>
 8002aa4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aa6:	6822      	ldr	r2, [r4, #0]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	f012 0f08 	tst.w	r2, #8
 8002aae:	d10f      	bne.n	8002ad0 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f013 0f04 	tst.w	r3, #4
 8002ab8:	d118      	bne.n	8002aec <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002aba:	2320      	movs	r3, #32
 8002abc:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002abe:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ac6:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8002ac8:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 8002acc:	b003      	add	sp, #12
 8002ace:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ad0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff fe89 	bl	80027f6 <UART_WaitOnFlagUntilTimeout>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d0e3      	beq.n	8002ab0 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8002ae8:	2003      	movs	r0, #3
 8002aea:	e7ef      	b.n	8002acc <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	462b      	mov	r3, r5
 8002af4:	2200      	movs	r2, #0
 8002af6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff fe7b 	bl	80027f6 <UART_WaitOnFlagUntilTimeout>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d0da      	beq.n	8002aba <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8002b04:	2003      	movs	r0, #3
 8002b06:	e7e1      	b.n	8002acc <UART_CheckIdleState+0x38>

08002b08 <HAL_UART_Init>:
  if (huart == NULL)
 8002b08:	b368      	cbz	r0, 8002b66 <HAL_UART_Init+0x5e>
{
 8002b0a:	b510      	push	{r4, lr}
 8002b0c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002b0e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002b10:	b303      	cbz	r3, 8002b54 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b12:	2324      	movs	r3, #36	@ 0x24
 8002b14:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8002b16:	6822      	ldr	r2, [r4, #0]
 8002b18:	6813      	ldr	r3, [r2, #0]
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b20:	4620      	mov	r0, r4
 8002b22:	f7ff fc6b 	bl	80023fc <UART_SetConfig>
 8002b26:	2801      	cmp	r0, #1
 8002b28:	d013      	beq.n	8002b52 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b2c:	b9bb      	cbnz	r3, 8002b5e <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	6853      	ldr	r3, [r2, #4]
 8002b32:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002b36:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b38:	6822      	ldr	r2, [r4, #0]
 8002b3a:	6893      	ldr	r3, [r2, #8]
 8002b3c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002b40:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002b42:	6822      	ldr	r2, [r4, #0]
 8002b44:	6813      	ldr	r3, [r2, #0]
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7ff ffa1 	bl	8002a94 <UART_CheckIdleState>
}
 8002b52:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002b54:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8002b58:	f7fe f87c 	bl	8000c54 <HAL_UART_MspInit>
 8002b5c:	e7d9      	b.n	8002b12 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f7ff fde4 	bl	800272c <UART_AdvFeatureConfig>
 8002b64:	e7e3      	b.n	8002b2e <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8002b66:	2001      	movs	r0, #1
}
 8002b68:	4770      	bx	lr
	...

08002b6c <std>:
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	b510      	push	{r4, lr}
 8002b70:	4604      	mov	r4, r0
 8002b72:	e9c0 3300 	strd	r3, r3, [r0]
 8002b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b7a:	6083      	str	r3, [r0, #8]
 8002b7c:	8181      	strh	r1, [r0, #12]
 8002b7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b80:	81c2      	strh	r2, [r0, #14]
 8002b82:	6183      	str	r3, [r0, #24]
 8002b84:	4619      	mov	r1, r3
 8002b86:	2208      	movs	r2, #8
 8002b88:	305c      	adds	r0, #92	@ 0x5c
 8002b8a:	f000 fab5 	bl	80030f8 <memset>
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <std+0x58>)
 8002b90:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <std+0x5c>)
 8002b94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b96:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <std+0x60>)
 8002b98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <std+0x64>)
 8002b9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <std+0x68>)
 8002ba0:	6224      	str	r4, [r4, #32]
 8002ba2:	429c      	cmp	r4, r3
 8002ba4:	d006      	beq.n	8002bb4 <std+0x48>
 8002ba6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002baa:	4294      	cmp	r4, r2
 8002bac:	d002      	beq.n	8002bb4 <std+0x48>
 8002bae:	33d0      	adds	r3, #208	@ 0xd0
 8002bb0:	429c      	cmp	r4, r3
 8002bb2:	d105      	bne.n	8002bc0 <std+0x54>
 8002bb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bbc:	f000 bb0e 	b.w	80031dc <__retarget_lock_init_recursive>
 8002bc0:	bd10      	pop	{r4, pc}
 8002bc2:	bf00      	nop
 8002bc4:	08002f49 	.word	0x08002f49
 8002bc8:	08002f6b 	.word	0x08002f6b
 8002bcc:	08002fa3 	.word	0x08002fa3
 8002bd0:	08002fc7 	.word	0x08002fc7
 8002bd4:	20000400 	.word	0x20000400

08002bd8 <stdio_exit_handler>:
 8002bd8:	4a02      	ldr	r2, [pc, #8]	@ (8002be4 <stdio_exit_handler+0xc>)
 8002bda:	4903      	ldr	r1, [pc, #12]	@ (8002be8 <stdio_exit_handler+0x10>)
 8002bdc:	4803      	ldr	r0, [pc, #12]	@ (8002bec <stdio_exit_handler+0x14>)
 8002bde:	f000 b869 	b.w	8002cb4 <_fwalk_sglue>
 8002be2:	bf00      	nop
 8002be4:	20000060 	.word	0x20000060
 8002be8:	08003a8d 	.word	0x08003a8d
 8002bec:	20000070 	.word	0x20000070

08002bf0 <cleanup_stdio>:
 8002bf0:	6841      	ldr	r1, [r0, #4]
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <cleanup_stdio+0x34>)
 8002bf4:	4299      	cmp	r1, r3
 8002bf6:	b510      	push	{r4, lr}
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	d001      	beq.n	8002c00 <cleanup_stdio+0x10>
 8002bfc:	f000 ff46 	bl	8003a8c <_fflush_r>
 8002c00:	68a1      	ldr	r1, [r4, #8]
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <cleanup_stdio+0x38>)
 8002c04:	4299      	cmp	r1, r3
 8002c06:	d002      	beq.n	8002c0e <cleanup_stdio+0x1e>
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f000 ff3f 	bl	8003a8c <_fflush_r>
 8002c0e:	68e1      	ldr	r1, [r4, #12]
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <cleanup_stdio+0x3c>)
 8002c12:	4299      	cmp	r1, r3
 8002c14:	d004      	beq.n	8002c20 <cleanup_stdio+0x30>
 8002c16:	4620      	mov	r0, r4
 8002c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c1c:	f000 bf36 	b.w	8003a8c <_fflush_r>
 8002c20:	bd10      	pop	{r4, pc}
 8002c22:	bf00      	nop
 8002c24:	20000400 	.word	0x20000400
 8002c28:	20000468 	.word	0x20000468
 8002c2c:	200004d0 	.word	0x200004d0

08002c30 <global_stdio_init.part.0>:
 8002c30:	b510      	push	{r4, lr}
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <global_stdio_init.part.0+0x30>)
 8002c34:	4c0b      	ldr	r4, [pc, #44]	@ (8002c64 <global_stdio_init.part.0+0x34>)
 8002c36:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <global_stdio_init.part.0+0x38>)
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2104      	movs	r1, #4
 8002c40:	f7ff ff94 	bl	8002b6c <std>
 8002c44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2109      	movs	r1, #9
 8002c4c:	f7ff ff8e 	bl	8002b6c <std>
 8002c50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c54:	2202      	movs	r2, #2
 8002c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c5a:	2112      	movs	r1, #18
 8002c5c:	f7ff bf86 	b.w	8002b6c <std>
 8002c60:	20000538 	.word	0x20000538
 8002c64:	20000400 	.word	0x20000400
 8002c68:	08002bd9 	.word	0x08002bd9

08002c6c <__sfp_lock_acquire>:
 8002c6c:	4801      	ldr	r0, [pc, #4]	@ (8002c74 <__sfp_lock_acquire+0x8>)
 8002c6e:	f000 bab6 	b.w	80031de <__retarget_lock_acquire_recursive>
 8002c72:	bf00      	nop
 8002c74:	20000541 	.word	0x20000541

08002c78 <__sfp_lock_release>:
 8002c78:	4801      	ldr	r0, [pc, #4]	@ (8002c80 <__sfp_lock_release+0x8>)
 8002c7a:	f000 bab1 	b.w	80031e0 <__retarget_lock_release_recursive>
 8002c7e:	bf00      	nop
 8002c80:	20000541 	.word	0x20000541

08002c84 <__sinit>:
 8002c84:	b510      	push	{r4, lr}
 8002c86:	4604      	mov	r4, r0
 8002c88:	f7ff fff0 	bl	8002c6c <__sfp_lock_acquire>
 8002c8c:	6a23      	ldr	r3, [r4, #32]
 8002c8e:	b11b      	cbz	r3, 8002c98 <__sinit+0x14>
 8002c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c94:	f7ff bff0 	b.w	8002c78 <__sfp_lock_release>
 8002c98:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <__sinit+0x28>)
 8002c9a:	6223      	str	r3, [r4, #32]
 8002c9c:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <__sinit+0x2c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f5      	bne.n	8002c90 <__sinit+0xc>
 8002ca4:	f7ff ffc4 	bl	8002c30 <global_stdio_init.part.0>
 8002ca8:	e7f2      	b.n	8002c90 <__sinit+0xc>
 8002caa:	bf00      	nop
 8002cac:	08002bf1 	.word	0x08002bf1
 8002cb0:	20000538 	.word	0x20000538

08002cb4 <_fwalk_sglue>:
 8002cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cb8:	4607      	mov	r7, r0
 8002cba:	4688      	mov	r8, r1
 8002cbc:	4614      	mov	r4, r2
 8002cbe:	2600      	movs	r6, #0
 8002cc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cc4:	f1b9 0901 	subs.w	r9, r9, #1
 8002cc8:	d505      	bpl.n	8002cd6 <_fwalk_sglue+0x22>
 8002cca:	6824      	ldr	r4, [r4, #0]
 8002ccc:	2c00      	cmp	r4, #0
 8002cce:	d1f7      	bne.n	8002cc0 <_fwalk_sglue+0xc>
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cd6:	89ab      	ldrh	r3, [r5, #12]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d907      	bls.n	8002cec <_fwalk_sglue+0x38>
 8002cdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	d003      	beq.n	8002cec <_fwalk_sglue+0x38>
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	4638      	mov	r0, r7
 8002ce8:	47c0      	blx	r8
 8002cea:	4306      	orrs	r6, r0
 8002cec:	3568      	adds	r5, #104	@ 0x68
 8002cee:	e7e9      	b.n	8002cc4 <_fwalk_sglue+0x10>

08002cf0 <iprintf>:
 8002cf0:	b40f      	push	{r0, r1, r2, r3}
 8002cf2:	b507      	push	{r0, r1, r2, lr}
 8002cf4:	4906      	ldr	r1, [pc, #24]	@ (8002d10 <iprintf+0x20>)
 8002cf6:	ab04      	add	r3, sp, #16
 8002cf8:	6808      	ldr	r0, [r1, #0]
 8002cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cfe:	6881      	ldr	r1, [r0, #8]
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	f000 fb99 	bl	8003438 <_vfiprintf_r>
 8002d06:	b003      	add	sp, #12
 8002d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d0c:	b004      	add	sp, #16
 8002d0e:	4770      	bx	lr
 8002d10:	2000006c 	.word	0x2000006c

08002d14 <_puts_r>:
 8002d14:	6a03      	ldr	r3, [r0, #32]
 8002d16:	b570      	push	{r4, r5, r6, lr}
 8002d18:	6884      	ldr	r4, [r0, #8]
 8002d1a:	4605      	mov	r5, r0
 8002d1c:	460e      	mov	r6, r1
 8002d1e:	b90b      	cbnz	r3, 8002d24 <_puts_r+0x10>
 8002d20:	f7ff ffb0 	bl	8002c84 <__sinit>
 8002d24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d26:	07db      	lsls	r3, r3, #31
 8002d28:	d405      	bmi.n	8002d36 <_puts_r+0x22>
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	0598      	lsls	r0, r3, #22
 8002d2e:	d402      	bmi.n	8002d36 <_puts_r+0x22>
 8002d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d32:	f000 fa54 	bl	80031de <__retarget_lock_acquire_recursive>
 8002d36:	89a3      	ldrh	r3, [r4, #12]
 8002d38:	0719      	lsls	r1, r3, #28
 8002d3a:	d502      	bpl.n	8002d42 <_puts_r+0x2e>
 8002d3c:	6923      	ldr	r3, [r4, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d135      	bne.n	8002dae <_puts_r+0x9a>
 8002d42:	4621      	mov	r1, r4
 8002d44:	4628      	mov	r0, r5
 8002d46:	f000 f981 	bl	800304c <__swsetup_r>
 8002d4a:	b380      	cbz	r0, 8002dae <_puts_r+0x9a>
 8002d4c:	f04f 35ff 	mov.w	r5, #4294967295
 8002d50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d52:	07da      	lsls	r2, r3, #31
 8002d54:	d405      	bmi.n	8002d62 <_puts_r+0x4e>
 8002d56:	89a3      	ldrh	r3, [r4, #12]
 8002d58:	059b      	lsls	r3, r3, #22
 8002d5a:	d402      	bmi.n	8002d62 <_puts_r+0x4e>
 8002d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d5e:	f000 fa3f 	bl	80031e0 <__retarget_lock_release_recursive>
 8002d62:	4628      	mov	r0, r5
 8002d64:	bd70      	pop	{r4, r5, r6, pc}
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	da04      	bge.n	8002d74 <_puts_r+0x60>
 8002d6a:	69a2      	ldr	r2, [r4, #24]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	dc17      	bgt.n	8002da0 <_puts_r+0x8c>
 8002d70:	290a      	cmp	r1, #10
 8002d72:	d015      	beq.n	8002da0 <_puts_r+0x8c>
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	6022      	str	r2, [r4, #0]
 8002d7a:	7019      	strb	r1, [r3, #0]
 8002d7c:	68a3      	ldr	r3, [r4, #8]
 8002d7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d82:	3b01      	subs	r3, #1
 8002d84:	60a3      	str	r3, [r4, #8]
 8002d86:	2900      	cmp	r1, #0
 8002d88:	d1ed      	bne.n	8002d66 <_puts_r+0x52>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	da11      	bge.n	8002db2 <_puts_r+0x9e>
 8002d8e:	4622      	mov	r2, r4
 8002d90:	210a      	movs	r1, #10
 8002d92:	4628      	mov	r0, r5
 8002d94:	f000 f91b 	bl	8002fce <__swbuf_r>
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d0d7      	beq.n	8002d4c <_puts_r+0x38>
 8002d9c:	250a      	movs	r5, #10
 8002d9e:	e7d7      	b.n	8002d50 <_puts_r+0x3c>
 8002da0:	4622      	mov	r2, r4
 8002da2:	4628      	mov	r0, r5
 8002da4:	f000 f913 	bl	8002fce <__swbuf_r>
 8002da8:	3001      	adds	r0, #1
 8002daa:	d1e7      	bne.n	8002d7c <_puts_r+0x68>
 8002dac:	e7ce      	b.n	8002d4c <_puts_r+0x38>
 8002dae:	3e01      	subs	r6, #1
 8002db0:	e7e4      	b.n	8002d7c <_puts_r+0x68>
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	6022      	str	r2, [r4, #0]
 8002db8:	220a      	movs	r2, #10
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e7ee      	b.n	8002d9c <_puts_r+0x88>
	...

08002dc0 <puts>:
 8002dc0:	4b02      	ldr	r3, [pc, #8]	@ (8002dcc <puts+0xc>)
 8002dc2:	4601      	mov	r1, r0
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	f7ff bfa5 	b.w	8002d14 <_puts_r>
 8002dca:	bf00      	nop
 8002dcc:	2000006c 	.word	0x2000006c

08002dd0 <setbuf>:
 8002dd0:	fab1 f281 	clz	r2, r1
 8002dd4:	0952      	lsrs	r2, r2, #5
 8002dd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dda:	0052      	lsls	r2, r2, #1
 8002ddc:	f000 b800 	b.w	8002de0 <setvbuf>

08002de0 <setvbuf>:
 8002de0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002de4:	461d      	mov	r5, r3
 8002de6:	4b57      	ldr	r3, [pc, #348]	@ (8002f44 <setvbuf+0x164>)
 8002de8:	681f      	ldr	r7, [r3, #0]
 8002dea:	4604      	mov	r4, r0
 8002dec:	460e      	mov	r6, r1
 8002dee:	4690      	mov	r8, r2
 8002df0:	b127      	cbz	r7, 8002dfc <setvbuf+0x1c>
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	b913      	cbnz	r3, 8002dfc <setvbuf+0x1c>
 8002df6:	4638      	mov	r0, r7
 8002df8:	f7ff ff44 	bl	8002c84 <__sinit>
 8002dfc:	f1b8 0f02 	cmp.w	r8, #2
 8002e00:	d006      	beq.n	8002e10 <setvbuf+0x30>
 8002e02:	f1b8 0f01 	cmp.w	r8, #1
 8002e06:	f200 809a 	bhi.w	8002f3e <setvbuf+0x15e>
 8002e0a:	2d00      	cmp	r5, #0
 8002e0c:	f2c0 8097 	blt.w	8002f3e <setvbuf+0x15e>
 8002e10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e12:	07d9      	lsls	r1, r3, #31
 8002e14:	d405      	bmi.n	8002e22 <setvbuf+0x42>
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	059a      	lsls	r2, r3, #22
 8002e1a:	d402      	bmi.n	8002e22 <setvbuf+0x42>
 8002e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e1e:	f000 f9de 	bl	80031de <__retarget_lock_acquire_recursive>
 8002e22:	4621      	mov	r1, r4
 8002e24:	4638      	mov	r0, r7
 8002e26:	f000 fe31 	bl	8003a8c <_fflush_r>
 8002e2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e2c:	b141      	cbz	r1, 8002e40 <setvbuf+0x60>
 8002e2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e32:	4299      	cmp	r1, r3
 8002e34:	d002      	beq.n	8002e3c <setvbuf+0x5c>
 8002e36:	4638      	mov	r0, r7
 8002e38:	f000 f9d4 	bl	80031e4 <_free_r>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e40:	2300      	movs	r3, #0
 8002e42:	61a3      	str	r3, [r4, #24]
 8002e44:	6063      	str	r3, [r4, #4]
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	d503      	bpl.n	8002e54 <setvbuf+0x74>
 8002e4c:	6921      	ldr	r1, [r4, #16]
 8002e4e:	4638      	mov	r0, r7
 8002e50:	f000 f9c8 	bl	80031e4 <_free_r>
 8002e54:	89a3      	ldrh	r3, [r4, #12]
 8002e56:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8002e5a:	f023 0303 	bic.w	r3, r3, #3
 8002e5e:	f1b8 0f02 	cmp.w	r8, #2
 8002e62:	81a3      	strh	r3, [r4, #12]
 8002e64:	d061      	beq.n	8002f2a <setvbuf+0x14a>
 8002e66:	ab01      	add	r3, sp, #4
 8002e68:	466a      	mov	r2, sp
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	4638      	mov	r0, r7
 8002e6e:	f000 fe35 	bl	8003adc <__swhatbuf_r>
 8002e72:	89a3      	ldrh	r3, [r4, #12]
 8002e74:	4318      	orrs	r0, r3
 8002e76:	81a0      	strh	r0, [r4, #12]
 8002e78:	bb2d      	cbnz	r5, 8002ec6 <setvbuf+0xe6>
 8002e7a:	9d00      	ldr	r5, [sp, #0]
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	f000 f9fb 	bl	8003278 <malloc>
 8002e82:	4606      	mov	r6, r0
 8002e84:	2800      	cmp	r0, #0
 8002e86:	d152      	bne.n	8002f2e <setvbuf+0x14e>
 8002e88:	f8dd 9000 	ldr.w	r9, [sp]
 8002e8c:	45a9      	cmp	r9, r5
 8002e8e:	d140      	bne.n	8002f12 <setvbuf+0x132>
 8002e90:	f04f 35ff 	mov.w	r5, #4294967295
 8002e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e98:	f043 0202 	orr.w	r2, r3, #2
 8002e9c:	81a2      	strh	r2, [r4, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60a2      	str	r2, [r4, #8]
 8002ea2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8002ea6:	6022      	str	r2, [r4, #0]
 8002ea8:	6122      	str	r2, [r4, #16]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	6162      	str	r2, [r4, #20]
 8002eae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002eb0:	07d6      	lsls	r6, r2, #31
 8002eb2:	d404      	bmi.n	8002ebe <setvbuf+0xde>
 8002eb4:	0598      	lsls	r0, r3, #22
 8002eb6:	d402      	bmi.n	8002ebe <setvbuf+0xde>
 8002eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002eba:	f000 f991 	bl	80031e0 <__retarget_lock_release_recursive>
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	b003      	add	sp, #12
 8002ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ec6:	2e00      	cmp	r6, #0
 8002ec8:	d0d8      	beq.n	8002e7c <setvbuf+0x9c>
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	b913      	cbnz	r3, 8002ed4 <setvbuf+0xf4>
 8002ece:	4638      	mov	r0, r7
 8002ed0:	f7ff fed8 	bl	8002c84 <__sinit>
 8002ed4:	f1b8 0f01 	cmp.w	r8, #1
 8002ed8:	bf08      	it	eq
 8002eda:	89a3      	ldrheq	r3, [r4, #12]
 8002edc:	6026      	str	r6, [r4, #0]
 8002ede:	bf04      	itt	eq
 8002ee0:	f043 0301 	orreq.w	r3, r3, #1
 8002ee4:	81a3      	strheq	r3, [r4, #12]
 8002ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eea:	f013 0208 	ands.w	r2, r3, #8
 8002eee:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002ef2:	d01e      	beq.n	8002f32 <setvbuf+0x152>
 8002ef4:	07d9      	lsls	r1, r3, #31
 8002ef6:	bf41      	itttt	mi
 8002ef8:	2200      	movmi	r2, #0
 8002efa:	426d      	negmi	r5, r5
 8002efc:	60a2      	strmi	r2, [r4, #8]
 8002efe:	61a5      	strmi	r5, [r4, #24]
 8002f00:	bf58      	it	pl
 8002f02:	60a5      	strpl	r5, [r4, #8]
 8002f04:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002f06:	07d2      	lsls	r2, r2, #31
 8002f08:	d401      	bmi.n	8002f0e <setvbuf+0x12e>
 8002f0a:	059b      	lsls	r3, r3, #22
 8002f0c:	d513      	bpl.n	8002f36 <setvbuf+0x156>
 8002f0e:	2500      	movs	r5, #0
 8002f10:	e7d5      	b.n	8002ebe <setvbuf+0xde>
 8002f12:	4648      	mov	r0, r9
 8002f14:	f000 f9b0 	bl	8003278 <malloc>
 8002f18:	4606      	mov	r6, r0
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	d0b8      	beq.n	8002e90 <setvbuf+0xb0>
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f24:	81a3      	strh	r3, [r4, #12]
 8002f26:	464d      	mov	r5, r9
 8002f28:	e7cf      	b.n	8002eca <setvbuf+0xea>
 8002f2a:	2500      	movs	r5, #0
 8002f2c:	e7b2      	b.n	8002e94 <setvbuf+0xb4>
 8002f2e:	46a9      	mov	r9, r5
 8002f30:	e7f5      	b.n	8002f1e <setvbuf+0x13e>
 8002f32:	60a2      	str	r2, [r4, #8]
 8002f34:	e7e6      	b.n	8002f04 <setvbuf+0x124>
 8002f36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f38:	f000 f952 	bl	80031e0 <__retarget_lock_release_recursive>
 8002f3c:	e7e7      	b.n	8002f0e <setvbuf+0x12e>
 8002f3e:	f04f 35ff 	mov.w	r5, #4294967295
 8002f42:	e7bc      	b.n	8002ebe <setvbuf+0xde>
 8002f44:	2000006c 	.word	0x2000006c

08002f48 <__sread>:
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f50:	f000 f8fc 	bl	800314c <_read_r>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	bfab      	itete	ge
 8002f58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8002f5c:	181b      	addge	r3, r3, r0
 8002f5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f62:	bfac      	ite	ge
 8002f64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f66:	81a3      	strhlt	r3, [r4, #12]
 8002f68:	bd10      	pop	{r4, pc}

08002f6a <__swrite>:
 8002f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f6e:	461f      	mov	r7, r3
 8002f70:	898b      	ldrh	r3, [r1, #12]
 8002f72:	05db      	lsls	r3, r3, #23
 8002f74:	4605      	mov	r5, r0
 8002f76:	460c      	mov	r4, r1
 8002f78:	4616      	mov	r6, r2
 8002f7a:	d505      	bpl.n	8002f88 <__swrite+0x1e>
 8002f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f80:	2302      	movs	r3, #2
 8002f82:	2200      	movs	r2, #0
 8002f84:	f000 f8d0 	bl	8003128 <_lseek_r>
 8002f88:	89a3      	ldrh	r3, [r4, #12]
 8002f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f92:	81a3      	strh	r3, [r4, #12]
 8002f94:	4632      	mov	r2, r6
 8002f96:	463b      	mov	r3, r7
 8002f98:	4628      	mov	r0, r5
 8002f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9e:	f000 b8e7 	b.w	8003170 <_write_r>

08002fa2 <__sseek>:
 8002fa2:	b510      	push	{r4, lr}
 8002fa4:	460c      	mov	r4, r1
 8002fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002faa:	f000 f8bd 	bl	8003128 <_lseek_r>
 8002fae:	1c43      	adds	r3, r0, #1
 8002fb0:	89a3      	ldrh	r3, [r4, #12]
 8002fb2:	bf15      	itete	ne
 8002fb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002fb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002fba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002fbe:	81a3      	strheq	r3, [r4, #12]
 8002fc0:	bf18      	it	ne
 8002fc2:	81a3      	strhne	r3, [r4, #12]
 8002fc4:	bd10      	pop	{r4, pc}

08002fc6 <__sclose>:
 8002fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fca:	f000 b89d 	b.w	8003108 <_close_r>

08002fce <__swbuf_r>:
 8002fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd0:	460e      	mov	r6, r1
 8002fd2:	4614      	mov	r4, r2
 8002fd4:	4605      	mov	r5, r0
 8002fd6:	b118      	cbz	r0, 8002fe0 <__swbuf_r+0x12>
 8002fd8:	6a03      	ldr	r3, [r0, #32]
 8002fda:	b90b      	cbnz	r3, 8002fe0 <__swbuf_r+0x12>
 8002fdc:	f7ff fe52 	bl	8002c84 <__sinit>
 8002fe0:	69a3      	ldr	r3, [r4, #24]
 8002fe2:	60a3      	str	r3, [r4, #8]
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	071a      	lsls	r2, r3, #28
 8002fe8:	d501      	bpl.n	8002fee <__swbuf_r+0x20>
 8002fea:	6923      	ldr	r3, [r4, #16]
 8002fec:	b943      	cbnz	r3, 8003000 <__swbuf_r+0x32>
 8002fee:	4621      	mov	r1, r4
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	f000 f82b 	bl	800304c <__swsetup_r>
 8002ff6:	b118      	cbz	r0, 8003000 <__swbuf_r+0x32>
 8002ff8:	f04f 37ff 	mov.w	r7, #4294967295
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	6922      	ldr	r2, [r4, #16]
 8003004:	1a98      	subs	r0, r3, r2
 8003006:	6963      	ldr	r3, [r4, #20]
 8003008:	b2f6      	uxtb	r6, r6
 800300a:	4283      	cmp	r3, r0
 800300c:	4637      	mov	r7, r6
 800300e:	dc05      	bgt.n	800301c <__swbuf_r+0x4e>
 8003010:	4621      	mov	r1, r4
 8003012:	4628      	mov	r0, r5
 8003014:	f000 fd3a 	bl	8003a8c <_fflush_r>
 8003018:	2800      	cmp	r0, #0
 800301a:	d1ed      	bne.n	8002ff8 <__swbuf_r+0x2a>
 800301c:	68a3      	ldr	r3, [r4, #8]
 800301e:	3b01      	subs	r3, #1
 8003020:	60a3      	str	r3, [r4, #8]
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	6022      	str	r2, [r4, #0]
 8003028:	701e      	strb	r6, [r3, #0]
 800302a:	6962      	ldr	r2, [r4, #20]
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	429a      	cmp	r2, r3
 8003030:	d004      	beq.n	800303c <__swbuf_r+0x6e>
 8003032:	89a3      	ldrh	r3, [r4, #12]
 8003034:	07db      	lsls	r3, r3, #31
 8003036:	d5e1      	bpl.n	8002ffc <__swbuf_r+0x2e>
 8003038:	2e0a      	cmp	r6, #10
 800303a:	d1df      	bne.n	8002ffc <__swbuf_r+0x2e>
 800303c:	4621      	mov	r1, r4
 800303e:	4628      	mov	r0, r5
 8003040:	f000 fd24 	bl	8003a8c <_fflush_r>
 8003044:	2800      	cmp	r0, #0
 8003046:	d0d9      	beq.n	8002ffc <__swbuf_r+0x2e>
 8003048:	e7d6      	b.n	8002ff8 <__swbuf_r+0x2a>
	...

0800304c <__swsetup_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	4b29      	ldr	r3, [pc, #164]	@ (80030f4 <__swsetup_r+0xa8>)
 8003050:	4605      	mov	r5, r0
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	460c      	mov	r4, r1
 8003056:	b118      	cbz	r0, 8003060 <__swsetup_r+0x14>
 8003058:	6a03      	ldr	r3, [r0, #32]
 800305a:	b90b      	cbnz	r3, 8003060 <__swsetup_r+0x14>
 800305c:	f7ff fe12 	bl	8002c84 <__sinit>
 8003060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003064:	0719      	lsls	r1, r3, #28
 8003066:	d422      	bmi.n	80030ae <__swsetup_r+0x62>
 8003068:	06da      	lsls	r2, r3, #27
 800306a:	d407      	bmi.n	800307c <__swsetup_r+0x30>
 800306c:	2209      	movs	r2, #9
 800306e:	602a      	str	r2, [r5, #0]
 8003070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003074:	81a3      	strh	r3, [r4, #12]
 8003076:	f04f 30ff 	mov.w	r0, #4294967295
 800307a:	e033      	b.n	80030e4 <__swsetup_r+0x98>
 800307c:	0758      	lsls	r0, r3, #29
 800307e:	d512      	bpl.n	80030a6 <__swsetup_r+0x5a>
 8003080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003082:	b141      	cbz	r1, 8003096 <__swsetup_r+0x4a>
 8003084:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003088:	4299      	cmp	r1, r3
 800308a:	d002      	beq.n	8003092 <__swsetup_r+0x46>
 800308c:	4628      	mov	r0, r5
 800308e:	f000 f8a9 	bl	80031e4 <_free_r>
 8003092:	2300      	movs	r3, #0
 8003094:	6363      	str	r3, [r4, #52]	@ 0x34
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800309c:	81a3      	strh	r3, [r4, #12]
 800309e:	2300      	movs	r3, #0
 80030a0:	6063      	str	r3, [r4, #4]
 80030a2:	6923      	ldr	r3, [r4, #16]
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	89a3      	ldrh	r3, [r4, #12]
 80030a8:	f043 0308 	orr.w	r3, r3, #8
 80030ac:	81a3      	strh	r3, [r4, #12]
 80030ae:	6923      	ldr	r3, [r4, #16]
 80030b0:	b94b      	cbnz	r3, 80030c6 <__swsetup_r+0x7a>
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80030b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030bc:	d003      	beq.n	80030c6 <__swsetup_r+0x7a>
 80030be:	4621      	mov	r1, r4
 80030c0:	4628      	mov	r0, r5
 80030c2:	f000 fd31 	bl	8003b28 <__smakebuf_r>
 80030c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ca:	f013 0201 	ands.w	r2, r3, #1
 80030ce:	d00a      	beq.n	80030e6 <__swsetup_r+0x9a>
 80030d0:	2200      	movs	r2, #0
 80030d2:	60a2      	str	r2, [r4, #8]
 80030d4:	6962      	ldr	r2, [r4, #20]
 80030d6:	4252      	negs	r2, r2
 80030d8:	61a2      	str	r2, [r4, #24]
 80030da:	6922      	ldr	r2, [r4, #16]
 80030dc:	b942      	cbnz	r2, 80030f0 <__swsetup_r+0xa4>
 80030de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80030e2:	d1c5      	bne.n	8003070 <__swsetup_r+0x24>
 80030e4:	bd38      	pop	{r3, r4, r5, pc}
 80030e6:	0799      	lsls	r1, r3, #30
 80030e8:	bf58      	it	pl
 80030ea:	6962      	ldrpl	r2, [r4, #20]
 80030ec:	60a2      	str	r2, [r4, #8]
 80030ee:	e7f4      	b.n	80030da <__swsetup_r+0x8e>
 80030f0:	2000      	movs	r0, #0
 80030f2:	e7f7      	b.n	80030e4 <__swsetup_r+0x98>
 80030f4:	2000006c 	.word	0x2000006c

080030f8 <memset>:
 80030f8:	4402      	add	r2, r0
 80030fa:	4603      	mov	r3, r0
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d100      	bne.n	8003102 <memset+0xa>
 8003100:	4770      	bx	lr
 8003102:	f803 1b01 	strb.w	r1, [r3], #1
 8003106:	e7f9      	b.n	80030fc <memset+0x4>

08003108 <_close_r>:
 8003108:	b538      	push	{r3, r4, r5, lr}
 800310a:	4d06      	ldr	r5, [pc, #24]	@ (8003124 <_close_r+0x1c>)
 800310c:	2300      	movs	r3, #0
 800310e:	4604      	mov	r4, r0
 8003110:	4608      	mov	r0, r1
 8003112:	602b      	str	r3, [r5, #0]
 8003114:	f7fd fe30 	bl	8000d78 <_close>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d102      	bne.n	8003122 <_close_r+0x1a>
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	b103      	cbz	r3, 8003122 <_close_r+0x1a>
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	bd38      	pop	{r3, r4, r5, pc}
 8003124:	2000053c 	.word	0x2000053c

08003128 <_lseek_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	4d07      	ldr	r5, [pc, #28]	@ (8003148 <_lseek_r+0x20>)
 800312c:	4604      	mov	r4, r0
 800312e:	4608      	mov	r0, r1
 8003130:	4611      	mov	r1, r2
 8003132:	2200      	movs	r2, #0
 8003134:	602a      	str	r2, [r5, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	f7fd fe1f 	bl	8000d7a <_lseek>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	d102      	bne.n	8003146 <_lseek_r+0x1e>
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	b103      	cbz	r3, 8003146 <_lseek_r+0x1e>
 8003144:	6023      	str	r3, [r4, #0]
 8003146:	bd38      	pop	{r3, r4, r5, pc}
 8003148:	2000053c 	.word	0x2000053c

0800314c <_read_r>:
 800314c:	b538      	push	{r3, r4, r5, lr}
 800314e:	4d07      	ldr	r5, [pc, #28]	@ (800316c <_read_r+0x20>)
 8003150:	4604      	mov	r4, r0
 8003152:	4608      	mov	r0, r1
 8003154:	4611      	mov	r1, r2
 8003156:	2200      	movs	r2, #0
 8003158:	602a      	str	r2, [r5, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	f7fd fdfe 	bl	8000d5c <_read>
 8003160:	1c43      	adds	r3, r0, #1
 8003162:	d102      	bne.n	800316a <_read_r+0x1e>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	b103      	cbz	r3, 800316a <_read_r+0x1e>
 8003168:	6023      	str	r3, [r4, #0]
 800316a:	bd38      	pop	{r3, r4, r5, pc}
 800316c:	2000053c 	.word	0x2000053c

08003170 <_write_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	4d07      	ldr	r5, [pc, #28]	@ (8003190 <_write_r+0x20>)
 8003174:	4604      	mov	r4, r0
 8003176:	4608      	mov	r0, r1
 8003178:	4611      	mov	r1, r2
 800317a:	2200      	movs	r2, #0
 800317c:	602a      	str	r2, [r5, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	f7fd fde0 	bl	8000d44 <_write>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d102      	bne.n	800318e <_write_r+0x1e>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	b103      	cbz	r3, 800318e <_write_r+0x1e>
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	2000053c 	.word	0x2000053c

08003194 <__libc_init_array>:
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	4d0d      	ldr	r5, [pc, #52]	@ (80031cc <__libc_init_array+0x38>)
 8003198:	4c0d      	ldr	r4, [pc, #52]	@ (80031d0 <__libc_init_array+0x3c>)
 800319a:	1b64      	subs	r4, r4, r5
 800319c:	10a4      	asrs	r4, r4, #2
 800319e:	2600      	movs	r6, #0
 80031a0:	42a6      	cmp	r6, r4
 80031a2:	d109      	bne.n	80031b8 <__libc_init_array+0x24>
 80031a4:	4d0b      	ldr	r5, [pc, #44]	@ (80031d4 <__libc_init_array+0x40>)
 80031a6:	4c0c      	ldr	r4, [pc, #48]	@ (80031d8 <__libc_init_array+0x44>)
 80031a8:	f000 fd3a 	bl	8003c20 <_init>
 80031ac:	1b64      	subs	r4, r4, r5
 80031ae:	10a4      	asrs	r4, r4, #2
 80031b0:	2600      	movs	r6, #0
 80031b2:	42a6      	cmp	r6, r4
 80031b4:	d105      	bne.n	80031c2 <__libc_init_array+0x2e>
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031bc:	4798      	blx	r3
 80031be:	3601      	adds	r6, #1
 80031c0:	e7ee      	b.n	80031a0 <__libc_init_array+0xc>
 80031c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c6:	4798      	blx	r3
 80031c8:	3601      	adds	r6, #1
 80031ca:	e7f2      	b.n	80031b2 <__libc_init_array+0x1e>
 80031cc:	08003cb4 	.word	0x08003cb4
 80031d0:	08003cb4 	.word	0x08003cb4
 80031d4:	08003cb4 	.word	0x08003cb4
 80031d8:	08003cb8 	.word	0x08003cb8

080031dc <__retarget_lock_init_recursive>:
 80031dc:	4770      	bx	lr

080031de <__retarget_lock_acquire_recursive>:
 80031de:	4770      	bx	lr

080031e0 <__retarget_lock_release_recursive>:
 80031e0:	4770      	bx	lr
	...

080031e4 <_free_r>:
 80031e4:	b538      	push	{r3, r4, r5, lr}
 80031e6:	4605      	mov	r5, r0
 80031e8:	2900      	cmp	r1, #0
 80031ea:	d041      	beq.n	8003270 <_free_r+0x8c>
 80031ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031f0:	1f0c      	subs	r4, r1, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bfb8      	it	lt
 80031f6:	18e4      	addlt	r4, r4, r3
 80031f8:	f000 f8e8 	bl	80033cc <__malloc_lock>
 80031fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003274 <_free_r+0x90>)
 80031fe:	6813      	ldr	r3, [r2, #0]
 8003200:	b933      	cbnz	r3, 8003210 <_free_r+0x2c>
 8003202:	6063      	str	r3, [r4, #4]
 8003204:	6014      	str	r4, [r2, #0]
 8003206:	4628      	mov	r0, r5
 8003208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800320c:	f000 b8e4 	b.w	80033d8 <__malloc_unlock>
 8003210:	42a3      	cmp	r3, r4
 8003212:	d908      	bls.n	8003226 <_free_r+0x42>
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	1821      	adds	r1, r4, r0
 8003218:	428b      	cmp	r3, r1
 800321a:	bf01      	itttt	eq
 800321c:	6819      	ldreq	r1, [r3, #0]
 800321e:	685b      	ldreq	r3, [r3, #4]
 8003220:	1809      	addeq	r1, r1, r0
 8003222:	6021      	streq	r1, [r4, #0]
 8003224:	e7ed      	b.n	8003202 <_free_r+0x1e>
 8003226:	461a      	mov	r2, r3
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	b10b      	cbz	r3, 8003230 <_free_r+0x4c>
 800322c:	42a3      	cmp	r3, r4
 800322e:	d9fa      	bls.n	8003226 <_free_r+0x42>
 8003230:	6811      	ldr	r1, [r2, #0]
 8003232:	1850      	adds	r0, r2, r1
 8003234:	42a0      	cmp	r0, r4
 8003236:	d10b      	bne.n	8003250 <_free_r+0x6c>
 8003238:	6820      	ldr	r0, [r4, #0]
 800323a:	4401      	add	r1, r0
 800323c:	1850      	adds	r0, r2, r1
 800323e:	4283      	cmp	r3, r0
 8003240:	6011      	str	r1, [r2, #0]
 8003242:	d1e0      	bne.n	8003206 <_free_r+0x22>
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	6053      	str	r3, [r2, #4]
 800324a:	4408      	add	r0, r1
 800324c:	6010      	str	r0, [r2, #0]
 800324e:	e7da      	b.n	8003206 <_free_r+0x22>
 8003250:	d902      	bls.n	8003258 <_free_r+0x74>
 8003252:	230c      	movs	r3, #12
 8003254:	602b      	str	r3, [r5, #0]
 8003256:	e7d6      	b.n	8003206 <_free_r+0x22>
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	1821      	adds	r1, r4, r0
 800325c:	428b      	cmp	r3, r1
 800325e:	bf04      	itt	eq
 8003260:	6819      	ldreq	r1, [r3, #0]
 8003262:	685b      	ldreq	r3, [r3, #4]
 8003264:	6063      	str	r3, [r4, #4]
 8003266:	bf04      	itt	eq
 8003268:	1809      	addeq	r1, r1, r0
 800326a:	6021      	streq	r1, [r4, #0]
 800326c:	6054      	str	r4, [r2, #4]
 800326e:	e7ca      	b.n	8003206 <_free_r+0x22>
 8003270:	bd38      	pop	{r3, r4, r5, pc}
 8003272:	bf00      	nop
 8003274:	20000548 	.word	0x20000548

08003278 <malloc>:
 8003278:	4b02      	ldr	r3, [pc, #8]	@ (8003284 <malloc+0xc>)
 800327a:	4601      	mov	r1, r0
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	f000 b825 	b.w	80032cc <_malloc_r>
 8003282:	bf00      	nop
 8003284:	2000006c 	.word	0x2000006c

08003288 <sbrk_aligned>:
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	4e0f      	ldr	r6, [pc, #60]	@ (80032c8 <sbrk_aligned+0x40>)
 800328c:	460c      	mov	r4, r1
 800328e:	6831      	ldr	r1, [r6, #0]
 8003290:	4605      	mov	r5, r0
 8003292:	b911      	cbnz	r1, 800329a <sbrk_aligned+0x12>
 8003294:	f000 fca6 	bl	8003be4 <_sbrk_r>
 8003298:	6030      	str	r0, [r6, #0]
 800329a:	4621      	mov	r1, r4
 800329c:	4628      	mov	r0, r5
 800329e:	f000 fca1 	bl	8003be4 <_sbrk_r>
 80032a2:	1c43      	adds	r3, r0, #1
 80032a4:	d103      	bne.n	80032ae <sbrk_aligned+0x26>
 80032a6:	f04f 34ff 	mov.w	r4, #4294967295
 80032aa:	4620      	mov	r0, r4
 80032ac:	bd70      	pop	{r4, r5, r6, pc}
 80032ae:	1cc4      	adds	r4, r0, #3
 80032b0:	f024 0403 	bic.w	r4, r4, #3
 80032b4:	42a0      	cmp	r0, r4
 80032b6:	d0f8      	beq.n	80032aa <sbrk_aligned+0x22>
 80032b8:	1a21      	subs	r1, r4, r0
 80032ba:	4628      	mov	r0, r5
 80032bc:	f000 fc92 	bl	8003be4 <_sbrk_r>
 80032c0:	3001      	adds	r0, #1
 80032c2:	d1f2      	bne.n	80032aa <sbrk_aligned+0x22>
 80032c4:	e7ef      	b.n	80032a6 <sbrk_aligned+0x1e>
 80032c6:	bf00      	nop
 80032c8:	20000544 	.word	0x20000544

080032cc <_malloc_r>:
 80032cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d0:	1ccd      	adds	r5, r1, #3
 80032d2:	f025 0503 	bic.w	r5, r5, #3
 80032d6:	3508      	adds	r5, #8
 80032d8:	2d0c      	cmp	r5, #12
 80032da:	bf38      	it	cc
 80032dc:	250c      	movcc	r5, #12
 80032de:	2d00      	cmp	r5, #0
 80032e0:	4606      	mov	r6, r0
 80032e2:	db01      	blt.n	80032e8 <_malloc_r+0x1c>
 80032e4:	42a9      	cmp	r1, r5
 80032e6:	d904      	bls.n	80032f2 <_malloc_r+0x26>
 80032e8:	230c      	movs	r3, #12
 80032ea:	6033      	str	r3, [r6, #0]
 80032ec:	2000      	movs	r0, #0
 80032ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033c8 <_malloc_r+0xfc>
 80032f6:	f000 f869 	bl	80033cc <__malloc_lock>
 80032fa:	f8d8 3000 	ldr.w	r3, [r8]
 80032fe:	461c      	mov	r4, r3
 8003300:	bb44      	cbnz	r4, 8003354 <_malloc_r+0x88>
 8003302:	4629      	mov	r1, r5
 8003304:	4630      	mov	r0, r6
 8003306:	f7ff ffbf 	bl	8003288 <sbrk_aligned>
 800330a:	1c43      	adds	r3, r0, #1
 800330c:	4604      	mov	r4, r0
 800330e:	d158      	bne.n	80033c2 <_malloc_r+0xf6>
 8003310:	f8d8 4000 	ldr.w	r4, [r8]
 8003314:	4627      	mov	r7, r4
 8003316:	2f00      	cmp	r7, #0
 8003318:	d143      	bne.n	80033a2 <_malloc_r+0xd6>
 800331a:	2c00      	cmp	r4, #0
 800331c:	d04b      	beq.n	80033b6 <_malloc_r+0xea>
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	4639      	mov	r1, r7
 8003322:	4630      	mov	r0, r6
 8003324:	eb04 0903 	add.w	r9, r4, r3
 8003328:	f000 fc5c 	bl	8003be4 <_sbrk_r>
 800332c:	4581      	cmp	r9, r0
 800332e:	d142      	bne.n	80033b6 <_malloc_r+0xea>
 8003330:	6821      	ldr	r1, [r4, #0]
 8003332:	1a6d      	subs	r5, r5, r1
 8003334:	4629      	mov	r1, r5
 8003336:	4630      	mov	r0, r6
 8003338:	f7ff ffa6 	bl	8003288 <sbrk_aligned>
 800333c:	3001      	adds	r0, #1
 800333e:	d03a      	beq.n	80033b6 <_malloc_r+0xea>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	442b      	add	r3, r5
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	f8d8 3000 	ldr.w	r3, [r8]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	bb62      	cbnz	r2, 80033a8 <_malloc_r+0xdc>
 800334e:	f8c8 7000 	str.w	r7, [r8]
 8003352:	e00f      	b.n	8003374 <_malloc_r+0xa8>
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	1b52      	subs	r2, r2, r5
 8003358:	d420      	bmi.n	800339c <_malloc_r+0xd0>
 800335a:	2a0b      	cmp	r2, #11
 800335c:	d917      	bls.n	800338e <_malloc_r+0xc2>
 800335e:	1961      	adds	r1, r4, r5
 8003360:	42a3      	cmp	r3, r4
 8003362:	6025      	str	r5, [r4, #0]
 8003364:	bf18      	it	ne
 8003366:	6059      	strne	r1, [r3, #4]
 8003368:	6863      	ldr	r3, [r4, #4]
 800336a:	bf08      	it	eq
 800336c:	f8c8 1000 	streq.w	r1, [r8]
 8003370:	5162      	str	r2, [r4, r5]
 8003372:	604b      	str	r3, [r1, #4]
 8003374:	4630      	mov	r0, r6
 8003376:	f000 f82f 	bl	80033d8 <__malloc_unlock>
 800337a:	f104 000b 	add.w	r0, r4, #11
 800337e:	1d23      	adds	r3, r4, #4
 8003380:	f020 0007 	bic.w	r0, r0, #7
 8003384:	1ac2      	subs	r2, r0, r3
 8003386:	bf1c      	itt	ne
 8003388:	1a1b      	subne	r3, r3, r0
 800338a:	50a3      	strne	r3, [r4, r2]
 800338c:	e7af      	b.n	80032ee <_malloc_r+0x22>
 800338e:	6862      	ldr	r2, [r4, #4]
 8003390:	42a3      	cmp	r3, r4
 8003392:	bf0c      	ite	eq
 8003394:	f8c8 2000 	streq.w	r2, [r8]
 8003398:	605a      	strne	r2, [r3, #4]
 800339a:	e7eb      	b.n	8003374 <_malloc_r+0xa8>
 800339c:	4623      	mov	r3, r4
 800339e:	6864      	ldr	r4, [r4, #4]
 80033a0:	e7ae      	b.n	8003300 <_malloc_r+0x34>
 80033a2:	463c      	mov	r4, r7
 80033a4:	687f      	ldr	r7, [r7, #4]
 80033a6:	e7b6      	b.n	8003316 <_malloc_r+0x4a>
 80033a8:	461a      	mov	r2, r3
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	d1fb      	bne.n	80033a8 <_malloc_r+0xdc>
 80033b0:	2300      	movs	r3, #0
 80033b2:	6053      	str	r3, [r2, #4]
 80033b4:	e7de      	b.n	8003374 <_malloc_r+0xa8>
 80033b6:	230c      	movs	r3, #12
 80033b8:	6033      	str	r3, [r6, #0]
 80033ba:	4630      	mov	r0, r6
 80033bc:	f000 f80c 	bl	80033d8 <__malloc_unlock>
 80033c0:	e794      	b.n	80032ec <_malloc_r+0x20>
 80033c2:	6005      	str	r5, [r0, #0]
 80033c4:	e7d6      	b.n	8003374 <_malloc_r+0xa8>
 80033c6:	bf00      	nop
 80033c8:	20000548 	.word	0x20000548

080033cc <__malloc_lock>:
 80033cc:	4801      	ldr	r0, [pc, #4]	@ (80033d4 <__malloc_lock+0x8>)
 80033ce:	f7ff bf06 	b.w	80031de <__retarget_lock_acquire_recursive>
 80033d2:	bf00      	nop
 80033d4:	20000540 	.word	0x20000540

080033d8 <__malloc_unlock>:
 80033d8:	4801      	ldr	r0, [pc, #4]	@ (80033e0 <__malloc_unlock+0x8>)
 80033da:	f7ff bf01 	b.w	80031e0 <__retarget_lock_release_recursive>
 80033de:	bf00      	nop
 80033e0:	20000540 	.word	0x20000540

080033e4 <__sfputc_r>:
 80033e4:	6893      	ldr	r3, [r2, #8]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	b410      	push	{r4}
 80033ec:	6093      	str	r3, [r2, #8]
 80033ee:	da08      	bge.n	8003402 <__sfputc_r+0x1e>
 80033f0:	6994      	ldr	r4, [r2, #24]
 80033f2:	42a3      	cmp	r3, r4
 80033f4:	db01      	blt.n	80033fa <__sfputc_r+0x16>
 80033f6:	290a      	cmp	r1, #10
 80033f8:	d103      	bne.n	8003402 <__sfputc_r+0x1e>
 80033fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033fe:	f7ff bde6 	b.w	8002fce <__swbuf_r>
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	1c58      	adds	r0, r3, #1
 8003406:	6010      	str	r0, [r2, #0]
 8003408:	7019      	strb	r1, [r3, #0]
 800340a:	4608      	mov	r0, r1
 800340c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003410:	4770      	bx	lr

08003412 <__sfputs_r>:
 8003412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003414:	4606      	mov	r6, r0
 8003416:	460f      	mov	r7, r1
 8003418:	4614      	mov	r4, r2
 800341a:	18d5      	adds	r5, r2, r3
 800341c:	42ac      	cmp	r4, r5
 800341e:	d101      	bne.n	8003424 <__sfputs_r+0x12>
 8003420:	2000      	movs	r0, #0
 8003422:	e007      	b.n	8003434 <__sfputs_r+0x22>
 8003424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003428:	463a      	mov	r2, r7
 800342a:	4630      	mov	r0, r6
 800342c:	f7ff ffda 	bl	80033e4 <__sfputc_r>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	d1f3      	bne.n	800341c <__sfputs_r+0xa>
 8003434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003438 <_vfiprintf_r>:
 8003438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800343c:	460d      	mov	r5, r1
 800343e:	b09d      	sub	sp, #116	@ 0x74
 8003440:	4614      	mov	r4, r2
 8003442:	4698      	mov	r8, r3
 8003444:	4606      	mov	r6, r0
 8003446:	b118      	cbz	r0, 8003450 <_vfiprintf_r+0x18>
 8003448:	6a03      	ldr	r3, [r0, #32]
 800344a:	b90b      	cbnz	r3, 8003450 <_vfiprintf_r+0x18>
 800344c:	f7ff fc1a 	bl	8002c84 <__sinit>
 8003450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003452:	07d9      	lsls	r1, r3, #31
 8003454:	d405      	bmi.n	8003462 <_vfiprintf_r+0x2a>
 8003456:	89ab      	ldrh	r3, [r5, #12]
 8003458:	059a      	lsls	r2, r3, #22
 800345a:	d402      	bmi.n	8003462 <_vfiprintf_r+0x2a>
 800345c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800345e:	f7ff febe 	bl	80031de <__retarget_lock_acquire_recursive>
 8003462:	89ab      	ldrh	r3, [r5, #12]
 8003464:	071b      	lsls	r3, r3, #28
 8003466:	d501      	bpl.n	800346c <_vfiprintf_r+0x34>
 8003468:	692b      	ldr	r3, [r5, #16]
 800346a:	b99b      	cbnz	r3, 8003494 <_vfiprintf_r+0x5c>
 800346c:	4629      	mov	r1, r5
 800346e:	4630      	mov	r0, r6
 8003470:	f7ff fdec 	bl	800304c <__swsetup_r>
 8003474:	b170      	cbz	r0, 8003494 <_vfiprintf_r+0x5c>
 8003476:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003478:	07dc      	lsls	r4, r3, #31
 800347a:	d504      	bpl.n	8003486 <_vfiprintf_r+0x4e>
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	b01d      	add	sp, #116	@ 0x74
 8003482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003486:	89ab      	ldrh	r3, [r5, #12]
 8003488:	0598      	lsls	r0, r3, #22
 800348a:	d4f7      	bmi.n	800347c <_vfiprintf_r+0x44>
 800348c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800348e:	f7ff fea7 	bl	80031e0 <__retarget_lock_release_recursive>
 8003492:	e7f3      	b.n	800347c <_vfiprintf_r+0x44>
 8003494:	2300      	movs	r3, #0
 8003496:	9309      	str	r3, [sp, #36]	@ 0x24
 8003498:	2320      	movs	r3, #32
 800349a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800349e:	f8cd 800c 	str.w	r8, [sp, #12]
 80034a2:	2330      	movs	r3, #48	@ 0x30
 80034a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003654 <_vfiprintf_r+0x21c>
 80034a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034ac:	f04f 0901 	mov.w	r9, #1
 80034b0:	4623      	mov	r3, r4
 80034b2:	469a      	mov	sl, r3
 80034b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034b8:	b10a      	cbz	r2, 80034be <_vfiprintf_r+0x86>
 80034ba:	2a25      	cmp	r2, #37	@ 0x25
 80034bc:	d1f9      	bne.n	80034b2 <_vfiprintf_r+0x7a>
 80034be:	ebba 0b04 	subs.w	fp, sl, r4
 80034c2:	d00b      	beq.n	80034dc <_vfiprintf_r+0xa4>
 80034c4:	465b      	mov	r3, fp
 80034c6:	4622      	mov	r2, r4
 80034c8:	4629      	mov	r1, r5
 80034ca:	4630      	mov	r0, r6
 80034cc:	f7ff ffa1 	bl	8003412 <__sfputs_r>
 80034d0:	3001      	adds	r0, #1
 80034d2:	f000 80a7 	beq.w	8003624 <_vfiprintf_r+0x1ec>
 80034d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034d8:	445a      	add	r2, fp
 80034da:	9209      	str	r2, [sp, #36]	@ 0x24
 80034dc:	f89a 3000 	ldrb.w	r3, [sl]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 809f 	beq.w	8003624 <_vfiprintf_r+0x1ec>
 80034e6:	2300      	movs	r3, #0
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034f0:	f10a 0a01 	add.w	sl, sl, #1
 80034f4:	9304      	str	r3, [sp, #16]
 80034f6:	9307      	str	r3, [sp, #28]
 80034f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80034fe:	4654      	mov	r4, sl
 8003500:	2205      	movs	r2, #5
 8003502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003506:	4853      	ldr	r0, [pc, #332]	@ (8003654 <_vfiprintf_r+0x21c>)
 8003508:	f7fc fe9a 	bl	8000240 <memchr>
 800350c:	9a04      	ldr	r2, [sp, #16]
 800350e:	b9d8      	cbnz	r0, 8003548 <_vfiprintf_r+0x110>
 8003510:	06d1      	lsls	r1, r2, #27
 8003512:	bf44      	itt	mi
 8003514:	2320      	movmi	r3, #32
 8003516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800351a:	0713      	lsls	r3, r2, #28
 800351c:	bf44      	itt	mi
 800351e:	232b      	movmi	r3, #43	@ 0x2b
 8003520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003524:	f89a 3000 	ldrb.w	r3, [sl]
 8003528:	2b2a      	cmp	r3, #42	@ 0x2a
 800352a:	d015      	beq.n	8003558 <_vfiprintf_r+0x120>
 800352c:	9a07      	ldr	r2, [sp, #28]
 800352e:	4654      	mov	r4, sl
 8003530:	2000      	movs	r0, #0
 8003532:	f04f 0c0a 	mov.w	ip, #10
 8003536:	4621      	mov	r1, r4
 8003538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800353c:	3b30      	subs	r3, #48	@ 0x30
 800353e:	2b09      	cmp	r3, #9
 8003540:	d94b      	bls.n	80035da <_vfiprintf_r+0x1a2>
 8003542:	b1b0      	cbz	r0, 8003572 <_vfiprintf_r+0x13a>
 8003544:	9207      	str	r2, [sp, #28]
 8003546:	e014      	b.n	8003572 <_vfiprintf_r+0x13a>
 8003548:	eba0 0308 	sub.w	r3, r0, r8
 800354c:	fa09 f303 	lsl.w	r3, r9, r3
 8003550:	4313      	orrs	r3, r2
 8003552:	9304      	str	r3, [sp, #16]
 8003554:	46a2      	mov	sl, r4
 8003556:	e7d2      	b.n	80034fe <_vfiprintf_r+0xc6>
 8003558:	9b03      	ldr	r3, [sp, #12]
 800355a:	1d19      	adds	r1, r3, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	9103      	str	r1, [sp, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	bfbb      	ittet	lt
 8003564:	425b      	neglt	r3, r3
 8003566:	f042 0202 	orrlt.w	r2, r2, #2
 800356a:	9307      	strge	r3, [sp, #28]
 800356c:	9307      	strlt	r3, [sp, #28]
 800356e:	bfb8      	it	lt
 8003570:	9204      	strlt	r2, [sp, #16]
 8003572:	7823      	ldrb	r3, [r4, #0]
 8003574:	2b2e      	cmp	r3, #46	@ 0x2e
 8003576:	d10a      	bne.n	800358e <_vfiprintf_r+0x156>
 8003578:	7863      	ldrb	r3, [r4, #1]
 800357a:	2b2a      	cmp	r3, #42	@ 0x2a
 800357c:	d132      	bne.n	80035e4 <_vfiprintf_r+0x1ac>
 800357e:	9b03      	ldr	r3, [sp, #12]
 8003580:	1d1a      	adds	r2, r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	9203      	str	r2, [sp, #12]
 8003586:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800358a:	3402      	adds	r4, #2
 800358c:	9305      	str	r3, [sp, #20]
 800358e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003664 <_vfiprintf_r+0x22c>
 8003592:	7821      	ldrb	r1, [r4, #0]
 8003594:	2203      	movs	r2, #3
 8003596:	4650      	mov	r0, sl
 8003598:	f7fc fe52 	bl	8000240 <memchr>
 800359c:	b138      	cbz	r0, 80035ae <_vfiprintf_r+0x176>
 800359e:	9b04      	ldr	r3, [sp, #16]
 80035a0:	eba0 000a 	sub.w	r0, r0, sl
 80035a4:	2240      	movs	r2, #64	@ 0x40
 80035a6:	4082      	lsls	r2, r0
 80035a8:	4313      	orrs	r3, r2
 80035aa:	3401      	adds	r4, #1
 80035ac:	9304      	str	r3, [sp, #16]
 80035ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035b2:	4829      	ldr	r0, [pc, #164]	@ (8003658 <_vfiprintf_r+0x220>)
 80035b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035b8:	2206      	movs	r2, #6
 80035ba:	f7fc fe41 	bl	8000240 <memchr>
 80035be:	2800      	cmp	r0, #0
 80035c0:	d03f      	beq.n	8003642 <_vfiprintf_r+0x20a>
 80035c2:	4b26      	ldr	r3, [pc, #152]	@ (800365c <_vfiprintf_r+0x224>)
 80035c4:	bb1b      	cbnz	r3, 800360e <_vfiprintf_r+0x1d6>
 80035c6:	9b03      	ldr	r3, [sp, #12]
 80035c8:	3307      	adds	r3, #7
 80035ca:	f023 0307 	bic.w	r3, r3, #7
 80035ce:	3308      	adds	r3, #8
 80035d0:	9303      	str	r3, [sp, #12]
 80035d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035d4:	443b      	add	r3, r7
 80035d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80035d8:	e76a      	b.n	80034b0 <_vfiprintf_r+0x78>
 80035da:	fb0c 3202 	mla	r2, ip, r2, r3
 80035de:	460c      	mov	r4, r1
 80035e0:	2001      	movs	r0, #1
 80035e2:	e7a8      	b.n	8003536 <_vfiprintf_r+0xfe>
 80035e4:	2300      	movs	r3, #0
 80035e6:	3401      	adds	r4, #1
 80035e8:	9305      	str	r3, [sp, #20]
 80035ea:	4619      	mov	r1, r3
 80035ec:	f04f 0c0a 	mov.w	ip, #10
 80035f0:	4620      	mov	r0, r4
 80035f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035f6:	3a30      	subs	r2, #48	@ 0x30
 80035f8:	2a09      	cmp	r2, #9
 80035fa:	d903      	bls.n	8003604 <_vfiprintf_r+0x1cc>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0c6      	beq.n	800358e <_vfiprintf_r+0x156>
 8003600:	9105      	str	r1, [sp, #20]
 8003602:	e7c4      	b.n	800358e <_vfiprintf_r+0x156>
 8003604:	fb0c 2101 	mla	r1, ip, r1, r2
 8003608:	4604      	mov	r4, r0
 800360a:	2301      	movs	r3, #1
 800360c:	e7f0      	b.n	80035f0 <_vfiprintf_r+0x1b8>
 800360e:	ab03      	add	r3, sp, #12
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	462a      	mov	r2, r5
 8003614:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <_vfiprintf_r+0x228>)
 8003616:	a904      	add	r1, sp, #16
 8003618:	4630      	mov	r0, r6
 800361a:	f3af 8000 	nop.w
 800361e:	4607      	mov	r7, r0
 8003620:	1c78      	adds	r0, r7, #1
 8003622:	d1d6      	bne.n	80035d2 <_vfiprintf_r+0x19a>
 8003624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003626:	07d9      	lsls	r1, r3, #31
 8003628:	d405      	bmi.n	8003636 <_vfiprintf_r+0x1fe>
 800362a:	89ab      	ldrh	r3, [r5, #12]
 800362c:	059a      	lsls	r2, r3, #22
 800362e:	d402      	bmi.n	8003636 <_vfiprintf_r+0x1fe>
 8003630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003632:	f7ff fdd5 	bl	80031e0 <__retarget_lock_release_recursive>
 8003636:	89ab      	ldrh	r3, [r5, #12]
 8003638:	065b      	lsls	r3, r3, #25
 800363a:	f53f af1f 	bmi.w	800347c <_vfiprintf_r+0x44>
 800363e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003640:	e71e      	b.n	8003480 <_vfiprintf_r+0x48>
 8003642:	ab03      	add	r3, sp, #12
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	462a      	mov	r2, r5
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <_vfiprintf_r+0x228>)
 800364a:	a904      	add	r1, sp, #16
 800364c:	4630      	mov	r0, r6
 800364e:	f000 f879 	bl	8003744 <_printf_i>
 8003652:	e7e4      	b.n	800361e <_vfiprintf_r+0x1e6>
 8003654:	08003c76 	.word	0x08003c76
 8003658:	08003c80 	.word	0x08003c80
 800365c:	00000000 	.word	0x00000000
 8003660:	08003413 	.word	0x08003413
 8003664:	08003c7c 	.word	0x08003c7c

08003668 <_printf_common>:
 8003668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800366c:	4616      	mov	r6, r2
 800366e:	4698      	mov	r8, r3
 8003670:	688a      	ldr	r2, [r1, #8]
 8003672:	690b      	ldr	r3, [r1, #16]
 8003674:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003678:	4293      	cmp	r3, r2
 800367a:	bfb8      	it	lt
 800367c:	4613      	movlt	r3, r2
 800367e:	6033      	str	r3, [r6, #0]
 8003680:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003684:	4607      	mov	r7, r0
 8003686:	460c      	mov	r4, r1
 8003688:	b10a      	cbz	r2, 800368e <_printf_common+0x26>
 800368a:	3301      	adds	r3, #1
 800368c:	6033      	str	r3, [r6, #0]
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	0699      	lsls	r1, r3, #26
 8003692:	bf42      	ittt	mi
 8003694:	6833      	ldrmi	r3, [r6, #0]
 8003696:	3302      	addmi	r3, #2
 8003698:	6033      	strmi	r3, [r6, #0]
 800369a:	6825      	ldr	r5, [r4, #0]
 800369c:	f015 0506 	ands.w	r5, r5, #6
 80036a0:	d106      	bne.n	80036b0 <_printf_common+0x48>
 80036a2:	f104 0a19 	add.w	sl, r4, #25
 80036a6:	68e3      	ldr	r3, [r4, #12]
 80036a8:	6832      	ldr	r2, [r6, #0]
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	42ab      	cmp	r3, r5
 80036ae:	dc26      	bgt.n	80036fe <_printf_common+0x96>
 80036b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	3b00      	subs	r3, #0
 80036b8:	bf18      	it	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	0692      	lsls	r2, r2, #26
 80036be:	d42b      	bmi.n	8003718 <_printf_common+0xb0>
 80036c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036c4:	4641      	mov	r1, r8
 80036c6:	4638      	mov	r0, r7
 80036c8:	47c8      	blx	r9
 80036ca:	3001      	adds	r0, #1
 80036cc:	d01e      	beq.n	800370c <_printf_common+0xa4>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	6922      	ldr	r2, [r4, #16]
 80036d2:	f003 0306 	and.w	r3, r3, #6
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	bf02      	ittt	eq
 80036da:	68e5      	ldreq	r5, [r4, #12]
 80036dc:	6833      	ldreq	r3, [r6, #0]
 80036de:	1aed      	subeq	r5, r5, r3
 80036e0:	68a3      	ldr	r3, [r4, #8]
 80036e2:	bf0c      	ite	eq
 80036e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036e8:	2500      	movne	r5, #0
 80036ea:	4293      	cmp	r3, r2
 80036ec:	bfc4      	itt	gt
 80036ee:	1a9b      	subgt	r3, r3, r2
 80036f0:	18ed      	addgt	r5, r5, r3
 80036f2:	2600      	movs	r6, #0
 80036f4:	341a      	adds	r4, #26
 80036f6:	42b5      	cmp	r5, r6
 80036f8:	d11a      	bne.n	8003730 <_printf_common+0xc8>
 80036fa:	2000      	movs	r0, #0
 80036fc:	e008      	b.n	8003710 <_printf_common+0xa8>
 80036fe:	2301      	movs	r3, #1
 8003700:	4652      	mov	r2, sl
 8003702:	4641      	mov	r1, r8
 8003704:	4638      	mov	r0, r7
 8003706:	47c8      	blx	r9
 8003708:	3001      	adds	r0, #1
 800370a:	d103      	bne.n	8003714 <_printf_common+0xac>
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003714:	3501      	adds	r5, #1
 8003716:	e7c6      	b.n	80036a6 <_printf_common+0x3e>
 8003718:	18e1      	adds	r1, r4, r3
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	2030      	movs	r0, #48	@ 0x30
 800371e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003722:	4422      	add	r2, r4
 8003724:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003728:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800372c:	3302      	adds	r3, #2
 800372e:	e7c7      	b.n	80036c0 <_printf_common+0x58>
 8003730:	2301      	movs	r3, #1
 8003732:	4622      	mov	r2, r4
 8003734:	4641      	mov	r1, r8
 8003736:	4638      	mov	r0, r7
 8003738:	47c8      	blx	r9
 800373a:	3001      	adds	r0, #1
 800373c:	d0e6      	beq.n	800370c <_printf_common+0xa4>
 800373e:	3601      	adds	r6, #1
 8003740:	e7d9      	b.n	80036f6 <_printf_common+0x8e>
	...

08003744 <_printf_i>:
 8003744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003748:	7e0f      	ldrb	r7, [r1, #24]
 800374a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800374c:	2f78      	cmp	r7, #120	@ 0x78
 800374e:	4691      	mov	r9, r2
 8003750:	4680      	mov	r8, r0
 8003752:	460c      	mov	r4, r1
 8003754:	469a      	mov	sl, r3
 8003756:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800375a:	d807      	bhi.n	800376c <_printf_i+0x28>
 800375c:	2f62      	cmp	r7, #98	@ 0x62
 800375e:	d80a      	bhi.n	8003776 <_printf_i+0x32>
 8003760:	2f00      	cmp	r7, #0
 8003762:	f000 80d2 	beq.w	800390a <_printf_i+0x1c6>
 8003766:	2f58      	cmp	r7, #88	@ 0x58
 8003768:	f000 80b9 	beq.w	80038de <_printf_i+0x19a>
 800376c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003770:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003774:	e03a      	b.n	80037ec <_printf_i+0xa8>
 8003776:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800377a:	2b15      	cmp	r3, #21
 800377c:	d8f6      	bhi.n	800376c <_printf_i+0x28>
 800377e:	a101      	add	r1, pc, #4	@ (adr r1, 8003784 <_printf_i+0x40>)
 8003780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003784:	080037dd 	.word	0x080037dd
 8003788:	080037f1 	.word	0x080037f1
 800378c:	0800376d 	.word	0x0800376d
 8003790:	0800376d 	.word	0x0800376d
 8003794:	0800376d 	.word	0x0800376d
 8003798:	0800376d 	.word	0x0800376d
 800379c:	080037f1 	.word	0x080037f1
 80037a0:	0800376d 	.word	0x0800376d
 80037a4:	0800376d 	.word	0x0800376d
 80037a8:	0800376d 	.word	0x0800376d
 80037ac:	0800376d 	.word	0x0800376d
 80037b0:	080038f1 	.word	0x080038f1
 80037b4:	0800381b 	.word	0x0800381b
 80037b8:	080038ab 	.word	0x080038ab
 80037bc:	0800376d 	.word	0x0800376d
 80037c0:	0800376d 	.word	0x0800376d
 80037c4:	08003913 	.word	0x08003913
 80037c8:	0800376d 	.word	0x0800376d
 80037cc:	0800381b 	.word	0x0800381b
 80037d0:	0800376d 	.word	0x0800376d
 80037d4:	0800376d 	.word	0x0800376d
 80037d8:	080038b3 	.word	0x080038b3
 80037dc:	6833      	ldr	r3, [r6, #0]
 80037de:	1d1a      	adds	r2, r3, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6032      	str	r2, [r6, #0]
 80037e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037ec:	2301      	movs	r3, #1
 80037ee:	e09d      	b.n	800392c <_printf_i+0x1e8>
 80037f0:	6833      	ldr	r3, [r6, #0]
 80037f2:	6820      	ldr	r0, [r4, #0]
 80037f4:	1d19      	adds	r1, r3, #4
 80037f6:	6031      	str	r1, [r6, #0]
 80037f8:	0606      	lsls	r6, r0, #24
 80037fa:	d501      	bpl.n	8003800 <_printf_i+0xbc>
 80037fc:	681d      	ldr	r5, [r3, #0]
 80037fe:	e003      	b.n	8003808 <_printf_i+0xc4>
 8003800:	0645      	lsls	r5, r0, #25
 8003802:	d5fb      	bpl.n	80037fc <_printf_i+0xb8>
 8003804:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003808:	2d00      	cmp	r5, #0
 800380a:	da03      	bge.n	8003814 <_printf_i+0xd0>
 800380c:	232d      	movs	r3, #45	@ 0x2d
 800380e:	426d      	negs	r5, r5
 8003810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003814:	4859      	ldr	r0, [pc, #356]	@ (800397c <_printf_i+0x238>)
 8003816:	230a      	movs	r3, #10
 8003818:	e011      	b.n	800383e <_printf_i+0xfa>
 800381a:	6821      	ldr	r1, [r4, #0]
 800381c:	6833      	ldr	r3, [r6, #0]
 800381e:	0608      	lsls	r0, r1, #24
 8003820:	f853 5b04 	ldr.w	r5, [r3], #4
 8003824:	d402      	bmi.n	800382c <_printf_i+0xe8>
 8003826:	0649      	lsls	r1, r1, #25
 8003828:	bf48      	it	mi
 800382a:	b2ad      	uxthmi	r5, r5
 800382c:	2f6f      	cmp	r7, #111	@ 0x6f
 800382e:	4853      	ldr	r0, [pc, #332]	@ (800397c <_printf_i+0x238>)
 8003830:	6033      	str	r3, [r6, #0]
 8003832:	bf14      	ite	ne
 8003834:	230a      	movne	r3, #10
 8003836:	2308      	moveq	r3, #8
 8003838:	2100      	movs	r1, #0
 800383a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800383e:	6866      	ldr	r6, [r4, #4]
 8003840:	60a6      	str	r6, [r4, #8]
 8003842:	2e00      	cmp	r6, #0
 8003844:	bfa2      	ittt	ge
 8003846:	6821      	ldrge	r1, [r4, #0]
 8003848:	f021 0104 	bicge.w	r1, r1, #4
 800384c:	6021      	strge	r1, [r4, #0]
 800384e:	b90d      	cbnz	r5, 8003854 <_printf_i+0x110>
 8003850:	2e00      	cmp	r6, #0
 8003852:	d04b      	beq.n	80038ec <_printf_i+0x1a8>
 8003854:	4616      	mov	r6, r2
 8003856:	fbb5 f1f3 	udiv	r1, r5, r3
 800385a:	fb03 5711 	mls	r7, r3, r1, r5
 800385e:	5dc7      	ldrb	r7, [r0, r7]
 8003860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003864:	462f      	mov	r7, r5
 8003866:	42bb      	cmp	r3, r7
 8003868:	460d      	mov	r5, r1
 800386a:	d9f4      	bls.n	8003856 <_printf_i+0x112>
 800386c:	2b08      	cmp	r3, #8
 800386e:	d10b      	bne.n	8003888 <_printf_i+0x144>
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	07df      	lsls	r7, r3, #31
 8003874:	d508      	bpl.n	8003888 <_printf_i+0x144>
 8003876:	6923      	ldr	r3, [r4, #16]
 8003878:	6861      	ldr	r1, [r4, #4]
 800387a:	4299      	cmp	r1, r3
 800387c:	bfde      	ittt	le
 800387e:	2330      	movle	r3, #48	@ 0x30
 8003880:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003884:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003888:	1b92      	subs	r2, r2, r6
 800388a:	6122      	str	r2, [r4, #16]
 800388c:	f8cd a000 	str.w	sl, [sp]
 8003890:	464b      	mov	r3, r9
 8003892:	aa03      	add	r2, sp, #12
 8003894:	4621      	mov	r1, r4
 8003896:	4640      	mov	r0, r8
 8003898:	f7ff fee6 	bl	8003668 <_printf_common>
 800389c:	3001      	adds	r0, #1
 800389e:	d14a      	bne.n	8003936 <_printf_i+0x1f2>
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	b004      	add	sp, #16
 80038a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	f043 0320 	orr.w	r3, r3, #32
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	4833      	ldr	r0, [pc, #204]	@ (8003980 <_printf_i+0x23c>)
 80038b4:	2778      	movs	r7, #120	@ 0x78
 80038b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	6831      	ldr	r1, [r6, #0]
 80038be:	061f      	lsls	r7, r3, #24
 80038c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80038c4:	d402      	bmi.n	80038cc <_printf_i+0x188>
 80038c6:	065f      	lsls	r7, r3, #25
 80038c8:	bf48      	it	mi
 80038ca:	b2ad      	uxthmi	r5, r5
 80038cc:	6031      	str	r1, [r6, #0]
 80038ce:	07d9      	lsls	r1, r3, #31
 80038d0:	bf44      	itt	mi
 80038d2:	f043 0320 	orrmi.w	r3, r3, #32
 80038d6:	6023      	strmi	r3, [r4, #0]
 80038d8:	b11d      	cbz	r5, 80038e2 <_printf_i+0x19e>
 80038da:	2310      	movs	r3, #16
 80038dc:	e7ac      	b.n	8003838 <_printf_i+0xf4>
 80038de:	4827      	ldr	r0, [pc, #156]	@ (800397c <_printf_i+0x238>)
 80038e0:	e7e9      	b.n	80038b6 <_printf_i+0x172>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	f023 0320 	bic.w	r3, r3, #32
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	e7f6      	b.n	80038da <_printf_i+0x196>
 80038ec:	4616      	mov	r6, r2
 80038ee:	e7bd      	b.n	800386c <_printf_i+0x128>
 80038f0:	6833      	ldr	r3, [r6, #0]
 80038f2:	6825      	ldr	r5, [r4, #0]
 80038f4:	6961      	ldr	r1, [r4, #20]
 80038f6:	1d18      	adds	r0, r3, #4
 80038f8:	6030      	str	r0, [r6, #0]
 80038fa:	062e      	lsls	r6, r5, #24
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	d501      	bpl.n	8003904 <_printf_i+0x1c0>
 8003900:	6019      	str	r1, [r3, #0]
 8003902:	e002      	b.n	800390a <_printf_i+0x1c6>
 8003904:	0668      	lsls	r0, r5, #25
 8003906:	d5fb      	bpl.n	8003900 <_printf_i+0x1bc>
 8003908:	8019      	strh	r1, [r3, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	6123      	str	r3, [r4, #16]
 800390e:	4616      	mov	r6, r2
 8003910:	e7bc      	b.n	800388c <_printf_i+0x148>
 8003912:	6833      	ldr	r3, [r6, #0]
 8003914:	1d1a      	adds	r2, r3, #4
 8003916:	6032      	str	r2, [r6, #0]
 8003918:	681e      	ldr	r6, [r3, #0]
 800391a:	6862      	ldr	r2, [r4, #4]
 800391c:	2100      	movs	r1, #0
 800391e:	4630      	mov	r0, r6
 8003920:	f7fc fc8e 	bl	8000240 <memchr>
 8003924:	b108      	cbz	r0, 800392a <_printf_i+0x1e6>
 8003926:	1b80      	subs	r0, r0, r6
 8003928:	6060      	str	r0, [r4, #4]
 800392a:	6863      	ldr	r3, [r4, #4]
 800392c:	6123      	str	r3, [r4, #16]
 800392e:	2300      	movs	r3, #0
 8003930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003934:	e7aa      	b.n	800388c <_printf_i+0x148>
 8003936:	6923      	ldr	r3, [r4, #16]
 8003938:	4632      	mov	r2, r6
 800393a:	4649      	mov	r1, r9
 800393c:	4640      	mov	r0, r8
 800393e:	47d0      	blx	sl
 8003940:	3001      	adds	r0, #1
 8003942:	d0ad      	beq.n	80038a0 <_printf_i+0x15c>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	079b      	lsls	r3, r3, #30
 8003948:	d413      	bmi.n	8003972 <_printf_i+0x22e>
 800394a:	68e0      	ldr	r0, [r4, #12]
 800394c:	9b03      	ldr	r3, [sp, #12]
 800394e:	4298      	cmp	r0, r3
 8003950:	bfb8      	it	lt
 8003952:	4618      	movlt	r0, r3
 8003954:	e7a6      	b.n	80038a4 <_printf_i+0x160>
 8003956:	2301      	movs	r3, #1
 8003958:	4632      	mov	r2, r6
 800395a:	4649      	mov	r1, r9
 800395c:	4640      	mov	r0, r8
 800395e:	47d0      	blx	sl
 8003960:	3001      	adds	r0, #1
 8003962:	d09d      	beq.n	80038a0 <_printf_i+0x15c>
 8003964:	3501      	adds	r5, #1
 8003966:	68e3      	ldr	r3, [r4, #12]
 8003968:	9903      	ldr	r1, [sp, #12]
 800396a:	1a5b      	subs	r3, r3, r1
 800396c:	42ab      	cmp	r3, r5
 800396e:	dcf2      	bgt.n	8003956 <_printf_i+0x212>
 8003970:	e7eb      	b.n	800394a <_printf_i+0x206>
 8003972:	2500      	movs	r5, #0
 8003974:	f104 0619 	add.w	r6, r4, #25
 8003978:	e7f5      	b.n	8003966 <_printf_i+0x222>
 800397a:	bf00      	nop
 800397c:	08003c87 	.word	0x08003c87
 8003980:	08003c98 	.word	0x08003c98

08003984 <__sflush_r>:
 8003984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800398c:	0716      	lsls	r6, r2, #28
 800398e:	4605      	mov	r5, r0
 8003990:	460c      	mov	r4, r1
 8003992:	d454      	bmi.n	8003a3e <__sflush_r+0xba>
 8003994:	684b      	ldr	r3, [r1, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	dc02      	bgt.n	80039a0 <__sflush_r+0x1c>
 800399a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	dd48      	ble.n	8003a32 <__sflush_r+0xae>
 80039a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039a2:	2e00      	cmp	r6, #0
 80039a4:	d045      	beq.n	8003a32 <__sflush_r+0xae>
 80039a6:	2300      	movs	r3, #0
 80039a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039ac:	682f      	ldr	r7, [r5, #0]
 80039ae:	6a21      	ldr	r1, [r4, #32]
 80039b0:	602b      	str	r3, [r5, #0]
 80039b2:	d030      	beq.n	8003a16 <__sflush_r+0x92>
 80039b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	0759      	lsls	r1, r3, #29
 80039ba:	d505      	bpl.n	80039c8 <__sflush_r+0x44>
 80039bc:	6863      	ldr	r3, [r4, #4]
 80039be:	1ad2      	subs	r2, r2, r3
 80039c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039c2:	b10b      	cbz	r3, 80039c8 <__sflush_r+0x44>
 80039c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039c6:	1ad2      	subs	r2, r2, r3
 80039c8:	2300      	movs	r3, #0
 80039ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039cc:	6a21      	ldr	r1, [r4, #32]
 80039ce:	4628      	mov	r0, r5
 80039d0:	47b0      	blx	r6
 80039d2:	1c43      	adds	r3, r0, #1
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	d106      	bne.n	80039e6 <__sflush_r+0x62>
 80039d8:	6829      	ldr	r1, [r5, #0]
 80039da:	291d      	cmp	r1, #29
 80039dc:	d82b      	bhi.n	8003a36 <__sflush_r+0xb2>
 80039de:	4a2a      	ldr	r2, [pc, #168]	@ (8003a88 <__sflush_r+0x104>)
 80039e0:	410a      	asrs	r2, r1
 80039e2:	07d6      	lsls	r6, r2, #31
 80039e4:	d427      	bmi.n	8003a36 <__sflush_r+0xb2>
 80039e6:	2200      	movs	r2, #0
 80039e8:	6062      	str	r2, [r4, #4]
 80039ea:	04d9      	lsls	r1, r3, #19
 80039ec:	6922      	ldr	r2, [r4, #16]
 80039ee:	6022      	str	r2, [r4, #0]
 80039f0:	d504      	bpl.n	80039fc <__sflush_r+0x78>
 80039f2:	1c42      	adds	r2, r0, #1
 80039f4:	d101      	bne.n	80039fa <__sflush_r+0x76>
 80039f6:	682b      	ldr	r3, [r5, #0]
 80039f8:	b903      	cbnz	r3, 80039fc <__sflush_r+0x78>
 80039fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80039fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039fe:	602f      	str	r7, [r5, #0]
 8003a00:	b1b9      	cbz	r1, 8003a32 <__sflush_r+0xae>
 8003a02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a06:	4299      	cmp	r1, r3
 8003a08:	d002      	beq.n	8003a10 <__sflush_r+0x8c>
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f7ff fbea 	bl	80031e4 <_free_r>
 8003a10:	2300      	movs	r3, #0
 8003a12:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a14:	e00d      	b.n	8003a32 <__sflush_r+0xae>
 8003a16:	2301      	movs	r3, #1
 8003a18:	4628      	mov	r0, r5
 8003a1a:	47b0      	blx	r6
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	1c50      	adds	r0, r2, #1
 8003a20:	d1c9      	bne.n	80039b6 <__sflush_r+0x32>
 8003a22:	682b      	ldr	r3, [r5, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0c6      	beq.n	80039b6 <__sflush_r+0x32>
 8003a28:	2b1d      	cmp	r3, #29
 8003a2a:	d001      	beq.n	8003a30 <__sflush_r+0xac>
 8003a2c:	2b16      	cmp	r3, #22
 8003a2e:	d11e      	bne.n	8003a6e <__sflush_r+0xea>
 8003a30:	602f      	str	r7, [r5, #0]
 8003a32:	2000      	movs	r0, #0
 8003a34:	e022      	b.n	8003a7c <__sflush_r+0xf8>
 8003a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	e01b      	b.n	8003a76 <__sflush_r+0xf2>
 8003a3e:	690f      	ldr	r7, [r1, #16]
 8003a40:	2f00      	cmp	r7, #0
 8003a42:	d0f6      	beq.n	8003a32 <__sflush_r+0xae>
 8003a44:	0793      	lsls	r3, r2, #30
 8003a46:	680e      	ldr	r6, [r1, #0]
 8003a48:	bf08      	it	eq
 8003a4a:	694b      	ldreq	r3, [r1, #20]
 8003a4c:	600f      	str	r7, [r1, #0]
 8003a4e:	bf18      	it	ne
 8003a50:	2300      	movne	r3, #0
 8003a52:	eba6 0807 	sub.w	r8, r6, r7
 8003a56:	608b      	str	r3, [r1, #8]
 8003a58:	f1b8 0f00 	cmp.w	r8, #0
 8003a5c:	dde9      	ble.n	8003a32 <__sflush_r+0xae>
 8003a5e:	6a21      	ldr	r1, [r4, #32]
 8003a60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a62:	4643      	mov	r3, r8
 8003a64:	463a      	mov	r2, r7
 8003a66:	4628      	mov	r0, r5
 8003a68:	47b0      	blx	r6
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	dc08      	bgt.n	8003a80 <__sflush_r+0xfc>
 8003a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a76:	81a3      	strh	r3, [r4, #12]
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a80:	4407      	add	r7, r0
 8003a82:	eba8 0800 	sub.w	r8, r8, r0
 8003a86:	e7e7      	b.n	8003a58 <__sflush_r+0xd4>
 8003a88:	dfbffffe 	.word	0xdfbffffe

08003a8c <_fflush_r>:
 8003a8c:	b538      	push	{r3, r4, r5, lr}
 8003a8e:	690b      	ldr	r3, [r1, #16]
 8003a90:	4605      	mov	r5, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	b913      	cbnz	r3, 8003a9c <_fflush_r+0x10>
 8003a96:	2500      	movs	r5, #0
 8003a98:	4628      	mov	r0, r5
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	b118      	cbz	r0, 8003aa6 <_fflush_r+0x1a>
 8003a9e:	6a03      	ldr	r3, [r0, #32]
 8003aa0:	b90b      	cbnz	r3, 8003aa6 <_fflush_r+0x1a>
 8003aa2:	f7ff f8ef 	bl	8002c84 <__sinit>
 8003aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f3      	beq.n	8003a96 <_fflush_r+0xa>
 8003aae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ab0:	07d0      	lsls	r0, r2, #31
 8003ab2:	d404      	bmi.n	8003abe <_fflush_r+0x32>
 8003ab4:	0599      	lsls	r1, r3, #22
 8003ab6:	d402      	bmi.n	8003abe <_fflush_r+0x32>
 8003ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003aba:	f7ff fb90 	bl	80031de <__retarget_lock_acquire_recursive>
 8003abe:	4628      	mov	r0, r5
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	f7ff ff5f 	bl	8003984 <__sflush_r>
 8003ac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ac8:	07da      	lsls	r2, r3, #31
 8003aca:	4605      	mov	r5, r0
 8003acc:	d4e4      	bmi.n	8003a98 <_fflush_r+0xc>
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	059b      	lsls	r3, r3, #22
 8003ad2:	d4e1      	bmi.n	8003a98 <_fflush_r+0xc>
 8003ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ad6:	f7ff fb83 	bl	80031e0 <__retarget_lock_release_recursive>
 8003ada:	e7dd      	b.n	8003a98 <_fflush_r+0xc>

08003adc <__swhatbuf_r>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	460c      	mov	r4, r1
 8003ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae4:	2900      	cmp	r1, #0
 8003ae6:	b096      	sub	sp, #88	@ 0x58
 8003ae8:	4615      	mov	r5, r2
 8003aea:	461e      	mov	r6, r3
 8003aec:	da0d      	bge.n	8003b0a <__swhatbuf_r+0x2e>
 8003aee:	89a3      	ldrh	r3, [r4, #12]
 8003af0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003af4:	f04f 0100 	mov.w	r1, #0
 8003af8:	bf14      	ite	ne
 8003afa:	2340      	movne	r3, #64	@ 0x40
 8003afc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b00:	2000      	movs	r0, #0
 8003b02:	6031      	str	r1, [r6, #0]
 8003b04:	602b      	str	r3, [r5, #0]
 8003b06:	b016      	add	sp, #88	@ 0x58
 8003b08:	bd70      	pop	{r4, r5, r6, pc}
 8003b0a:	466a      	mov	r2, sp
 8003b0c:	f000 f848 	bl	8003ba0 <_fstat_r>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	dbec      	blt.n	8003aee <__swhatbuf_r+0x12>
 8003b14:	9901      	ldr	r1, [sp, #4]
 8003b16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b1e:	4259      	negs	r1, r3
 8003b20:	4159      	adcs	r1, r3
 8003b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b26:	e7eb      	b.n	8003b00 <__swhatbuf_r+0x24>

08003b28 <__smakebuf_r>:
 8003b28:	898b      	ldrh	r3, [r1, #12]
 8003b2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b2c:	079d      	lsls	r5, r3, #30
 8003b2e:	4606      	mov	r6, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	d507      	bpl.n	8003b44 <__smakebuf_r+0x1c>
 8003b34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	6123      	str	r3, [r4, #16]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	6163      	str	r3, [r4, #20]
 8003b40:	b003      	add	sp, #12
 8003b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b44:	ab01      	add	r3, sp, #4
 8003b46:	466a      	mov	r2, sp
 8003b48:	f7ff ffc8 	bl	8003adc <__swhatbuf_r>
 8003b4c:	9f00      	ldr	r7, [sp, #0]
 8003b4e:	4605      	mov	r5, r0
 8003b50:	4639      	mov	r1, r7
 8003b52:	4630      	mov	r0, r6
 8003b54:	f7ff fbba 	bl	80032cc <_malloc_r>
 8003b58:	b948      	cbnz	r0, 8003b6e <__smakebuf_r+0x46>
 8003b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b5e:	059a      	lsls	r2, r3, #22
 8003b60:	d4ee      	bmi.n	8003b40 <__smakebuf_r+0x18>
 8003b62:	f023 0303 	bic.w	r3, r3, #3
 8003b66:	f043 0302 	orr.w	r3, r3, #2
 8003b6a:	81a3      	strh	r3, [r4, #12]
 8003b6c:	e7e2      	b.n	8003b34 <__smakebuf_r+0xc>
 8003b6e:	89a3      	ldrh	r3, [r4, #12]
 8003b70:	6020      	str	r0, [r4, #0]
 8003b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	9b01      	ldr	r3, [sp, #4]
 8003b7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003b7e:	b15b      	cbz	r3, 8003b98 <__smakebuf_r+0x70>
 8003b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b84:	4630      	mov	r0, r6
 8003b86:	f000 f81d 	bl	8003bc4 <_isatty_r>
 8003b8a:	b128      	cbz	r0, 8003b98 <__smakebuf_r+0x70>
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	f023 0303 	bic.w	r3, r3, #3
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	431d      	orrs	r5, r3
 8003b9c:	81a5      	strh	r5, [r4, #12]
 8003b9e:	e7cf      	b.n	8003b40 <__smakebuf_r+0x18>

08003ba0 <_fstat_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4d07      	ldr	r5, [pc, #28]	@ (8003bc0 <_fstat_r+0x20>)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	4608      	mov	r0, r1
 8003baa:	4611      	mov	r1, r2
 8003bac:	602b      	str	r3, [r5, #0]
 8003bae:	f7fd f8e5 	bl	8000d7c <_fstat>
 8003bb2:	1c43      	adds	r3, r0, #1
 8003bb4:	d102      	bne.n	8003bbc <_fstat_r+0x1c>
 8003bb6:	682b      	ldr	r3, [r5, #0]
 8003bb8:	b103      	cbz	r3, 8003bbc <_fstat_r+0x1c>
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	bd38      	pop	{r3, r4, r5, pc}
 8003bbe:	bf00      	nop
 8003bc0:	2000053c 	.word	0x2000053c

08003bc4 <_isatty_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	4d06      	ldr	r5, [pc, #24]	@ (8003be0 <_isatty_r+0x1c>)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	f7fd f8d5 	bl	8000d7e <_isatty>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_isatty_r+0x1a>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_isatty_r+0x1a>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	2000053c 	.word	0x2000053c

08003be4 <_sbrk_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4d06      	ldr	r5, [pc, #24]	@ (8003c00 <_sbrk_r+0x1c>)
 8003be8:	2300      	movs	r3, #0
 8003bea:	4604      	mov	r4, r0
 8003bec:	4608      	mov	r0, r1
 8003bee:	602b      	str	r3, [r5, #0]
 8003bf0:	f000 f808 	bl	8003c04 <_sbrk>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d102      	bne.n	8003bfe <_sbrk_r+0x1a>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	b103      	cbz	r3, 8003bfe <_sbrk_r+0x1a>
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	2000053c 	.word	0x2000053c

08003c04 <_sbrk>:
 8003c04:	4a04      	ldr	r2, [pc, #16]	@ (8003c18 <_sbrk+0x14>)
 8003c06:	6811      	ldr	r1, [r2, #0]
 8003c08:	4603      	mov	r3, r0
 8003c0a:	b909      	cbnz	r1, 8003c10 <_sbrk+0xc>
 8003c0c:	4903      	ldr	r1, [pc, #12]	@ (8003c1c <_sbrk+0x18>)
 8003c0e:	6011      	str	r1, [r2, #0]
 8003c10:	6810      	ldr	r0, [r2, #0]
 8003c12:	4403      	add	r3, r0
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4770      	bx	lr
 8003c18:	2000054c 	.word	0x2000054c
 8003c1c:	20000550 	.word	0x20000550

08003c20 <_init>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	bf00      	nop
 8003c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c26:	bc08      	pop	{r3}
 8003c28:	469e      	mov	lr, r3
 8003c2a:	4770      	bx	lr

08003c2c <_fini>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	bf00      	nop
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr
