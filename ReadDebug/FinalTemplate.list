
FinalTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .apptext      00000000  00000000  00000000  0000507c  2**0
                  CONTENTS
  2 .apptext      00000000  20040000  20040000  0000507c  2**0
                  CONTENTS
  3 .text         000037ec  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000060  080039ec  080039ec  000049ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08003a4c  08003a4c  0000507c  2**0
                  CONTENTS
  6 .ARM          00000008  08003a4c  08003a4c  00004a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08003a54  08003a54  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08003a54  08003a54  00004a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08003a58  08003a58  00004a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000007c  20000000  08003a5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000430  2000007c  08003ad8  0000507c  2**2
                  ALLOC
 12 ._user_heap_stack 00000404  200004ac  08003ad8  000054ac  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f3a4  00000000  00000000  000050aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001de4  00000000  00000000  0001444e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000556f  00000000  00000000  00016232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000938  00000000  00000000  0001b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000006f1  00000000  00000000  0001c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002de40  00000000  00000000  0001c7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00010f05  00000000  00000000  0004a611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011c541  00000000  00000000  0005b516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00177a57  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000020f0  00000000  00000000  00177a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000054  00000000  00000000  00179b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	080039d4 	.word	0x080039d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	080039d4 	.word	0x080039d4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <switchGameButtonInit>:

static uint8_t func[200];


void switchGameButtonInit()
{
 80005d0:	b500      	push	{lr}
 80005d2:	b087      	sub	sp, #28
	GPIO_InitTypeDef switch_game_button_handler = {0};
 80005d4:	2300      	movs	r3, #0
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	9302      	str	r3, [sp, #8]
 80005da:	9303      	str	r3, [sp, #12]
 80005dc:	9304      	str	r3, [sp, #16]
 80005de:	9305      	str	r3, [sp, #20]

	switch_game_button_handler.Pin = SWITCH_GAME_BUTTON_PIN;
 80005e0:	2301      	movs	r3, #1
 80005e2:	9301      	str	r3, [sp, #4]
	switch_game_button_handler.Mode = GPIO_MODE_IT_FALLING;
 80005e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005e8:	9302      	str	r3, [sp, #8]
	switch_game_button_handler.Pull = GPIO_PULLDOWN;
 80005ea:	2302      	movs	r3, #2
 80005ec:	9303      	str	r3, [sp, #12]
	switch_game_button_handler.Speed = GPIO_SPEED_HIGH;
 80005ee:	2303      	movs	r3, #3
 80005f0:	9304      	str	r3, [sp, #16]

	HAL_GPIO_Init(SWITCH_GAME_BUTTON_PORT, &switch_game_button_handler);
 80005f2:	a901      	add	r1, sp, #4
 80005f4:	4804      	ldr	r0, [pc, #16]	@ (8000608 <switchGameButtonInit+0x38>)
 80005f6:	f000 fc55 	bl	8000ea4 <HAL_GPIO_Init>

	// Enable the Interrupt
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005fa:	2006      	movs	r0, #6
 80005fc:	f000 fc30 	bl	8000e60 <HAL_NVIC_EnableIRQ>
}
 8000600:	b007      	add	sp, #28
 8000602:	f85d fb04 	ldr.w	pc, [sp], #4
 8000606:	bf00      	nop
 8000608:	40020000 	.word	0x40020000

0800060c <main>:

int main(void){
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	b083      	sub	sp, #12

	Sys_Init();
 8000610:	f000 fa04 	bl	8000a1c <Sys_Init>

	// Read the README in the base directory of this project.
	spi_flash_interface_initialize_SPI();
 8000614:	f000 fa64 	bl	8000ae0 <spi_flash_interface_initialize_SPI>

	switchGameButtonInit();
 8000618:	f7ff ffda 	bl	80005d0 <switchGameButtonInit>

	//inc(&x);

	spi_flash_read_page(func, 200, 0x00);
 800061c:	4c10      	ldr	r4, [pc, #64]	@ (8000660 <main+0x54>)
 800061e:	2200      	movs	r2, #0
 8000620:	21c8      	movs	r1, #200	@ 0xc8
 8000622:	4620      	mov	r0, r4
 8000624:	f000 fa7c 	bl	8000b20 <spi_flash_read_page>

	asm("STR r13, %0" : "=m" (base_sp));
 8000628:	f8c4 d0c8 	str.w	sp, [r4, #200]	@ 0xc8
	sp_start_for_function = base_sp - STACK_SPACE_NEEDED_FOR_MAIN;
 800062c:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
 8000630:	f6a1 33b8 	subw	r3, r1, #3000	@ 0xbb8
 8000634:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc

	void (*myFunc)(uint8_t * , uint8_t );
	myFunc = (void (*)(uint8_t *, uint8_t )) (func-1);
 8000638:	1e65      	subs	r5, r4, #1

	volatile uint8_t p = 4;
 800063a:	2304      	movs	r3, #4
 800063c:	f88d 3007 	strb.w	r3, [sp, #7]
	volatile uint8_t q = 7;
 8000640:	2307      	movs	r3, #7
 8000642:	f88d 3006 	strb.w	r3, [sp, #6]

	printf("%x\r\n", base_sp);
 8000646:	4807      	ldr	r0, [pc, #28]	@ (8000664 <main+0x58>)
 8000648:	f002 fa2c 	bl	8002aa4 <iprintf>

	myFunc(&num_to_inc1, p);
 800064c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000650:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000654:	47a8      	blx	r5

	printf("DONE\r\n");
 8000656:	4804      	ldr	r0, [pc, #16]	@ (8000668 <main+0x5c>)
 8000658:	f002 fa8c 	bl	8002b74 <puts>
	while(1)
 800065c:	e7fe      	b.n	800065c <main+0x50>
 800065e:	bf00      	nop
 8000660:	20000098 	.word	0x20000098
 8000664:	08003a04 	.word	0x08003a04
 8000668:	08003a0c 	.word	0x08003a0c

0800066c <EXTI0_IRQHandler>:
/* ======================================================================
 * HELPER FUNCTION DEFINITIONS
 ======================================================================== */

void EXTI0_IRQHandler()
{
 800066c:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800066e:	2001      	movs	r0, #1
 8000670:	f000 fd20 	bl	80010b4 <HAL_GPIO_EXTI_IRQHandler>
}
 8000674:	bd08      	pop	{r3, pc}
	...

08000678 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
	if (pin == GPIO_PIN_0)
 8000678:	2801      	cmp	r0, #1
 800067a:	d000      	beq.n	800067e <HAL_GPIO_EXTI_Callback+0x6>
 800067c:	4770      	bx	lr
{
 800067e:	b508      	push	{r3, lr}
	{
		printf("%d\r\n", num_to_inc1);
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <HAL_GPIO_EXTI_Callback+0x18>)
 8000682:	f893 10d0 	ldrb.w	r1, [r3, #208]	@ 0xd0
 8000686:	4803      	ldr	r0, [pc, #12]	@ (8000694 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000688:	f002 fa0c 	bl	8002aa4 <iprintf>
	}
}
 800068c:	bd08      	pop	{r3, pc}
 800068e:	bf00      	nop
 8000690:	20000098 	.word	0x20000098
 8000694:	08003a14 	.word	0x08003a14

08000698 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800069c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <SCB_EnableICache+0x2c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006ac:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006b0:	695a      	ldr	r2, [r3, #20]
 80006b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80006b6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80006c8:	b410      	push	{r4}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006ca:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <SCB_EnableDCache+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006d2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006d6:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006da:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80006de:	e000      	b.n	80006e2 <SCB_EnableDCache+0x1a>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80006e0:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006e2:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006e6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80006ea:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80006ee:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80006f2:	490b      	ldr	r1, [pc, #44]	@ (8000720 <SCB_EnableDCache+0x58>)
 80006f4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80006f8:	4613      	mov	r3, r2
 80006fa:	3a01      	subs	r2, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f2      	bne.n	80006e6 <SCB_EnableDCache+0x1e>
    } while(sets-- != 0U);
 8000700:	1e43      	subs	r3, r0, #1
 8000702:	2800      	cmp	r0, #0
 8000704:	d1ec      	bne.n	80006e0 <SCB_EnableDCache+0x18>
 8000706:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800070a:	694b      	ldr	r3, [r1, #20]
 800070c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000710:	614b      	str	r3, [r1, #20]
 8000712:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000716:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 800071a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000724:	b500      	push	{lr}
 8000726:	b093      	sub	sp, #76	@ 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000730:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800073a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800073c:	2219      	movs	r2, #25
 800073e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000740:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8000744:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000746:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000748:	2309      	movs	r3, #9
 800074a:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800074c:	2307      	movs	r3, #7
 800074e:	930c      	str	r3, [sp, #48]	@ 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000750:	4668      	mov	r0, sp
 8000752:	f000 fcfb 	bl	800114c <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000756:	b100      	cbz	r0, 800075a <SystemClock_Config+0x36>
    while(1) { ; }
 8000758:	e7fe      	b.n	8000758 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800075a:	f000 fcb9 	bl	80010d0 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800075e:	b100      	cbz	r0, 8000762 <SystemClock_Config+0x3e>
    while(1) { ; }
 8000760:	e7fe      	b.n	8000760 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000762:	230f      	movs	r3, #15
 8000764:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000772:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000778:	9311      	str	r3, [sp, #68]	@ 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800077a:	2107      	movs	r1, #7
 800077c:	a80d      	add	r0, sp, #52	@ 0x34
 800077e:	f000 ff5b 	bl	8001638 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8000782:	b100      	cbz	r0, 8000786 <SystemClock_Config+0x62>
    while(1) { ; }
 8000784:	e7fe      	b.n	8000784 <SystemClock_Config+0x60>
  }
}
 8000786:	b013      	add	sp, #76	@ 0x4c
 8000788:	f85d fb04 	ldr.w	pc, [sp], #4

0800078c <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 800078c:	b508      	push	{r3, lr}
  /* Enable I-Cache */
  SCB_EnableICache();
 800078e:	f7ff ff83 	bl	8000698 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8000792:	f7ff ff99 	bl	80006c8 <SCB_EnableDCache>
}
 8000796:	bd08      	pop	{r3, pc}

08000798 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 8000798:	b0a4      	sub	sp, #144	@ 0x90
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b9f      	ldr	r3, [pc, #636]	@ (8000a18 <Clock_Inits+0x280>)
 800079c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800079e:	f042 0201 	orr.w	r2, r2, #1
 80007a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80007a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007a6:	f002 0201 	and.w	r2, r2, #1
 80007aa:	9201      	str	r2, [sp, #4]
 80007ac:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007b0:	f042 0202 	orr.w	r2, r2, #2
 80007b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80007b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007b8:	f002 0202 	and.w	r2, r2, #2
 80007bc:	9202      	str	r2, [sp, #8]
 80007be:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007c2:	f042 0204 	orr.w	r2, r2, #4
 80007c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80007c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ca:	f002 0204 	and.w	r2, r2, #4
 80007ce:	9203      	str	r2, [sp, #12]
 80007d0:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007d4:	f042 0208 	orr.w	r2, r2, #8
 80007d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80007da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007dc:	f002 0208 	and.w	r2, r2, #8
 80007e0:	9204      	str	r2, [sp, #16]
 80007e2:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007e6:	f042 0210 	orr.w	r2, r2, #16
 80007ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80007ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ee:	f002 0210 	and.w	r2, r2, #16
 80007f2:	9205      	str	r2, [sp, #20]
 80007f4:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80007f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007f8:	f042 0220 	orr.w	r2, r2, #32
 80007fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80007fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000800:	f002 0220 	and.w	r2, r2, #32
 8000804:	9206      	str	r2, [sp, #24]
 8000806:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800080a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800080e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000810:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000812:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000816:	9207      	str	r2, [sp, #28]
 8000818:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800081c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000820:	631a      	str	r2, [r3, #48]	@ 0x30
 8000822:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000824:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000828:	9208      	str	r2, [sp, #32]
 800082a:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800082c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800082e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000832:	631a      	str	r2, [r3, #48]	@ 0x30
 8000834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000836:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800083a:	9209      	str	r2, [sp, #36]	@ 0x24
 800083c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800083e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000844:	631a      	str	r2, [r3, #48]	@ 0x30
 8000846:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000848:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800084c:	920a      	str	r2, [sp, #40]	@ 0x28
 800084e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000852:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000856:	631a      	str	r2, [r3, #48]	@ 0x30
 8000858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800085a:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800085e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000860:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000864:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000868:	645a      	str	r2, [r3, #68]	@ 0x44
 800086a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800086c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000870:	920c      	str	r2, [sp, #48]	@ 0x30
 8000872:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000876:	f042 0201 	orr.w	r2, r2, #1
 800087a:	645a      	str	r2, [r3, #68]	@ 0x44
 800087c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800087e:	f002 0201 	and.w	r2, r2, #1
 8000882:	920d      	str	r2, [sp, #52]	@ 0x34
 8000884:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000888:	f042 0201 	orr.w	r2, r2, #1
 800088c:	641a      	str	r2, [r3, #64]	@ 0x40
 800088e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000890:	f002 0201 	and.w	r2, r2, #1
 8000894:	920e      	str	r2, [sp, #56]	@ 0x38
 8000896:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800089a:	f042 0202 	orr.w	r2, r2, #2
 800089e:	641a      	str	r2, [r3, #64]	@ 0x40
 80008a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008a2:	f002 0202 	and.w	r2, r2, #2
 80008a6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80008a8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
	__HAL_RCC_TIM4_CLK_ENABLE();
 80008aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ac:	f042 0204 	orr.w	r2, r2, #4
 80008b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80008b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008b4:	f002 0204 	and.w	r2, r2, #4
 80008b8:	9210      	str	r2, [sp, #64]	@ 0x40
 80008ba:	9a10      	ldr	r2, [sp, #64]	@ 0x40
	__HAL_RCC_TIM5_CLK_ENABLE();
 80008bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008be:	f042 0208 	orr.w	r2, r2, #8
 80008c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80008c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008c6:	f002 0208 	and.w	r2, r2, #8
 80008ca:	9211      	str	r2, [sp, #68]	@ 0x44
 80008cc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
	__HAL_RCC_TIM6_CLK_ENABLE();
 80008ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008d0:	f042 0210 	orr.w	r2, r2, #16
 80008d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80008d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008d8:	f002 0210 	and.w	r2, r2, #16
 80008dc:	9212      	str	r2, [sp, #72]	@ 0x48
 80008de:	9a12      	ldr	r2, [sp, #72]	@ 0x48
	__HAL_RCC_TIM7_CLK_ENABLE();
 80008e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008e2:	f042 0220 	orr.w	r2, r2, #32
 80008e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80008e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ea:	f002 0220 	and.w	r2, r2, #32
 80008ee:	9213      	str	r2, [sp, #76]	@ 0x4c
 80008f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
	__HAL_RCC_TIM8_CLK_ENABLE();
 80008f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008f4:	f042 0202 	orr.w	r2, r2, #2
 80008f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80008fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008fc:	f002 0202 	and.w	r2, r2, #2
 8000900:	9214      	str	r2, [sp, #80]	@ 0x50
 8000902:	9a14      	ldr	r2, [sp, #80]	@ 0x50
	__HAL_RCC_TIM9_CLK_ENABLE();
 8000904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000906:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800090a:	645a      	str	r2, [r3, #68]	@ 0x44
 800090c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800090e:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8000912:	9215      	str	r2, [sp, #84]	@ 0x54
 8000914:	9a15      	ldr	r2, [sp, #84]	@ 0x54
	__HAL_RCC_TIM10_CLK_ENABLE();
 8000916:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000918:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800091c:	645a      	str	r2, [r3, #68]	@ 0x44
 800091e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000920:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000924:	9216      	str	r2, [sp, #88]	@ 0x58
 8000926:	9a16      	ldr	r2, [sp, #88]	@ 0x58
	__HAL_RCC_TIM11_CLK_ENABLE();
 8000928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800092a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800092e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000932:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8000936:	9217      	str	r2, [sp, #92]	@ 0x5c
 8000938:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
	__HAL_RCC_TIM12_CLK_ENABLE();
 800093a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800093c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000940:	641a      	str	r2, [r3, #64]	@ 0x40
 8000942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000944:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000948:	9218      	str	r2, [sp, #96]	@ 0x60
 800094a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
	__HAL_RCC_TIM13_CLK_ENABLE();
 800094c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000952:	641a      	str	r2, [r3, #64]	@ 0x40
 8000954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000956:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800095a:	9219      	str	r2, [sp, #100]	@ 0x64
 800095c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
	__HAL_RCC_TIM14_CLK_ENABLE();
 800095e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000964:	641a      	str	r2, [r3, #64]	@ 0x40
 8000966:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000968:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800096c:	921a      	str	r2, [sp, #104]	@ 0x68
 800096e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000972:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000976:	641a      	str	r2, [r3, #64]	@ 0x40
 8000978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800097a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800097e:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000980:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 8000982:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000984:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000988:	641a      	str	r2, [r3, #64]	@ 0x40
 800098a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800098c:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8000990:	921c      	str	r2, [sp, #112]	@ 0x70
 8000992:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000996:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800099a:	645a      	str	r2, [r3, #68]	@ 0x44
 800099c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800099e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80009a2:	921d      	str	r2, [sp, #116]	@ 0x74
 80009a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
	__HAL_RCC_ADC2_CLK_ENABLE();
 80009a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80009ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009b0:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80009b4:	921e      	str	r2, [sp, #120]	@ 0x78
 80009b6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
	__HAL_RCC_ADC3_CLK_ENABLE();
 80009b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80009be:	645a      	str	r2, [r3, #68]	@ 0x44
 80009c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009c2:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 80009c6:	921f      	str	r2, [sp, #124]	@ 0x7c
 80009c8:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 80009ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009cc:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80009d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80009d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009d4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80009d8:	9220      	str	r2, [sp, #128]	@ 0x80
 80009da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
	__HAL_RCC_DMA2_CLK_ENABLE();
 80009dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009de:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80009e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80009e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009e6:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 80009ea:	9221      	str	r2, [sp, #132]	@ 0x84
 80009ec:	9a21      	ldr	r2, [sp, #132]	@ 0x84

	// JPEG Clock
	__HAL_RCC_JPEG_CLK_ENABLE();
 80009ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009f0:	f042 0202 	orr.w	r2, r2, #2
 80009f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009f8:	f002 0202 	and.w	r2, r2, #2
 80009fc:	9222      	str	r2, [sp, #136]	@ 0x88
 80009fe:	9a22      	ldr	r2, [sp, #136]	@ 0x88

	// DMA2D Clock
	__HAL_RCC_DMA2D_CLK_ENABLE();
 8000a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a02:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000a06:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a0e:	9323      	str	r3, [sp, #140]	@ 0x8c
 8000a10:	9b23      	ldr	r3, [sp, #140]	@ 0x8c

}
 8000a12:	b024      	add	sp, #144	@ 0x90
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <Sys_Init>:
void Sys_Init(void) {
 8000a1c:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 8000a1e:	f7ff feb5 	bl	800078c <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8000a22:	f000 f9a1 	bl	8000d68 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000a26:	f7ff fe7d 	bl	8000724 <SystemClock_Config>
	Clock_Inits();
 8000a2a:	f7ff feb5 	bl	8000798 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 8000a2e:	4a06      	ldr	r2, [pc, #24]	@ (8000a48 <Sys_Init+0x2c>)
 8000a30:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000a34:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <Sys_Init+0x30>)
 8000a36:	f000 f911 	bl	8000c5c <initUart>
	setbuf(stdout, NULL);
 8000a3a:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <Sys_Init+0x34>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2100      	movs	r1, #0
 8000a40:	6898      	ldr	r0, [r3, #8]
 8000a42:	f002 f89f 	bl	8002b84 <setbuf>
}
 8000a46:	bd08      	pop	{r3, pc}
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	200002d0 	.word	0x200002d0
 8000a50:	2000002c 	.word	0x2000002c

08000a54 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000a54:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000a56:	f000 f99d 	bl	8000d94 <HAL_IncTick>
}
 8000a5a:	bd08      	pop	{r3, pc}

08000a5c <spi_flash_gpio_init>:
/** =============================================================
 *  Initialization Function
    ============================================================= */

void spi_flash_gpio_init()
{
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
	// Initialize the MOSI and MISO pins
	GPIO_InitTypeDef spi_pins_init_struct = {0};
 8000a60:	2400      	movs	r4, #0
 8000a62:	9405      	str	r4, [sp, #20]
 8000a64:	9406      	str	r4, [sp, #24]
 8000a66:	9407      	str	r4, [sp, #28]
 8000a68:	9408      	str	r4, [sp, #32]
 8000a6a:	9409      	str	r4, [sp, #36]	@ 0x24

	spi_pins_init_struct.Pin = MOSI_PIN |MISO_PIN;
 8000a6c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a70:	9305      	str	r3, [sp, #20]
	spi_pins_init_struct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	9306      	str	r3, [sp, #24]
	spi_pins_init_struct.Pull = GPIO_NOPULL;
	spi_pins_init_struct.Speed = GPIO_SPEED_HIGH;
 8000a76:	2503      	movs	r5, #3
 8000a78:	9508      	str	r5, [sp, #32]
	spi_pins_init_struct.Alternate = GPIO_AF5_SPI2;			// From Table 13 of stm32f769xx_Datasheet
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	9309      	str	r3, [sp, #36]	@ 0x24
	HAL_GPIO_Init(MOSI_MISO_PORT, &spi_pins_init_struct);
 8000a7e:	a905      	add	r1, sp, #20
 8000a80:	4814      	ldr	r0, [pc, #80]	@ (8000ad4 <spi_flash_gpio_init+0x78>)
 8000a82:	f000 fa0f 	bl	8000ea4 <HAL_GPIO_Init>

	// Initialize the SCLK PIN
	spi_pins_init_struct.Pin = SCLK_PIN;
 8000a86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8a:	9305      	str	r3, [sp, #20]

	HAL_GPIO_Init(SCLK_PORT, &spi_pins_init_struct);
 8000a8c:	a905      	add	r1, sp, #20
 8000a8e:	4812      	ldr	r0, [pc, #72]	@ (8000ad8 <spi_flash_gpio_init+0x7c>)
 8000a90:	f000 fa08 	bl	8000ea4 <HAL_GPIO_Init>

	// Initialize the NSS Pins as normal GPIO Pins

	GPIO_InitTypeDef nss_control_pin_init_struct = {0};
 8000a94:	9400      	str	r4, [sp, #0]
 8000a96:	9401      	str	r4, [sp, #4]
 8000a98:	9402      	str	r4, [sp, #8]
 8000a9a:	9403      	str	r4, [sp, #12]
 8000a9c:	9404      	str	r4, [sp, #16]

	nss_control_pin_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	9301      	str	r3, [sp, #4]
	nss_control_pin_init_struct.Pull = GPIO_NOPULL;
	nss_control_pin_init_struct.Speed = GPIO_SPEED_HIGH;
 8000aa2:	9503      	str	r5, [sp, #12]

	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000aa4:	e011      	b.n	8000aca <spi_flash_gpio_init+0x6e>
	{
		nss_control_pin_init_struct.Pin = cartridge_nss_pin_numbers[i];
 8000aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8000adc <spi_flash_gpio_init+0x80>)
 8000aa8:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 8000aac:	9300      	str	r3, [sp, #0]
		HAL_GPIO_Init(cartridge_nss_ports[i], &nss_control_pin_init_struct);
 8000aae:	eb05 0684 	add.w	r6, r5, r4, lsl #2
 8000ab2:	4669      	mov	r1, sp
 8000ab4:	68b0      	ldr	r0, [r6, #8]
 8000ab6:	f000 f9f5 	bl	8000ea4 <HAL_GPIO_Init>

		// MAKE SURE IT IS HIGH TO START
		HAL_GPIO_WritePin(cartridge_nss_ports[i], cartridge_nss_pin_numbers[i], GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8000ac0:	68b0      	ldr	r0, [r6, #8]
 8000ac2:	f000 faf1 	bl	80010a8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000ac6:	3401      	adds	r4, #1
 8000ac8:	b2e4      	uxtb	r4, r4
 8000aca:	2c02      	cmp	r4, #2
 8000acc:	d9eb      	bls.n	8000aa6 <spi_flash_gpio_init+0x4a>
	}

}
 8000ace:	b00a      	add	sp, #40	@ 0x28
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	20000000 	.word	0x20000000

08000ae0 <spi_flash_interface_initialize_SPI>:

void spi_flash_interface_initialize_SPI()
{
 8000ae0:	b508      	push	{r3, lr}
	spi_flash_gpio_init();
 8000ae2:	f7ff ffbb 	bl	8000a5c <spi_flash_gpio_init>

	flash_spi_handle.Instance = SPI2;
 8000ae6:	480c      	ldr	r0, [pc, #48]	@ (8000b18 <spi_flash_interface_initialize_SPI+0x38>)
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <spi_flash_interface_initialize_SPI+0x3c>)
 8000aea:	6003      	str	r3, [r0, #0]
	flash_spi_handle.Init.Mode = SPI_MODE_MASTER; // Set master mode
 8000aec:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000af0:	6043      	str	r3, [r0, #4]
	flash_spi_handle.Init.TIMode = SPI_TIMODE_DISABLE; // Use Motorola mode, not TI mode
 8000af2:	2300      	movs	r3, #0
 8000af4:	6243      	str	r3, [r0, #36]	@ 0x24
	flash_spi_handle.Init.Direction = SPI_DIRECTION_2LINES; //Subject to change?
 8000af6:	6083      	str	r3, [r0, #8]
	flash_spi_handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af8:	6203      	str	r3, [r0, #32]
	flash_spi_handle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000afa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000afe:	60c2      	str	r2, [r0, #12]
	flash_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b00:	6103      	str	r3, [r0, #16]
	flash_spi_handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b02:	6143      	str	r3, [r0, #20]
	flash_spi_handle.Init.NSS = SPI_NSS_SOFT;
 8000b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b08:	6182      	str	r2, [r0, #24]
	flash_spi_handle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b0a:	6343      	str	r3, [r0, #52]	@ 0x34
	flash_spi_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b0c:	2338      	movs	r3, #56	@ 0x38
 8000b0e:	61c3      	str	r3, [r0, #28]

	HAL_SPI_Init(&flash_spi_handle);
 8000b10:	f000 ff9b 	bl	8001a4a <HAL_SPI_Init>
}
 8000b14:	bd08      	pop	{r3, pc}
 8000b16:	bf00      	nop
 8000b18:	2000026c 	.word	0x2000026c
 8000b1c:	40003800 	.word	0x40003800

08000b20 <spi_flash_read_page>:

}

void spi_flash_read_page(uint8_t * const databuf, uint16_t const datalen,
		uint32_t const addr)
{
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	b085      	sub	sp, #20
 8000b24:	4606      	mov	r6, r0
 8000b26:	460f      	mov	r7, r1
 8000b28:	4614      	mov	r4, r2
	HAL_GPIO_WritePin(cartridge_nss_ports[0], cartridge_nss_pin_numbers[0], GPIO_PIN_RESET);
 8000b2a:	4d15      	ldr	r5, [pc, #84]	@ (8000b80 <spi_flash_read_page+0x60>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	8829      	ldrh	r1, [r5, #0]
 8000b30:	68a8      	ldr	r0, [r5, #8]
 8000b32:	f000 fab9 	bl	80010a8 <HAL_GPIO_WritePin>

	uint8_t setup_sequence[4];
	setup_sequence[0] = 0x03; // The write instruction
 8000b36:	2303      	movs	r3, #3
 8000b38:	f88d 300c 	strb.w	r3, [sp, #12]
	setup_sequence[1] = (uint8_t) (addr >> 16);
 8000b3c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8000b40:	f88d 300d 	strb.w	r3, [sp, #13]
	setup_sequence[2] = (uint8_t) (addr >> 8);
 8000b44:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8000b48:	f88d 300e 	strb.w	r3, [sp, #14]
	setup_sequence[3] = (uint8_t) (addr);
 8000b4c:	f88d 400f 	strb.w	r4, [sp, #15]

	HAL_SPI_Transmit(&flash_spi_handle, setup_sequence, 4, HAL_MAX_DELAY);
 8000b50:	4c0c      	ldr	r4, [pc, #48]	@ (8000b84 <spi_flash_read_page+0x64>)
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	2204      	movs	r2, #4
 8000b58:	a903      	add	r1, sp, #12
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f001 f808 	bl	8001b70 <HAL_SPI_Transmit>

	HAL_SPI_TransmitReceive(&flash_spi_handle, databuf, databuf, datalen, HAL_MAX_DELAY);
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	463b      	mov	r3, r7
 8000b68:	4632      	mov	r2, r6
 8000b6a:	4631      	mov	r1, r6
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f001 f918 	bl	8001da2 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(cartridge_nss_ports[0], cartridge_nss_pin_numbers[0], GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	8829      	ldrh	r1, [r5, #0]
 8000b76:	68a8      	ldr	r0, [r5, #8]
 8000b78:	f000 fa96 	bl	80010a8 <HAL_GPIO_WritePin>
}
 8000b7c:	b005      	add	sp, #20
 8000b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	2000026c 	.word	0x2000026c

08000b88 <HAL_UART_MspInit>:
UART_HandleTypeDef USB_UART;

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000b88:	b530      	push	{r4, r5, lr}
 8000b8a:	b08b      	sub	sp, #44	@ 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000b8c:	6803      	ldr	r3, [r0, #0]
 8000b8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000c48 <HAL_UART_MspInit+0xc0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d004      	beq.n	8000b9e <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000b94:	4a2d      	ldr	r2, [pc, #180]	@ (8000c4c <HAL_UART_MspInit+0xc4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d02c      	beq.n	8000bf4 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000b9a:	b00b      	add	sp, #44	@ 0x2c
 8000b9c:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000b9e:	4c2c      	ldr	r4, [pc, #176]	@ (8000c50 <HAL_UART_MspInit+0xc8>)
 8000ba0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ba8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000bb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bb6:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000bc8:	4d22      	ldr	r5, [pc, #136]	@ (8000c54 <HAL_UART_MspInit+0xcc>)
 8000bca:	a905      	add	r1, sp, #20
 8000bcc:	4628      	mov	r0, r5
 8000bce:	f000 f969 	bl	8000ea4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd6:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000bd8:	a905      	add	r1, sp, #20
 8000bda:	4628      	mov	r0, r5
 8000bdc:	f000 f962 	bl	8000ea4 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000be0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6463      	str	r3, [r4, #68]	@ 0x44
 8000be8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	9b02      	ldr	r3, [sp, #8]
 8000bf2:	e7d2      	b.n	8000b9a <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000bf4:	4c16      	ldr	r4, [pc, #88]	@ (8000c50 <HAL_UART_MspInit+0xc8>)
 8000bf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8000bfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	9303      	str	r3, [sp, #12]
 8000c06:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000c08:	2340      	movs	r3, #64	@ 0x40
 8000c0a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c18:	2308      	movs	r3, #8
 8000c1a:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000c1c:	4d0e      	ldr	r5, [pc, #56]	@ (8000c58 <HAL_UART_MspInit+0xd0>)
 8000c1e:	a905      	add	r1, sp, #20
 8000c20:	4628      	mov	r0, r5
 8000c22:	f000 f93f 	bl	8000ea4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000c2a:	a905      	add	r1, sp, #20
 8000c2c:	4628      	mov	r0, r5
 8000c2e:	f000 f939 	bl	8000ea4 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000c32:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000c34:	f043 0320 	orr.w	r3, r3, #32
 8000c38:	6463      	str	r3, [r4, #68]	@ 0x44
 8000c3a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000c3c:	f003 0320 	and.w	r3, r3, #32
 8000c40:	9304      	str	r3, [sp, #16]
 8000c42:	9b04      	ldr	r3, [sp, #16]
}
 8000c44:	e7a9      	b.n	8000b9a <HAL_UART_MspInit+0x12>
 8000c46:	bf00      	nop
 8000c48:	40011000 	.word	0x40011000
 8000c4c:	40011400 	.word	0x40011400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020800 	.word	0x40020800

08000c5c <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000c5c:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000c5e:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000c60:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	2200      	movs	r2, #0
 8000c64:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000c66:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000c68:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000c6a:	210c      	movs	r1, #12
 8000c6c:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000c6e:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000c70:	f001 fe24 	bl	80028bc <HAL_UART_Init>
}
 8000c74:	bd08      	pop	{r3, pc}
	...

08000c78 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000c78:	b510      	push	{r4, lr}
 8000c7a:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000c7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c80:	b292      	uxth	r2, r2
 8000c82:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <_write+0x14>)
 8000c84:	f001 fcfb 	bl	800267e <HAL_UART_Transmit>
	return len;
}
 8000c88:	4620      	mov	r0, r4
 8000c8a:	bd10      	pop	{r4, pc}
 8000c8c:	200002d0 	.word	0x200002d0

08000c90 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000c90:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000c92:	2200      	movs	r2, #0
 8000c94:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <_read+0x18>)
 8000c9e:	f001 fd4c 	bl	800273a <HAL_UART_Receive>
	return len;
}
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	bd08      	pop	{r3, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200002d0 	.word	0x200002d0

08000cac <_close>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3
__attribute__((weak)) void _close(void){}
 8000cac:	4770      	bx	lr

08000cae <_lseek>:
__attribute__((weak)) void _lseek(void){}
 8000cae:	4770      	bx	lr

08000cb0 <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8000cb0:	4770      	bx	lr

08000cb2 <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 8000cb2:	4770      	bx	lr

08000cb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb4:	480d      	ldr	r0, [pc, #52]	@ (8000cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000cb8:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490e      	ldr	r1, [pc, #56]	@ (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0b      	ldr	r2, [pc, #44]	@ (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0b      	ldr	r4, [pc, #44]	@ (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cde:	f000 f813 	bl	8000d08 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ce2:	f002 f931 	bl	8002f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce6:	f7ff fc91 	bl	800060c <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   r0, =_estack
 8000cec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000cf8:	08003a5c 	.word	0x08003a5c
  ldr r2, =_sbss
 8000cfc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d00:	200004ac 	.word	0x200004ac

08000d04 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4a03      	ldr	r2, [pc, #12]	@ (8000d18 <SystemInit+0x10>)
 8000d0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000d0e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000d1c:	4770      	bx	lr
	...

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b510      	push	{r4, lr}
 8000d22:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_InitTick+0x40>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d30:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <HAL_InitTick+0x44>)
 8000d32:	6810      	ldr	r0, [r2, #0]
 8000d34:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d38:	f000 f8a0 	bl	8000e7c <HAL_SYSTICK_Config>
 8000d3c:	b968      	cbnz	r0, 8000d5a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	2c0f      	cmp	r4, #15
 8000d40:	d901      	bls.n	8000d46 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d42:	2001      	movs	r0, #1
 8000d44:	e00a      	b.n	8000d5c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d46:	2200      	movs	r2, #0
 8000d48:	4621      	mov	r1, r4
 8000d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4e:	f000 f877 	bl	8000e40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d52:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <HAL_InitTick+0x40>)
 8000d54:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2000      	movs	r0, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000d5a:	2001      	movs	r0, #1
}
 8000d5c:	bd10      	pop	{r4, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000018 	.word	0x20000018
 8000d64:	20000014 	.word	0x20000014

08000d68 <HAL_Init>:
{
 8000d68:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_Init+0x28>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d72:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d7a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 f84d 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d82:	200f      	movs	r0, #15
 8000d84:	f7ff ffcc 	bl	8000d20 <HAL_InitTick>
  HAL_MspInit();
 8000d88:	f7ff ffc8 	bl	8000d1c <HAL_MspInit>
}
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	bd08      	pop	{r3, pc}
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d94:	4a03      	ldr	r2, [pc, #12]	@ (8000da4 <HAL_IncTick+0x10>)
 8000d96:	6811      	ldr	r1, [r2, #0]
 8000d98:	4b03      	ldr	r3, [pc, #12]	@ (8000da8 <HAL_IncTick+0x14>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	440b      	add	r3, r1
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000358 	.word	0x20000358
 8000da8:	20000018 	.word	0x20000018

08000dac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dac:	4b01      	ldr	r3, [pc, #4]	@ (8000db4 <HAL_GetTick+0x8>)
 8000dae:	6818      	ldr	r0, [r3, #0]
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000358 	.word	0x20000358

08000db8 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8000db8:	2800      	cmp	r0, #0
 8000dba:	db04      	blt.n	8000dc6 <__NVIC_SetPriority+0xe>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	0109      	lsls	r1, r1, #4
 8000dbe:	b2c9      	uxtb	r1, r1
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <__NVIC_SetPriority+0x1c>)
 8000dc2:	5419      	strb	r1, [r3, r0]
 8000dc4:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	f000 000f 	and.w	r0, r0, #15
 8000dca:	0109      	lsls	r1, r1, #4
 8000dcc:	b2c9      	uxtb	r1, r1
 8000dce:	4b02      	ldr	r3, [pc, #8]	@ (8000dd8 <__NVIC_SetPriority+0x20>)
 8000dd0:	5419      	strb	r1, [r3, r0]
}
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e400 	.word	0xe000e400
 8000dd8:	e000ed14 	.word	0xe000ed14

08000ddc <NVIC_EncodePriority>:
{
 8000ddc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dde:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de2:	f1c0 0c07 	rsb	ip, r0, #7
 8000de6:	f1bc 0f04 	cmp.w	ip, #4
 8000dea:	bf28      	it	cs
 8000dec:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df0:	1d03      	adds	r3, r0, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d90f      	bls.n	8000e16 <NVIC_EncodePriority+0x3a>
 8000df6:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 3eff 	mov.w	lr, #4294967295
 8000dfc:	fa0e f00c 	lsl.w	r0, lr, ip
 8000e00:	ea21 0100 	bic.w	r1, r1, r0
 8000e04:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e06:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e0a:	ea22 020e 	bic.w	r2, r2, lr
}
 8000e0e:	ea41 0002 	orr.w	r0, r1, r2
 8000e12:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	2300      	movs	r3, #0
 8000e18:	e7ee      	b.n	8000df8 <NVIC_EncodePriority+0x1c>
	...

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4906      	ldr	r1, [pc, #24]	@ (8000e38 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000e1e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e20:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e24:	041b      	lsls	r3, r3, #16
 8000e26:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	0200      	lsls	r0, r0, #8
 8000e2a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e30:	4a02      	ldr	r2, [pc, #8]	@ (8000e3c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e32:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000e34:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00
 8000e3c:	05fa0000 	.word	0x05fa0000

08000e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e40:	b510      	push	{r4, lr}
 8000e42:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_NVIC_SetPriority+0x1c>)
 8000e46:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e48:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000e4c:	f7ff ffc6 	bl	8000ddc <NVIC_EncodePriority>
 8000e50:	4601      	mov	r1, r0
 8000e52:	4620      	mov	r0, r4
 8000e54:	f7ff ffb0 	bl	8000db8 <__NVIC_SetPriority>
}
 8000e58:	bd10      	pop	{r4, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e60:	2800      	cmp	r0, #0
 8000e62:	db07      	blt.n	8000e74 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e64:	f000 021f 	and.w	r2, r0, #31
 8000e68:	0940      	lsrs	r0, r0, #5
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	4a02      	ldr	r2, [pc, #8]	@ (8000e78 <HAL_NVIC_EnableIRQ+0x18>)
 8000e70:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000e82:	d20b      	bcs.n	8000e9c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e88:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <HAL_SYSTICK_Config+0x24>)
 8000e8c:	21f0      	movs	r1, #240	@ 0xf0
 8000e8e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e92:	2000      	movs	r0, #0
 8000e94:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	2207      	movs	r2, #7
 8000e98:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e9c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	f200 80f4 	bhi.w	8001094 <HAL_GPIO_Init+0x1f0>
{
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	e066      	b.n	8000f80 <HAL_GPIO_Init+0xdc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eb4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000eb8:	2403      	movs	r4, #3
 8000eba:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ebe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ec2:	68cc      	ldr	r4, [r1, #12]
 8000ec4:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ec8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000eca:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ecc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ece:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed2:	684a      	ldr	r2, [r1, #4]
 8000ed4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000ed8:	409a      	lsls	r2, r3
 8000eda:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000edc:	6042      	str	r2, [r0, #4]
 8000ede:	e05d      	b.n	8000f9c <HAL_GPIO_Init+0xf8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ee0:	08dc      	lsrs	r4, r3, #3
 8000ee2:	3408      	adds	r4, #8
 8000ee4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ee8:	f003 0507 	and.w	r5, r3, #7
 8000eec:	00ad      	lsls	r5, r5, #2
 8000eee:	f04f 0e0f 	mov.w	lr, #15
 8000ef2:	fa0e fe05 	lsl.w	lr, lr, r5
 8000ef6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000efa:	690a      	ldr	r2, [r1, #16]
 8000efc:	40aa      	lsls	r2, r5
 8000efe:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8000f02:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000f06:	e05d      	b.n	8000fc4 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f08:	2209      	movs	r2, #9
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x6a>
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f12:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f14:	3402      	adds	r4, #2
 8000f16:	4d60      	ldr	r5, [pc, #384]	@ (8001098 <HAL_GPIO_Init+0x1f4>)
 8000f18:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f1c:	4a5f      	ldr	r2, [pc, #380]	@ (800109c <HAL_GPIO_Init+0x1f8>)
 8000f1e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f20:	ea6f 020c 	mvn.w	r2, ip
 8000f24:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f28:	684e      	ldr	r6, [r1, #4]
 8000f2a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000f2e:	d001      	beq.n	8000f34 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000f30:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000f34:	4c59      	ldr	r4, [pc, #356]	@ (800109c <HAL_GPIO_Init+0x1f8>)
 8000f36:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000f38:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f3e:	684e      	ldr	r6, [r1, #4]
 8000f40:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000f44:	d001      	beq.n	8000f4a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000f46:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000f4a:	4c54      	ldr	r4, [pc, #336]	@ (800109c <HAL_GPIO_Init+0x1f8>)
 8000f4c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000f4e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f54:	684e      	ldr	r6, [r1, #4]
 8000f56:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000f5a:	d001      	beq.n	8000f60 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000f5c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000f60:	4c4e      	ldr	r4, [pc, #312]	@ (800109c <HAL_GPIO_Init+0x1f8>)
 8000f62:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f64:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f68:	684d      	ldr	r5, [r1, #4]
 8000f6a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000f6e:	d001      	beq.n	8000f74 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000f70:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000f74:	4c49      	ldr	r4, [pc, #292]	@ (800109c <HAL_GPIO_Init+0x1f8>)
 8000f76:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f78:	3301      	adds	r3, #1
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	f200 8088 	bhi.w	8001090 <HAL_GPIO_Init+0x1ec>
    ioposition = ((uint32_t)0x01) << position;
 8000f80:	2201      	movs	r2, #1
 8000f82:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f84:	680c      	ldr	r4, [r1, #0]
 8000f86:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000f8a:	ea32 0404 	bics.w	r4, r2, r4
 8000f8e:	d1f3      	bne.n	8000f78 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f90:	684c      	ldr	r4, [r1, #4]
 8000f92:	f004 0403 	and.w	r4, r4, #3
 8000f96:	3c01      	subs	r4, #1
 8000f98:	2c01      	cmp	r4, #1
 8000f9a:	d98a      	bls.n	8000eb2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	684a      	ldr	r2, [r1, #4]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	2a03      	cmp	r2, #3
 8000fa4:	d009      	beq.n	8000fba <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8000fa6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fa8:	005d      	lsls	r5, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	40aa      	lsls	r2, r5
 8000fae:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fb2:	688a      	ldr	r2, [r1, #8]
 8000fb4:	40aa      	lsls	r2, r5
 8000fb6:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000fb8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	684a      	ldr	r2, [r1, #4]
 8000fbc:	f002 0203 	and.w	r2, r2, #3
 8000fc0:	2a02      	cmp	r2, #2
 8000fc2:	d08d      	beq.n	8000ee0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000fc4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fc6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fd0:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fd4:	684a      	ldr	r2, [r1, #4]
 8000fd6:	f002 0203 	and.w	r2, r2, #3
 8000fda:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fde:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000fe0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe2:	684a      	ldr	r2, [r1, #4]
 8000fe4:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000fe8:	d0c6      	beq.n	8000f78 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4a2d      	ldr	r2, [pc, #180]	@ (80010a0 <HAL_GPIO_Init+0x1fc>)
 8000fec:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000fee:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000ff2:	6454      	str	r4, [r2, #68]	@ 0x44
 8000ff4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000ff6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000ffa:	9201      	str	r2, [sp, #4]
 8000ffc:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000ffe:	089c      	lsrs	r4, r3, #2
 8001000:	1ca5      	adds	r5, r4, #2
 8001002:	4a25      	ldr	r2, [pc, #148]	@ (8001098 <HAL_GPIO_Init+0x1f4>)
 8001004:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001008:	f003 0e03 	and.w	lr, r3, #3
 800100c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f20e 	lsl.w	r2, r2, lr
 8001016:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800101a:	4a22      	ldr	r2, [pc, #136]	@ (80010a4 <HAL_GPIO_Init+0x200>)
 800101c:	4290      	cmp	r0, r2
 800101e:	f43f af75 	beq.w	8000f0c <HAL_GPIO_Init+0x68>
 8001022:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001026:	4290      	cmp	r0, r2
 8001028:	d022      	beq.n	8001070 <HAL_GPIO_Init+0x1cc>
 800102a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800102e:	4290      	cmp	r0, r2
 8001030:	d020      	beq.n	8001074 <HAL_GPIO_Init+0x1d0>
 8001032:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001036:	4290      	cmp	r0, r2
 8001038:	d01e      	beq.n	8001078 <HAL_GPIO_Init+0x1d4>
 800103a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800103e:	4290      	cmp	r0, r2
 8001040:	d01c      	beq.n	800107c <HAL_GPIO_Init+0x1d8>
 8001042:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001046:	4290      	cmp	r0, r2
 8001048:	d01a      	beq.n	8001080 <HAL_GPIO_Init+0x1dc>
 800104a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800104e:	4290      	cmp	r0, r2
 8001050:	d018      	beq.n	8001084 <HAL_GPIO_Init+0x1e0>
 8001052:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001056:	4290      	cmp	r0, r2
 8001058:	d016      	beq.n	8001088 <HAL_GPIO_Init+0x1e4>
 800105a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800105e:	4290      	cmp	r0, r2
 8001060:	d014      	beq.n	800108c <HAL_GPIO_Init+0x1e8>
 8001062:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001066:	4290      	cmp	r0, r2
 8001068:	f43f af4e 	beq.w	8000f08 <HAL_GPIO_Init+0x64>
 800106c:	220a      	movs	r2, #10
 800106e:	e74e      	b.n	8000f0e <HAL_GPIO_Init+0x6a>
 8001070:	2201      	movs	r2, #1
 8001072:	e74c      	b.n	8000f0e <HAL_GPIO_Init+0x6a>
 8001074:	2202      	movs	r2, #2
 8001076:	e74a      	b.n	8000f0e <HAL_GPIO_Init+0x6a>
 8001078:	2203      	movs	r2, #3
 800107a:	e748      	b.n	8000f0e <HAL_GPIO_Init+0x6a>
 800107c:	2204      	movs	r2, #4
 800107e:	e746      	b.n	8000f0e <HAL_GPIO_Init+0x6a>
 8001080:	2205      	movs	r2, #5
 8001082:	e744      	b.n	8000f0e <HAL_GPIO_Init+0x6a>
 8001084:	2206      	movs	r2, #6
 8001086:	e742      	b.n	8000f0e <HAL_GPIO_Init+0x6a>
 8001088:	2207      	movs	r2, #7
 800108a:	e740      	b.n	8000f0e <HAL_GPIO_Init+0x6a>
 800108c:	2208      	movs	r2, #8
 800108e:	e73e      	b.n	8000f0e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001090:	b002      	add	sp, #8
 8001092:	bd70      	pop	{r4, r5, r6, pc}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40013800 	.word	0x40013800
 800109c:	40013c00 	.word	0x40013c00
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000

080010a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	b10a      	cbz	r2, 80010ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010aa:	6181      	str	r1, [r0, #24]
 80010ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010ae:	0409      	lsls	r1, r1, #16
 80010b0:	6181      	str	r1, [r0, #24]
  }
}
 80010b2:	4770      	bx	lr

080010b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010b4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010b6:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4203      	tst	r3, r0
 80010bc:	d100      	bne.n	80010c0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80010be:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010c0:	4b02      	ldr	r3, [pc, #8]	@ (80010cc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80010c2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010c4:	f7ff fad8 	bl	8000678 <HAL_GPIO_EXTI_Callback>
}
 80010c8:	e7f9      	b.n	80010be <HAL_GPIO_EXTI_IRQHandler+0xa>
 80010ca:	bf00      	nop
 80010cc:	40013c00 	.word	0x40013c00

080010d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010d0:	b510      	push	{r4, lr}
 80010d2:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <HAL_PWREx_EnableOverDrive+0x74>)
 80010d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010d8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80010dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010e8:	4a17      	ldr	r2, [pc, #92]	@ (8001148 <HAL_PWREx_EnableOverDrive+0x78>)
 80010ea:	6813      	ldr	r3, [r2, #0]
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f2:	f7ff fe5b 	bl	8000dac <HAL_GetTick>
 80010f6:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <HAL_PWREx_EnableOverDrive+0x78>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001100:	d108      	bne.n	8001114 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001102:	f7ff fe53 	bl	8000dac <HAL_GetTick>
 8001106:	1b00      	subs	r0, r0, r4
 8001108:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800110c:	d9f4      	bls.n	80010f8 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800110e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001110:	b002      	add	sp, #8
 8001112:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001114:	4a0c      	ldr	r2, [pc, #48]	@ (8001148 <HAL_PWREx_EnableOverDrive+0x78>)
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800111c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800111e:	f7ff fe45 	bl	8000dac <HAL_GetTick>
 8001122:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <HAL_PWREx_EnableOverDrive+0x78>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800112c:	d107      	bne.n	800113e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800112e:	f7ff fe3d 	bl	8000dac <HAL_GetTick>
 8001132:	1b00      	subs	r0, r0, r4
 8001134:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001138:	d9f4      	bls.n	8001124 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800113a:	2003      	movs	r0, #3
 800113c:	e7e8      	b.n	8001110 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800113e:	2000      	movs	r0, #0
 8001140:	e7e6      	b.n	8001110 <HAL_PWREx_EnableOverDrive+0x40>
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800114c:	2800      	cmp	r0, #0
 800114e:	f000 8206 	beq.w	800155e <HAL_RCC_OscConfig+0x412>
{
 8001152:	b570      	push	{r4, r5, r6, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001158:	6803      	ldr	r3, [r0, #0]
 800115a:	f013 0f01 	tst.w	r3, #1
 800115e:	d029      	beq.n	80011b4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001160:	4b95      	ldr	r3, [pc, #596]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	2b04      	cmp	r3, #4
 800116a:	d01a      	beq.n	80011a2 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116c:	4b92      	ldr	r3, [pc, #584]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b08      	cmp	r3, #8
 8001176:	d00f      	beq.n	8001198 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001178:	6863      	ldr	r3, [r4, #4]
 800117a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117e:	d040      	beq.n	8001202 <HAL_RCC_OscConfig+0xb6>
 8001180:	2b00      	cmp	r3, #0
 8001182:	d154      	bne.n	800122e <HAL_RCC_OscConfig+0xe2>
 8001184:	4b8c      	ldr	r3, [pc, #560]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e039      	b.n	800120c <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001198:	4b87      	ldr	r3, [pc, #540]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80011a0:	d0ea      	beq.n	8001178 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a2:	4b85      	ldr	r3, [pc, #532]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80011aa:	d003      	beq.n	80011b4 <HAL_RCC_OscConfig+0x68>
 80011ac:	6863      	ldr	r3, [r4, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 81d7 	beq.w	8001562 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	f013 0f02 	tst.w	r3, #2
 80011ba:	d074      	beq.n	80012a6 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011bc:	4b7e      	ldr	r3, [pc, #504]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f013 0f0c 	tst.w	r3, #12
 80011c4:	d05e      	beq.n	8001284 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b7c      	ldr	r3, [pc, #496]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d053      	beq.n	800127a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011d2:	68e3      	ldr	r3, [r4, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 8089 	beq.w	80012ec <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011da:	4a77      	ldr	r2, [pc, #476]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff fde2 	bl	8000dac <HAL_GetTick>
 80011e8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ea:	4b73      	ldr	r3, [pc, #460]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f013 0f02 	tst.w	r3, #2
 80011f2:	d172      	bne.n	80012da <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff fdda 	bl	8000dac <HAL_GetTick>
 80011f8:	1b40      	subs	r0, r0, r5
 80011fa:	2802      	cmp	r0, #2
 80011fc:	d9f5      	bls.n	80011ea <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80011fe:	2003      	movs	r0, #3
 8001200:	e1b4      	b.n	800156c <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001202:	4a6d      	ldr	r2, [pc, #436]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001204:	6813      	ldr	r3, [r2, #0]
 8001206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800120a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800120c:	6863      	ldr	r3, [r4, #4]
 800120e:	b32b      	cbz	r3, 800125c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001210:	f7ff fdcc 	bl	8000dac <HAL_GetTick>
 8001214:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	4b68      	ldr	r3, [pc, #416]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800121e:	d1c9      	bne.n	80011b4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fdc4 	bl	8000dac <HAL_GetTick>
 8001224:	1b40      	subs	r0, r0, r5
 8001226:	2864      	cmp	r0, #100	@ 0x64
 8001228:	d9f5      	bls.n	8001216 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800122a:	2003      	movs	r0, #3
 800122c:	e19e      	b.n	800156c <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001232:	d009      	beq.n	8001248 <HAL_RCC_OscConfig+0xfc>
 8001234:	4b60      	ldr	r3, [pc, #384]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	e7e1      	b.n	800120c <HAL_RCC_OscConfig+0xc0>
 8001248:	4b5b      	ldr	r3, [pc, #364]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e7d7      	b.n	800120c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 800125c:	f7ff fda6 	bl	8000dac <HAL_GetTick>
 8001260:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	4b55      	ldr	r3, [pc, #340]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800126a:	d0a3      	beq.n	80011b4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fd9e 	bl	8000dac <HAL_GetTick>
 8001270:	1b40      	subs	r0, r0, r5
 8001272:	2864      	cmp	r0, #100	@ 0x64
 8001274:	d9f5      	bls.n	8001262 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8001276:	2003      	movs	r0, #3
 8001278:	e178      	b.n	800156c <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127a:	4b4f      	ldr	r3, [pc, #316]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001282:	d1a6      	bne.n	80011d2 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001284:	4b4c      	ldr	r3, [pc, #304]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f013 0f02 	tst.w	r3, #2
 800128c:	d003      	beq.n	8001296 <HAL_RCC_OscConfig+0x14a>
 800128e:	68e3      	ldr	r3, [r4, #12]
 8001290:	2b01      	cmp	r3, #1
 8001292:	f040 8168 	bne.w	8001566 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4a48      	ldr	r2, [pc, #288]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001298:	6813      	ldr	r3, [r2, #0]
 800129a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800129e:	6921      	ldr	r1, [r4, #16]
 80012a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012a4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	f013 0f08 	tst.w	r3, #8
 80012ac:	d046      	beq.n	800133c <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012ae:	6963      	ldr	r3, [r4, #20]
 80012b0:	b383      	cbz	r3, 8001314 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b2:	4a41      	ldr	r2, [pc, #260]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012bc:	f7ff fd76 	bl	8000dac <HAL_GetTick>
 80012c0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	4b3d      	ldr	r3, [pc, #244]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012c6:	f013 0f02 	tst.w	r3, #2
 80012ca:	d137      	bne.n	800133c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fd6e 	bl	8000dac <HAL_GetTick>
 80012d0:	1b40      	subs	r0, r0, r5
 80012d2:	2802      	cmp	r0, #2
 80012d4:	d9f5      	bls.n	80012c2 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80012d6:	2003      	movs	r0, #3
 80012d8:	e148      	b.n	800156c <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	4a37      	ldr	r2, [pc, #220]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	6813      	ldr	r3, [r2, #0]
 80012de:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80012e2:	6921      	ldr	r1, [r4, #16]
 80012e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e7dc      	b.n	80012a6 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80012ec:	4a32      	ldr	r2, [pc, #200]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	6813      	ldr	r3, [r2, #0]
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80012f6:	f7ff fd59 	bl	8000dac <HAL_GetTick>
 80012fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fc:	4b2e      	ldr	r3, [pc, #184]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f013 0f02 	tst.w	r3, #2
 8001304:	d0cf      	beq.n	80012a6 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fd51 	bl	8000dac <HAL_GetTick>
 800130a:	1b40      	subs	r0, r0, r5
 800130c:	2802      	cmp	r0, #2
 800130e:	d9f5      	bls.n	80012fc <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8001310:	2003      	movs	r0, #3
 8001312:	e12b      	b.n	800156c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001314:	4a28      	ldr	r2, [pc, #160]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001316:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131e:	f7ff fd45 	bl	8000dac <HAL_GetTick>
 8001322:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001324:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001328:	f013 0f02 	tst.w	r3, #2
 800132c:	d006      	beq.n	800133c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff fd3d 	bl	8000dac <HAL_GetTick>
 8001332:	1b40      	subs	r0, r0, r5
 8001334:	2802      	cmp	r0, #2
 8001336:	d9f5      	bls.n	8001324 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001338:	2003      	movs	r0, #3
 800133a:	e117      	b.n	800156c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	f013 0f04 	tst.w	r3, #4
 8001342:	d07d      	beq.n	8001440 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001344:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800134c:	d11e      	bne.n	800138c <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001350:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001352:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001356:	641a      	str	r2, [r3, #64]	@ 0x40
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001362:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800136c:	d010      	beq.n	8001390 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136e:	68a3      	ldr	r3, [r4, #8]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d025      	beq.n	80013c0 <HAL_RCC_OscConfig+0x274>
 8001374:	2b00      	cmp	r3, #0
 8001376:	d13b      	bne.n	80013f0 <HAL_RCC_OscConfig+0x2a4>
 8001378:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800137a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	671a      	str	r2, [r3, #112]	@ 0x70
 8001382:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001384:	f022 0204 	bic.w	r2, r2, #4
 8001388:	671a      	str	r2, [r3, #112]	@ 0x70
 800138a:	e01e      	b.n	80013ca <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 800138c:	2500      	movs	r5, #0
 800138e:	e7e9      	b.n	8001364 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8001390:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <HAL_RCC_OscConfig+0x270>)
 8001392:	6813      	ldr	r3, [r2, #0]
 8001394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001398:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800139a:	f7ff fd07 	bl	8000dac <HAL_GetTick>
 800139e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_RCC_OscConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80013a8:	d1e1      	bne.n	800136e <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013aa:	f7ff fcff 	bl	8000dac <HAL_GetTick>
 80013ae:	1b80      	subs	r0, r0, r6
 80013b0:	2864      	cmp	r0, #100	@ 0x64
 80013b2:	d9f5      	bls.n	80013a0 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 80013b4:	2003      	movs	r0, #3
 80013b6:	e0d9      	b.n	800156c <HAL_RCC_OscConfig+0x420>
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c0:	4a72      	ldr	r2, [pc, #456]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 80013c2:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ca:	68a3      	ldr	r3, [r4, #8]
 80013cc:	b333      	cbz	r3, 800141c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ce:	f7ff fced 	bl	8000dac <HAL_GetTick>
 80013d2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d4:	4b6d      	ldr	r3, [pc, #436]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d8:	f013 0f02 	tst.w	r3, #2
 80013dc:	d12f      	bne.n	800143e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff fce5 	bl	8000dac <HAL_GetTick>
 80013e2:	1b80      	subs	r0, r0, r6
 80013e4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80013e8:	4298      	cmp	r0, r3
 80013ea:	d9f3      	bls.n	80013d4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80013ec:	2003      	movs	r0, #3
 80013ee:	e0bd      	b.n	800156c <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d009      	beq.n	8001408 <HAL_RCC_OscConfig+0x2bc>
 80013f4:	4b65      	ldr	r3, [pc, #404]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 80013f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80013fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001400:	f022 0204 	bic.w	r2, r2, #4
 8001404:	671a      	str	r2, [r3, #112]	@ 0x70
 8001406:	e7e0      	b.n	80013ca <HAL_RCC_OscConfig+0x27e>
 8001408:	4b60      	ldr	r3, [pc, #384]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 800140a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800140c:	f042 0204 	orr.w	r2, r2, #4
 8001410:	671a      	str	r2, [r3, #112]	@ 0x70
 8001412:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001414:	f042 0201 	orr.w	r2, r2, #1
 8001418:	671a      	str	r2, [r3, #112]	@ 0x70
 800141a:	e7d6      	b.n	80013ca <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff fcc6 	bl	8000dac <HAL_GetTick>
 8001420:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001422:	4b5a      	ldr	r3, [pc, #360]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001426:	f013 0f02 	tst.w	r3, #2
 800142a:	d008      	beq.n	800143e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142c:	f7ff fcbe 	bl	8000dac <HAL_GetTick>
 8001430:	1b80      	subs	r0, r0, r6
 8001432:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001436:	4298      	cmp	r0, r3
 8001438:	d9f3      	bls.n	8001422 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800143a:	2003      	movs	r0, #3
 800143c:	e096      	b.n	800156c <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800143e:	b9fd      	cbnz	r5, 8001480 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001440:	69a3      	ldr	r3, [r4, #24]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8091 	beq.w	800156a <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001448:	4a50      	ldr	r2, [pc, #320]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 800144a:	6892      	ldr	r2, [r2, #8]
 800144c:	f002 020c 	and.w	r2, r2, #12
 8001450:	2a08      	cmp	r2, #8
 8001452:	d059      	beq.n	8001508 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001454:	2b02      	cmp	r3, #2
 8001456:	d019      	beq.n	800148c <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001458:	4a4c      	ldr	r2, [pc, #304]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff fca3 	bl	8000dac <HAL_GetTick>
 8001466:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001468:	4b48      	ldr	r3, [pc, #288]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001470:	d048      	beq.n	8001504 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff fc9b 	bl	8000dac <HAL_GetTick>
 8001476:	1b00      	subs	r0, r0, r4
 8001478:	2802      	cmp	r0, #2
 800147a:	d9f5      	bls.n	8001468 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800147c:	2003      	movs	r0, #3
 800147e:	e075      	b.n	800156c <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001480:	4a42      	ldr	r2, [pc, #264]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 8001482:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	@ 0x40
 800148a:	e7d9      	b.n	8001440 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 800148c:	4a3f      	ldr	r2, [pc, #252]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 800148e:	6813      	ldr	r3, [r2, #0]
 8001490:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001494:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001496:	f7ff fc89 	bl	8000dac <HAL_GetTick>
 800149a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149c:	4b3b      	ldr	r3, [pc, #236]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80014a4:	d006      	beq.n	80014b4 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fc81 	bl	8000dac <HAL_GetTick>
 80014aa:	1b40      	subs	r0, r0, r5
 80014ac:	2802      	cmp	r0, #2
 80014ae:	d9f5      	bls.n	800149c <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80014b0:	2003      	movs	r0, #3
 80014b2:	e05b      	b.n	800156c <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b4:	69e3      	ldr	r3, [r4, #28]
 80014b6:	6a22      	ldr	r2, [r4, #32]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80014bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014c0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80014c2:	0852      	lsrs	r2, r2, #1
 80014c4:	3a01      	subs	r2, #1
 80014c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014ca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80014cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014d0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80014d2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80014d6:	4a2d      	ldr	r2, [pc, #180]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 80014d8:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80014da:	6813      	ldr	r3, [r2, #0]
 80014dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014e2:	f7ff fc63 	bl	8000dac <HAL_GetTick>
 80014e6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e8:	4b28      	ldr	r3, [pc, #160]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80014f0:	d106      	bne.n	8001500 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff fc5b 	bl	8000dac <HAL_GetTick>
 80014f6:	1b00      	subs	r0, r0, r4
 80014f8:	2802      	cmp	r0, #2
 80014fa:	d9f5      	bls.n	80014e8 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80014fc:	2003      	movs	r0, #3
 80014fe:	e035      	b.n	800156c <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001500:	2000      	movs	r0, #0
 8001502:	e033      	b.n	800156c <HAL_RCC_OscConfig+0x420>
 8001504:	2000      	movs	r0, #0
 8001506:	e031      	b.n	800156c <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 8001508:	4a20      	ldr	r2, [pc, #128]	@ (800158c <HAL_RCC_OscConfig+0x440>)
 800150a:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800150c:	2b01      	cmp	r3, #1
 800150e:	d02f      	beq.n	8001570 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001510:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8001514:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001516:	428b      	cmp	r3, r1
 8001518:	d12c      	bne.n	8001574 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800151a:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 800151e:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001520:	428b      	cmp	r3, r1
 8001522:	d129      	bne.n	8001578 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001524:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001526:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800152a:	4013      	ands	r3, r2
 800152c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001530:	d124      	bne.n	800157c <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001532:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8001536:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001538:	085b      	lsrs	r3, r3, #1
 800153a:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800153c:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001540:	d11e      	bne.n	8001580 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001542:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 8001546:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001548:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800154c:	d11a      	bne.n	8001584 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800154e:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8001552:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001554:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001558:	d116      	bne.n	8001588 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 800155a:	2000      	movs	r0, #0
 800155c:	e006      	b.n	800156c <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 800155e:	2001      	movs	r0, #1
}
 8001560:	4770      	bx	lr
        return HAL_ERROR;
 8001562:	2001      	movs	r0, #1
 8001564:	e002      	b.n	800156c <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 8001566:	2001      	movs	r0, #1
 8001568:	e000      	b.n	800156c <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 800156a:	2000      	movs	r0, #0
}
 800156c:	b002      	add	sp, #8
 800156e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001570:	2001      	movs	r0, #1
 8001572:	e7fb      	b.n	800156c <HAL_RCC_OscConfig+0x420>
 8001574:	2001      	movs	r0, #1
 8001576:	e7f9      	b.n	800156c <HAL_RCC_OscConfig+0x420>
 8001578:	2001      	movs	r0, #1
 800157a:	e7f7      	b.n	800156c <HAL_RCC_OscConfig+0x420>
 800157c:	2001      	movs	r0, #1
 800157e:	e7f5      	b.n	800156c <HAL_RCC_OscConfig+0x420>
 8001580:	2001      	movs	r0, #1
 8001582:	e7f3      	b.n	800156c <HAL_RCC_OscConfig+0x420>
 8001584:	2001      	movs	r0, #1
 8001586:	e7f1      	b.n	800156c <HAL_RCC_OscConfig+0x420>
 8001588:	2001      	movs	r0, #1
 800158a:	e7ef      	b.n	800156c <HAL_RCC_OscConfig+0x420>
 800158c:	40023800 	.word	0x40023800

08001590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001590:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001592:	4b26      	ldr	r3, [pc, #152]	@ (800162c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b04      	cmp	r3, #4
 800159c:	d041      	beq.n	8001622 <HAL_RCC_GetSysClockFreq+0x92>
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d141      	bne.n	8001626 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a2:	4b22      	ldr	r3, [pc, #136]	@ (800162c <HAL_RCC_GetSysClockFreq+0x9c>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80015b0:	d012      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <HAL_RCC_GetSysClockFreq+0x9c>)
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80015ba:	481d      	ldr	r0, [pc, #116]	@ (8001630 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015bc:	2300      	movs	r3, #0
 80015be:	fba1 0100 	umull	r0, r1, r1, r0
 80015c2:	f7fe fe8d 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_RCC_GetSysClockFreq+0x9c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80015ce:	3301      	adds	r3, #1
 80015d0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80015d2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80015d6:	e027      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <HAL_RCC_GetSysClockFreq+0x9c>)
 80015da:	6858      	ldr	r0, [r3, #4]
 80015dc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80015e0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80015e4:	ebbc 0c00 	subs.w	ip, ip, r0
 80015e8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80015ec:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80015f0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80015f4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80015f8:	ebb1 010c 	subs.w	r1, r1, ip
 80015fc:	eb63 030e 	sbc.w	r3, r3, lr
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001606:	00c9      	lsls	r1, r1, #3
 8001608:	eb11 0c00 	adds.w	ip, r1, r0
 800160c:	f143 0300 	adc.w	r3, r3, #0
 8001610:	0299      	lsls	r1, r3, #10
 8001612:	2300      	movs	r3, #0
 8001614:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001618:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800161c:	f7fe fe60 	bl	80002e0 <__aeabi_uldivmod>
 8001620:	e7d1      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001622:	4803      	ldr	r0, [pc, #12]	@ (8001630 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001624:	e000      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001626:	4803      	ldr	r0, [pc, #12]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001628:	bd08      	pop	{r3, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	017d7840 	.word	0x017d7840
 8001634:	00f42400 	.word	0x00f42400

08001638 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001638:	2800      	cmp	r0, #0
 800163a:	f000 80a0 	beq.w	800177e <HAL_RCC_ClockConfig+0x146>
{
 800163e:	b570      	push	{r4, r5, r6, lr}
 8001640:	460d      	mov	r5, r1
 8001642:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b52      	ldr	r3, [pc, #328]	@ (8001790 <HAL_RCC_ClockConfig+0x158>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	428b      	cmp	r3, r1
 800164e:	d20b      	bcs.n	8001668 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001650:	4a4f      	ldr	r2, [pc, #316]	@ (8001790 <HAL_RCC_ClockConfig+0x158>)
 8001652:	6813      	ldr	r3, [r2, #0]
 8001654:	f023 030f 	bic.w	r3, r3, #15
 8001658:	430b      	orrs	r3, r1
 800165a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165c:	6813      	ldr	r3, [r2, #0]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	428b      	cmp	r3, r1
 8001664:	f040 808d 	bne.w	8001782 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	f013 0f02 	tst.w	r3, #2
 800166e:	d017      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	f013 0f04 	tst.w	r3, #4
 8001674:	d004      	beq.n	8001680 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001676:	4a47      	ldr	r2, [pc, #284]	@ (8001794 <HAL_RCC_ClockConfig+0x15c>)
 8001678:	6893      	ldr	r3, [r2, #8]
 800167a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800167e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	f013 0f08 	tst.w	r3, #8
 8001686:	d004      	beq.n	8001692 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001688:	4a42      	ldr	r2, [pc, #264]	@ (8001794 <HAL_RCC_ClockConfig+0x15c>)
 800168a:	6893      	ldr	r3, [r2, #8]
 800168c:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001690:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001692:	4a40      	ldr	r2, [pc, #256]	@ (8001794 <HAL_RCC_ClockConfig+0x15c>)
 8001694:	6893      	ldr	r3, [r2, #8]
 8001696:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800169a:	68a1      	ldr	r1, [r4, #8]
 800169c:	430b      	orrs	r3, r1
 800169e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	f013 0f01 	tst.w	r3, #1
 80016a6:	d031      	beq.n	800170c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d020      	beq.n	80016f0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d025      	beq.n	80016fe <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	4a38      	ldr	r2, [pc, #224]	@ (8001794 <HAL_RCC_ClockConfig+0x15c>)
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	f012 0f02 	tst.w	r2, #2
 80016ba:	d064      	beq.n	8001786 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016bc:	4935      	ldr	r1, [pc, #212]	@ (8001794 <HAL_RCC_ClockConfig+0x15c>)
 80016be:	688a      	ldr	r2, [r1, #8]
 80016c0:	f022 0203 	bic.w	r2, r2, #3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80016c8:	f7ff fb70 	bl	8000dac <HAL_GetTick>
 80016cc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <HAL_RCC_ClockConfig+0x15c>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	6862      	ldr	r2, [r4, #4]
 80016d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016dc:	d016      	beq.n	800170c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016de:	f7ff fb65 	bl	8000dac <HAL_GetTick>
 80016e2:	1b80      	subs	r0, r0, r6
 80016e4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016e8:	4298      	cmp	r0, r3
 80016ea:	d9f0      	bls.n	80016ce <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80016ec:	2003      	movs	r0, #3
 80016ee:	e045      	b.n	800177c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f0:	4a28      	ldr	r2, [pc, #160]	@ (8001794 <HAL_RCC_ClockConfig+0x15c>)
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80016f8:	d1e0      	bne.n	80016bc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80016fa:	2001      	movs	r0, #1
 80016fc:	e03e      	b.n	800177c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <HAL_RCC_ClockConfig+0x15c>)
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001706:	d1d9      	bne.n	80016bc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001708:	2001      	movs	r0, #1
 800170a:	e037      	b.n	800177c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <HAL_RCC_ClockConfig+0x158>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	42ab      	cmp	r3, r5
 8001716:	d90a      	bls.n	800172e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001718:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <HAL_RCC_ClockConfig+0x158>)
 800171a:	6813      	ldr	r3, [r2, #0]
 800171c:	f023 030f 	bic.w	r3, r3, #15
 8001720:	432b      	orrs	r3, r5
 8001722:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001724:	6813      	ldr	r3, [r2, #0]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	42ab      	cmp	r3, r5
 800172c:	d12d      	bne.n	800178a <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	f013 0f04 	tst.w	r3, #4
 8001734:	d006      	beq.n	8001744 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001736:	4a17      	ldr	r2, [pc, #92]	@ (8001794 <HAL_RCC_ClockConfig+0x15c>)
 8001738:	6893      	ldr	r3, [r2, #8]
 800173a:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800173e:	68e1      	ldr	r1, [r4, #12]
 8001740:	430b      	orrs	r3, r1
 8001742:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	f013 0f08 	tst.w	r3, #8
 800174a:	d007      	beq.n	800175c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800174c:	4a11      	ldr	r2, [pc, #68]	@ (8001794 <HAL_RCC_ClockConfig+0x15c>)
 800174e:	6893      	ldr	r3, [r2, #8]
 8001750:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001754:	6921      	ldr	r1, [r4, #16]
 8001756:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800175a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800175c:	f7ff ff18 	bl	8001590 <HAL_RCC_GetSysClockFreq>
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_RCC_ClockConfig+0x15c>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001768:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <HAL_RCC_ClockConfig+0x160>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	40d8      	lsrs	r0, r3
 800176e:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_RCC_ClockConfig+0x164>)
 8001770:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001772:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_RCC_ClockConfig+0x168>)
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	f7ff fad3 	bl	8000d20 <HAL_InitTick>
  return HAL_OK;
 800177a:	2000      	movs	r0, #0
}
 800177c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800177e:	2001      	movs	r0, #1
}
 8001780:	4770      	bx	lr
      return HAL_ERROR;
 8001782:	2001      	movs	r0, #1
 8001784:	e7fa      	b.n	800177c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001786:	2001      	movs	r0, #1
 8001788:	e7f8      	b.n	800177c <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800178a:	2001      	movs	r0, #1
 800178c:	e7f6      	b.n	800177c <HAL_RCC_ClockConfig+0x144>
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00
 8001794:	40023800 	.word	0x40023800
 8001798:	080039ec 	.word	0x080039ec
 800179c:	20000014 	.word	0x20000014
 80017a0:	2000001c 	.word	0x2000001c

080017a4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80017a4:	4b01      	ldr	r3, [pc, #4]	@ (80017ac <HAL_RCC_GetHCLKFreq+0x8>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000014 	.word	0x20000014

080017b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017b2:	f7ff fff7 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017b6:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80017be:	4a03      	ldr	r2, [pc, #12]	@ (80017cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80017c2:	40d8      	lsrs	r0, r3
 80017c4:	bd08      	pop	{r3, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	080039fc 	.word	0x080039fc

080017d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017d2:	f7ff ffe7 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017d6:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80017de:	4a03      	ldr	r2, [pc, #12]	@ (80017ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017e0:	5cd3      	ldrb	r3, [r2, r3]
}
 80017e2:	40d8      	lsrs	r0, r3
 80017e4:	bd08      	pop	{r3, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	080039fc 	.word	0x080039fc

080017f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80017f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	4605      	mov	r5, r0
 80017f8:	4688      	mov	r8, r1
 80017fa:	4617      	mov	r7, r2
 80017fc:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80017fe:	f7ff fad5 	bl	8000dac <HAL_GetTick>
 8001802:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001804:	1a1b      	subs	r3, r3, r0
 8001806:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800180a:	f7ff facf 	bl	8000dac <HAL_GetTick>
 800180e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001810:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001818:	fb09 f303 	mul.w	r3, r9, r3
 800181c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800181e:	682b      	ldr	r3, [r5, #0]
 8001820:	689c      	ldr	r4, [r3, #8]
 8001822:	ea38 0404 	bics.w	r4, r8, r4
 8001826:	bf0c      	ite	eq
 8001828:	2301      	moveq	r3, #1
 800182a:	2300      	movne	r3, #0
 800182c:	42bb      	cmp	r3, r7
 800182e:	d03d      	beq.n	80018ac <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001830:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001834:	d0f3      	beq.n	800181e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001836:	f7ff fab9 	bl	8000dac <HAL_GetTick>
 800183a:	eba0 000a 	sub.w	r0, r0, sl
 800183e:	4548      	cmp	r0, r9
 8001840:	d207      	bcs.n	8001852 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001842:	9a01      	ldr	r2, [sp, #4]
 8001844:	b102      	cbz	r2, 8001848 <SPI_WaitFlagStateUntilTimeout+0x58>
 8001846:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8001848:	9b01      	ldr	r3, [sp, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	4691      	mov	r9, r2
 8001850:	e7e5      	b.n	800181e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001852:	682a      	ldr	r2, [r5, #0]
 8001854:	6853      	ldr	r3, [r2, #4]
 8001856:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800185a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800185c:	686b      	ldr	r3, [r5, #4]
 800185e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001862:	d00b      	beq.n	800187c <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001864:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800186a:	d014      	beq.n	8001896 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 800186c:	2301      	movs	r3, #1
 800186e:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001872:	2300      	movs	r3, #0
 8001874:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8001878:	2003      	movs	r0, #3
 800187a:	e018      	b.n	80018ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800187c:	68ab      	ldr	r3, [r5, #8]
 800187e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001882:	bf18      	it	ne
 8001884:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8001888:	d1ec      	bne.n	8001864 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 800188a:	682a      	ldr	r2, [r5, #0]
 800188c:	6813      	ldr	r3, [r2, #0]
 800188e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e7e6      	b.n	8001864 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8001896:	682a      	ldr	r2, [r5, #0]
 8001898:	6813      	ldr	r3, [r2, #0]
 800189a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	682a      	ldr	r2, [r5, #0]
 80018a2:	6813      	ldr	r3, [r2, #0]
 80018a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e7df      	b.n	800186c <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 80018ac:	2000      	movs	r0, #0
}
 80018ae:	b002      	add	sp, #8
 80018b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018b4:	20000014 	.word	0x20000014

080018b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80018b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	4606      	mov	r6, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	4614      	mov	r4, r2
 80018c4:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80018cc:	f7ff fa6e 	bl	8000dac <HAL_GetTick>
 80018d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80018d2:	1a1b      	subs	r3, r3, r0
 80018d4:	eb03 0907 	add.w	r9, r3, r7
  tmp_tickstart = HAL_GetTick();
 80018d8:	f7ff fa68 	bl	8000dac <HAL_GetTick>
 80018dc:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80018de:	f8d6 8000 	ldr.w	r8, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80018e2:	4b30      	ldr	r3, [pc, #192]	@ (80019a4 <SPI_WaitFifoStateUntilTimeout+0xec>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80018ee:	0d1b      	lsrs	r3, r3, #20
 80018f0:	fb09 f303 	mul.w	r3, r9, r3
 80018f4:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80018f6:	e002      	b.n	80018fe <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80018f8:	f1b7 3fff 	cmp.w	r7, #4294967295
 80018fc:	d112      	bne.n	8001924 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 80018fe:	6833      	ldr	r3, [r6, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	ea03 0c05 	and.w	ip, r3, r5
 8001906:	45a4      	cmp	ip, r4
 8001908:	d047      	beq.n	800199a <SPI_WaitFifoStateUntilTimeout+0xe2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800190a:	f5b5 6fc0 	cmp.w	r5, #1536	@ 0x600
 800190e:	bf08      	it	eq
 8001910:	2c00      	cmpeq	r4, #0
 8001912:	d1f1      	bne.n	80018f8 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8001914:	f898 300c 	ldrb.w	r3, [r8, #12]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800191e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001922:	e7e9      	b.n	80018f8 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001924:	f7ff fa42 	bl	8000dac <HAL_GetTick>
 8001928:	eba0 000a 	sub.w	r0, r0, sl
 800192c:	4548      	cmp	r0, r9
 800192e:	d207      	bcs.n	8001940 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001930:	9a01      	ldr	r2, [sp, #4]
 8001932:	b102      	cbz	r2, 8001936 <SPI_WaitFifoStateUntilTimeout+0x7e>
 8001934:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8001936:	9b01      	ldr	r3, [sp, #4]
 8001938:	3b01      	subs	r3, #1
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	4691      	mov	r9, r2
 800193e:	e7de      	b.n	80018fe <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001940:	6832      	ldr	r2, [r6, #0]
 8001942:	6853      	ldr	r3, [r2, #4]
 8001944:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8001948:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800194a:	6873      	ldr	r3, [r6, #4]
 800194c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001950:	d00b      	beq.n	800196a <SPI_WaitFifoStateUntilTimeout+0xb2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001952:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8001954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001958:	d014      	beq.n	8001984 <SPI_WaitFifoStateUntilTimeout+0xcc>
        hspi->State = HAL_SPI_STATE_READY;
 800195a:	2301      	movs	r3, #1
 800195c:	f886 305d 	strb.w	r3, [r6, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001960:	2300      	movs	r3, #0
 8001962:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8001966:	2003      	movs	r0, #3
 8001968:	e018      	b.n	800199c <SPI_WaitFifoStateUntilTimeout+0xe4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800196a:	68b3      	ldr	r3, [r6, #8]
 800196c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001970:	bf18      	it	ne
 8001972:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8001976:	d1ec      	bne.n	8001952 <SPI_WaitFifoStateUntilTimeout+0x9a>
          __HAL_SPI_DISABLE(hspi);
 8001978:	6832      	ldr	r2, [r6, #0]
 800197a:	6813      	ldr	r3, [r2, #0]
 800197c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e7e6      	b.n	8001952 <SPI_WaitFifoStateUntilTimeout+0x9a>
          SPI_RESET_CRC(hspi);
 8001984:	6832      	ldr	r2, [r6, #0]
 8001986:	6813      	ldr	r3, [r2, #0]
 8001988:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	6832      	ldr	r2, [r6, #0]
 8001990:	6813      	ldr	r3, [r2, #0]
 8001992:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e7df      	b.n	800195a <SPI_WaitFifoStateUntilTimeout+0xa2>
    }
  }

  return HAL_OK;
 800199a:	2000      	movs	r0, #0
}
 800199c:	b002      	add	sp, #8
 800199e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019a2:	bf00      	nop
 80019a4:	20000014 	.word	0x20000014

080019a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80019a8:	b570      	push	{r4, r5, r6, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	4604      	mov	r4, r0
 80019ae:	460d      	mov	r5, r1
 80019b0:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019b2:	9200      	str	r2, [sp, #0]
 80019b4:	460b      	mov	r3, r1
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80019bc:	f7ff ff7c 	bl	80018b8 <SPI_WaitFifoStateUntilTimeout>
 80019c0:	bb18      	cbnz	r0, 8001a0a <SPI_EndRxTxTransaction+0x62>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80019c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <SPI_EndRxTxTransaction+0x98>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a44 <SPI_EndRxTxTransaction+0x9c>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	0d5b      	lsrs	r3, r3, #21
 80019ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019d8:	6863      	ldr	r3, [r4, #4]
 80019da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80019de:	d01a      	beq.n	8001a16 <SPI_EndRxTxTransaction+0x6e>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80019e0:	9b03      	ldr	r3, [sp, #12]
 80019e2:	b13b      	cbz	r3, 80019f4 <SPI_EndRxTxTransaction+0x4c>
      {
        break;
      }
      count--;
 80019e4:	9b03      	ldr	r3, [sp, #12]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80019f2:	d1f5      	bne.n	80019e0 <SPI_EndRxTxTransaction+0x38>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019f4:	9600      	str	r6, [sp, #0]
 80019f6:	462b      	mov	r3, r5
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff ff5a 	bl	80018b8 <SPI_WaitFifoStateUntilTimeout>
 8001a04:	b9b0      	cbnz	r0, 8001a34 <SPI_EndRxTxTransaction+0x8c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001a06:	b004      	add	sp, #16
 8001a08:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a0a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001a0c:	f043 0320 	orr.w	r3, r3, #32
 8001a10:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001a12:	2003      	movs	r0, #3
 8001a14:	e7f7      	b.n	8001a06 <SPI_EndRxTxTransaction+0x5e>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a16:	9600      	str	r6, [sp, #0]
 8001a18:	462b      	mov	r3, r5
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2180      	movs	r1, #128	@ 0x80
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff fee6 	bl	80017f0 <SPI_WaitFlagStateUntilTimeout>
 8001a24:	2800      	cmp	r0, #0
 8001a26:	d0e5      	beq.n	80019f4 <SPI_EndRxTxTransaction+0x4c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a28:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001a2a:	f043 0320 	orr.w	r3, r3, #32
 8001a2e:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 8001a30:	2003      	movs	r0, #3
 8001a32:	e7e8      	b.n	8001a06 <SPI_EndRxTxTransaction+0x5e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a34:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001a36:	f043 0320 	orr.w	r3, r3, #32
 8001a3a:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	e7e2      	b.n	8001a06 <SPI_EndRxTxTransaction+0x5e>
 8001a40:	20000014 	.word	0x20000014
 8001a44:	165e9f81 	.word	0x165e9f81

08001a48 <HAL_SPI_MspInit>:
}
 8001a48:	4770      	bx	lr

08001a4a <HAL_SPI_Init>:
  if (hspi == NULL)
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	f000 808e 	beq.w	8001b6c <HAL_SPI_Init+0x122>
{
 8001a50:	b510      	push	{r4, lr}
 8001a52:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a54:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a56:	b933      	cbnz	r3, 8001a66 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a58:	6843      	ldr	r3, [r0, #4]
 8001a5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a5e:	d005      	beq.n	8001a6c <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61c3      	str	r3, [r0, #28]
 8001a64:	e002      	b.n	8001a6c <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a6a:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a6c:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d05a      	beq.n	8001b2a <HAL_SPI_Init+0xe0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a74:	2302      	movs	r3, #2
 8001a76:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001a7a:	6822      	ldr	r2, [r4, #0]
 8001a7c:	6813      	ldr	r3, [r2, #0]
 8001a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001a82:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a84:	68e3      	ldr	r3, [r4, #12]
 8001a86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a8a:	d954      	bls.n	8001b36 <HAL_SPI_Init+0xec>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a8c:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a8e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001a92:	bf18      	it	ne
 8001a94:	f5b3 6fe0 	cmpne.w	r3, #1792	@ 0x700
 8001a98:	d001      	beq.n	8001a9e <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a9e:	6863      	ldr	r3, [r4, #4]
 8001aa0:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8001aa4:	68a1      	ldr	r1, [r4, #8]
 8001aa6:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8001aaa:	430b      	orrs	r3, r1
 8001aac:	6921      	ldr	r1, [r4, #16]
 8001aae:	f001 0102 	and.w	r1, r1, #2
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	6961      	ldr	r1, [r4, #20]
 8001ab6:	f001 0101 	and.w	r1, r1, #1
 8001aba:	430b      	orrs	r3, r1
 8001abc:	69a1      	ldr	r1, [r4, #24]
 8001abe:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	69e1      	ldr	r1, [r4, #28]
 8001ac6:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8001aca:	430b      	orrs	r3, r1
 8001acc:	6a21      	ldr	r1, [r4, #32]
 8001ace:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001ad6:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8001ada:	6820      	ldr	r0, [r4, #0]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ae0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ae6:	d029      	beq.n	8001b3c <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ae8:	8b63      	ldrh	r3, [r4, #26]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001af0:	f001 0110 	and.w	r1, r1, #16
 8001af4:	430b      	orrs	r3, r1
 8001af6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001af8:	f001 0108 	and.w	r1, r1, #8
 8001afc:	430b      	orrs	r3, r1
 8001afe:	68e1      	ldr	r1, [r4, #12]
 8001b00:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6821      	ldr	r1, [r4, #0]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b0c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b12:	d027      	beq.n	8001b64 <HAL_SPI_Init+0x11a>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b14:	6822      	ldr	r2, [r4, #0]
 8001b16:	69d3      	ldr	r3, [r2, #28]
 8001b18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001b1c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b1e:	2000      	movs	r0, #0
 8001b20:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8001b28:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001b2a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff ff8a 	bl	8001a48 <HAL_SPI_MspInit>
 8001b34:	e79e      	b.n	8001a74 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b3a:	e7a8      	b.n	8001a8e <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001b3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b3e:	b92b      	cbnz	r3, 8001b4c <HAL_SPI_Init+0x102>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b40:	68e3      	ldr	r3, [r4, #12]
 8001b42:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001b46:	d90a      	bls.n	8001b5e <HAL_SPI_Init+0x114>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8001b4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d1ca      	bne.n	8001ae8 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8001b52:	6821      	ldr	r1, [r4, #0]
 8001b54:	680b      	ldr	r3, [r1, #0]
 8001b56:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e7c4      	b.n	8001ae8 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b62:	e7f3      	b.n	8001b4c <HAL_SPI_Init+0x102>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8001b68:	611a      	str	r2, [r3, #16]
 8001b6a:	e7d3      	b.n	8001b14 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
}
 8001b6e:	4770      	bx	lr

08001b70 <HAL_SPI_Transmit>:
{
 8001b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b74:	b083      	sub	sp, #12
 8001b76:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8001b78:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	f000 810e 	beq.w	8001d9e <HAL_SPI_Transmit+0x22e>
 8001b82:	4604      	mov	r4, r0
 8001b84:	4689      	mov	r9, r1
 8001b86:	4690      	mov	r8, r2
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8001b8e:	f7ff f90d 	bl	8000dac <HAL_GetTick>
 8001b92:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001b94:	f894 605d 	ldrb.w	r6, [r4, #93]	@ 0x5d
 8001b98:	b2f6      	uxtb	r6, r6
 8001b9a:	2e01      	cmp	r6, #1
 8001b9c:	f040 80ec 	bne.w	8001d78 <HAL_SPI_Transmit+0x208>
  if ((pData == NULL) || (Size == 0U))
 8001ba0:	f1b8 0f00 	cmp.w	r8, #0
 8001ba4:	bf18      	it	ne
 8001ba6:	f1b9 0f00 	cmpne.w	r9, #0
 8001baa:	f000 80e6 	beq.w	8001d7a <HAL_SPI_Transmit+0x20a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bb8:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001bbc:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001bc0:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bc4:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001bc6:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001bca:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001bce:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001bd0:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bd2:	68a3      	ldr	r3, [r4, #8]
 8001bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bd8:	d022      	beq.n	8001c20 <HAL_SPI_Transmit+0xb0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001be0:	d029      	beq.n	8001c36 <HAL_SPI_Transmit+0xc6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001bea:	d103      	bne.n	8001bf4 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bf2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bf4:	68e3      	ldr	r3, [r4, #12]
 8001bf6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001bfa:	d94d      	bls.n	8001c98 <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bfc:	6863      	ldr	r3, [r4, #4]
 8001bfe:	b113      	cbz	r3, 8001c06 <HAL_SPI_Transmit+0x96>
 8001c00:	f1b8 0f01 	cmp.w	r8, #1
 8001c04:	d12e      	bne.n	8001c64 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c06:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	8812      	ldrh	r2, [r2, #0]
 8001c0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001c10:	3302      	adds	r3, #2
 8001c12:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001c14:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001c1e:	e021      	b.n	8001c64 <HAL_SPI_Transmit+0xf4>
    __HAL_SPI_DISABLE(hspi);
 8001c20:	6822      	ldr	r2, [r4, #0]
 8001c22:	6813      	ldr	r3, [r2, #0]
 8001c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c28:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8001c2a:	6822      	ldr	r2, [r4, #0]
 8001c2c:	6813      	ldr	r3, [r2, #0]
 8001c2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e7d1      	b.n	8001bda <HAL_SPI_Transmit+0x6a>
    SPI_RESET_CRC(hspi);
 8001c36:	6822      	ldr	r2, [r4, #0]
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	6822      	ldr	r2, [r4, #0]
 8001c42:	6813      	ldr	r3, [r2, #0]
 8001c44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e7ca      	b.n	8001be2 <HAL_SPI_Transmit+0x72>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c4c:	f7ff f8ae 	bl	8000dac <HAL_GetTick>
 8001c50:	1bc0      	subs	r0, r0, r7
 8001c52:	42a8      	cmp	r0, r5
 8001c54:	d303      	bcc.n	8001c5e <HAL_SPI_Transmit+0xee>
 8001c56:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001c5a:	f040 8098 	bne.w	8001d8e <HAL_SPI_Transmit+0x21e>
 8001c5e:	2d00      	cmp	r5, #0
 8001c60:	f000 8097 	beq.w	8001d92 <HAL_SPI_Transmit+0x222>
    while (hspi->TxXferCount > 0U)
 8001c64:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d066      	beq.n	8001d3a <HAL_SPI_Transmit+0x1ca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	f012 0f02 	tst.w	r2, #2
 8001c74:	d0ea      	beq.n	8001c4c <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c76:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001c78:	8812      	ldrh	r2, [r2, #0]
 8001c7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001c7e:	3302      	adds	r3, #2
 8001c80:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001c82:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8001c86:	fa1f fc8c 	uxth.w	ip, ip
 8001c8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001c8e:	fa1f fc8c 	uxth.w	ip, ip
 8001c92:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8001c96:	e7e5      	b.n	8001c64 <HAL_SPI_Transmit+0xf4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c98:	6863      	ldr	r3, [r4, #4]
 8001c9a:	b113      	cbz	r3, 8001ca2 <HAL_SPI_Transmit+0x132>
 8001c9c:	f1b8 0f01 	cmp.w	r8, #1
 8001ca0:	d133      	bne.n	8001d0a <HAL_SPI_Transmit+0x19a>
      if (hspi->TxXferCount > 1U)
 8001ca2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d90c      	bls.n	8001cc4 <HAL_SPI_Transmit+0x154>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001caa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	8812      	ldrh	r2, [r2, #0]
 8001cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cb2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001cb8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b02      	subs	r3, #2
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001cc2:	e022      	b.n	8001d0a <HAL_SPI_Transmit+0x19a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cc4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8001ccc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001cce:	3301      	adds	r3, #1
 8001cd0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001cd2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001cdc:	e015      	b.n	8001d0a <HAL_SPI_Transmit+0x19a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cde:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8001ce4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8001cea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001cf4:	e009      	b.n	8001d0a <HAL_SPI_Transmit+0x19a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cf6:	f7ff f859 	bl	8000dac <HAL_GetTick>
 8001cfa:	1bc0      	subs	r0, r0, r7
 8001cfc:	42a8      	cmp	r0, r5
 8001cfe:	d302      	bcc.n	8001d06 <HAL_SPI_Transmit+0x196>
 8001d00:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001d04:	d147      	bne.n	8001d96 <HAL_SPI_Transmit+0x226>
 8001d06:	2d00      	cmp	r5, #0
 8001d08:	d047      	beq.n	8001d9a <HAL_SPI_Transmit+0x22a>
    while (hspi->TxXferCount > 0U)
 8001d0a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b1a3      	cbz	r3, 8001d3a <HAL_SPI_Transmit+0x1ca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d10:	6822      	ldr	r2, [r4, #0]
 8001d12:	6893      	ldr	r3, [r2, #8]
 8001d14:	f013 0f02 	tst.w	r3, #2
 8001d18:	d0ed      	beq.n	8001cf6 <HAL_SPI_Transmit+0x186>
        if (hspi->TxXferCount > 1U)
 8001d1a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d9dd      	bls.n	8001cde <HAL_SPI_Transmit+0x16e>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d22:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001d2e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b02      	subs	r3, #2
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001d38:	e7e7      	b.n	8001d0a <HAL_SPI_Transmit+0x19a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d3a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d40:	d014      	beq.n	8001d6c <HAL_SPI_Transmit+0x1fc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d42:	463a      	mov	r2, r7
 8001d44:	4629      	mov	r1, r5
 8001d46:	4620      	mov	r0, r4
 8001d48:	f7ff fe2e 	bl	80019a8 <SPI_EndRxTxTransaction>
 8001d4c:	b108      	cbz	r0, 8001d52 <HAL_SPI_Transmit+0x1e2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d52:	68a3      	ldr	r3, [r4, #8]
 8001d54:	b933      	cbnz	r3, 8001d64 <HAL_SPI_Transmit+0x1f4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	9201      	str	r2, [sp, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d64:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001d66:	b943      	cbnz	r3, 8001d7a <HAL_SPI_Transmit+0x20a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d68:	2600      	movs	r6, #0
 8001d6a:	e006      	b.n	8001d7a <HAL_SPI_Transmit+0x20a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001d6c:	6822      	ldr	r2, [r4, #0]
 8001d6e:	6813      	ldr	r3, [r2, #0]
 8001d70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e7e4      	b.n	8001d42 <HAL_SPI_Transmit+0x1d2>
    errorcode = HAL_BUSY;
 8001d78:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8001d80:	2300      	movs	r3, #0
 8001d82:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8001d86:	4630      	mov	r0, r6
 8001d88:	b003      	add	sp, #12
 8001d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8001d8e:	2603      	movs	r6, #3
 8001d90:	e7f3      	b.n	8001d7a <HAL_SPI_Transmit+0x20a>
 8001d92:	2603      	movs	r6, #3
 8001d94:	e7f1      	b.n	8001d7a <HAL_SPI_Transmit+0x20a>
          errorcode = HAL_TIMEOUT;
 8001d96:	2603      	movs	r6, #3
 8001d98:	e7ef      	b.n	8001d7a <HAL_SPI_Transmit+0x20a>
 8001d9a:	2603      	movs	r6, #3
 8001d9c:	e7ed      	b.n	8001d7a <HAL_SPI_Transmit+0x20a>
  __HAL_LOCK(hspi);
 8001d9e:	2602      	movs	r6, #2
 8001da0:	e7f1      	b.n	8001d86 <HAL_SPI_Transmit+0x216>

08001da2 <HAL_SPI_TransmitReceive>:
{
 8001da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da6:	b085      	sub	sp, #20
 8001da8:	461f      	mov	r7, r3
 8001daa:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  __IO uint32_t tmpreg = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8001db0:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 8001db4:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	f000 81f7 	beq.w	80021ac <HAL_SPI_TransmitReceive+0x40a>
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	468a      	mov	sl, r1
 8001dc2:	4693      	mov	fp, r2
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8001dca:	f7fe ffef 	bl	8000dac <HAL_GetTick>
 8001dce:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8001dd0:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8001dd4:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8001dd6:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8001dde:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d00a      	beq.n	8001dfc <HAL_SPI_TransmitReceive+0x5a>
 8001de6:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8001dea:	f040 81c6 	bne.w	800217a <HAL_SPI_TransmitReceive+0x3d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001dee:	68a1      	ldr	r1, [r4, #8]
 8001df0:	2900      	cmp	r1, #0
 8001df2:	f040 81cd 	bne.w	8002190 <HAL_SPI_TransmitReceive+0x3ee>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	f040 81cc 	bne.w	8002194 <HAL_SPI_TransmitReceive+0x3f2>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001dfc:	f1bb 0f00 	cmp.w	fp, #0
 8001e00:	bf18      	it	ne
 8001e02:	f1ba 0f00 	cmpne.w	sl, #0
 8001e06:	f000 81c7 	beq.w	8002198 <HAL_SPI_TransmitReceive+0x3f6>
 8001e0a:	2f00      	cmp	r7, #0
 8001e0c:	f000 81c6 	beq.w	800219c <HAL_SPI_TransmitReceive+0x3fa>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e10:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d002      	beq.n	8001e20 <HAL_SPI_TransmitReceive+0x7e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e24:	f8c4 b040 	str.w	fp, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001e28:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8001e2c:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e30:	f8c4 a038 	str.w	sl, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001e34:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001e36:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 8001e38:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001e3a:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e3c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e42:	d029      	beq.n	8001e98 <HAL_SPI_TransmitReceive+0xf6>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001e44:	68e3      	ldr	r3, [r4, #12]
 8001e46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e4a:	d801      	bhi.n	8001e50 <HAL_SPI_TransmitReceive+0xae>
 8001e4c:	2f01      	cmp	r7, #1
 8001e4e:	d92d      	bls.n	8001eac <HAL_SPI_TransmitReceive+0x10a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e50:	6822      	ldr	r2, [r4, #0]
 8001e52:	6853      	ldr	r3, [r2, #4]
 8001e54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e58:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001e62:	d103      	bne.n	8001e6c <HAL_SPI_TransmitReceive+0xca>
    __HAL_SPI_ENABLE(hspi);
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e6a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e6c:	68e3      	ldr	r3, [r4, #12]
 8001e6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e72:	d97d      	bls.n	8001f70 <HAL_SPI_TransmitReceive+0x1ce>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e74:	6863      	ldr	r3, [r4, #4]
 8001e76:	b10b      	cbz	r3, 8001e7c <HAL_SPI_TransmitReceive+0xda>
 8001e78:	2f01      	cmp	r7, #1
 8001e7a:	d10b      	bne.n	8001e94 <HAL_SPI_TransmitReceive+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e7c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	8812      	ldrh	r2, [r2, #0]
 8001e82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e84:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001e86:	3302      	adds	r3, #2
 8001e88:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001e8a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8001e94:	2701      	movs	r7, #1
 8001e96:	e042      	b.n	8001f1e <HAL_SPI_TransmitReceive+0x17c>
    SPI_RESET_CRC(hspi);
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	6822      	ldr	r2, [r4, #0]
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e7cb      	b.n	8001e44 <HAL_SPI_TransmitReceive+0xa2>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001eac:	6822      	ldr	r2, [r4, #0]
 8001eae:	6853      	ldr	r3, [r2, #4]
 8001eb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001eb4:	6053      	str	r3, [r2, #4]
 8001eb6:	e7d0      	b.n	8001e5a <HAL_SPI_TransmitReceive+0xb8>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8001eb8:	f018 0f04 	tst.w	r8, #4
 8001ebc:	d107      	bne.n	8001ece <HAL_SPI_TransmitReceive+0x12c>
 8001ebe:	f019 0f08 	tst.w	r9, #8
 8001ec2:	d004      	beq.n	8001ece <HAL_SPI_TransmitReceive+0x12c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8001ec4:	6822      	ldr	r2, [r4, #0]
 8001ec6:	6813      	ldr	r3, [r2, #0]
 8001ec8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ecc:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001ece:	6822      	ldr	r2, [r4, #0]
 8001ed0:	6813      	ldr	r3, [r2, #0]
 8001ed2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ed6:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8001ed8:	2700      	movs	r7, #0
 8001eda:	e000      	b.n	8001ede <HAL_SPI_TransmitReceive+0x13c>
 8001edc:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	f012 0f01 	tst.w	r2, #1
 8001ee6:	d011      	beq.n	8001f0c <HAL_SPI_TransmitReceive+0x16a>
 8001ee8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8001eec:	b292      	uxth	r2, r2
 8001eee:	b16a      	cbz	r2, 8001f0c <HAL_SPI_TransmitReceive+0x16a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ef4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ef6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ef8:	3302      	adds	r3, #2
 8001efa:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8001efc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8001f0a:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f0c:	f7fe ff4e 	bl	8000dac <HAL_GetTick>
 8001f10:	1b80      	subs	r0, r0, r6
 8001f12:	42a8      	cmp	r0, r5
 8001f14:	d303      	bcc.n	8001f1e <HAL_SPI_TransmitReceive+0x17c>
 8001f16:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001f1a:	f040 8141 	bne.w	80021a0 <HAL_SPI_TransmitReceive+0x3fe>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f1e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	b92b      	cbnz	r3, 8001f30 <HAL_SPI_TransmitReceive+0x18e>
 8001f24:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80d1 	beq.w	80020d2 <HAL_SPI_TransmitReceive+0x330>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	f012 0f02 	tst.w	r2, #2
 8001f38:	d0d1      	beq.n	8001ede <HAL_SPI_TransmitReceive+0x13c>
 8001f3a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8001f3c:	b292      	uxth	r2, r2
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	d0cd      	beq.n	8001ede <HAL_SPI_TransmitReceive+0x13c>
 8001f42:	2f00      	cmp	r7, #0
 8001f44:	d0cb      	beq.n	8001ede <HAL_SPI_TransmitReceive+0x13c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f46:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001f48:	8812      	ldrh	r2, [r2, #0]
 8001f4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f4c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f4e:	3302      	adds	r3, #2
 8001f50:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001f52:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001f5c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1bb      	bne.n	8001edc <HAL_SPI_TransmitReceive+0x13a>
 8001f64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f6a:	d0a5      	beq.n	8001eb8 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 0U;
 8001f6c:	2700      	movs	r7, #0
 8001f6e:	e7b6      	b.n	8001ede <HAL_SPI_TransmitReceive+0x13c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f70:	6863      	ldr	r3, [r4, #4]
 8001f72:	b10b      	cbz	r3, 8001f78 <HAL_SPI_TransmitReceive+0x1d6>
 8001f74:	2f01      	cmp	r7, #1
 8001f76:	d10f      	bne.n	8001f98 <HAL_SPI_TransmitReceive+0x1f6>
      if (hspi->TxXferCount > 1U)
 8001f78:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d90d      	bls.n	8001f9c <HAL_SPI_TransmitReceive+0x1fa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f80:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	8812      	ldrh	r2, [r2, #0]
 8001f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f88:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001f8e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b02      	subs	r3, #2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8001f98:	2701      	movs	r7, #1
 8001f9a:	e065      	b.n	8002068 <HAL_SPI_TransmitReceive+0x2c6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f9c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001fa4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001faa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001fb4:	e7f0      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x1f6>
        if (hspi->TxXferCount > 1U)
 8001fb6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8001fb8:	b292      	uxth	r2, r2
 8001fba:	2a01      	cmp	r2, #1
 8001fbc:	d913      	bls.n	8001fe6 <HAL_SPI_TransmitReceive+0x244>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fbe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001fc0:	8812      	ldrh	r2, [r2, #0]
 8001fc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fc4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001fca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b02      	subs	r3, #2
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001fd4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	bb1b      	cbnz	r3, 8002022 <HAL_SPI_TransmitReceive+0x280>
 8001fda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fe0:	d00d      	beq.n	8001ffe <HAL_SPI_TransmitReceive+0x25c>
        txallowed = 0U;
 8001fe2:	2700      	movs	r7, #0
 8001fe4:	e052      	b.n	800208c <HAL_SPI_TransmitReceive+0x2ea>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fe6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8001fec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001fee:	3301      	adds	r3, #1
 8001ff0:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8001ff2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001ffc:	e7ea      	b.n	8001fd4 <HAL_SPI_TransmitReceive+0x232>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8001ffe:	f018 0f04 	tst.w	r8, #4
 8002002:	d107      	bne.n	8002014 <HAL_SPI_TransmitReceive+0x272>
 8002004:	f019 0f08 	tst.w	r9, #8
 8002008:	d004      	beq.n	8002014 <HAL_SPI_TransmitReceive+0x272>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800200a:	6822      	ldr	r2, [r4, #0]
 800200c:	6813      	ldr	r3, [r2, #0]
 800200e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002012:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	6813      	ldr	r3, [r2, #0]
 8002018:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800201c:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 800201e:	2700      	movs	r7, #0
 8002020:	e034      	b.n	800208c <HAL_SPI_TransmitReceive+0x2ea>
 8002022:	2700      	movs	r7, #0
 8002024:	e032      	b.n	800208c <HAL_SPI_TransmitReceive+0x2ea>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002026:	6822      	ldr	r2, [r4, #0]
 8002028:	6853      	ldr	r3, [r2, #4]
 800202a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800202e:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8002030:	2701      	movs	r7, #1
 8002032:	e00d      	b.n	8002050 <HAL_SPI_TransmitReceive+0x2ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002034:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002036:	7b1b      	ldrb	r3, [r3, #12]
 8002038:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800203a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800203c:	3301      	adds	r3, #1
 800203e:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8002040:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002044:	b29b      	uxth	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	b29b      	uxth	r3, r3
 800204a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 800204e:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002050:	f7fe feac 	bl	8000dac <HAL_GetTick>
 8002054:	1b80      	subs	r0, r0, r6
 8002056:	42a8      	cmp	r0, r5
 8002058:	d303      	bcc.n	8002062 <HAL_SPI_TransmitReceive+0x2c0>
 800205a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800205e:	f040 80a1 	bne.w	80021a4 <HAL_SPI_TransmitReceive+0x402>
 8002062:	2d00      	cmp	r5, #0
 8002064:	f000 80a0 	beq.w	80021a8 <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002068:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800206a:	b29b      	uxth	r3, r3
 800206c:	b923      	cbnz	r3, 8002078 <HAL_SPI_TransmitReceive+0x2d6>
 800206e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d02c      	beq.n	80020d2 <HAL_SPI_TransmitReceive+0x330>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	f012 0f02 	tst.w	r2, #2
 8002080:	d004      	beq.n	800208c <HAL_SPI_TransmitReceive+0x2ea>
 8002082:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002084:	b292      	uxth	r2, r2
 8002086:	b10a      	cbz	r2, 800208c <HAL_SPI_TransmitReceive+0x2ea>
 8002088:	2f00      	cmp	r7, #0
 800208a:	d194      	bne.n	8001fb6 <HAL_SPI_TransmitReceive+0x214>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	f012 0f01 	tst.w	r2, #1
 8002094:	d0dc      	beq.n	8002050 <HAL_SPI_TransmitReceive+0x2ae>
 8002096:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800209a:	b292      	uxth	r2, r2
 800209c:	2a00      	cmp	r2, #0
 800209e:	d0d7      	beq.n	8002050 <HAL_SPI_TransmitReceive+0x2ae>
        if (hspi->RxXferCount > 1U)
 80020a0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80020a4:	b292      	uxth	r2, r2
 80020a6:	2a01      	cmp	r2, #1
 80020a8:	d9c4      	bls.n	8002034 <HAL_SPI_TransmitReceive+0x292>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80020b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020b2:	3302      	adds	r3, #2
 80020b4:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80020b6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b02      	subs	r3, #2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80020c4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d9ab      	bls.n	8002026 <HAL_SPI_TransmitReceive+0x284>
        txallowed = 1U;
 80020ce:	2701      	movs	r7, #1
 80020d0:	e7be      	b.n	8002050 <HAL_SPI_TransmitReceive+0x2ae>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80020d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020d8:	d017      	beq.n	800210a <HAL_SPI_TransmitReceive+0x368>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	f012 0f10 	tst.w	r2, #16
 80020e2:	d048      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x3d4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80020e4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80020e6:	f042 0202 	orr.w	r2, r2, #2
 80020ea:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80020ec:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80020f0:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 80020f2:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020f4:	4632      	mov	r2, r6
 80020f6:	4629      	mov	r1, r5
 80020f8:	4620      	mov	r0, r4
 80020fa:	f7ff fc55 	bl	80019a8 <SPI_EndRxTxTransaction>
 80020fe:	2800      	cmp	r0, #0
 8002100:	d03c      	beq.n	800217c <HAL_SPI_TransmitReceive+0x3da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002102:	2320      	movs	r3, #32
 8002104:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8002106:	2701      	movs	r7, #1
 8002108:	e038      	b.n	800217c <HAL_SPI_TransmitReceive+0x3da>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800210a:	9600      	str	r6, [sp, #0]
 800210c:	462b      	mov	r3, r5
 800210e:	2201      	movs	r2, #1
 8002110:	4611      	mov	r1, r2
 8002112:	4620      	mov	r0, r4
 8002114:	f7ff fb6c 	bl	80017f0 <SPI_WaitFlagStateUntilTimeout>
 8002118:	b9e0      	cbnz	r0, 8002154 <HAL_SPI_TransmitReceive+0x3b2>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800211a:	68e3      	ldr	r3, [r4, #12]
 800211c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002120:	d01e      	beq.n	8002160 <HAL_SPI_TransmitReceive+0x3be>
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002122:	6827      	ldr	r7, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8002124:	7b3b      	ldrb	r3, [r7, #12]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 800212c:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002130:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002132:	2b02      	cmp	r3, #2
 8002134:	d1d1      	bne.n	80020da <HAL_SPI_TransmitReceive+0x338>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002136:	9600      	str	r6, [sp, #0]
 8002138:	462b      	mov	r3, r5
 800213a:	2201      	movs	r2, #1
 800213c:	4611      	mov	r1, r2
 800213e:	4620      	mov	r0, r4
 8002140:	f7ff fb56 	bl	80017f0 <SPI_WaitFlagStateUntilTimeout>
 8002144:	b988      	cbnz	r0, 800216a <HAL_SPI_TransmitReceive+0x3c8>
        tmpreg8 = *ptmpreg8;
 8002146:	7b3b      	ldrb	r3, [r7, #12]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 800214e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002152:	e7c2      	b.n	80020da <HAL_SPI_TransmitReceive+0x338>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002154:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	6623      	str	r3, [r4, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 800215c:	2703      	movs	r7, #3
      goto error;
 800215e:	e00d      	b.n	800217c <HAL_SPI_TransmitReceive+0x3da>
      tmpreg = READ_REG(hspi->Instance->DR);
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8002166:	9b03      	ldr	r3, [sp, #12]
 8002168:	e7b7      	b.n	80020da <HAL_SPI_TransmitReceive+0x338>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800216a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	6623      	str	r3, [r4, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 8002172:	2703      	movs	r7, #3
          goto error;
 8002174:	e002      	b.n	800217c <HAL_SPI_TransmitReceive+0x3da>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002176:	2700      	movs	r7, #0
 8002178:	e7bc      	b.n	80020f4 <HAL_SPI_TransmitReceive+0x352>
    errorcode = HAL_BUSY;
 800217a:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 800217c:	2301      	movs	r3, #1
 800217e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8002182:	2300      	movs	r3, #0
 8002184:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8002188:	4638      	mov	r0, r7
 800218a:	b005      	add	sp, #20
 800218c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 8002190:	2702      	movs	r7, #2
 8002192:	e7f3      	b.n	800217c <HAL_SPI_TransmitReceive+0x3da>
 8002194:	2702      	movs	r7, #2
 8002196:	e7f1      	b.n	800217c <HAL_SPI_TransmitReceive+0x3da>
    errorcode = HAL_ERROR;
 8002198:	2701      	movs	r7, #1
 800219a:	e7ef      	b.n	800217c <HAL_SPI_TransmitReceive+0x3da>
 800219c:	2701      	movs	r7, #1
 800219e:	e7ed      	b.n	800217c <HAL_SPI_TransmitReceive+0x3da>
        errorcode = HAL_TIMEOUT;
 80021a0:	2703      	movs	r7, #3
 80021a2:	e7eb      	b.n	800217c <HAL_SPI_TransmitReceive+0x3da>
        errorcode = HAL_TIMEOUT;
 80021a4:	2703      	movs	r7, #3
 80021a6:	e7e9      	b.n	800217c <HAL_SPI_TransmitReceive+0x3da>
 80021a8:	2703      	movs	r7, #3
 80021aa:	e7e7      	b.n	800217c <HAL_SPI_TransmitReceive+0x3da>
  __HAL_LOCK(hspi);
 80021ac:	2702      	movs	r7, #2
 80021ae:	e7eb      	b.n	8002188 <HAL_SPI_TransmitReceive+0x3e6>

080021b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021b0:	b510      	push	{r4, lr}
 80021b2:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021b4:	6883      	ldr	r3, [r0, #8]
 80021b6:	6902      	ldr	r2, [r0, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	6942      	ldr	r2, [r0, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	69c2      	ldr	r2, [r0, #28]
 80021c0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021c2:	6801      	ldr	r1, [r0, #0]
 80021c4:	6808      	ldr	r0, [r1, #0]
 80021c6:	4a93      	ldr	r2, [pc, #588]	@ (8002414 <UART_SetConfig+0x264>)
 80021c8:	4002      	ands	r2, r0
 80021ca:	431a      	orrs	r2, r3
 80021cc:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ce:	6822      	ldr	r2, [r4, #0]
 80021d0:	6853      	ldr	r3, [r2, #4]
 80021d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021d6:	68e1      	ldr	r1, [r4, #12]
 80021d8:	430b      	orrs	r3, r1
 80021da:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021dc:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80021de:	6a23      	ldr	r3, [r4, #32]
 80021e0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021e2:	6821      	ldr	r1, [r4, #0]
 80021e4:	688b      	ldr	r3, [r1, #8]
 80021e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	4a89      	ldr	r2, [pc, #548]	@ (8002418 <UART_SetConfig+0x268>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <UART_SetConfig+0x7a>
 80021f6:	4a89      	ldr	r2, [pc, #548]	@ (800241c <UART_SetConfig+0x26c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d029      	beq.n	8002250 <UART_SetConfig+0xa0>
 80021fc:	4a88      	ldr	r2, [pc, #544]	@ (8002420 <UART_SetConfig+0x270>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d03e      	beq.n	8002280 <UART_SetConfig+0xd0>
 8002202:	4a88      	ldr	r2, [pc, #544]	@ (8002424 <UART_SetConfig+0x274>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d062      	beq.n	80022ce <UART_SetConfig+0x11e>
 8002208:	4a87      	ldr	r2, [pc, #540]	@ (8002428 <UART_SetConfig+0x278>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d071      	beq.n	80022f2 <UART_SetConfig+0x142>
 800220e:	4a87      	ldr	r2, [pc, #540]	@ (800242c <UART_SetConfig+0x27c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	f000 8083 	beq.w	800231c <UART_SetConfig+0x16c>
 8002216:	4a86      	ldr	r2, [pc, #536]	@ (8002430 <UART_SetConfig+0x280>)
 8002218:	4293      	cmp	r3, r2
 800221a:	f000 8094 	beq.w	8002346 <UART_SetConfig+0x196>
 800221e:	4a85      	ldr	r2, [pc, #532]	@ (8002434 <UART_SetConfig+0x284>)
 8002220:	4293      	cmp	r3, r2
 8002222:	f000 80a5 	beq.w	8002370 <UART_SetConfig+0x1c0>
 8002226:	2310      	movs	r3, #16
 8002228:	e03a      	b.n	80022a0 <UART_SetConfig+0xf0>
 800222a:	4b83      	ldr	r3, [pc, #524]	@ (8002438 <UART_SetConfig+0x288>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b03      	cmp	r3, #3
 8002236:	d809      	bhi.n	800224c <UART_SetConfig+0x9c>
 8002238:	e8df f003 	tbb	[pc, r3]
 800223c:	06ae0402 	.word	0x06ae0402
 8002240:	2301      	movs	r3, #1
 8002242:	e02d      	b.n	80022a0 <UART_SetConfig+0xf0>
 8002244:	2304      	movs	r3, #4
 8002246:	e02b      	b.n	80022a0 <UART_SetConfig+0xf0>
 8002248:	2308      	movs	r3, #8
 800224a:	e029      	b.n	80022a0 <UART_SetConfig+0xf0>
 800224c:	2310      	movs	r3, #16
 800224e:	e027      	b.n	80022a0 <UART_SetConfig+0xf0>
 8002250:	4b79      	ldr	r3, [pc, #484]	@ (8002438 <UART_SetConfig+0x288>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b0c      	cmp	r3, #12
 800225c:	d80e      	bhi.n	800227c <UART_SetConfig+0xcc>
 800225e:	e8df f003 	tbb	[pc, r3]
 8002262:	0d07      	.short	0x0d07
 8002264:	0d090d0d 	.word	0x0d090d0d
 8002268:	0d9d0d0d 	.word	0x0d9d0d0d
 800226c:	0d0d      	.short	0x0d0d
 800226e:	0b          	.byte	0x0b
 800226f:	00          	.byte	0x00
 8002270:	2300      	movs	r3, #0
 8002272:	e015      	b.n	80022a0 <UART_SetConfig+0xf0>
 8002274:	2304      	movs	r3, #4
 8002276:	e013      	b.n	80022a0 <UART_SetConfig+0xf0>
 8002278:	2308      	movs	r3, #8
 800227a:	e011      	b.n	80022a0 <UART_SetConfig+0xf0>
 800227c:	2310      	movs	r3, #16
 800227e:	e00f      	b.n	80022a0 <UART_SetConfig+0xf0>
 8002280:	4b6d      	ldr	r3, [pc, #436]	@ (8002438 <UART_SetConfig+0x288>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002286:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800228a:	2b20      	cmp	r3, #32
 800228c:	f000 8088 	beq.w	80023a0 <UART_SetConfig+0x1f0>
 8002290:	d819      	bhi.n	80022c6 <UART_SetConfig+0x116>
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8086 	beq.w	80023a4 <UART_SetConfig+0x1f4>
 8002298:	2b10      	cmp	r3, #16
 800229a:	f040 8085 	bne.w	80023a8 <UART_SetConfig+0x1f8>
 800229e:	2304      	movs	r3, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022a0:	69e0      	ldr	r0, [r4, #28]
 80022a2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80022a6:	f000 80ab 	beq.w	8002400 <UART_SetConfig+0x250>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	f200 810c 	bhi.w	80024c8 <UART_SetConfig+0x318>
 80022b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80022b4:	00fb00e8 	.word	0x00fb00e8
 80022b8:	010a00e6 	.word	0x010a00e6
 80022bc:	010a00fe 	.word	0x010a00fe
 80022c0:	010a010a 	.word	0x010a010a
 80022c4:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022c6:	2b30      	cmp	r3, #48	@ 0x30
 80022c8:	d170      	bne.n	80023ac <UART_SetConfig+0x1fc>
 80022ca:	2308      	movs	r3, #8
 80022cc:	e7e8      	b.n	80022a0 <UART_SetConfig+0xf0>
 80022ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002438 <UART_SetConfig+0x288>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80022d8:	2b80      	cmp	r3, #128	@ 0x80
 80022da:	d069      	beq.n	80023b0 <UART_SetConfig+0x200>
 80022dc:	d805      	bhi.n	80022ea <UART_SetConfig+0x13a>
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d068      	beq.n	80023b4 <UART_SetConfig+0x204>
 80022e2:	2b40      	cmp	r3, #64	@ 0x40
 80022e4:	d168      	bne.n	80023b8 <UART_SetConfig+0x208>
 80022e6:	2304      	movs	r3, #4
 80022e8:	e7da      	b.n	80022a0 <UART_SetConfig+0xf0>
 80022ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80022ec:	d166      	bne.n	80023bc <UART_SetConfig+0x20c>
 80022ee:	2308      	movs	r3, #8
 80022f0:	e7d6      	b.n	80022a0 <UART_SetConfig+0xf0>
 80022f2:	4b51      	ldr	r3, [pc, #324]	@ (8002438 <UART_SetConfig+0x288>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002300:	d05e      	beq.n	80023c0 <UART_SetConfig+0x210>
 8002302:	d806      	bhi.n	8002312 <UART_SetConfig+0x162>
 8002304:	2b00      	cmp	r3, #0
 8002306:	d05d      	beq.n	80023c4 <UART_SetConfig+0x214>
 8002308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800230c:	d15c      	bne.n	80023c8 <UART_SetConfig+0x218>
 800230e:	2304      	movs	r3, #4
 8002310:	e7c6      	b.n	80022a0 <UART_SetConfig+0xf0>
 8002312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002316:	d159      	bne.n	80023cc <UART_SetConfig+0x21c>
 8002318:	2308      	movs	r3, #8
 800231a:	e7c1      	b.n	80022a0 <UART_SetConfig+0xf0>
 800231c:	4b46      	ldr	r3, [pc, #280]	@ (8002438 <UART_SetConfig+0x288>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002322:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002326:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800232a:	d051      	beq.n	80023d0 <UART_SetConfig+0x220>
 800232c:	d806      	bhi.n	800233c <UART_SetConfig+0x18c>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d050      	beq.n	80023d4 <UART_SetConfig+0x224>
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002336:	d14f      	bne.n	80023d8 <UART_SetConfig+0x228>
 8002338:	2304      	movs	r3, #4
 800233a:	e7b1      	b.n	80022a0 <UART_SetConfig+0xf0>
 800233c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002340:	d14c      	bne.n	80023dc <UART_SetConfig+0x22c>
 8002342:	2308      	movs	r3, #8
 8002344:	e7ac      	b.n	80022a0 <UART_SetConfig+0xf0>
 8002346:	4b3c      	ldr	r3, [pc, #240]	@ (8002438 <UART_SetConfig+0x288>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002354:	d044      	beq.n	80023e0 <UART_SetConfig+0x230>
 8002356:	d806      	bhi.n	8002366 <UART_SetConfig+0x1b6>
 8002358:	2b00      	cmp	r3, #0
 800235a:	d043      	beq.n	80023e4 <UART_SetConfig+0x234>
 800235c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002360:	d142      	bne.n	80023e8 <UART_SetConfig+0x238>
 8002362:	2304      	movs	r3, #4
 8002364:	e79c      	b.n	80022a0 <UART_SetConfig+0xf0>
 8002366:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800236a:	d13f      	bne.n	80023ec <UART_SetConfig+0x23c>
 800236c:	2308      	movs	r3, #8
 800236e:	e797      	b.n	80022a0 <UART_SetConfig+0xf0>
 8002370:	4b31      	ldr	r3, [pc, #196]	@ (8002438 <UART_SetConfig+0x288>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002376:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800237a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800237e:	d037      	beq.n	80023f0 <UART_SetConfig+0x240>
 8002380:	d805      	bhi.n	800238e <UART_SetConfig+0x1de>
 8002382:	b3bb      	cbz	r3, 80023f4 <UART_SetConfig+0x244>
 8002384:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002388:	d136      	bne.n	80023f8 <UART_SetConfig+0x248>
 800238a:	2304      	movs	r3, #4
 800238c:	e788      	b.n	80022a0 <UART_SetConfig+0xf0>
 800238e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002392:	d133      	bne.n	80023fc <UART_SetConfig+0x24c>
 8002394:	2308      	movs	r3, #8
 8002396:	e783      	b.n	80022a0 <UART_SetConfig+0xf0>
 8002398:	2302      	movs	r3, #2
 800239a:	e781      	b.n	80022a0 <UART_SetConfig+0xf0>
 800239c:	2302      	movs	r3, #2
 800239e:	e77f      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e77d      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023a4:	2300      	movs	r3, #0
 80023a6:	e77b      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023a8:	2310      	movs	r3, #16
 80023aa:	e779      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023ac:	2310      	movs	r3, #16
 80023ae:	e777      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e775      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023b4:	2300      	movs	r3, #0
 80023b6:	e773      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023b8:	2310      	movs	r3, #16
 80023ba:	e771      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023bc:	2310      	movs	r3, #16
 80023be:	e76f      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e76d      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023c4:	2300      	movs	r3, #0
 80023c6:	e76b      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023c8:	2310      	movs	r3, #16
 80023ca:	e769      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023cc:	2310      	movs	r3, #16
 80023ce:	e767      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e765      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e763      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023d8:	2310      	movs	r3, #16
 80023da:	e761      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023dc:	2310      	movs	r3, #16
 80023de:	e75f      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e75d      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023e4:	2300      	movs	r3, #0
 80023e6:	e75b      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023e8:	2310      	movs	r3, #16
 80023ea:	e759      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023ec:	2310      	movs	r3, #16
 80023ee:	e757      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e755      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023f4:	2300      	movs	r3, #0
 80023f6:	e753      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023f8:	2310      	movs	r3, #16
 80023fa:	e751      	b.n	80022a0 <UART_SetConfig+0xf0>
 80023fc:	2310      	movs	r3, #16
 80023fe:	e74f      	b.n	80022a0 <UART_SetConfig+0xf0>
    switch (clocksource)
 8002400:	2b08      	cmp	r3, #8
 8002402:	d85b      	bhi.n	80024bc <UART_SetConfig+0x30c>
 8002404:	e8df f003 	tbb	[pc, r3]
 8002408:	5a3a341a 	.word	0x5a3a341a
 800240c:	5a5a5a37 	.word	0x5a5a5a37
 8002410:	1e          	.byte	0x1e
 8002411:	00          	.byte	0x00
 8002412:	bf00      	nop
 8002414:	efff69f3 	.word	0xefff69f3
 8002418:	40011000 	.word	0x40011000
 800241c:	40004400 	.word	0x40004400
 8002420:	40004800 	.word	0x40004800
 8002424:	40004c00 	.word	0x40004c00
 8002428:	40005000 	.word	0x40005000
 800242c:	40011400 	.word	0x40011400
 8002430:	40007800 	.word	0x40007800
 8002434:	40007c00 	.word	0x40007c00
 8002438:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 800243c:	f7ff f9b8 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002440:	2800      	cmp	r0, #0
 8002442:	d03d      	beq.n	80024c0 <UART_SetConfig+0x310>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002444:	6862      	ldr	r2, [r4, #4]
 8002446:	0853      	lsrs	r3, r2, #1
 8002448:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800244c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002450:	f1a3 0110 	sub.w	r1, r3, #16
 8002454:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002458:	4291      	cmp	r1, r2
 800245a:	d833      	bhi.n	80024c4 <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800245c:	b29a      	uxth	r2, r3
 800245e:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002462:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002466:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002468:	6822      	ldr	r2, [r4, #0]
 800246a:	60d3      	str	r3, [r2, #12]
 800246c:	2000      	movs	r0, #0
 800246e:	e030      	b.n	80024d2 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002470:	f7ff f9ae 	bl	80017d0 <HAL_RCC_GetPCLK2Freq>
        break;
 8002474:	e7e4      	b.n	8002440 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 8002476:	f7ff f88b 	bl	8001590 <HAL_RCC_GetSysClockFreq>
        break;
 800247a:	e7e1      	b.n	8002440 <UART_SetConfig+0x290>
        pclk = (uint32_t) HSI_VALUE;
 800247c:	4817      	ldr	r0, [pc, #92]	@ (80024dc <UART_SetConfig+0x32c>)
 800247e:	e7e1      	b.n	8002444 <UART_SetConfig+0x294>
    switch (clocksource)
 8002480:	4816      	ldr	r0, [pc, #88]	@ (80024dc <UART_SetConfig+0x32c>)
 8002482:	e002      	b.n	800248a <UART_SetConfig+0x2da>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002484:	f7ff f994 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8002488:	b300      	cbz	r0, 80024cc <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800248a:	6863      	ldr	r3, [r4, #4]
 800248c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002490:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002494:	f1a0 0210 	sub.w	r2, r0, #16
 8002498:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800249c:	429a      	cmp	r2, r3
 800249e:	d817      	bhi.n	80024d0 <UART_SetConfig+0x320>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	b280      	uxth	r0, r0
 80024a4:	60d8      	str	r0, [r3, #12]
 80024a6:	2000      	movs	r0, #0
 80024a8:	e013      	b.n	80024d2 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 80024aa:	f7ff f991 	bl	80017d0 <HAL_RCC_GetPCLK2Freq>
        break;
 80024ae:	e7eb      	b.n	8002488 <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 80024b0:	f7ff f86e 	bl	8001590 <HAL_RCC_GetSysClockFreq>
        break;
 80024b4:	e7e8      	b.n	8002488 <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 80024b6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80024ba:	e7e6      	b.n	800248a <UART_SetConfig+0x2da>
    switch (clocksource)
 80024bc:	2001      	movs	r0, #1
 80024be:	e008      	b.n	80024d2 <UART_SetConfig+0x322>
 80024c0:	2000      	movs	r0, #0
 80024c2:	e006      	b.n	80024d2 <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 80024c4:	2001      	movs	r0, #1
 80024c6:	e004      	b.n	80024d2 <UART_SetConfig+0x322>
    switch (clocksource)
 80024c8:	2001      	movs	r0, #1
 80024ca:	e002      	b.n	80024d2 <UART_SetConfig+0x322>
 80024cc:	2000      	movs	r0, #0
 80024ce:	e000      	b.n	80024d2 <UART_SetConfig+0x322>
      }
      else
      {
        ret = HAL_ERROR;
 80024d0:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80024d6:	66e3      	str	r3, [r4, #108]	@ 0x6c

  return ret;
}
 80024d8:	bd10      	pop	{r4, pc}
 80024da:	bf00      	nop
 80024dc:	00f42400 	.word	0x00f42400

080024e0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024e0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80024e2:	f013 0f01 	tst.w	r3, #1
 80024e6:	d006      	beq.n	80024f6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024e8:	6802      	ldr	r2, [r0, #0]
 80024ea:	6853      	ldr	r3, [r2, #4]
 80024ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80024f0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80024f2:	430b      	orrs	r3, r1
 80024f4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024f6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80024f8:	f013 0f02 	tst.w	r3, #2
 80024fc:	d006      	beq.n	800250c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024fe:	6802      	ldr	r2, [r0, #0]
 8002500:	6853      	ldr	r3, [r2, #4]
 8002502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002506:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002508:	430b      	orrs	r3, r1
 800250a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800250c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800250e:	f013 0f04 	tst.w	r3, #4
 8002512:	d006      	beq.n	8002522 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002514:	6802      	ldr	r2, [r0, #0]
 8002516:	6853      	ldr	r3, [r2, #4]
 8002518:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800251c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800251e:	430b      	orrs	r3, r1
 8002520:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002522:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002524:	f013 0f08 	tst.w	r3, #8
 8002528:	d006      	beq.n	8002538 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800252a:	6802      	ldr	r2, [r0, #0]
 800252c:	6853      	ldr	r3, [r2, #4]
 800252e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002532:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002534:	430b      	orrs	r3, r1
 8002536:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002538:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800253a:	f013 0f10 	tst.w	r3, #16
 800253e:	d006      	beq.n	800254e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002540:	6802      	ldr	r2, [r0, #0]
 8002542:	6893      	ldr	r3, [r2, #8]
 8002544:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002548:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800254a:	430b      	orrs	r3, r1
 800254c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800254e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002550:	f013 0f20 	tst.w	r3, #32
 8002554:	d006      	beq.n	8002564 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002556:	6802      	ldr	r2, [r0, #0]
 8002558:	6893      	ldr	r3, [r2, #8]
 800255a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800255e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002560:	430b      	orrs	r3, r1
 8002562:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002564:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002566:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800256a:	d00a      	beq.n	8002582 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800256c:	6802      	ldr	r2, [r0, #0]
 800256e:	6853      	ldr	r3, [r2, #4]
 8002570:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002574:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002576:	430b      	orrs	r3, r1
 8002578:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800257a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800257c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002580:	d00b      	beq.n	800259a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002582:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002584:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002588:	d006      	beq.n	8002598 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800258a:	6802      	ldr	r2, [r0, #0]
 800258c:	6853      	ldr	r3, [r2, #4]
 800258e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002592:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002594:	430b      	orrs	r3, r1
 8002596:	6053      	str	r3, [r2, #4]
  }
}
 8002598:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800259a:	6802      	ldr	r2, [r0, #0]
 800259c:	6853      	ldr	r3, [r2, #4]
 800259e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80025a2:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6053      	str	r3, [r2, #4]
 80025a8:	e7eb      	b.n	8002582 <UART_AdvFeatureConfig+0xa2>

080025aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025ae:	4605      	mov	r5, r0
 80025b0:	460f      	mov	r7, r1
 80025b2:	4616      	mov	r6, r2
 80025b4:	4699      	mov	r9, r3
 80025b6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ba:	682b      	ldr	r3, [r5, #0]
 80025bc:	69dc      	ldr	r4, [r3, #28]
 80025be:	ea37 0404 	bics.w	r4, r7, r4
 80025c2:	bf0c      	ite	eq
 80025c4:	2401      	moveq	r4, #1
 80025c6:	2400      	movne	r4, #0
 80025c8:	42b4      	cmp	r4, r6
 80025ca:	d155      	bne.n	8002678 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025cc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80025d0:	d0f3      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7fe fbeb 	bl	8000dac <HAL_GetTick>
 80025d6:	eba0 0009 	sub.w	r0, r0, r9
 80025da:	4540      	cmp	r0, r8
 80025dc:	d82e      	bhi.n	800263c <UART_WaitOnFlagUntilTimeout+0x92>
 80025de:	f1b8 0f00 	cmp.w	r8, #0
 80025e2:	d02b      	beq.n	800263c <UART_WaitOnFlagUntilTimeout+0x92>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025e4:	682b      	ldr	r3, [r5, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	f012 0f04 	tst.w	r2, #4
 80025ec:	d0e5      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80025f4:	d0e1      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025fc:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fe:	e852 3f00 	ldrex	r3, [r2]
 8002602:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002606:	e842 3100 	strex	r1, r3, [r2]
 800260a:	2900      	cmp	r1, #0
 800260c:	d1f6      	bne.n	80025fc <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002610:	f102 0308 	add.w	r3, r2, #8
 8002614:	e853 3f00 	ldrex	r3, [r3]
 8002618:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261c:	3208      	adds	r2, #8
 800261e:	e842 3100 	strex	r1, r3, [r2]
 8002622:	2900      	cmp	r1, #0
 8002624:	d1f3      	bne.n	800260e <UART_WaitOnFlagUntilTimeout+0x64>

          huart->gState = HAL_UART_STATE_READY;
 8002626:	2320      	movs	r3, #32
 8002628:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800262a:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800262e:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002632:	2300      	movs	r3, #0
 8002634:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002638:	2003      	movs	r0, #3
 800263a:	e01e      	b.n	800267a <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800263c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263e:	e852 3f00 	ldrex	r3, [r2]
 8002642:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002646:	e842 3100 	strex	r1, r3, [r2]
 800264a:	2900      	cmp	r1, #0
 800264c:	d1f6      	bne.n	800263c <UART_WaitOnFlagUntilTimeout+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002650:	f102 0308 	add.w	r3, r2, #8
 8002654:	e853 3f00 	ldrex	r3, [r3]
 8002658:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265c:	3208      	adds	r2, #8
 800265e:	e842 3100 	strex	r1, r3, [r2]
 8002662:	2900      	cmp	r1, #0
 8002664:	d1f3      	bne.n	800264e <UART_WaitOnFlagUntilTimeout+0xa4>
        huart->gState = HAL_UART_STATE_READY;
 8002666:	2320      	movs	r3, #32
 8002668:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800266a:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
        __HAL_UNLOCK(huart);
 800266e:	2300      	movs	r3, #0
 8002670:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
        return HAL_TIMEOUT;
 8002674:	2003      	movs	r0, #3
 8002676:	e000      	b.n	800267a <UART_WaitOnFlagUntilTimeout+0xd0>
        }
      }
    }
  }
  return HAL_OK;
 8002678:	2000      	movs	r0, #0
}
 800267a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800267e <HAL_UART_Transmit>:
{
 800267e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002686:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002688:	2b20      	cmp	r3, #32
 800268a:	d14e      	bne.n	800272a <HAL_UART_Transmit+0xac>
 800268c:	4604      	mov	r4, r0
 800268e:	460d      	mov	r5, r1
 8002690:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002692:	2a00      	cmp	r2, #0
 8002694:	bf18      	it	ne
 8002696:	2900      	cmpne	r1, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 800269a:	2001      	movs	r0, #1
 800269c:	e046      	b.n	800272c <HAL_UART_Transmit+0xae>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a4:	2321      	movs	r3, #33	@ 0x21
 80026a6:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80026a8:	f7fe fb80 	bl	8000dac <HAL_GetTick>
 80026ac:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80026ae:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 80026b2:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b6:	68a3      	ldr	r3, [r4, #8]
 80026b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026bc:	d002      	beq.n	80026c4 <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 80026be:	f04f 0800 	mov.w	r8, #0
 80026c2:	e011      	b.n	80026e8 <HAL_UART_Transmit+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c4:	6923      	ldr	r3, [r4, #16]
 80026c6:	b313      	cbz	r3, 800270e <HAL_UART_Transmit+0x90>
      pdata16bits = NULL;
 80026c8:	f04f 0800 	mov.w	r8, #0
 80026cc:	e00c      	b.n	80026e8 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ce:	f838 3b02 	ldrh.w	r3, [r8], #2
 80026d2:	6822      	ldr	r2, [r4, #0]
 80026d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d8:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80026da:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80026de:	b292      	uxth	r2, r2
 80026e0:	3a01      	subs	r2, #1
 80026e2:	b292      	uxth	r2, r2
 80026e4:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80026e8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	b18b      	cbz	r3, 8002714 <HAL_UART_Transmit+0x96>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026f0:	9600      	str	r6, [sp, #0]
 80026f2:	463b      	mov	r3, r7
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	@ 0x80
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7ff ff56 	bl	80025aa <UART_WaitOnFlagUntilTimeout>
 80026fe:	b9c0      	cbnz	r0, 8002732 <HAL_UART_Transmit+0xb4>
      if (pdata8bits == NULL)
 8002700:	2d00      	cmp	r5, #0
 8002702:	d0e4      	beq.n	80026ce <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002704:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800270c:	e7e5      	b.n	80026da <HAL_UART_Transmit+0x5c>
      pdata16bits = (const uint16_t *) pData;
 800270e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002710:	2500      	movs	r5, #0
 8002712:	e7e9      	b.n	80026e8 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002714:	9600      	str	r6, [sp, #0]
 8002716:	463b      	mov	r3, r7
 8002718:	2200      	movs	r2, #0
 800271a:	2140      	movs	r1, #64	@ 0x40
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff ff44 	bl	80025aa <UART_WaitOnFlagUntilTimeout>
 8002722:	b940      	cbnz	r0, 8002736 <HAL_UART_Transmit+0xb8>
    huart->gState = HAL_UART_STATE_READY;
 8002724:	2320      	movs	r3, #32
 8002726:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8002728:	e000      	b.n	800272c <HAL_UART_Transmit+0xae>
    return HAL_BUSY;
 800272a:	2002      	movs	r0, #2
}
 800272c:	b002      	add	sp, #8
 800272e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 8002732:	2003      	movs	r0, #3
 8002734:	e7fa      	b.n	800272c <HAL_UART_Transmit+0xae>
      return HAL_TIMEOUT;
 8002736:	2003      	movs	r0, #3
 8002738:	e7f8      	b.n	800272c <HAL_UART_Transmit+0xae>

0800273a <HAL_UART_Receive>:
{
 800273a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800273e:	b083      	sub	sp, #12
 8002740:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002742:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8002746:	2b20      	cmp	r3, #32
 8002748:	d178      	bne.n	800283c <HAL_UART_Receive+0x102>
 800274a:	4604      	mov	r4, r0
 800274c:	460d      	mov	r5, r1
 800274e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002750:	2a00      	cmp	r2, #0
 8002752:	bf18      	it	ne
 8002754:	2900      	cmpne	r1, #0
 8002756:	d101      	bne.n	800275c <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8002758:	2001      	movs	r0, #1
 800275a:	e070      	b.n	800283e <HAL_UART_Receive+0x104>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275c:	2300      	movs	r3, #0
 800275e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002762:	2222      	movs	r2, #34	@ 0x22
 8002764:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002768:	6603      	str	r3, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 800276a:	f7fe fb1f 	bl	8000dac <HAL_GetTick>
 800276e:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8002770:	f8a4 8058 	strh.w	r8, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002774:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8002778:	68a3      	ldr	r3, [r4, #8]
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800277e:	d006      	beq.n	800278e <HAL_UART_Receive+0x54>
 8002780:	b9a3      	cbnz	r3, 80027ac <HAL_UART_Receive+0x72>
 8002782:	6922      	ldr	r2, [r4, #16]
 8002784:	b972      	cbnz	r2, 80027a4 <HAL_UART_Receive+0x6a>
 8002786:	22ff      	movs	r2, #255	@ 0xff
 8002788:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800278c:	e014      	b.n	80027b8 <HAL_UART_Receive+0x7e>
 800278e:	6922      	ldr	r2, [r4, #16]
 8002790:	b922      	cbnz	r2, 800279c <HAL_UART_Receive+0x62>
 8002792:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002796:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800279a:	e00d      	b.n	80027b8 <HAL_UART_Receive+0x7e>
 800279c:	22ff      	movs	r2, #255	@ 0xff
 800279e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80027a2:	e009      	b.n	80027b8 <HAL_UART_Receive+0x7e>
 80027a4:	227f      	movs	r2, #127	@ 0x7f
 80027a6:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80027aa:	e005      	b.n	80027b8 <HAL_UART_Receive+0x7e>
 80027ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027b0:	d00a      	beq.n	80027c8 <HAL_UART_Receive+0x8e>
 80027b2:	2200      	movs	r2, #0
 80027b4:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 80027b8:	f8b4 805c 	ldrh.w	r8, [r4, #92]	@ 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c0:	d00c      	beq.n	80027dc <HAL_UART_Receive+0xa2>
      pdata16bits = NULL;
 80027c2:	f04f 0900 	mov.w	r9, #0
 80027c6:	e01f      	b.n	8002808 <HAL_UART_Receive+0xce>
    UART_MASK_COMPUTATION(huart);
 80027c8:	6922      	ldr	r2, [r4, #16]
 80027ca:	b91a      	cbnz	r2, 80027d4 <HAL_UART_Receive+0x9a>
 80027cc:	227f      	movs	r2, #127	@ 0x7f
 80027ce:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80027d2:	e7f1      	b.n	80027b8 <HAL_UART_Receive+0x7e>
 80027d4:	223f      	movs	r2, #63	@ 0x3f
 80027d6:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80027da:	e7ed      	b.n	80027b8 <HAL_UART_Receive+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027dc:	6923      	ldr	r3, [r4, #16]
 80027de:	b113      	cbz	r3, 80027e6 <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 80027e0:	f04f 0900 	mov.w	r9, #0
 80027e4:	e010      	b.n	8002808 <HAL_UART_Receive+0xce>
      pdata16bits = (uint16_t *) pData;
 80027e6:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80027e8:	2500      	movs	r5, #0
 80027ea:	e00d      	b.n	8002808 <HAL_UART_Receive+0xce>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027f0:	fa5f f388 	uxtb.w	r3, r8
 80027f4:	4013      	ands	r3, r2
 80027f6:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 80027fa:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 80027fe:	b292      	uxth	r2, r2
 8002800:	3a01      	subs	r2, #1
 8002802:	b292      	uxth	r2, r2
 8002804:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002808:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800280c:	b29b      	uxth	r3, r3
 800280e:	b183      	cbz	r3, 8002832 <HAL_UART_Receive+0xf8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002810:	9600      	str	r6, [sp, #0]
 8002812:	463b      	mov	r3, r7
 8002814:	2200      	movs	r2, #0
 8002816:	2120      	movs	r1, #32
 8002818:	4620      	mov	r0, r4
 800281a:	f7ff fec6 	bl	80025aa <UART_WaitOnFlagUntilTimeout>
 800281e:	b988      	cbnz	r0, 8002844 <HAL_UART_Receive+0x10a>
      if (pdata8bits == NULL)
 8002820:	2d00      	cmp	r5, #0
 8002822:	d1e3      	bne.n	80027ec <HAL_UART_Receive+0xb2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	ea08 0303 	and.w	r3, r8, r3
 800282c:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 8002830:	e7e3      	b.n	80027fa <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 8002832:	2320      	movs	r3, #32
 8002834:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8002838:	2000      	movs	r0, #0
 800283a:	e000      	b.n	800283e <HAL_UART_Receive+0x104>
    return HAL_BUSY;
 800283c:	2002      	movs	r0, #2
}
 800283e:	b003      	add	sp, #12
 8002840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002844:	2003      	movs	r0, #3
 8002846:	e7fa      	b.n	800283e <HAL_UART_Receive+0x104>

08002848 <UART_CheckIdleState>:
{
 8002848:	b530      	push	{r4, r5, lr}
 800284a:	b083      	sub	sp, #12
 800284c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8002854:	f7fe faaa 	bl	8000dac <HAL_GetTick>
 8002858:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800285a:	6822      	ldr	r2, [r4, #0]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	f012 0f08 	tst.w	r2, #8
 8002862:	d10f      	bne.n	8002884 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f013 0f04 	tst.w	r3, #4
 800286c:	d118      	bne.n	80028a0 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800286e:	2320      	movs	r3, #32
 8002870:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002872:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002876:	2000      	movs	r0, #0
 8002878:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800287a:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800287c:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 8002880:	b003      	add	sp, #12
 8002882:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002884:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4603      	mov	r3, r0
 800288c:	2200      	movs	r2, #0
 800288e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002892:	4620      	mov	r0, r4
 8002894:	f7ff fe89 	bl	80025aa <UART_WaitOnFlagUntilTimeout>
 8002898:	2800      	cmp	r0, #0
 800289a:	d0e3      	beq.n	8002864 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800289c:	2003      	movs	r0, #3
 800289e:	e7ef      	b.n	8002880 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	462b      	mov	r3, r5
 80028a8:	2200      	movs	r2, #0
 80028aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff fe7b 	bl	80025aa <UART_WaitOnFlagUntilTimeout>
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d0da      	beq.n	800286e <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80028b8:	2003      	movs	r0, #3
 80028ba:	e7e1      	b.n	8002880 <UART_CheckIdleState+0x38>

080028bc <HAL_UART_Init>:
  if (huart == NULL)
 80028bc:	b368      	cbz	r0, 800291a <HAL_UART_Init+0x5e>
{
 80028be:	b510      	push	{r4, lr}
 80028c0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80028c2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80028c4:	b303      	cbz	r3, 8002908 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80028c6:	2324      	movs	r3, #36	@ 0x24
 80028c8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80028ca:	6822      	ldr	r2, [r4, #0]
 80028cc:	6813      	ldr	r3, [r2, #0]
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028d4:	4620      	mov	r0, r4
 80028d6:	f7ff fc6b 	bl	80021b0 <UART_SetConfig>
 80028da:	2801      	cmp	r0, #1
 80028dc:	d013      	beq.n	8002906 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80028e0:	b9bb      	cbnz	r3, 8002912 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e2:	6822      	ldr	r2, [r4, #0]
 80028e4:	6853      	ldr	r3, [r2, #4]
 80028e6:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80028ea:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ec:	6822      	ldr	r2, [r4, #0]
 80028ee:	6893      	ldr	r3, [r2, #8]
 80028f0:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80028f4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80028f6:	6822      	ldr	r2, [r4, #0]
 80028f8:	6813      	ldr	r3, [r2, #0]
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002900:	4620      	mov	r0, r4
 8002902:	f7ff ffa1 	bl	8002848 <UART_CheckIdleState>
}
 8002906:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002908:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800290c:	f7fe f93c 	bl	8000b88 <HAL_UART_MspInit>
 8002910:	e7d9      	b.n	80028c6 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002912:	4620      	mov	r0, r4
 8002914:	f7ff fde4 	bl	80024e0 <UART_AdvFeatureConfig>
 8002918:	e7e3      	b.n	80028e2 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 800291a:	2001      	movs	r0, #1
}
 800291c:	4770      	bx	lr
	...

08002920 <std>:
 8002920:	2300      	movs	r3, #0
 8002922:	b510      	push	{r4, lr}
 8002924:	4604      	mov	r4, r0
 8002926:	e9c0 3300 	strd	r3, r3, [r0]
 800292a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800292e:	6083      	str	r3, [r0, #8]
 8002930:	8181      	strh	r1, [r0, #12]
 8002932:	6643      	str	r3, [r0, #100]	@ 0x64
 8002934:	81c2      	strh	r2, [r0, #14]
 8002936:	6183      	str	r3, [r0, #24]
 8002938:	4619      	mov	r1, r3
 800293a:	2208      	movs	r2, #8
 800293c:	305c      	adds	r0, #92	@ 0x5c
 800293e:	f000 fab5 	bl	8002eac <memset>
 8002942:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <std+0x58>)
 8002944:	6263      	str	r3, [r4, #36]	@ 0x24
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <std+0x5c>)
 8002948:	62a3      	str	r3, [r4, #40]	@ 0x28
 800294a:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <std+0x60>)
 800294c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800294e:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <std+0x64>)
 8002950:	6323      	str	r3, [r4, #48]	@ 0x30
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <std+0x68>)
 8002954:	6224      	str	r4, [r4, #32]
 8002956:	429c      	cmp	r4, r3
 8002958:	d006      	beq.n	8002968 <std+0x48>
 800295a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800295e:	4294      	cmp	r4, r2
 8002960:	d002      	beq.n	8002968 <std+0x48>
 8002962:	33d0      	adds	r3, #208	@ 0xd0
 8002964:	429c      	cmp	r4, r3
 8002966:	d105      	bne.n	8002974 <std+0x54>
 8002968:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800296c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002970:	f000 bb0e 	b.w	8002f90 <__retarget_lock_init_recursive>
 8002974:	bd10      	pop	{r4, pc}
 8002976:	bf00      	nop
 8002978:	08002cfd 	.word	0x08002cfd
 800297c:	08002d1f 	.word	0x08002d1f
 8002980:	08002d57 	.word	0x08002d57
 8002984:	08002d7b 	.word	0x08002d7b
 8002988:	2000035c 	.word	0x2000035c

0800298c <stdio_exit_handler>:
 800298c:	4a02      	ldr	r2, [pc, #8]	@ (8002998 <stdio_exit_handler+0xc>)
 800298e:	4903      	ldr	r1, [pc, #12]	@ (800299c <stdio_exit_handler+0x10>)
 8002990:	4803      	ldr	r0, [pc, #12]	@ (80029a0 <stdio_exit_handler+0x14>)
 8002992:	f000 b869 	b.w	8002a68 <_fwalk_sglue>
 8002996:	bf00      	nop
 8002998:	20000020 	.word	0x20000020
 800299c:	08003841 	.word	0x08003841
 80029a0:	20000030 	.word	0x20000030

080029a4 <cleanup_stdio>:
 80029a4:	6841      	ldr	r1, [r0, #4]
 80029a6:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <cleanup_stdio+0x34>)
 80029a8:	4299      	cmp	r1, r3
 80029aa:	b510      	push	{r4, lr}
 80029ac:	4604      	mov	r4, r0
 80029ae:	d001      	beq.n	80029b4 <cleanup_stdio+0x10>
 80029b0:	f000 ff46 	bl	8003840 <_fflush_r>
 80029b4:	68a1      	ldr	r1, [r4, #8]
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <cleanup_stdio+0x38>)
 80029b8:	4299      	cmp	r1, r3
 80029ba:	d002      	beq.n	80029c2 <cleanup_stdio+0x1e>
 80029bc:	4620      	mov	r0, r4
 80029be:	f000 ff3f 	bl	8003840 <_fflush_r>
 80029c2:	68e1      	ldr	r1, [r4, #12]
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <cleanup_stdio+0x3c>)
 80029c6:	4299      	cmp	r1, r3
 80029c8:	d004      	beq.n	80029d4 <cleanup_stdio+0x30>
 80029ca:	4620      	mov	r0, r4
 80029cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029d0:	f000 bf36 	b.w	8003840 <_fflush_r>
 80029d4:	bd10      	pop	{r4, pc}
 80029d6:	bf00      	nop
 80029d8:	2000035c 	.word	0x2000035c
 80029dc:	200003c4 	.word	0x200003c4
 80029e0:	2000042c 	.word	0x2000042c

080029e4 <global_stdio_init.part.0>:
 80029e4:	b510      	push	{r4, lr}
 80029e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <global_stdio_init.part.0+0x30>)
 80029e8:	4c0b      	ldr	r4, [pc, #44]	@ (8002a18 <global_stdio_init.part.0+0x34>)
 80029ea:	4a0c      	ldr	r2, [pc, #48]	@ (8002a1c <global_stdio_init.part.0+0x38>)
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	4620      	mov	r0, r4
 80029f0:	2200      	movs	r2, #0
 80029f2:	2104      	movs	r1, #4
 80029f4:	f7ff ff94 	bl	8002920 <std>
 80029f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80029fc:	2201      	movs	r2, #1
 80029fe:	2109      	movs	r1, #9
 8002a00:	f7ff ff8e 	bl	8002920 <std>
 8002a04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002a08:	2202      	movs	r2, #2
 8002a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a0e:	2112      	movs	r1, #18
 8002a10:	f7ff bf86 	b.w	8002920 <std>
 8002a14:	20000494 	.word	0x20000494
 8002a18:	2000035c 	.word	0x2000035c
 8002a1c:	0800298d 	.word	0x0800298d

08002a20 <__sfp_lock_acquire>:
 8002a20:	4801      	ldr	r0, [pc, #4]	@ (8002a28 <__sfp_lock_acquire+0x8>)
 8002a22:	f000 bab6 	b.w	8002f92 <__retarget_lock_acquire_recursive>
 8002a26:	bf00      	nop
 8002a28:	2000049d 	.word	0x2000049d

08002a2c <__sfp_lock_release>:
 8002a2c:	4801      	ldr	r0, [pc, #4]	@ (8002a34 <__sfp_lock_release+0x8>)
 8002a2e:	f000 bab1 	b.w	8002f94 <__retarget_lock_release_recursive>
 8002a32:	bf00      	nop
 8002a34:	2000049d 	.word	0x2000049d

08002a38 <__sinit>:
 8002a38:	b510      	push	{r4, lr}
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	f7ff fff0 	bl	8002a20 <__sfp_lock_acquire>
 8002a40:	6a23      	ldr	r3, [r4, #32]
 8002a42:	b11b      	cbz	r3, 8002a4c <__sinit+0x14>
 8002a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a48:	f7ff bff0 	b.w	8002a2c <__sfp_lock_release>
 8002a4c:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <__sinit+0x28>)
 8002a4e:	6223      	str	r3, [r4, #32]
 8002a50:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <__sinit+0x2c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f5      	bne.n	8002a44 <__sinit+0xc>
 8002a58:	f7ff ffc4 	bl	80029e4 <global_stdio_init.part.0>
 8002a5c:	e7f2      	b.n	8002a44 <__sinit+0xc>
 8002a5e:	bf00      	nop
 8002a60:	080029a5 	.word	0x080029a5
 8002a64:	20000494 	.word	0x20000494

08002a68 <_fwalk_sglue>:
 8002a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a6c:	4607      	mov	r7, r0
 8002a6e:	4688      	mov	r8, r1
 8002a70:	4614      	mov	r4, r2
 8002a72:	2600      	movs	r6, #0
 8002a74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a78:	f1b9 0901 	subs.w	r9, r9, #1
 8002a7c:	d505      	bpl.n	8002a8a <_fwalk_sglue+0x22>
 8002a7e:	6824      	ldr	r4, [r4, #0]
 8002a80:	2c00      	cmp	r4, #0
 8002a82:	d1f7      	bne.n	8002a74 <_fwalk_sglue+0xc>
 8002a84:	4630      	mov	r0, r6
 8002a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a8a:	89ab      	ldrh	r3, [r5, #12]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d907      	bls.n	8002aa0 <_fwalk_sglue+0x38>
 8002a90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a94:	3301      	adds	r3, #1
 8002a96:	d003      	beq.n	8002aa0 <_fwalk_sglue+0x38>
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4638      	mov	r0, r7
 8002a9c:	47c0      	blx	r8
 8002a9e:	4306      	orrs	r6, r0
 8002aa0:	3568      	adds	r5, #104	@ 0x68
 8002aa2:	e7e9      	b.n	8002a78 <_fwalk_sglue+0x10>

08002aa4 <iprintf>:
 8002aa4:	b40f      	push	{r0, r1, r2, r3}
 8002aa6:	b507      	push	{r0, r1, r2, lr}
 8002aa8:	4906      	ldr	r1, [pc, #24]	@ (8002ac4 <iprintf+0x20>)
 8002aaa:	ab04      	add	r3, sp, #16
 8002aac:	6808      	ldr	r0, [r1, #0]
 8002aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ab2:	6881      	ldr	r1, [r0, #8]
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	f000 fb99 	bl	80031ec <_vfiprintf_r>
 8002aba:	b003      	add	sp, #12
 8002abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ac0:	b004      	add	sp, #16
 8002ac2:	4770      	bx	lr
 8002ac4:	2000002c 	.word	0x2000002c

08002ac8 <_puts_r>:
 8002ac8:	6a03      	ldr	r3, [r0, #32]
 8002aca:	b570      	push	{r4, r5, r6, lr}
 8002acc:	6884      	ldr	r4, [r0, #8]
 8002ace:	4605      	mov	r5, r0
 8002ad0:	460e      	mov	r6, r1
 8002ad2:	b90b      	cbnz	r3, 8002ad8 <_puts_r+0x10>
 8002ad4:	f7ff ffb0 	bl	8002a38 <__sinit>
 8002ad8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ada:	07db      	lsls	r3, r3, #31
 8002adc:	d405      	bmi.n	8002aea <_puts_r+0x22>
 8002ade:	89a3      	ldrh	r3, [r4, #12]
 8002ae0:	0598      	lsls	r0, r3, #22
 8002ae2:	d402      	bmi.n	8002aea <_puts_r+0x22>
 8002ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ae6:	f000 fa54 	bl	8002f92 <__retarget_lock_acquire_recursive>
 8002aea:	89a3      	ldrh	r3, [r4, #12]
 8002aec:	0719      	lsls	r1, r3, #28
 8002aee:	d502      	bpl.n	8002af6 <_puts_r+0x2e>
 8002af0:	6923      	ldr	r3, [r4, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d135      	bne.n	8002b62 <_puts_r+0x9a>
 8002af6:	4621      	mov	r1, r4
 8002af8:	4628      	mov	r0, r5
 8002afa:	f000 f981 	bl	8002e00 <__swsetup_r>
 8002afe:	b380      	cbz	r0, 8002b62 <_puts_r+0x9a>
 8002b00:	f04f 35ff 	mov.w	r5, #4294967295
 8002b04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b06:	07da      	lsls	r2, r3, #31
 8002b08:	d405      	bmi.n	8002b16 <_puts_r+0x4e>
 8002b0a:	89a3      	ldrh	r3, [r4, #12]
 8002b0c:	059b      	lsls	r3, r3, #22
 8002b0e:	d402      	bmi.n	8002b16 <_puts_r+0x4e>
 8002b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b12:	f000 fa3f 	bl	8002f94 <__retarget_lock_release_recursive>
 8002b16:	4628      	mov	r0, r5
 8002b18:	bd70      	pop	{r4, r5, r6, pc}
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	da04      	bge.n	8002b28 <_puts_r+0x60>
 8002b1e:	69a2      	ldr	r2, [r4, #24]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	dc17      	bgt.n	8002b54 <_puts_r+0x8c>
 8002b24:	290a      	cmp	r1, #10
 8002b26:	d015      	beq.n	8002b54 <_puts_r+0x8c>
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	6022      	str	r2, [r4, #0]
 8002b2e:	7019      	strb	r1, [r3, #0]
 8002b30:	68a3      	ldr	r3, [r4, #8]
 8002b32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002b36:	3b01      	subs	r3, #1
 8002b38:	60a3      	str	r3, [r4, #8]
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d1ed      	bne.n	8002b1a <_puts_r+0x52>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	da11      	bge.n	8002b66 <_puts_r+0x9e>
 8002b42:	4622      	mov	r2, r4
 8002b44:	210a      	movs	r1, #10
 8002b46:	4628      	mov	r0, r5
 8002b48:	f000 f91b 	bl	8002d82 <__swbuf_r>
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	d0d7      	beq.n	8002b00 <_puts_r+0x38>
 8002b50:	250a      	movs	r5, #10
 8002b52:	e7d7      	b.n	8002b04 <_puts_r+0x3c>
 8002b54:	4622      	mov	r2, r4
 8002b56:	4628      	mov	r0, r5
 8002b58:	f000 f913 	bl	8002d82 <__swbuf_r>
 8002b5c:	3001      	adds	r0, #1
 8002b5e:	d1e7      	bne.n	8002b30 <_puts_r+0x68>
 8002b60:	e7ce      	b.n	8002b00 <_puts_r+0x38>
 8002b62:	3e01      	subs	r6, #1
 8002b64:	e7e4      	b.n	8002b30 <_puts_r+0x68>
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	6022      	str	r2, [r4, #0]
 8002b6c:	220a      	movs	r2, #10
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e7ee      	b.n	8002b50 <_puts_r+0x88>
	...

08002b74 <puts>:
 8002b74:	4b02      	ldr	r3, [pc, #8]	@ (8002b80 <puts+0xc>)
 8002b76:	4601      	mov	r1, r0
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	f7ff bfa5 	b.w	8002ac8 <_puts_r>
 8002b7e:	bf00      	nop
 8002b80:	2000002c 	.word	0x2000002c

08002b84 <setbuf>:
 8002b84:	fab1 f281 	clz	r2, r1
 8002b88:	0952      	lsrs	r2, r2, #5
 8002b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b8e:	0052      	lsls	r2, r2, #1
 8002b90:	f000 b800 	b.w	8002b94 <setvbuf>

08002b94 <setvbuf>:
 8002b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b98:	461d      	mov	r5, r3
 8002b9a:	4b57      	ldr	r3, [pc, #348]	@ (8002cf8 <setvbuf+0x164>)
 8002b9c:	681f      	ldr	r7, [r3, #0]
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	460e      	mov	r6, r1
 8002ba2:	4690      	mov	r8, r2
 8002ba4:	b127      	cbz	r7, 8002bb0 <setvbuf+0x1c>
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	b913      	cbnz	r3, 8002bb0 <setvbuf+0x1c>
 8002baa:	4638      	mov	r0, r7
 8002bac:	f7ff ff44 	bl	8002a38 <__sinit>
 8002bb0:	f1b8 0f02 	cmp.w	r8, #2
 8002bb4:	d006      	beq.n	8002bc4 <setvbuf+0x30>
 8002bb6:	f1b8 0f01 	cmp.w	r8, #1
 8002bba:	f200 809a 	bhi.w	8002cf2 <setvbuf+0x15e>
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	f2c0 8097 	blt.w	8002cf2 <setvbuf+0x15e>
 8002bc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bc6:	07d9      	lsls	r1, r3, #31
 8002bc8:	d405      	bmi.n	8002bd6 <setvbuf+0x42>
 8002bca:	89a3      	ldrh	r3, [r4, #12]
 8002bcc:	059a      	lsls	r2, r3, #22
 8002bce:	d402      	bmi.n	8002bd6 <setvbuf+0x42>
 8002bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bd2:	f000 f9de 	bl	8002f92 <__retarget_lock_acquire_recursive>
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	4638      	mov	r0, r7
 8002bda:	f000 fe31 	bl	8003840 <_fflush_r>
 8002bde:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002be0:	b141      	cbz	r1, 8002bf4 <setvbuf+0x60>
 8002be2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002be6:	4299      	cmp	r1, r3
 8002be8:	d002      	beq.n	8002bf0 <setvbuf+0x5c>
 8002bea:	4638      	mov	r0, r7
 8002bec:	f000 f9d4 	bl	8002f98 <_free_r>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61a3      	str	r3, [r4, #24]
 8002bf8:	6063      	str	r3, [r4, #4]
 8002bfa:	89a3      	ldrh	r3, [r4, #12]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	d503      	bpl.n	8002c08 <setvbuf+0x74>
 8002c00:	6921      	ldr	r1, [r4, #16]
 8002c02:	4638      	mov	r0, r7
 8002c04:	f000 f9c8 	bl	8002f98 <_free_r>
 8002c08:	89a3      	ldrh	r3, [r4, #12]
 8002c0a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	f1b8 0f02 	cmp.w	r8, #2
 8002c16:	81a3      	strh	r3, [r4, #12]
 8002c18:	d061      	beq.n	8002cde <setvbuf+0x14a>
 8002c1a:	ab01      	add	r3, sp, #4
 8002c1c:	466a      	mov	r2, sp
 8002c1e:	4621      	mov	r1, r4
 8002c20:	4638      	mov	r0, r7
 8002c22:	f000 fe35 	bl	8003890 <__swhatbuf_r>
 8002c26:	89a3      	ldrh	r3, [r4, #12]
 8002c28:	4318      	orrs	r0, r3
 8002c2a:	81a0      	strh	r0, [r4, #12]
 8002c2c:	bb2d      	cbnz	r5, 8002c7a <setvbuf+0xe6>
 8002c2e:	9d00      	ldr	r5, [sp, #0]
 8002c30:	4628      	mov	r0, r5
 8002c32:	f000 f9fb 	bl	800302c <malloc>
 8002c36:	4606      	mov	r6, r0
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d152      	bne.n	8002ce2 <setvbuf+0x14e>
 8002c3c:	f8dd 9000 	ldr.w	r9, [sp]
 8002c40:	45a9      	cmp	r9, r5
 8002c42:	d140      	bne.n	8002cc6 <setvbuf+0x132>
 8002c44:	f04f 35ff 	mov.w	r5, #4294967295
 8002c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c4c:	f043 0202 	orr.w	r2, r3, #2
 8002c50:	81a2      	strh	r2, [r4, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	60a2      	str	r2, [r4, #8]
 8002c56:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8002c5a:	6022      	str	r2, [r4, #0]
 8002c5c:	6122      	str	r2, [r4, #16]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	6162      	str	r2, [r4, #20]
 8002c62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002c64:	07d6      	lsls	r6, r2, #31
 8002c66:	d404      	bmi.n	8002c72 <setvbuf+0xde>
 8002c68:	0598      	lsls	r0, r3, #22
 8002c6a:	d402      	bmi.n	8002c72 <setvbuf+0xde>
 8002c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c6e:	f000 f991 	bl	8002f94 <__retarget_lock_release_recursive>
 8002c72:	4628      	mov	r0, r5
 8002c74:	b003      	add	sp, #12
 8002c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c7a:	2e00      	cmp	r6, #0
 8002c7c:	d0d8      	beq.n	8002c30 <setvbuf+0x9c>
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	b913      	cbnz	r3, 8002c88 <setvbuf+0xf4>
 8002c82:	4638      	mov	r0, r7
 8002c84:	f7ff fed8 	bl	8002a38 <__sinit>
 8002c88:	f1b8 0f01 	cmp.w	r8, #1
 8002c8c:	bf08      	it	eq
 8002c8e:	89a3      	ldrheq	r3, [r4, #12]
 8002c90:	6026      	str	r6, [r4, #0]
 8002c92:	bf04      	itt	eq
 8002c94:	f043 0301 	orreq.w	r3, r3, #1
 8002c98:	81a3      	strheq	r3, [r4, #12]
 8002c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c9e:	f013 0208 	ands.w	r2, r3, #8
 8002ca2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002ca6:	d01e      	beq.n	8002ce6 <setvbuf+0x152>
 8002ca8:	07d9      	lsls	r1, r3, #31
 8002caa:	bf41      	itttt	mi
 8002cac:	2200      	movmi	r2, #0
 8002cae:	426d      	negmi	r5, r5
 8002cb0:	60a2      	strmi	r2, [r4, #8]
 8002cb2:	61a5      	strmi	r5, [r4, #24]
 8002cb4:	bf58      	it	pl
 8002cb6:	60a5      	strpl	r5, [r4, #8]
 8002cb8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002cba:	07d2      	lsls	r2, r2, #31
 8002cbc:	d401      	bmi.n	8002cc2 <setvbuf+0x12e>
 8002cbe:	059b      	lsls	r3, r3, #22
 8002cc0:	d513      	bpl.n	8002cea <setvbuf+0x156>
 8002cc2:	2500      	movs	r5, #0
 8002cc4:	e7d5      	b.n	8002c72 <setvbuf+0xde>
 8002cc6:	4648      	mov	r0, r9
 8002cc8:	f000 f9b0 	bl	800302c <malloc>
 8002ccc:	4606      	mov	r6, r0
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d0b8      	beq.n	8002c44 <setvbuf+0xb0>
 8002cd2:	89a3      	ldrh	r3, [r4, #12]
 8002cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cd8:	81a3      	strh	r3, [r4, #12]
 8002cda:	464d      	mov	r5, r9
 8002cdc:	e7cf      	b.n	8002c7e <setvbuf+0xea>
 8002cde:	2500      	movs	r5, #0
 8002ce0:	e7b2      	b.n	8002c48 <setvbuf+0xb4>
 8002ce2:	46a9      	mov	r9, r5
 8002ce4:	e7f5      	b.n	8002cd2 <setvbuf+0x13e>
 8002ce6:	60a2      	str	r2, [r4, #8]
 8002ce8:	e7e6      	b.n	8002cb8 <setvbuf+0x124>
 8002cea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cec:	f000 f952 	bl	8002f94 <__retarget_lock_release_recursive>
 8002cf0:	e7e7      	b.n	8002cc2 <setvbuf+0x12e>
 8002cf2:	f04f 35ff 	mov.w	r5, #4294967295
 8002cf6:	e7bc      	b.n	8002c72 <setvbuf+0xde>
 8002cf8:	2000002c 	.word	0x2000002c

08002cfc <__sread>:
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	460c      	mov	r4, r1
 8002d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d04:	f000 f8fc 	bl	8002f00 <_read_r>
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	bfab      	itete	ge
 8002d0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8002d10:	181b      	addge	r3, r3, r0
 8002d12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002d16:	bfac      	ite	ge
 8002d18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d1a:	81a3      	strhlt	r3, [r4, #12]
 8002d1c:	bd10      	pop	{r4, pc}

08002d1e <__swrite>:
 8002d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d22:	461f      	mov	r7, r3
 8002d24:	898b      	ldrh	r3, [r1, #12]
 8002d26:	05db      	lsls	r3, r3, #23
 8002d28:	4605      	mov	r5, r0
 8002d2a:	460c      	mov	r4, r1
 8002d2c:	4616      	mov	r6, r2
 8002d2e:	d505      	bpl.n	8002d3c <__swrite+0x1e>
 8002d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d34:	2302      	movs	r3, #2
 8002d36:	2200      	movs	r2, #0
 8002d38:	f000 f8d0 	bl	8002edc <_lseek_r>
 8002d3c:	89a3      	ldrh	r3, [r4, #12]
 8002d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d46:	81a3      	strh	r3, [r4, #12]
 8002d48:	4632      	mov	r2, r6
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d52:	f000 b8e7 	b.w	8002f24 <_write_r>

08002d56 <__sseek>:
 8002d56:	b510      	push	{r4, lr}
 8002d58:	460c      	mov	r4, r1
 8002d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d5e:	f000 f8bd 	bl	8002edc <_lseek_r>
 8002d62:	1c43      	adds	r3, r0, #1
 8002d64:	89a3      	ldrh	r3, [r4, #12]
 8002d66:	bf15      	itete	ne
 8002d68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002d6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002d72:	81a3      	strheq	r3, [r4, #12]
 8002d74:	bf18      	it	ne
 8002d76:	81a3      	strhne	r3, [r4, #12]
 8002d78:	bd10      	pop	{r4, pc}

08002d7a <__sclose>:
 8002d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d7e:	f000 b89d 	b.w	8002ebc <_close_r>

08002d82 <__swbuf_r>:
 8002d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d84:	460e      	mov	r6, r1
 8002d86:	4614      	mov	r4, r2
 8002d88:	4605      	mov	r5, r0
 8002d8a:	b118      	cbz	r0, 8002d94 <__swbuf_r+0x12>
 8002d8c:	6a03      	ldr	r3, [r0, #32]
 8002d8e:	b90b      	cbnz	r3, 8002d94 <__swbuf_r+0x12>
 8002d90:	f7ff fe52 	bl	8002a38 <__sinit>
 8002d94:	69a3      	ldr	r3, [r4, #24]
 8002d96:	60a3      	str	r3, [r4, #8]
 8002d98:	89a3      	ldrh	r3, [r4, #12]
 8002d9a:	071a      	lsls	r2, r3, #28
 8002d9c:	d501      	bpl.n	8002da2 <__swbuf_r+0x20>
 8002d9e:	6923      	ldr	r3, [r4, #16]
 8002da0:	b943      	cbnz	r3, 8002db4 <__swbuf_r+0x32>
 8002da2:	4621      	mov	r1, r4
 8002da4:	4628      	mov	r0, r5
 8002da6:	f000 f82b 	bl	8002e00 <__swsetup_r>
 8002daa:	b118      	cbz	r0, 8002db4 <__swbuf_r+0x32>
 8002dac:	f04f 37ff 	mov.w	r7, #4294967295
 8002db0:	4638      	mov	r0, r7
 8002db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	6922      	ldr	r2, [r4, #16]
 8002db8:	1a98      	subs	r0, r3, r2
 8002dba:	6963      	ldr	r3, [r4, #20]
 8002dbc:	b2f6      	uxtb	r6, r6
 8002dbe:	4283      	cmp	r3, r0
 8002dc0:	4637      	mov	r7, r6
 8002dc2:	dc05      	bgt.n	8002dd0 <__swbuf_r+0x4e>
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f000 fd3a 	bl	8003840 <_fflush_r>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d1ed      	bne.n	8002dac <__swbuf_r+0x2a>
 8002dd0:	68a3      	ldr	r3, [r4, #8]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	60a3      	str	r3, [r4, #8]
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	6022      	str	r2, [r4, #0]
 8002ddc:	701e      	strb	r6, [r3, #0]
 8002dde:	6962      	ldr	r2, [r4, #20]
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d004      	beq.n	8002df0 <__swbuf_r+0x6e>
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	07db      	lsls	r3, r3, #31
 8002dea:	d5e1      	bpl.n	8002db0 <__swbuf_r+0x2e>
 8002dec:	2e0a      	cmp	r6, #10
 8002dee:	d1df      	bne.n	8002db0 <__swbuf_r+0x2e>
 8002df0:	4621      	mov	r1, r4
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 fd24 	bl	8003840 <_fflush_r>
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d0d9      	beq.n	8002db0 <__swbuf_r+0x2e>
 8002dfc:	e7d6      	b.n	8002dac <__swbuf_r+0x2a>
	...

08002e00 <__swsetup_r>:
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <__swsetup_r+0xa8>)
 8002e04:	4605      	mov	r5, r0
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	460c      	mov	r4, r1
 8002e0a:	b118      	cbz	r0, 8002e14 <__swsetup_r+0x14>
 8002e0c:	6a03      	ldr	r3, [r0, #32]
 8002e0e:	b90b      	cbnz	r3, 8002e14 <__swsetup_r+0x14>
 8002e10:	f7ff fe12 	bl	8002a38 <__sinit>
 8002e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e18:	0719      	lsls	r1, r3, #28
 8002e1a:	d422      	bmi.n	8002e62 <__swsetup_r+0x62>
 8002e1c:	06da      	lsls	r2, r3, #27
 8002e1e:	d407      	bmi.n	8002e30 <__swsetup_r+0x30>
 8002e20:	2209      	movs	r2, #9
 8002e22:	602a      	str	r2, [r5, #0]
 8002e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e28:	81a3      	strh	r3, [r4, #12]
 8002e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2e:	e033      	b.n	8002e98 <__swsetup_r+0x98>
 8002e30:	0758      	lsls	r0, r3, #29
 8002e32:	d512      	bpl.n	8002e5a <__swsetup_r+0x5a>
 8002e34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e36:	b141      	cbz	r1, 8002e4a <__swsetup_r+0x4a>
 8002e38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e3c:	4299      	cmp	r1, r3
 8002e3e:	d002      	beq.n	8002e46 <__swsetup_r+0x46>
 8002e40:	4628      	mov	r0, r5
 8002e42:	f000 f8a9 	bl	8002f98 <_free_r>
 8002e46:	2300      	movs	r3, #0
 8002e48:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002e50:	81a3      	strh	r3, [r4, #12]
 8002e52:	2300      	movs	r3, #0
 8002e54:	6063      	str	r3, [r4, #4]
 8002e56:	6923      	ldr	r3, [r4, #16]
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	89a3      	ldrh	r3, [r4, #12]
 8002e5c:	f043 0308 	orr.w	r3, r3, #8
 8002e60:	81a3      	strh	r3, [r4, #12]
 8002e62:	6923      	ldr	r3, [r4, #16]
 8002e64:	b94b      	cbnz	r3, 8002e7a <__swsetup_r+0x7a>
 8002e66:	89a3      	ldrh	r3, [r4, #12]
 8002e68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e70:	d003      	beq.n	8002e7a <__swsetup_r+0x7a>
 8002e72:	4621      	mov	r1, r4
 8002e74:	4628      	mov	r0, r5
 8002e76:	f000 fd31 	bl	80038dc <__smakebuf_r>
 8002e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e7e:	f013 0201 	ands.w	r2, r3, #1
 8002e82:	d00a      	beq.n	8002e9a <__swsetup_r+0x9a>
 8002e84:	2200      	movs	r2, #0
 8002e86:	60a2      	str	r2, [r4, #8]
 8002e88:	6962      	ldr	r2, [r4, #20]
 8002e8a:	4252      	negs	r2, r2
 8002e8c:	61a2      	str	r2, [r4, #24]
 8002e8e:	6922      	ldr	r2, [r4, #16]
 8002e90:	b942      	cbnz	r2, 8002ea4 <__swsetup_r+0xa4>
 8002e92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002e96:	d1c5      	bne.n	8002e24 <__swsetup_r+0x24>
 8002e98:	bd38      	pop	{r3, r4, r5, pc}
 8002e9a:	0799      	lsls	r1, r3, #30
 8002e9c:	bf58      	it	pl
 8002e9e:	6962      	ldrpl	r2, [r4, #20]
 8002ea0:	60a2      	str	r2, [r4, #8]
 8002ea2:	e7f4      	b.n	8002e8e <__swsetup_r+0x8e>
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	e7f7      	b.n	8002e98 <__swsetup_r+0x98>
 8002ea8:	2000002c 	.word	0x2000002c

08002eac <memset>:
 8002eac:	4402      	add	r2, r0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d100      	bne.n	8002eb6 <memset+0xa>
 8002eb4:	4770      	bx	lr
 8002eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eba:	e7f9      	b.n	8002eb0 <memset+0x4>

08002ebc <_close_r>:
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	4d06      	ldr	r5, [pc, #24]	@ (8002ed8 <_close_r+0x1c>)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	602b      	str	r3, [r5, #0]
 8002ec8:	f7fd fef0 	bl	8000cac <_close>
 8002ecc:	1c43      	adds	r3, r0, #1
 8002ece:	d102      	bne.n	8002ed6 <_close_r+0x1a>
 8002ed0:	682b      	ldr	r3, [r5, #0]
 8002ed2:	b103      	cbz	r3, 8002ed6 <_close_r+0x1a>
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
 8002ed8:	20000498 	.word	0x20000498

08002edc <_lseek_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4d07      	ldr	r5, [pc, #28]	@ (8002efc <_lseek_r+0x20>)
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	4608      	mov	r0, r1
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	602a      	str	r2, [r5, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f7fd fedf 	bl	8000cae <_lseek>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d102      	bne.n	8002efa <_lseek_r+0x1e>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	b103      	cbz	r3, 8002efa <_lseek_r+0x1e>
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	20000498 	.word	0x20000498

08002f00 <_read_r>:
 8002f00:	b538      	push	{r3, r4, r5, lr}
 8002f02:	4d07      	ldr	r5, [pc, #28]	@ (8002f20 <_read_r+0x20>)
 8002f04:	4604      	mov	r4, r0
 8002f06:	4608      	mov	r0, r1
 8002f08:	4611      	mov	r1, r2
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	602a      	str	r2, [r5, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f7fd febe 	bl	8000c90 <_read>
 8002f14:	1c43      	adds	r3, r0, #1
 8002f16:	d102      	bne.n	8002f1e <_read_r+0x1e>
 8002f18:	682b      	ldr	r3, [r5, #0]
 8002f1a:	b103      	cbz	r3, 8002f1e <_read_r+0x1e>
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	bd38      	pop	{r3, r4, r5, pc}
 8002f20:	20000498 	.word	0x20000498

08002f24 <_write_r>:
 8002f24:	b538      	push	{r3, r4, r5, lr}
 8002f26:	4d07      	ldr	r5, [pc, #28]	@ (8002f44 <_write_r+0x20>)
 8002f28:	4604      	mov	r4, r0
 8002f2a:	4608      	mov	r0, r1
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	2200      	movs	r2, #0
 8002f30:	602a      	str	r2, [r5, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f7fd fea0 	bl	8000c78 <_write>
 8002f38:	1c43      	adds	r3, r0, #1
 8002f3a:	d102      	bne.n	8002f42 <_write_r+0x1e>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	b103      	cbz	r3, 8002f42 <_write_r+0x1e>
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	bd38      	pop	{r3, r4, r5, pc}
 8002f44:	20000498 	.word	0x20000498

08002f48 <__libc_init_array>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002f80 <__libc_init_array+0x38>)
 8002f4c:	4c0d      	ldr	r4, [pc, #52]	@ (8002f84 <__libc_init_array+0x3c>)
 8002f4e:	1b64      	subs	r4, r4, r5
 8002f50:	10a4      	asrs	r4, r4, #2
 8002f52:	2600      	movs	r6, #0
 8002f54:	42a6      	cmp	r6, r4
 8002f56:	d109      	bne.n	8002f6c <__libc_init_array+0x24>
 8002f58:	4d0b      	ldr	r5, [pc, #44]	@ (8002f88 <__libc_init_array+0x40>)
 8002f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8002f8c <__libc_init_array+0x44>)
 8002f5c:	f000 fd3a 	bl	80039d4 <_init>
 8002f60:	1b64      	subs	r4, r4, r5
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	2600      	movs	r6, #0
 8002f66:	42a6      	cmp	r6, r4
 8002f68:	d105      	bne.n	8002f76 <__libc_init_array+0x2e>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f70:	4798      	blx	r3
 8002f72:	3601      	adds	r6, #1
 8002f74:	e7ee      	b.n	8002f54 <__libc_init_array+0xc>
 8002f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7a:	4798      	blx	r3
 8002f7c:	3601      	adds	r6, #1
 8002f7e:	e7f2      	b.n	8002f66 <__libc_init_array+0x1e>
 8002f80:	08003a54 	.word	0x08003a54
 8002f84:	08003a54 	.word	0x08003a54
 8002f88:	08003a54 	.word	0x08003a54
 8002f8c:	08003a58 	.word	0x08003a58

08002f90 <__retarget_lock_init_recursive>:
 8002f90:	4770      	bx	lr

08002f92 <__retarget_lock_acquire_recursive>:
 8002f92:	4770      	bx	lr

08002f94 <__retarget_lock_release_recursive>:
 8002f94:	4770      	bx	lr
	...

08002f98 <_free_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	2900      	cmp	r1, #0
 8002f9e:	d041      	beq.n	8003024 <_free_r+0x8c>
 8002fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa4:	1f0c      	subs	r4, r1, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bfb8      	it	lt
 8002faa:	18e4      	addlt	r4, r4, r3
 8002fac:	f000 f8e8 	bl	8003180 <__malloc_lock>
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003028 <_free_r+0x90>)
 8002fb2:	6813      	ldr	r3, [r2, #0]
 8002fb4:	b933      	cbnz	r3, 8002fc4 <_free_r+0x2c>
 8002fb6:	6063      	str	r3, [r4, #4]
 8002fb8:	6014      	str	r4, [r2, #0]
 8002fba:	4628      	mov	r0, r5
 8002fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fc0:	f000 b8e4 	b.w	800318c <__malloc_unlock>
 8002fc4:	42a3      	cmp	r3, r4
 8002fc6:	d908      	bls.n	8002fda <_free_r+0x42>
 8002fc8:	6820      	ldr	r0, [r4, #0]
 8002fca:	1821      	adds	r1, r4, r0
 8002fcc:	428b      	cmp	r3, r1
 8002fce:	bf01      	itttt	eq
 8002fd0:	6819      	ldreq	r1, [r3, #0]
 8002fd2:	685b      	ldreq	r3, [r3, #4]
 8002fd4:	1809      	addeq	r1, r1, r0
 8002fd6:	6021      	streq	r1, [r4, #0]
 8002fd8:	e7ed      	b.n	8002fb6 <_free_r+0x1e>
 8002fda:	461a      	mov	r2, r3
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	b10b      	cbz	r3, 8002fe4 <_free_r+0x4c>
 8002fe0:	42a3      	cmp	r3, r4
 8002fe2:	d9fa      	bls.n	8002fda <_free_r+0x42>
 8002fe4:	6811      	ldr	r1, [r2, #0]
 8002fe6:	1850      	adds	r0, r2, r1
 8002fe8:	42a0      	cmp	r0, r4
 8002fea:	d10b      	bne.n	8003004 <_free_r+0x6c>
 8002fec:	6820      	ldr	r0, [r4, #0]
 8002fee:	4401      	add	r1, r0
 8002ff0:	1850      	adds	r0, r2, r1
 8002ff2:	4283      	cmp	r3, r0
 8002ff4:	6011      	str	r1, [r2, #0]
 8002ff6:	d1e0      	bne.n	8002fba <_free_r+0x22>
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	6053      	str	r3, [r2, #4]
 8002ffe:	4408      	add	r0, r1
 8003000:	6010      	str	r0, [r2, #0]
 8003002:	e7da      	b.n	8002fba <_free_r+0x22>
 8003004:	d902      	bls.n	800300c <_free_r+0x74>
 8003006:	230c      	movs	r3, #12
 8003008:	602b      	str	r3, [r5, #0]
 800300a:	e7d6      	b.n	8002fba <_free_r+0x22>
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	1821      	adds	r1, r4, r0
 8003010:	428b      	cmp	r3, r1
 8003012:	bf04      	itt	eq
 8003014:	6819      	ldreq	r1, [r3, #0]
 8003016:	685b      	ldreq	r3, [r3, #4]
 8003018:	6063      	str	r3, [r4, #4]
 800301a:	bf04      	itt	eq
 800301c:	1809      	addeq	r1, r1, r0
 800301e:	6021      	streq	r1, [r4, #0]
 8003020:	6054      	str	r4, [r2, #4]
 8003022:	e7ca      	b.n	8002fba <_free_r+0x22>
 8003024:	bd38      	pop	{r3, r4, r5, pc}
 8003026:	bf00      	nop
 8003028:	200004a4 	.word	0x200004a4

0800302c <malloc>:
 800302c:	4b02      	ldr	r3, [pc, #8]	@ (8003038 <malloc+0xc>)
 800302e:	4601      	mov	r1, r0
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	f000 b825 	b.w	8003080 <_malloc_r>
 8003036:	bf00      	nop
 8003038:	2000002c 	.word	0x2000002c

0800303c <sbrk_aligned>:
 800303c:	b570      	push	{r4, r5, r6, lr}
 800303e:	4e0f      	ldr	r6, [pc, #60]	@ (800307c <sbrk_aligned+0x40>)
 8003040:	460c      	mov	r4, r1
 8003042:	6831      	ldr	r1, [r6, #0]
 8003044:	4605      	mov	r5, r0
 8003046:	b911      	cbnz	r1, 800304e <sbrk_aligned+0x12>
 8003048:	f000 fca6 	bl	8003998 <_sbrk_r>
 800304c:	6030      	str	r0, [r6, #0]
 800304e:	4621      	mov	r1, r4
 8003050:	4628      	mov	r0, r5
 8003052:	f000 fca1 	bl	8003998 <_sbrk_r>
 8003056:	1c43      	adds	r3, r0, #1
 8003058:	d103      	bne.n	8003062 <sbrk_aligned+0x26>
 800305a:	f04f 34ff 	mov.w	r4, #4294967295
 800305e:	4620      	mov	r0, r4
 8003060:	bd70      	pop	{r4, r5, r6, pc}
 8003062:	1cc4      	adds	r4, r0, #3
 8003064:	f024 0403 	bic.w	r4, r4, #3
 8003068:	42a0      	cmp	r0, r4
 800306a:	d0f8      	beq.n	800305e <sbrk_aligned+0x22>
 800306c:	1a21      	subs	r1, r4, r0
 800306e:	4628      	mov	r0, r5
 8003070:	f000 fc92 	bl	8003998 <_sbrk_r>
 8003074:	3001      	adds	r0, #1
 8003076:	d1f2      	bne.n	800305e <sbrk_aligned+0x22>
 8003078:	e7ef      	b.n	800305a <sbrk_aligned+0x1e>
 800307a:	bf00      	nop
 800307c:	200004a0 	.word	0x200004a0

08003080 <_malloc_r>:
 8003080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003084:	1ccd      	adds	r5, r1, #3
 8003086:	f025 0503 	bic.w	r5, r5, #3
 800308a:	3508      	adds	r5, #8
 800308c:	2d0c      	cmp	r5, #12
 800308e:	bf38      	it	cc
 8003090:	250c      	movcc	r5, #12
 8003092:	2d00      	cmp	r5, #0
 8003094:	4606      	mov	r6, r0
 8003096:	db01      	blt.n	800309c <_malloc_r+0x1c>
 8003098:	42a9      	cmp	r1, r5
 800309a:	d904      	bls.n	80030a6 <_malloc_r+0x26>
 800309c:	230c      	movs	r3, #12
 800309e:	6033      	str	r3, [r6, #0]
 80030a0:	2000      	movs	r0, #0
 80030a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800317c <_malloc_r+0xfc>
 80030aa:	f000 f869 	bl	8003180 <__malloc_lock>
 80030ae:	f8d8 3000 	ldr.w	r3, [r8]
 80030b2:	461c      	mov	r4, r3
 80030b4:	bb44      	cbnz	r4, 8003108 <_malloc_r+0x88>
 80030b6:	4629      	mov	r1, r5
 80030b8:	4630      	mov	r0, r6
 80030ba:	f7ff ffbf 	bl	800303c <sbrk_aligned>
 80030be:	1c43      	adds	r3, r0, #1
 80030c0:	4604      	mov	r4, r0
 80030c2:	d158      	bne.n	8003176 <_malloc_r+0xf6>
 80030c4:	f8d8 4000 	ldr.w	r4, [r8]
 80030c8:	4627      	mov	r7, r4
 80030ca:	2f00      	cmp	r7, #0
 80030cc:	d143      	bne.n	8003156 <_malloc_r+0xd6>
 80030ce:	2c00      	cmp	r4, #0
 80030d0:	d04b      	beq.n	800316a <_malloc_r+0xea>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	4639      	mov	r1, r7
 80030d6:	4630      	mov	r0, r6
 80030d8:	eb04 0903 	add.w	r9, r4, r3
 80030dc:	f000 fc5c 	bl	8003998 <_sbrk_r>
 80030e0:	4581      	cmp	r9, r0
 80030e2:	d142      	bne.n	800316a <_malloc_r+0xea>
 80030e4:	6821      	ldr	r1, [r4, #0]
 80030e6:	1a6d      	subs	r5, r5, r1
 80030e8:	4629      	mov	r1, r5
 80030ea:	4630      	mov	r0, r6
 80030ec:	f7ff ffa6 	bl	800303c <sbrk_aligned>
 80030f0:	3001      	adds	r0, #1
 80030f2:	d03a      	beq.n	800316a <_malloc_r+0xea>
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	442b      	add	r3, r5
 80030f8:	6023      	str	r3, [r4, #0]
 80030fa:	f8d8 3000 	ldr.w	r3, [r8]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	bb62      	cbnz	r2, 800315c <_malloc_r+0xdc>
 8003102:	f8c8 7000 	str.w	r7, [r8]
 8003106:	e00f      	b.n	8003128 <_malloc_r+0xa8>
 8003108:	6822      	ldr	r2, [r4, #0]
 800310a:	1b52      	subs	r2, r2, r5
 800310c:	d420      	bmi.n	8003150 <_malloc_r+0xd0>
 800310e:	2a0b      	cmp	r2, #11
 8003110:	d917      	bls.n	8003142 <_malloc_r+0xc2>
 8003112:	1961      	adds	r1, r4, r5
 8003114:	42a3      	cmp	r3, r4
 8003116:	6025      	str	r5, [r4, #0]
 8003118:	bf18      	it	ne
 800311a:	6059      	strne	r1, [r3, #4]
 800311c:	6863      	ldr	r3, [r4, #4]
 800311e:	bf08      	it	eq
 8003120:	f8c8 1000 	streq.w	r1, [r8]
 8003124:	5162      	str	r2, [r4, r5]
 8003126:	604b      	str	r3, [r1, #4]
 8003128:	4630      	mov	r0, r6
 800312a:	f000 f82f 	bl	800318c <__malloc_unlock>
 800312e:	f104 000b 	add.w	r0, r4, #11
 8003132:	1d23      	adds	r3, r4, #4
 8003134:	f020 0007 	bic.w	r0, r0, #7
 8003138:	1ac2      	subs	r2, r0, r3
 800313a:	bf1c      	itt	ne
 800313c:	1a1b      	subne	r3, r3, r0
 800313e:	50a3      	strne	r3, [r4, r2]
 8003140:	e7af      	b.n	80030a2 <_malloc_r+0x22>
 8003142:	6862      	ldr	r2, [r4, #4]
 8003144:	42a3      	cmp	r3, r4
 8003146:	bf0c      	ite	eq
 8003148:	f8c8 2000 	streq.w	r2, [r8]
 800314c:	605a      	strne	r2, [r3, #4]
 800314e:	e7eb      	b.n	8003128 <_malloc_r+0xa8>
 8003150:	4623      	mov	r3, r4
 8003152:	6864      	ldr	r4, [r4, #4]
 8003154:	e7ae      	b.n	80030b4 <_malloc_r+0x34>
 8003156:	463c      	mov	r4, r7
 8003158:	687f      	ldr	r7, [r7, #4]
 800315a:	e7b6      	b.n	80030ca <_malloc_r+0x4a>
 800315c:	461a      	mov	r2, r3
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	42a3      	cmp	r3, r4
 8003162:	d1fb      	bne.n	800315c <_malloc_r+0xdc>
 8003164:	2300      	movs	r3, #0
 8003166:	6053      	str	r3, [r2, #4]
 8003168:	e7de      	b.n	8003128 <_malloc_r+0xa8>
 800316a:	230c      	movs	r3, #12
 800316c:	6033      	str	r3, [r6, #0]
 800316e:	4630      	mov	r0, r6
 8003170:	f000 f80c 	bl	800318c <__malloc_unlock>
 8003174:	e794      	b.n	80030a0 <_malloc_r+0x20>
 8003176:	6005      	str	r5, [r0, #0]
 8003178:	e7d6      	b.n	8003128 <_malloc_r+0xa8>
 800317a:	bf00      	nop
 800317c:	200004a4 	.word	0x200004a4

08003180 <__malloc_lock>:
 8003180:	4801      	ldr	r0, [pc, #4]	@ (8003188 <__malloc_lock+0x8>)
 8003182:	f7ff bf06 	b.w	8002f92 <__retarget_lock_acquire_recursive>
 8003186:	bf00      	nop
 8003188:	2000049c 	.word	0x2000049c

0800318c <__malloc_unlock>:
 800318c:	4801      	ldr	r0, [pc, #4]	@ (8003194 <__malloc_unlock+0x8>)
 800318e:	f7ff bf01 	b.w	8002f94 <__retarget_lock_release_recursive>
 8003192:	bf00      	nop
 8003194:	2000049c 	.word	0x2000049c

08003198 <__sfputc_r>:
 8003198:	6893      	ldr	r3, [r2, #8]
 800319a:	3b01      	subs	r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	b410      	push	{r4}
 80031a0:	6093      	str	r3, [r2, #8]
 80031a2:	da08      	bge.n	80031b6 <__sfputc_r+0x1e>
 80031a4:	6994      	ldr	r4, [r2, #24]
 80031a6:	42a3      	cmp	r3, r4
 80031a8:	db01      	blt.n	80031ae <__sfputc_r+0x16>
 80031aa:	290a      	cmp	r1, #10
 80031ac:	d103      	bne.n	80031b6 <__sfputc_r+0x1e>
 80031ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031b2:	f7ff bde6 	b.w	8002d82 <__swbuf_r>
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	1c58      	adds	r0, r3, #1
 80031ba:	6010      	str	r0, [r2, #0]
 80031bc:	7019      	strb	r1, [r3, #0]
 80031be:	4608      	mov	r0, r1
 80031c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <__sfputs_r>:
 80031c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c8:	4606      	mov	r6, r0
 80031ca:	460f      	mov	r7, r1
 80031cc:	4614      	mov	r4, r2
 80031ce:	18d5      	adds	r5, r2, r3
 80031d0:	42ac      	cmp	r4, r5
 80031d2:	d101      	bne.n	80031d8 <__sfputs_r+0x12>
 80031d4:	2000      	movs	r0, #0
 80031d6:	e007      	b.n	80031e8 <__sfputs_r+0x22>
 80031d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031dc:	463a      	mov	r2, r7
 80031de:	4630      	mov	r0, r6
 80031e0:	f7ff ffda 	bl	8003198 <__sfputc_r>
 80031e4:	1c43      	adds	r3, r0, #1
 80031e6:	d1f3      	bne.n	80031d0 <__sfputs_r+0xa>
 80031e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031ec <_vfiprintf_r>:
 80031ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f0:	460d      	mov	r5, r1
 80031f2:	b09d      	sub	sp, #116	@ 0x74
 80031f4:	4614      	mov	r4, r2
 80031f6:	4698      	mov	r8, r3
 80031f8:	4606      	mov	r6, r0
 80031fa:	b118      	cbz	r0, 8003204 <_vfiprintf_r+0x18>
 80031fc:	6a03      	ldr	r3, [r0, #32]
 80031fe:	b90b      	cbnz	r3, 8003204 <_vfiprintf_r+0x18>
 8003200:	f7ff fc1a 	bl	8002a38 <__sinit>
 8003204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003206:	07d9      	lsls	r1, r3, #31
 8003208:	d405      	bmi.n	8003216 <_vfiprintf_r+0x2a>
 800320a:	89ab      	ldrh	r3, [r5, #12]
 800320c:	059a      	lsls	r2, r3, #22
 800320e:	d402      	bmi.n	8003216 <_vfiprintf_r+0x2a>
 8003210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003212:	f7ff febe 	bl	8002f92 <__retarget_lock_acquire_recursive>
 8003216:	89ab      	ldrh	r3, [r5, #12]
 8003218:	071b      	lsls	r3, r3, #28
 800321a:	d501      	bpl.n	8003220 <_vfiprintf_r+0x34>
 800321c:	692b      	ldr	r3, [r5, #16]
 800321e:	b99b      	cbnz	r3, 8003248 <_vfiprintf_r+0x5c>
 8003220:	4629      	mov	r1, r5
 8003222:	4630      	mov	r0, r6
 8003224:	f7ff fdec 	bl	8002e00 <__swsetup_r>
 8003228:	b170      	cbz	r0, 8003248 <_vfiprintf_r+0x5c>
 800322a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800322c:	07dc      	lsls	r4, r3, #31
 800322e:	d504      	bpl.n	800323a <_vfiprintf_r+0x4e>
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	b01d      	add	sp, #116	@ 0x74
 8003236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800323a:	89ab      	ldrh	r3, [r5, #12]
 800323c:	0598      	lsls	r0, r3, #22
 800323e:	d4f7      	bmi.n	8003230 <_vfiprintf_r+0x44>
 8003240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003242:	f7ff fea7 	bl	8002f94 <__retarget_lock_release_recursive>
 8003246:	e7f3      	b.n	8003230 <_vfiprintf_r+0x44>
 8003248:	2300      	movs	r3, #0
 800324a:	9309      	str	r3, [sp, #36]	@ 0x24
 800324c:	2320      	movs	r3, #32
 800324e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003252:	f8cd 800c 	str.w	r8, [sp, #12]
 8003256:	2330      	movs	r3, #48	@ 0x30
 8003258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003408 <_vfiprintf_r+0x21c>
 800325c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003260:	f04f 0901 	mov.w	r9, #1
 8003264:	4623      	mov	r3, r4
 8003266:	469a      	mov	sl, r3
 8003268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800326c:	b10a      	cbz	r2, 8003272 <_vfiprintf_r+0x86>
 800326e:	2a25      	cmp	r2, #37	@ 0x25
 8003270:	d1f9      	bne.n	8003266 <_vfiprintf_r+0x7a>
 8003272:	ebba 0b04 	subs.w	fp, sl, r4
 8003276:	d00b      	beq.n	8003290 <_vfiprintf_r+0xa4>
 8003278:	465b      	mov	r3, fp
 800327a:	4622      	mov	r2, r4
 800327c:	4629      	mov	r1, r5
 800327e:	4630      	mov	r0, r6
 8003280:	f7ff ffa1 	bl	80031c6 <__sfputs_r>
 8003284:	3001      	adds	r0, #1
 8003286:	f000 80a7 	beq.w	80033d8 <_vfiprintf_r+0x1ec>
 800328a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800328c:	445a      	add	r2, fp
 800328e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003290:	f89a 3000 	ldrb.w	r3, [sl]
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 809f 	beq.w	80033d8 <_vfiprintf_r+0x1ec>
 800329a:	2300      	movs	r3, #0
 800329c:	f04f 32ff 	mov.w	r2, #4294967295
 80032a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032a4:	f10a 0a01 	add.w	sl, sl, #1
 80032a8:	9304      	str	r3, [sp, #16]
 80032aa:	9307      	str	r3, [sp, #28]
 80032ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80032b2:	4654      	mov	r4, sl
 80032b4:	2205      	movs	r2, #5
 80032b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ba:	4853      	ldr	r0, [pc, #332]	@ (8003408 <_vfiprintf_r+0x21c>)
 80032bc:	f7fc ffc0 	bl	8000240 <memchr>
 80032c0:	9a04      	ldr	r2, [sp, #16]
 80032c2:	b9d8      	cbnz	r0, 80032fc <_vfiprintf_r+0x110>
 80032c4:	06d1      	lsls	r1, r2, #27
 80032c6:	bf44      	itt	mi
 80032c8:	2320      	movmi	r3, #32
 80032ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032ce:	0713      	lsls	r3, r2, #28
 80032d0:	bf44      	itt	mi
 80032d2:	232b      	movmi	r3, #43	@ 0x2b
 80032d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032d8:	f89a 3000 	ldrb.w	r3, [sl]
 80032dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80032de:	d015      	beq.n	800330c <_vfiprintf_r+0x120>
 80032e0:	9a07      	ldr	r2, [sp, #28]
 80032e2:	4654      	mov	r4, sl
 80032e4:	2000      	movs	r0, #0
 80032e6:	f04f 0c0a 	mov.w	ip, #10
 80032ea:	4621      	mov	r1, r4
 80032ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032f0:	3b30      	subs	r3, #48	@ 0x30
 80032f2:	2b09      	cmp	r3, #9
 80032f4:	d94b      	bls.n	800338e <_vfiprintf_r+0x1a2>
 80032f6:	b1b0      	cbz	r0, 8003326 <_vfiprintf_r+0x13a>
 80032f8:	9207      	str	r2, [sp, #28]
 80032fa:	e014      	b.n	8003326 <_vfiprintf_r+0x13a>
 80032fc:	eba0 0308 	sub.w	r3, r0, r8
 8003300:	fa09 f303 	lsl.w	r3, r9, r3
 8003304:	4313      	orrs	r3, r2
 8003306:	9304      	str	r3, [sp, #16]
 8003308:	46a2      	mov	sl, r4
 800330a:	e7d2      	b.n	80032b2 <_vfiprintf_r+0xc6>
 800330c:	9b03      	ldr	r3, [sp, #12]
 800330e:	1d19      	adds	r1, r3, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	9103      	str	r1, [sp, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	bfbb      	ittet	lt
 8003318:	425b      	neglt	r3, r3
 800331a:	f042 0202 	orrlt.w	r2, r2, #2
 800331e:	9307      	strge	r3, [sp, #28]
 8003320:	9307      	strlt	r3, [sp, #28]
 8003322:	bfb8      	it	lt
 8003324:	9204      	strlt	r2, [sp, #16]
 8003326:	7823      	ldrb	r3, [r4, #0]
 8003328:	2b2e      	cmp	r3, #46	@ 0x2e
 800332a:	d10a      	bne.n	8003342 <_vfiprintf_r+0x156>
 800332c:	7863      	ldrb	r3, [r4, #1]
 800332e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003330:	d132      	bne.n	8003398 <_vfiprintf_r+0x1ac>
 8003332:	9b03      	ldr	r3, [sp, #12]
 8003334:	1d1a      	adds	r2, r3, #4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	9203      	str	r2, [sp, #12]
 800333a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800333e:	3402      	adds	r4, #2
 8003340:	9305      	str	r3, [sp, #20]
 8003342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003418 <_vfiprintf_r+0x22c>
 8003346:	7821      	ldrb	r1, [r4, #0]
 8003348:	2203      	movs	r2, #3
 800334a:	4650      	mov	r0, sl
 800334c:	f7fc ff78 	bl	8000240 <memchr>
 8003350:	b138      	cbz	r0, 8003362 <_vfiprintf_r+0x176>
 8003352:	9b04      	ldr	r3, [sp, #16]
 8003354:	eba0 000a 	sub.w	r0, r0, sl
 8003358:	2240      	movs	r2, #64	@ 0x40
 800335a:	4082      	lsls	r2, r0
 800335c:	4313      	orrs	r3, r2
 800335e:	3401      	adds	r4, #1
 8003360:	9304      	str	r3, [sp, #16]
 8003362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003366:	4829      	ldr	r0, [pc, #164]	@ (800340c <_vfiprintf_r+0x220>)
 8003368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800336c:	2206      	movs	r2, #6
 800336e:	f7fc ff67 	bl	8000240 <memchr>
 8003372:	2800      	cmp	r0, #0
 8003374:	d03f      	beq.n	80033f6 <_vfiprintf_r+0x20a>
 8003376:	4b26      	ldr	r3, [pc, #152]	@ (8003410 <_vfiprintf_r+0x224>)
 8003378:	bb1b      	cbnz	r3, 80033c2 <_vfiprintf_r+0x1d6>
 800337a:	9b03      	ldr	r3, [sp, #12]
 800337c:	3307      	adds	r3, #7
 800337e:	f023 0307 	bic.w	r3, r3, #7
 8003382:	3308      	adds	r3, #8
 8003384:	9303      	str	r3, [sp, #12]
 8003386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003388:	443b      	add	r3, r7
 800338a:	9309      	str	r3, [sp, #36]	@ 0x24
 800338c:	e76a      	b.n	8003264 <_vfiprintf_r+0x78>
 800338e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003392:	460c      	mov	r4, r1
 8003394:	2001      	movs	r0, #1
 8003396:	e7a8      	b.n	80032ea <_vfiprintf_r+0xfe>
 8003398:	2300      	movs	r3, #0
 800339a:	3401      	adds	r4, #1
 800339c:	9305      	str	r3, [sp, #20]
 800339e:	4619      	mov	r1, r3
 80033a0:	f04f 0c0a 	mov.w	ip, #10
 80033a4:	4620      	mov	r0, r4
 80033a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033aa:	3a30      	subs	r2, #48	@ 0x30
 80033ac:	2a09      	cmp	r2, #9
 80033ae:	d903      	bls.n	80033b8 <_vfiprintf_r+0x1cc>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0c6      	beq.n	8003342 <_vfiprintf_r+0x156>
 80033b4:	9105      	str	r1, [sp, #20]
 80033b6:	e7c4      	b.n	8003342 <_vfiprintf_r+0x156>
 80033b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80033bc:	4604      	mov	r4, r0
 80033be:	2301      	movs	r3, #1
 80033c0:	e7f0      	b.n	80033a4 <_vfiprintf_r+0x1b8>
 80033c2:	ab03      	add	r3, sp, #12
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	462a      	mov	r2, r5
 80033c8:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <_vfiprintf_r+0x228>)
 80033ca:	a904      	add	r1, sp, #16
 80033cc:	4630      	mov	r0, r6
 80033ce:	f3af 8000 	nop.w
 80033d2:	4607      	mov	r7, r0
 80033d4:	1c78      	adds	r0, r7, #1
 80033d6:	d1d6      	bne.n	8003386 <_vfiprintf_r+0x19a>
 80033d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033da:	07d9      	lsls	r1, r3, #31
 80033dc:	d405      	bmi.n	80033ea <_vfiprintf_r+0x1fe>
 80033de:	89ab      	ldrh	r3, [r5, #12]
 80033e0:	059a      	lsls	r2, r3, #22
 80033e2:	d402      	bmi.n	80033ea <_vfiprintf_r+0x1fe>
 80033e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033e6:	f7ff fdd5 	bl	8002f94 <__retarget_lock_release_recursive>
 80033ea:	89ab      	ldrh	r3, [r5, #12]
 80033ec:	065b      	lsls	r3, r3, #25
 80033ee:	f53f af1f 	bmi.w	8003230 <_vfiprintf_r+0x44>
 80033f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80033f4:	e71e      	b.n	8003234 <_vfiprintf_r+0x48>
 80033f6:	ab03      	add	r3, sp, #12
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	462a      	mov	r2, r5
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <_vfiprintf_r+0x228>)
 80033fe:	a904      	add	r1, sp, #16
 8003400:	4630      	mov	r0, r6
 8003402:	f000 f879 	bl	80034f8 <_printf_i>
 8003406:	e7e4      	b.n	80033d2 <_vfiprintf_r+0x1e6>
 8003408:	08003a19 	.word	0x08003a19
 800340c:	08003a23 	.word	0x08003a23
 8003410:	00000000 	.word	0x00000000
 8003414:	080031c7 	.word	0x080031c7
 8003418:	08003a1f 	.word	0x08003a1f

0800341c <_printf_common>:
 800341c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003420:	4616      	mov	r6, r2
 8003422:	4698      	mov	r8, r3
 8003424:	688a      	ldr	r2, [r1, #8]
 8003426:	690b      	ldr	r3, [r1, #16]
 8003428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800342c:	4293      	cmp	r3, r2
 800342e:	bfb8      	it	lt
 8003430:	4613      	movlt	r3, r2
 8003432:	6033      	str	r3, [r6, #0]
 8003434:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003438:	4607      	mov	r7, r0
 800343a:	460c      	mov	r4, r1
 800343c:	b10a      	cbz	r2, 8003442 <_printf_common+0x26>
 800343e:	3301      	adds	r3, #1
 8003440:	6033      	str	r3, [r6, #0]
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	0699      	lsls	r1, r3, #26
 8003446:	bf42      	ittt	mi
 8003448:	6833      	ldrmi	r3, [r6, #0]
 800344a:	3302      	addmi	r3, #2
 800344c:	6033      	strmi	r3, [r6, #0]
 800344e:	6825      	ldr	r5, [r4, #0]
 8003450:	f015 0506 	ands.w	r5, r5, #6
 8003454:	d106      	bne.n	8003464 <_printf_common+0x48>
 8003456:	f104 0a19 	add.w	sl, r4, #25
 800345a:	68e3      	ldr	r3, [r4, #12]
 800345c:	6832      	ldr	r2, [r6, #0]
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	42ab      	cmp	r3, r5
 8003462:	dc26      	bgt.n	80034b2 <_printf_common+0x96>
 8003464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003468:	6822      	ldr	r2, [r4, #0]
 800346a:	3b00      	subs	r3, #0
 800346c:	bf18      	it	ne
 800346e:	2301      	movne	r3, #1
 8003470:	0692      	lsls	r2, r2, #26
 8003472:	d42b      	bmi.n	80034cc <_printf_common+0xb0>
 8003474:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003478:	4641      	mov	r1, r8
 800347a:	4638      	mov	r0, r7
 800347c:	47c8      	blx	r9
 800347e:	3001      	adds	r0, #1
 8003480:	d01e      	beq.n	80034c0 <_printf_common+0xa4>
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	6922      	ldr	r2, [r4, #16]
 8003486:	f003 0306 	and.w	r3, r3, #6
 800348a:	2b04      	cmp	r3, #4
 800348c:	bf02      	ittt	eq
 800348e:	68e5      	ldreq	r5, [r4, #12]
 8003490:	6833      	ldreq	r3, [r6, #0]
 8003492:	1aed      	subeq	r5, r5, r3
 8003494:	68a3      	ldr	r3, [r4, #8]
 8003496:	bf0c      	ite	eq
 8003498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800349c:	2500      	movne	r5, #0
 800349e:	4293      	cmp	r3, r2
 80034a0:	bfc4      	itt	gt
 80034a2:	1a9b      	subgt	r3, r3, r2
 80034a4:	18ed      	addgt	r5, r5, r3
 80034a6:	2600      	movs	r6, #0
 80034a8:	341a      	adds	r4, #26
 80034aa:	42b5      	cmp	r5, r6
 80034ac:	d11a      	bne.n	80034e4 <_printf_common+0xc8>
 80034ae:	2000      	movs	r0, #0
 80034b0:	e008      	b.n	80034c4 <_printf_common+0xa8>
 80034b2:	2301      	movs	r3, #1
 80034b4:	4652      	mov	r2, sl
 80034b6:	4641      	mov	r1, r8
 80034b8:	4638      	mov	r0, r7
 80034ba:	47c8      	blx	r9
 80034bc:	3001      	adds	r0, #1
 80034be:	d103      	bne.n	80034c8 <_printf_common+0xac>
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c8:	3501      	adds	r5, #1
 80034ca:	e7c6      	b.n	800345a <_printf_common+0x3e>
 80034cc:	18e1      	adds	r1, r4, r3
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	2030      	movs	r0, #48	@ 0x30
 80034d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034d6:	4422      	add	r2, r4
 80034d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034e0:	3302      	adds	r3, #2
 80034e2:	e7c7      	b.n	8003474 <_printf_common+0x58>
 80034e4:	2301      	movs	r3, #1
 80034e6:	4622      	mov	r2, r4
 80034e8:	4641      	mov	r1, r8
 80034ea:	4638      	mov	r0, r7
 80034ec:	47c8      	blx	r9
 80034ee:	3001      	adds	r0, #1
 80034f0:	d0e6      	beq.n	80034c0 <_printf_common+0xa4>
 80034f2:	3601      	adds	r6, #1
 80034f4:	e7d9      	b.n	80034aa <_printf_common+0x8e>
	...

080034f8 <_printf_i>:
 80034f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034fc:	7e0f      	ldrb	r7, [r1, #24]
 80034fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003500:	2f78      	cmp	r7, #120	@ 0x78
 8003502:	4691      	mov	r9, r2
 8003504:	4680      	mov	r8, r0
 8003506:	460c      	mov	r4, r1
 8003508:	469a      	mov	sl, r3
 800350a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800350e:	d807      	bhi.n	8003520 <_printf_i+0x28>
 8003510:	2f62      	cmp	r7, #98	@ 0x62
 8003512:	d80a      	bhi.n	800352a <_printf_i+0x32>
 8003514:	2f00      	cmp	r7, #0
 8003516:	f000 80d2 	beq.w	80036be <_printf_i+0x1c6>
 800351a:	2f58      	cmp	r7, #88	@ 0x58
 800351c:	f000 80b9 	beq.w	8003692 <_printf_i+0x19a>
 8003520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003524:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003528:	e03a      	b.n	80035a0 <_printf_i+0xa8>
 800352a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800352e:	2b15      	cmp	r3, #21
 8003530:	d8f6      	bhi.n	8003520 <_printf_i+0x28>
 8003532:	a101      	add	r1, pc, #4	@ (adr r1, 8003538 <_printf_i+0x40>)
 8003534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003538:	08003591 	.word	0x08003591
 800353c:	080035a5 	.word	0x080035a5
 8003540:	08003521 	.word	0x08003521
 8003544:	08003521 	.word	0x08003521
 8003548:	08003521 	.word	0x08003521
 800354c:	08003521 	.word	0x08003521
 8003550:	080035a5 	.word	0x080035a5
 8003554:	08003521 	.word	0x08003521
 8003558:	08003521 	.word	0x08003521
 800355c:	08003521 	.word	0x08003521
 8003560:	08003521 	.word	0x08003521
 8003564:	080036a5 	.word	0x080036a5
 8003568:	080035cf 	.word	0x080035cf
 800356c:	0800365f 	.word	0x0800365f
 8003570:	08003521 	.word	0x08003521
 8003574:	08003521 	.word	0x08003521
 8003578:	080036c7 	.word	0x080036c7
 800357c:	08003521 	.word	0x08003521
 8003580:	080035cf 	.word	0x080035cf
 8003584:	08003521 	.word	0x08003521
 8003588:	08003521 	.word	0x08003521
 800358c:	08003667 	.word	0x08003667
 8003590:	6833      	ldr	r3, [r6, #0]
 8003592:	1d1a      	adds	r2, r3, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6032      	str	r2, [r6, #0]
 8003598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800359c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035a0:	2301      	movs	r3, #1
 80035a2:	e09d      	b.n	80036e0 <_printf_i+0x1e8>
 80035a4:	6833      	ldr	r3, [r6, #0]
 80035a6:	6820      	ldr	r0, [r4, #0]
 80035a8:	1d19      	adds	r1, r3, #4
 80035aa:	6031      	str	r1, [r6, #0]
 80035ac:	0606      	lsls	r6, r0, #24
 80035ae:	d501      	bpl.n	80035b4 <_printf_i+0xbc>
 80035b0:	681d      	ldr	r5, [r3, #0]
 80035b2:	e003      	b.n	80035bc <_printf_i+0xc4>
 80035b4:	0645      	lsls	r5, r0, #25
 80035b6:	d5fb      	bpl.n	80035b0 <_printf_i+0xb8>
 80035b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035bc:	2d00      	cmp	r5, #0
 80035be:	da03      	bge.n	80035c8 <_printf_i+0xd0>
 80035c0:	232d      	movs	r3, #45	@ 0x2d
 80035c2:	426d      	negs	r5, r5
 80035c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035c8:	4859      	ldr	r0, [pc, #356]	@ (8003730 <_printf_i+0x238>)
 80035ca:	230a      	movs	r3, #10
 80035cc:	e011      	b.n	80035f2 <_printf_i+0xfa>
 80035ce:	6821      	ldr	r1, [r4, #0]
 80035d0:	6833      	ldr	r3, [r6, #0]
 80035d2:	0608      	lsls	r0, r1, #24
 80035d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80035d8:	d402      	bmi.n	80035e0 <_printf_i+0xe8>
 80035da:	0649      	lsls	r1, r1, #25
 80035dc:	bf48      	it	mi
 80035de:	b2ad      	uxthmi	r5, r5
 80035e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80035e2:	4853      	ldr	r0, [pc, #332]	@ (8003730 <_printf_i+0x238>)
 80035e4:	6033      	str	r3, [r6, #0]
 80035e6:	bf14      	ite	ne
 80035e8:	230a      	movne	r3, #10
 80035ea:	2308      	moveq	r3, #8
 80035ec:	2100      	movs	r1, #0
 80035ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035f2:	6866      	ldr	r6, [r4, #4]
 80035f4:	60a6      	str	r6, [r4, #8]
 80035f6:	2e00      	cmp	r6, #0
 80035f8:	bfa2      	ittt	ge
 80035fa:	6821      	ldrge	r1, [r4, #0]
 80035fc:	f021 0104 	bicge.w	r1, r1, #4
 8003600:	6021      	strge	r1, [r4, #0]
 8003602:	b90d      	cbnz	r5, 8003608 <_printf_i+0x110>
 8003604:	2e00      	cmp	r6, #0
 8003606:	d04b      	beq.n	80036a0 <_printf_i+0x1a8>
 8003608:	4616      	mov	r6, r2
 800360a:	fbb5 f1f3 	udiv	r1, r5, r3
 800360e:	fb03 5711 	mls	r7, r3, r1, r5
 8003612:	5dc7      	ldrb	r7, [r0, r7]
 8003614:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003618:	462f      	mov	r7, r5
 800361a:	42bb      	cmp	r3, r7
 800361c:	460d      	mov	r5, r1
 800361e:	d9f4      	bls.n	800360a <_printf_i+0x112>
 8003620:	2b08      	cmp	r3, #8
 8003622:	d10b      	bne.n	800363c <_printf_i+0x144>
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	07df      	lsls	r7, r3, #31
 8003628:	d508      	bpl.n	800363c <_printf_i+0x144>
 800362a:	6923      	ldr	r3, [r4, #16]
 800362c:	6861      	ldr	r1, [r4, #4]
 800362e:	4299      	cmp	r1, r3
 8003630:	bfde      	ittt	le
 8003632:	2330      	movle	r3, #48	@ 0x30
 8003634:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003638:	f106 36ff 	addle.w	r6, r6, #4294967295
 800363c:	1b92      	subs	r2, r2, r6
 800363e:	6122      	str	r2, [r4, #16]
 8003640:	f8cd a000 	str.w	sl, [sp]
 8003644:	464b      	mov	r3, r9
 8003646:	aa03      	add	r2, sp, #12
 8003648:	4621      	mov	r1, r4
 800364a:	4640      	mov	r0, r8
 800364c:	f7ff fee6 	bl	800341c <_printf_common>
 8003650:	3001      	adds	r0, #1
 8003652:	d14a      	bne.n	80036ea <_printf_i+0x1f2>
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	b004      	add	sp, #16
 800365a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	f043 0320 	orr.w	r3, r3, #32
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	4833      	ldr	r0, [pc, #204]	@ (8003734 <_printf_i+0x23c>)
 8003668:	2778      	movs	r7, #120	@ 0x78
 800366a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	6831      	ldr	r1, [r6, #0]
 8003672:	061f      	lsls	r7, r3, #24
 8003674:	f851 5b04 	ldr.w	r5, [r1], #4
 8003678:	d402      	bmi.n	8003680 <_printf_i+0x188>
 800367a:	065f      	lsls	r7, r3, #25
 800367c:	bf48      	it	mi
 800367e:	b2ad      	uxthmi	r5, r5
 8003680:	6031      	str	r1, [r6, #0]
 8003682:	07d9      	lsls	r1, r3, #31
 8003684:	bf44      	itt	mi
 8003686:	f043 0320 	orrmi.w	r3, r3, #32
 800368a:	6023      	strmi	r3, [r4, #0]
 800368c:	b11d      	cbz	r5, 8003696 <_printf_i+0x19e>
 800368e:	2310      	movs	r3, #16
 8003690:	e7ac      	b.n	80035ec <_printf_i+0xf4>
 8003692:	4827      	ldr	r0, [pc, #156]	@ (8003730 <_printf_i+0x238>)
 8003694:	e7e9      	b.n	800366a <_printf_i+0x172>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	f023 0320 	bic.w	r3, r3, #32
 800369c:	6023      	str	r3, [r4, #0]
 800369e:	e7f6      	b.n	800368e <_printf_i+0x196>
 80036a0:	4616      	mov	r6, r2
 80036a2:	e7bd      	b.n	8003620 <_printf_i+0x128>
 80036a4:	6833      	ldr	r3, [r6, #0]
 80036a6:	6825      	ldr	r5, [r4, #0]
 80036a8:	6961      	ldr	r1, [r4, #20]
 80036aa:	1d18      	adds	r0, r3, #4
 80036ac:	6030      	str	r0, [r6, #0]
 80036ae:	062e      	lsls	r6, r5, #24
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	d501      	bpl.n	80036b8 <_printf_i+0x1c0>
 80036b4:	6019      	str	r1, [r3, #0]
 80036b6:	e002      	b.n	80036be <_printf_i+0x1c6>
 80036b8:	0668      	lsls	r0, r5, #25
 80036ba:	d5fb      	bpl.n	80036b4 <_printf_i+0x1bc>
 80036bc:	8019      	strh	r1, [r3, #0]
 80036be:	2300      	movs	r3, #0
 80036c0:	6123      	str	r3, [r4, #16]
 80036c2:	4616      	mov	r6, r2
 80036c4:	e7bc      	b.n	8003640 <_printf_i+0x148>
 80036c6:	6833      	ldr	r3, [r6, #0]
 80036c8:	1d1a      	adds	r2, r3, #4
 80036ca:	6032      	str	r2, [r6, #0]
 80036cc:	681e      	ldr	r6, [r3, #0]
 80036ce:	6862      	ldr	r2, [r4, #4]
 80036d0:	2100      	movs	r1, #0
 80036d2:	4630      	mov	r0, r6
 80036d4:	f7fc fdb4 	bl	8000240 <memchr>
 80036d8:	b108      	cbz	r0, 80036de <_printf_i+0x1e6>
 80036da:	1b80      	subs	r0, r0, r6
 80036dc:	6060      	str	r0, [r4, #4]
 80036de:	6863      	ldr	r3, [r4, #4]
 80036e0:	6123      	str	r3, [r4, #16]
 80036e2:	2300      	movs	r3, #0
 80036e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036e8:	e7aa      	b.n	8003640 <_printf_i+0x148>
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	4632      	mov	r2, r6
 80036ee:	4649      	mov	r1, r9
 80036f0:	4640      	mov	r0, r8
 80036f2:	47d0      	blx	sl
 80036f4:	3001      	adds	r0, #1
 80036f6:	d0ad      	beq.n	8003654 <_printf_i+0x15c>
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	079b      	lsls	r3, r3, #30
 80036fc:	d413      	bmi.n	8003726 <_printf_i+0x22e>
 80036fe:	68e0      	ldr	r0, [r4, #12]
 8003700:	9b03      	ldr	r3, [sp, #12]
 8003702:	4298      	cmp	r0, r3
 8003704:	bfb8      	it	lt
 8003706:	4618      	movlt	r0, r3
 8003708:	e7a6      	b.n	8003658 <_printf_i+0x160>
 800370a:	2301      	movs	r3, #1
 800370c:	4632      	mov	r2, r6
 800370e:	4649      	mov	r1, r9
 8003710:	4640      	mov	r0, r8
 8003712:	47d0      	blx	sl
 8003714:	3001      	adds	r0, #1
 8003716:	d09d      	beq.n	8003654 <_printf_i+0x15c>
 8003718:	3501      	adds	r5, #1
 800371a:	68e3      	ldr	r3, [r4, #12]
 800371c:	9903      	ldr	r1, [sp, #12]
 800371e:	1a5b      	subs	r3, r3, r1
 8003720:	42ab      	cmp	r3, r5
 8003722:	dcf2      	bgt.n	800370a <_printf_i+0x212>
 8003724:	e7eb      	b.n	80036fe <_printf_i+0x206>
 8003726:	2500      	movs	r5, #0
 8003728:	f104 0619 	add.w	r6, r4, #25
 800372c:	e7f5      	b.n	800371a <_printf_i+0x222>
 800372e:	bf00      	nop
 8003730:	08003a2a 	.word	0x08003a2a
 8003734:	08003a3b 	.word	0x08003a3b

08003738 <__sflush_r>:
 8003738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800373c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003740:	0716      	lsls	r6, r2, #28
 8003742:	4605      	mov	r5, r0
 8003744:	460c      	mov	r4, r1
 8003746:	d454      	bmi.n	80037f2 <__sflush_r+0xba>
 8003748:	684b      	ldr	r3, [r1, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	dc02      	bgt.n	8003754 <__sflush_r+0x1c>
 800374e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	dd48      	ble.n	80037e6 <__sflush_r+0xae>
 8003754:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003756:	2e00      	cmp	r6, #0
 8003758:	d045      	beq.n	80037e6 <__sflush_r+0xae>
 800375a:	2300      	movs	r3, #0
 800375c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003760:	682f      	ldr	r7, [r5, #0]
 8003762:	6a21      	ldr	r1, [r4, #32]
 8003764:	602b      	str	r3, [r5, #0]
 8003766:	d030      	beq.n	80037ca <__sflush_r+0x92>
 8003768:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	0759      	lsls	r1, r3, #29
 800376e:	d505      	bpl.n	800377c <__sflush_r+0x44>
 8003770:	6863      	ldr	r3, [r4, #4]
 8003772:	1ad2      	subs	r2, r2, r3
 8003774:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003776:	b10b      	cbz	r3, 800377c <__sflush_r+0x44>
 8003778:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800377a:	1ad2      	subs	r2, r2, r3
 800377c:	2300      	movs	r3, #0
 800377e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003780:	6a21      	ldr	r1, [r4, #32]
 8003782:	4628      	mov	r0, r5
 8003784:	47b0      	blx	r6
 8003786:	1c43      	adds	r3, r0, #1
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	d106      	bne.n	800379a <__sflush_r+0x62>
 800378c:	6829      	ldr	r1, [r5, #0]
 800378e:	291d      	cmp	r1, #29
 8003790:	d82b      	bhi.n	80037ea <__sflush_r+0xb2>
 8003792:	4a2a      	ldr	r2, [pc, #168]	@ (800383c <__sflush_r+0x104>)
 8003794:	410a      	asrs	r2, r1
 8003796:	07d6      	lsls	r6, r2, #31
 8003798:	d427      	bmi.n	80037ea <__sflush_r+0xb2>
 800379a:	2200      	movs	r2, #0
 800379c:	6062      	str	r2, [r4, #4]
 800379e:	04d9      	lsls	r1, r3, #19
 80037a0:	6922      	ldr	r2, [r4, #16]
 80037a2:	6022      	str	r2, [r4, #0]
 80037a4:	d504      	bpl.n	80037b0 <__sflush_r+0x78>
 80037a6:	1c42      	adds	r2, r0, #1
 80037a8:	d101      	bne.n	80037ae <__sflush_r+0x76>
 80037aa:	682b      	ldr	r3, [r5, #0]
 80037ac:	b903      	cbnz	r3, 80037b0 <__sflush_r+0x78>
 80037ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80037b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037b2:	602f      	str	r7, [r5, #0]
 80037b4:	b1b9      	cbz	r1, 80037e6 <__sflush_r+0xae>
 80037b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037ba:	4299      	cmp	r1, r3
 80037bc:	d002      	beq.n	80037c4 <__sflush_r+0x8c>
 80037be:	4628      	mov	r0, r5
 80037c0:	f7ff fbea 	bl	8002f98 <_free_r>
 80037c4:	2300      	movs	r3, #0
 80037c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80037c8:	e00d      	b.n	80037e6 <__sflush_r+0xae>
 80037ca:	2301      	movs	r3, #1
 80037cc:	4628      	mov	r0, r5
 80037ce:	47b0      	blx	r6
 80037d0:	4602      	mov	r2, r0
 80037d2:	1c50      	adds	r0, r2, #1
 80037d4:	d1c9      	bne.n	800376a <__sflush_r+0x32>
 80037d6:	682b      	ldr	r3, [r5, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0c6      	beq.n	800376a <__sflush_r+0x32>
 80037dc:	2b1d      	cmp	r3, #29
 80037de:	d001      	beq.n	80037e4 <__sflush_r+0xac>
 80037e0:	2b16      	cmp	r3, #22
 80037e2:	d11e      	bne.n	8003822 <__sflush_r+0xea>
 80037e4:	602f      	str	r7, [r5, #0]
 80037e6:	2000      	movs	r0, #0
 80037e8:	e022      	b.n	8003830 <__sflush_r+0xf8>
 80037ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037ee:	b21b      	sxth	r3, r3
 80037f0:	e01b      	b.n	800382a <__sflush_r+0xf2>
 80037f2:	690f      	ldr	r7, [r1, #16]
 80037f4:	2f00      	cmp	r7, #0
 80037f6:	d0f6      	beq.n	80037e6 <__sflush_r+0xae>
 80037f8:	0793      	lsls	r3, r2, #30
 80037fa:	680e      	ldr	r6, [r1, #0]
 80037fc:	bf08      	it	eq
 80037fe:	694b      	ldreq	r3, [r1, #20]
 8003800:	600f      	str	r7, [r1, #0]
 8003802:	bf18      	it	ne
 8003804:	2300      	movne	r3, #0
 8003806:	eba6 0807 	sub.w	r8, r6, r7
 800380a:	608b      	str	r3, [r1, #8]
 800380c:	f1b8 0f00 	cmp.w	r8, #0
 8003810:	dde9      	ble.n	80037e6 <__sflush_r+0xae>
 8003812:	6a21      	ldr	r1, [r4, #32]
 8003814:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003816:	4643      	mov	r3, r8
 8003818:	463a      	mov	r2, r7
 800381a:	4628      	mov	r0, r5
 800381c:	47b0      	blx	r6
 800381e:	2800      	cmp	r0, #0
 8003820:	dc08      	bgt.n	8003834 <__sflush_r+0xfc>
 8003822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800382a:	81a3      	strh	r3, [r4, #12]
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003834:	4407      	add	r7, r0
 8003836:	eba8 0800 	sub.w	r8, r8, r0
 800383a:	e7e7      	b.n	800380c <__sflush_r+0xd4>
 800383c:	dfbffffe 	.word	0xdfbffffe

08003840 <_fflush_r>:
 8003840:	b538      	push	{r3, r4, r5, lr}
 8003842:	690b      	ldr	r3, [r1, #16]
 8003844:	4605      	mov	r5, r0
 8003846:	460c      	mov	r4, r1
 8003848:	b913      	cbnz	r3, 8003850 <_fflush_r+0x10>
 800384a:	2500      	movs	r5, #0
 800384c:	4628      	mov	r0, r5
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	b118      	cbz	r0, 800385a <_fflush_r+0x1a>
 8003852:	6a03      	ldr	r3, [r0, #32]
 8003854:	b90b      	cbnz	r3, 800385a <_fflush_r+0x1a>
 8003856:	f7ff f8ef 	bl	8002a38 <__sinit>
 800385a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f3      	beq.n	800384a <_fflush_r+0xa>
 8003862:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003864:	07d0      	lsls	r0, r2, #31
 8003866:	d404      	bmi.n	8003872 <_fflush_r+0x32>
 8003868:	0599      	lsls	r1, r3, #22
 800386a:	d402      	bmi.n	8003872 <_fflush_r+0x32>
 800386c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800386e:	f7ff fb90 	bl	8002f92 <__retarget_lock_acquire_recursive>
 8003872:	4628      	mov	r0, r5
 8003874:	4621      	mov	r1, r4
 8003876:	f7ff ff5f 	bl	8003738 <__sflush_r>
 800387a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800387c:	07da      	lsls	r2, r3, #31
 800387e:	4605      	mov	r5, r0
 8003880:	d4e4      	bmi.n	800384c <_fflush_r+0xc>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	059b      	lsls	r3, r3, #22
 8003886:	d4e1      	bmi.n	800384c <_fflush_r+0xc>
 8003888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800388a:	f7ff fb83 	bl	8002f94 <__retarget_lock_release_recursive>
 800388e:	e7dd      	b.n	800384c <_fflush_r+0xc>

08003890 <__swhatbuf_r>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	460c      	mov	r4, r1
 8003894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003898:	2900      	cmp	r1, #0
 800389a:	b096      	sub	sp, #88	@ 0x58
 800389c:	4615      	mov	r5, r2
 800389e:	461e      	mov	r6, r3
 80038a0:	da0d      	bge.n	80038be <__swhatbuf_r+0x2e>
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80038a8:	f04f 0100 	mov.w	r1, #0
 80038ac:	bf14      	ite	ne
 80038ae:	2340      	movne	r3, #64	@ 0x40
 80038b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80038b4:	2000      	movs	r0, #0
 80038b6:	6031      	str	r1, [r6, #0]
 80038b8:	602b      	str	r3, [r5, #0]
 80038ba:	b016      	add	sp, #88	@ 0x58
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
 80038be:	466a      	mov	r2, sp
 80038c0:	f000 f848 	bl	8003954 <_fstat_r>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	dbec      	blt.n	80038a2 <__swhatbuf_r+0x12>
 80038c8:	9901      	ldr	r1, [sp, #4]
 80038ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80038ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80038d2:	4259      	negs	r1, r3
 80038d4:	4159      	adcs	r1, r3
 80038d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038da:	e7eb      	b.n	80038b4 <__swhatbuf_r+0x24>

080038dc <__smakebuf_r>:
 80038dc:	898b      	ldrh	r3, [r1, #12]
 80038de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038e0:	079d      	lsls	r5, r3, #30
 80038e2:	4606      	mov	r6, r0
 80038e4:	460c      	mov	r4, r1
 80038e6:	d507      	bpl.n	80038f8 <__smakebuf_r+0x1c>
 80038e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80038ec:	6023      	str	r3, [r4, #0]
 80038ee:	6123      	str	r3, [r4, #16]
 80038f0:	2301      	movs	r3, #1
 80038f2:	6163      	str	r3, [r4, #20]
 80038f4:	b003      	add	sp, #12
 80038f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f8:	ab01      	add	r3, sp, #4
 80038fa:	466a      	mov	r2, sp
 80038fc:	f7ff ffc8 	bl	8003890 <__swhatbuf_r>
 8003900:	9f00      	ldr	r7, [sp, #0]
 8003902:	4605      	mov	r5, r0
 8003904:	4639      	mov	r1, r7
 8003906:	4630      	mov	r0, r6
 8003908:	f7ff fbba 	bl	8003080 <_malloc_r>
 800390c:	b948      	cbnz	r0, 8003922 <__smakebuf_r+0x46>
 800390e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003912:	059a      	lsls	r2, r3, #22
 8003914:	d4ee      	bmi.n	80038f4 <__smakebuf_r+0x18>
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	f043 0302 	orr.w	r3, r3, #2
 800391e:	81a3      	strh	r3, [r4, #12]
 8003920:	e7e2      	b.n	80038e8 <__smakebuf_r+0xc>
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	6020      	str	r0, [r4, #0]
 8003926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800392a:	81a3      	strh	r3, [r4, #12]
 800392c:	9b01      	ldr	r3, [sp, #4]
 800392e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003932:	b15b      	cbz	r3, 800394c <__smakebuf_r+0x70>
 8003934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003938:	4630      	mov	r0, r6
 800393a:	f000 f81d 	bl	8003978 <_isatty_r>
 800393e:	b128      	cbz	r0, 800394c <__smakebuf_r+0x70>
 8003940:	89a3      	ldrh	r3, [r4, #12]
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	81a3      	strh	r3, [r4, #12]
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	431d      	orrs	r5, r3
 8003950:	81a5      	strh	r5, [r4, #12]
 8003952:	e7cf      	b.n	80038f4 <__smakebuf_r+0x18>

08003954 <_fstat_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4d07      	ldr	r5, [pc, #28]	@ (8003974 <_fstat_r+0x20>)
 8003958:	2300      	movs	r3, #0
 800395a:	4604      	mov	r4, r0
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	602b      	str	r3, [r5, #0]
 8003962:	f7fd f9a5 	bl	8000cb0 <_fstat>
 8003966:	1c43      	adds	r3, r0, #1
 8003968:	d102      	bne.n	8003970 <_fstat_r+0x1c>
 800396a:	682b      	ldr	r3, [r5, #0]
 800396c:	b103      	cbz	r3, 8003970 <_fstat_r+0x1c>
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	bd38      	pop	{r3, r4, r5, pc}
 8003972:	bf00      	nop
 8003974:	20000498 	.word	0x20000498

08003978 <_isatty_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4d06      	ldr	r5, [pc, #24]	@ (8003994 <_isatty_r+0x1c>)
 800397c:	2300      	movs	r3, #0
 800397e:	4604      	mov	r4, r0
 8003980:	4608      	mov	r0, r1
 8003982:	602b      	str	r3, [r5, #0]
 8003984:	f7fd f995 	bl	8000cb2 <_isatty>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d102      	bne.n	8003992 <_isatty_r+0x1a>
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	b103      	cbz	r3, 8003992 <_isatty_r+0x1a>
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	20000498 	.word	0x20000498

08003998 <_sbrk_r>:
 8003998:	b538      	push	{r3, r4, r5, lr}
 800399a:	4d06      	ldr	r5, [pc, #24]	@ (80039b4 <_sbrk_r+0x1c>)
 800399c:	2300      	movs	r3, #0
 800399e:	4604      	mov	r4, r0
 80039a0:	4608      	mov	r0, r1
 80039a2:	602b      	str	r3, [r5, #0]
 80039a4:	f000 f808 	bl	80039b8 <_sbrk>
 80039a8:	1c43      	adds	r3, r0, #1
 80039aa:	d102      	bne.n	80039b2 <_sbrk_r+0x1a>
 80039ac:	682b      	ldr	r3, [r5, #0]
 80039ae:	b103      	cbz	r3, 80039b2 <_sbrk_r+0x1a>
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	bd38      	pop	{r3, r4, r5, pc}
 80039b4:	20000498 	.word	0x20000498

080039b8 <_sbrk>:
 80039b8:	4a04      	ldr	r2, [pc, #16]	@ (80039cc <_sbrk+0x14>)
 80039ba:	6811      	ldr	r1, [r2, #0]
 80039bc:	4603      	mov	r3, r0
 80039be:	b909      	cbnz	r1, 80039c4 <_sbrk+0xc>
 80039c0:	4903      	ldr	r1, [pc, #12]	@ (80039d0 <_sbrk+0x18>)
 80039c2:	6011      	str	r1, [r2, #0]
 80039c4:	6810      	ldr	r0, [r2, #0]
 80039c6:	4403      	add	r3, r0
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4770      	bx	lr
 80039cc:	200004a8 	.word	0x200004a8
 80039d0:	200004b0 	.word	0x200004b0

080039d4 <_init>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	bf00      	nop
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr

080039e0 <_fini>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	bf00      	nop
 80039e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e6:	bc08      	pop	{r3}
 80039e8:	469e      	mov	lr, r3
 80039ea:	4770      	bx	lr
