
FinalTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .apptext      00000000  00000000  00000000  0000507c  2**0
                  CONTENTS
  2 .apptext      00000000  080001f8  080001f8  0000507c  2**0
                  CONTENTS
  3 .text         00002da8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000050  08002fa8  08002fa8  00003fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08002ff8  08002ff8  0000507c  2**0
                  CONTENTS
  6 .ARM          00000008  08002ff8  08002ff8  00003ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08003000  08003000  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08003000  08003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08003004  08003004  00004004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000007c  20000000  08003008  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000748  2000007c  08003084  0000507c  2**2
                  ALLOC
 12 ._user_heap_stack 00000404  200007c4  08003084  000057c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ed33  00000000  00000000  000050aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d10  00000000  00000000  00013ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000550b  00000000  00000000  00015aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000918  00000000  00000000  0001aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000006d9  00000000  00000000  0001b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00001d78  00000000  00000000  0001bfe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00010df1  00000000  00000000  0001dd61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011c393  00000000  00000000  0002eb52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0014aee5  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00002064  00000000  00000000  0014af28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000050  00000000  00000000  0014cf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08002f90 	.word	0x08002f90

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08002f90 	.word	0x08002f90

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005d4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <SCB_EnableICache+0x2c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005e4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005e8:	695a      	ldr	r2, [r3, #20]
 80005ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80005ee:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005f4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000600:	b410      	push	{r4}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <SCB_EnableDCache+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800060a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800060e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000612:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000616:	e000      	b.n	800061a <SCB_EnableDCache+0x1a>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000618:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800061a:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000622:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8000626:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800062a:	490b      	ldr	r1, [pc, #44]	@ (8000658 <SCB_EnableDCache+0x58>)
 800062c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8000630:	4613      	mov	r3, r2
 8000632:	3a01      	subs	r2, #1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f2      	bne.n	800061e <SCB_EnableDCache+0x1e>
    } while(sets-- != 0U);
 8000638:	1e43      	subs	r3, r0, #1
 800063a:	2800      	cmp	r0, #0
 800063c:	d1ec      	bne.n	8000618 <SCB_EnableDCache+0x18>
 800063e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000642:	694b      	ldr	r3, [r1, #20]
 8000644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000648:	614b      	str	r3, [r1, #20]
 800064a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800064e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 800065c:	b500      	push	{lr}
 800065e:	b093      	sub	sp, #76	@ 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000668:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000672:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000674:	2219      	movs	r2, #25
 8000676:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000678:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 800067c:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067e:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000680:	2309      	movs	r3, #9
 8000682:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	930c      	str	r3, [sp, #48]	@ 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000688:	4668      	mov	r0, sp
 800068a:	f000 fcd9 	bl	8001040 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800068e:	b100      	cbz	r0, 8000692 <SystemClock_Config+0x36>
    while(1) { ; }
 8000690:	e7fe      	b.n	8000690 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000692:	f000 fc97 	bl	8000fc4 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8000696:	b100      	cbz	r0, 800069a <SystemClock_Config+0x3e>
    while(1) { ; }
 8000698:	e7fe      	b.n	8000698 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800069a:	230f      	movs	r3, #15
 800069c:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006aa:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b0:	9311      	str	r3, [sp, #68]	@ 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80006b2:	2107      	movs	r1, #7
 80006b4:	a80d      	add	r0, sp, #52	@ 0x34
 80006b6:	f000 ff39 	bl	800152c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 80006ba:	b100      	cbz	r0, 80006be <SystemClock_Config+0x62>
    while(1) { ; }
 80006bc:	e7fe      	b.n	80006bc <SystemClock_Config+0x60>
  }
}
 80006be:	b013      	add	sp, #76	@ 0x4c
 80006c0:	f85d fb04 	ldr.w	pc, [sp], #4

080006c4 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 80006c4:	b508      	push	{r3, lr}
  /* Enable I-Cache */
  SCB_EnableICache();
 80006c6:	f7ff ff83 	bl	80005d0 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 80006ca:	f7ff ff99 	bl	8000600 <SCB_EnableDCache>
}
 80006ce:	bd08      	pop	{r3, pc}

080006d0 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 80006d0:	b0a4      	sub	sp, #144	@ 0x90
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b9f      	ldr	r3, [pc, #636]	@ (8000950 <Clock_Inits+0x280>)
 80006d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006d6:	f042 0201 	orr.w	r2, r2, #1
 80006da:	631a      	str	r2, [r3, #48]	@ 0x30
 80006dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006de:	f002 0201 	and.w	r2, r2, #1
 80006e2:	9201      	str	r2, [sp, #4]
 80006e4:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006e8:	f042 0202 	orr.w	r2, r2, #2
 80006ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80006ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006f0:	f002 0202 	and.w	r2, r2, #2
 80006f4:	9202      	str	r2, [sp, #8]
 80006f6:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006fa:	f042 0204 	orr.w	r2, r2, #4
 80006fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000702:	f002 0204 	and.w	r2, r2, #4
 8000706:	9203      	str	r2, [sp, #12]
 8000708:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800070c:	f042 0208 	orr.w	r2, r2, #8
 8000710:	631a      	str	r2, [r3, #48]	@ 0x30
 8000712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000714:	f002 0208 	and.w	r2, r2, #8
 8000718:	9204      	str	r2, [sp, #16]
 800071a:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800071c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800071e:	f042 0210 	orr.w	r2, r2, #16
 8000722:	631a      	str	r2, [r3, #48]	@ 0x30
 8000724:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000726:	f002 0210 	and.w	r2, r2, #16
 800072a:	9205      	str	r2, [sp, #20]
 800072c:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800072e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000730:	f042 0220 	orr.w	r2, r2, #32
 8000734:	631a      	str	r2, [r3, #48]	@ 0x30
 8000736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000738:	f002 0220 	and.w	r2, r2, #32
 800073c:	9206      	str	r2, [sp, #24]
 800073e:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000740:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000742:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000746:	631a      	str	r2, [r3, #48]	@ 0x30
 8000748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800074a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800074e:	9207      	str	r2, [sp, #28]
 8000750:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000754:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000758:	631a      	str	r2, [r3, #48]	@ 0x30
 800075a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800075c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000760:	9208      	str	r2, [sp, #32]
 8000762:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000766:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800076a:	631a      	str	r2, [r3, #48]	@ 0x30
 800076c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800076e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000772:	9209      	str	r2, [sp, #36]	@ 0x24
 8000774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8000776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800077c:	631a      	str	r2, [r3, #48]	@ 0x30
 800077e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000780:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000784:	920a      	str	r2, [sp, #40]	@ 0x28
 8000786:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800078a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800078e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000792:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8000796:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000798:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800079c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80007a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007a4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80007a8:	920c      	str	r2, [sp, #48]	@ 0x30
 80007aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	__HAL_RCC_TIM1_CLK_ENABLE();
 80007ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007ae:	f042 0201 	orr.w	r2, r2, #1
 80007b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80007b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007b6:	f002 0201 	and.w	r2, r2, #1
 80007ba:	920d      	str	r2, [sp, #52]	@ 0x34
 80007bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
	__HAL_RCC_TIM2_CLK_ENABLE();
 80007be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007c0:	f042 0201 	orr.w	r2, r2, #1
 80007c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80007c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007c8:	f002 0201 	and.w	r2, r2, #1
 80007cc:	920e      	str	r2, [sp, #56]	@ 0x38
 80007ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
	__HAL_RCC_TIM3_CLK_ENABLE();
 80007d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007d2:	f042 0202 	orr.w	r2, r2, #2
 80007d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80007d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007da:	f002 0202 	and.w	r2, r2, #2
 80007de:	920f      	str	r2, [sp, #60]	@ 0x3c
 80007e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
	__HAL_RCC_TIM4_CLK_ENABLE();
 80007e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007e4:	f042 0204 	orr.w	r2, r2, #4
 80007e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80007ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007ec:	f002 0204 	and.w	r2, r2, #4
 80007f0:	9210      	str	r2, [sp, #64]	@ 0x40
 80007f2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
	__HAL_RCC_TIM5_CLK_ENABLE();
 80007f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007f6:	f042 0208 	orr.w	r2, r2, #8
 80007fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80007fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007fe:	f002 0208 	and.w	r2, r2, #8
 8000802:	9211      	str	r2, [sp, #68]	@ 0x44
 8000804:	9a11      	ldr	r2, [sp, #68]	@ 0x44
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000808:	f042 0210 	orr.w	r2, r2, #16
 800080c:	641a      	str	r2, [r3, #64]	@ 0x40
 800080e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000810:	f002 0210 	and.w	r2, r2, #16
 8000814:	9212      	str	r2, [sp, #72]	@ 0x48
 8000816:	9a12      	ldr	r2, [sp, #72]	@ 0x48
	__HAL_RCC_TIM7_CLK_ENABLE();
 8000818:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800081a:	f042 0220 	orr.w	r2, r2, #32
 800081e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000820:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000822:	f002 0220 	and.w	r2, r2, #32
 8000826:	9213      	str	r2, [sp, #76]	@ 0x4c
 8000828:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
	__HAL_RCC_TIM8_CLK_ENABLE();
 800082a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800082c:	f042 0202 	orr.w	r2, r2, #2
 8000830:	645a      	str	r2, [r3, #68]	@ 0x44
 8000832:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000834:	f002 0202 	and.w	r2, r2, #2
 8000838:	9214      	str	r2, [sp, #80]	@ 0x50
 800083a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
	__HAL_RCC_TIM9_CLK_ENABLE();
 800083c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800083e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000842:	645a      	str	r2, [r3, #68]	@ 0x44
 8000844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000846:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 800084a:	9215      	str	r2, [sp, #84]	@ 0x54
 800084c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
	__HAL_RCC_TIM10_CLK_ENABLE();
 800084e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000850:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000854:	645a      	str	r2, [r3, #68]	@ 0x44
 8000856:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000858:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800085c:	9216      	str	r2, [sp, #88]	@ 0x58
 800085e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
	__HAL_RCC_TIM11_CLK_ENABLE();
 8000860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000862:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000866:	645a      	str	r2, [r3, #68]	@ 0x44
 8000868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800086a:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800086e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8000870:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
	__HAL_RCC_TIM12_CLK_ENABLE();
 8000872:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000874:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000878:	641a      	str	r2, [r3, #64]	@ 0x40
 800087a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800087c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000880:	9218      	str	r2, [sp, #96]	@ 0x60
 8000882:	9a18      	ldr	r2, [sp, #96]	@ 0x60
	__HAL_RCC_TIM13_CLK_ENABLE();
 8000884:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000886:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800088a:	641a      	str	r2, [r3, #64]	@ 0x40
 800088c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800088e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000892:	9219      	str	r2, [sp, #100]	@ 0x64
 8000894:	9a19      	ldr	r2, [sp, #100]	@ 0x64
	__HAL_RCC_TIM14_CLK_ENABLE();
 8000896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800089c:	641a      	str	r2, [r3, #64]	@ 0x40
 800089e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008a0:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80008a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80008a6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 80008a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80008ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80008b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008b2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80008b6:	921b      	str	r2, [sp, #108]	@ 0x6c
 80008b8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 80008ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008bc:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80008c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80008c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008c4:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80008c8:	921c      	str	r2, [sp, #112]	@ 0x70
 80008ca:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
	__HAL_RCC_ADC1_CLK_ENABLE();
 80008cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80008d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80008d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008d6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80008da:	921d      	str	r2, [sp, #116]	@ 0x74
 80008dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
	__HAL_RCC_ADC2_CLK_ENABLE();
 80008de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80008e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80008e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008e8:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80008ec:	921e      	str	r2, [sp, #120]	@ 0x78
 80008ee:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
	__HAL_RCC_ADC3_CLK_ENABLE();
 80008f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80008f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80008f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008fa:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 80008fe:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000900:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000902:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000904:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000908:	631a      	str	r2, [r3, #48]	@ 0x30
 800090a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800090c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8000910:	9220      	str	r2, [sp, #128]	@ 0x80
 8000912:	9a20      	ldr	r2, [sp, #128]	@ 0x80
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000916:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800091a:	631a      	str	r2, [r3, #48]	@ 0x30
 800091c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800091e:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000922:	9221      	str	r2, [sp, #132]	@ 0x84
 8000924:	9a21      	ldr	r2, [sp, #132]	@ 0x84

	// JPEG Clock
	__HAL_RCC_JPEG_CLK_ENABLE();
 8000926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000928:	f042 0202 	orr.w	r2, r2, #2
 800092c:	635a      	str	r2, [r3, #52]	@ 0x34
 800092e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000930:	f002 0202 	and.w	r2, r2, #2
 8000934:	9222      	str	r2, [sp, #136]	@ 0x88
 8000936:	9a22      	ldr	r2, [sp, #136]	@ 0x88

	// DMA2D Clock
	__HAL_RCC_DMA2D_CLK_ENABLE();
 8000938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800093a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800093e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000946:	9323      	str	r3, [sp, #140]	@ 0x8c
 8000948:	9b23      	ldr	r3, [sp, #140]	@ 0x8c

}
 800094a:	b024      	add	sp, #144	@ 0x90
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <Sys_Init>:
void Sys_Init(void) {
 8000954:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 8000956:	f7ff feb5 	bl	80006c4 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800095a:	f000 f99b 	bl	8000c94 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 800095e:	f7ff fe7d 	bl	800065c <SystemClock_Config>
	Clock_Inits();
 8000962:	f7ff feb5 	bl	80006d0 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 8000966:	4a06      	ldr	r2, [pc, #24]	@ (8000980 <Sys_Init+0x2c>)
 8000968:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800096c:	4805      	ldr	r0, [pc, #20]	@ (8000984 <Sys_Init+0x30>)
 800096e:	f000 f90b 	bl	8000b88 <initUart>
	setbuf(stdout, NULL);
 8000972:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <Sys_Init+0x34>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2100      	movs	r1, #0
 8000978:	6898      	ldr	r0, [r3, #8]
 800097a:	f001 fbd3 	bl	8002124 <setbuf>
}
 800097e:	bd08      	pop	{r3, pc}
 8000980:	40011000 	.word	0x40011000
 8000984:	200005e8 	.word	0x200005e8
 8000988:	2000002c 	.word	0x2000002c

0800098c <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 800098c:	b508      	push	{r3, lr}
  HAL_IncTick();
 800098e:	f000 f997 	bl	8000cc0 <HAL_IncTick>
}
 8000992:	bd08      	pop	{r3, pc}

08000994 <inc>:
//#define WRITE
#define READ

void inc(uint8_t * a)
{
	(*a) += incSize;
 8000994:	7803      	ldrb	r3, [r0, #0]
 8000996:	4a02      	ldr	r2, [pc, #8]	@ (80009a0 <inc+0xc>)
 8000998:	7812      	ldrb	r2, [r2, #0]
 800099a:	4413      	add	r3, r2
 800099c:	7003      	strb	r3, [r0, #0]
}
 800099e:	4770      	bx	lr
 80009a0:	20000098 	.word	0x20000098

080009a4 <main>:

static uint8_t func[1000];

int main(void){
 80009a4:	b510      	push	{r4, lr}
 80009a6:	b082      	sub	sp, #8

	Sys_Init();
 80009a8:	f7ff ffd4 	bl	8000954 <Sys_Init>

	// Read the README in the base directory of this project.
	spi_flash_interface_initialize_SPI();
 80009ac:	f000 f862 	bl	8000a74 <spi_flash_interface_initialize_SPI>

	memcpy(func, inc-1, 1000);
 80009b0:	4c0c      	ldr	r4, [pc, #48]	@ (80009e4 <main+0x40>)
 80009b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009b6:	490c      	ldr	r1, [pc, #48]	@ (80009e8 <main+0x44>)
 80009b8:	3901      	subs	r1, #1
 80009ba:	1d20      	adds	r0, r4, #4
 80009bc:	f001 fd27 	bl	800240e <memcpy>
	uint8_t x = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f88d 3007 	strb.w	r3, [sp, #7]

	void (*myFunc)(uint8_t * );
	myFunc = (void (*)(uint8_t * )) (func-1);
 80009c6:	3403      	adds	r4, #3
#ifdef READ
		// spi_flash_read_page(read_buf, sizeof(data_to_write), 0x300);

		//printf("%d\r\n", spi_flash_read_status_register());

		++incSize;
 80009c8:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <main+0x40>)
 80009ca:	7813      	ldrb	r3, [r2, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	7013      	strb	r3, [r2, #0]

		myFunc(&x);
 80009d0:	f10d 0007 	add.w	r0, sp, #7
 80009d4:	47a0      	blx	r4


		printf("%d\r\n", x);
 80009d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80009da:	4804      	ldr	r0, [pc, #16]	@ (80009ec <main+0x48>)
 80009dc:	f001 fb90 	bl	8002100 <iprintf>
	while(1)
 80009e0:	e7f2      	b.n	80009c8 <main+0x24>
 80009e2:	bf00      	nop
 80009e4:	20000098 	.word	0x20000098
 80009e8:	08000995 	.word	0x08000995
 80009ec:	08002fc0 	.word	0x08002fc0

080009f0 <spi_flash_gpio_init>:
/** =============================================================
 *  Initialization Function
    ============================================================= */

void spi_flash_gpio_init()
{
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
	// Initialize the MOSI and MISO pins
	GPIO_InitTypeDef spi_pins_init_struct = {0};
 80009f4:	2400      	movs	r4, #0
 80009f6:	9405      	str	r4, [sp, #20]
 80009f8:	9406      	str	r4, [sp, #24]
 80009fa:	9407      	str	r4, [sp, #28]
 80009fc:	9408      	str	r4, [sp, #32]
 80009fe:	9409      	str	r4, [sp, #36]	@ 0x24

	spi_pins_init_struct.Pin = MOSI_PIN |MISO_PIN;
 8000a00:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a04:	9305      	str	r3, [sp, #20]
	spi_pins_init_struct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	9306      	str	r3, [sp, #24]
	spi_pins_init_struct.Pull = GPIO_NOPULL;
	spi_pins_init_struct.Speed = GPIO_SPEED_HIGH;
 8000a0a:	2503      	movs	r5, #3
 8000a0c:	9508      	str	r5, [sp, #32]
	spi_pins_init_struct.Alternate = GPIO_AF5_SPI2;			// From Table 13 of stm32f769xx_Datasheet
 8000a0e:	2305      	movs	r3, #5
 8000a10:	9309      	str	r3, [sp, #36]	@ 0x24
	HAL_GPIO_Init(MOSI_MISO_PORT, &spi_pins_init_struct);
 8000a12:	a905      	add	r1, sp, #20
 8000a14:	4814      	ldr	r0, [pc, #80]	@ (8000a68 <spi_flash_gpio_init+0x78>)
 8000a16:	f000 f9cd 	bl	8000db4 <HAL_GPIO_Init>

	// Initialize the SCLK PIN
	spi_pins_init_struct.Pin = SCLK_PIN;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1e:	9305      	str	r3, [sp, #20]

	HAL_GPIO_Init(SCLK_PORT, &spi_pins_init_struct);
 8000a20:	a905      	add	r1, sp, #20
 8000a22:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <spi_flash_gpio_init+0x7c>)
 8000a24:	f000 f9c6 	bl	8000db4 <HAL_GPIO_Init>

	// Initialize the NSS Pins as normal GPIO Pins

	GPIO_InitTypeDef nss_control_pin_init_struct = {0};
 8000a28:	9400      	str	r4, [sp, #0]
 8000a2a:	9401      	str	r4, [sp, #4]
 8000a2c:	9402      	str	r4, [sp, #8]
 8000a2e:	9403      	str	r4, [sp, #12]
 8000a30:	9404      	str	r4, [sp, #16]

	nss_control_pin_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	9301      	str	r3, [sp, #4]
	nss_control_pin_init_struct.Pull = GPIO_NOPULL;
	nss_control_pin_init_struct.Speed = GPIO_SPEED_HIGH;
 8000a36:	9503      	str	r5, [sp, #12]

	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000a38:	e011      	b.n	8000a5e <spi_flash_gpio_init+0x6e>
	{
		nss_control_pin_init_struct.Pin = cartridge_nss_pin_numbers[i];
 8000a3a:	4d0d      	ldr	r5, [pc, #52]	@ (8000a70 <spi_flash_gpio_init+0x80>)
 8000a3c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 8000a40:	9300      	str	r3, [sp, #0]
		HAL_GPIO_Init(cartridge_nss_ports[i], &nss_control_pin_init_struct);
 8000a42:	eb05 0684 	add.w	r6, r5, r4, lsl #2
 8000a46:	4669      	mov	r1, sp
 8000a48:	68b0      	ldr	r0, [r6, #8]
 8000a4a:	f000 f9b3 	bl	8000db4 <HAL_GPIO_Init>

		// MAKE SURE IT IS HIGH TO START
		HAL_GPIO_WritePin(cartridge_nss_ports[i], cartridge_nss_pin_numbers[i], GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8000a54:	68b0      	ldr	r0, [r6, #8]
 8000a56:	f000 faaf 	bl	8000fb8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000a5a:	3401      	adds	r4, #1
 8000a5c:	b2e4      	uxtb	r4, r4
 8000a5e:	2c02      	cmp	r4, #2
 8000a60:	d9eb      	bls.n	8000a3a <spi_flash_gpio_init+0x4a>
	}

}
 8000a62:	b00a      	add	sp, #40	@ 0x28
 8000a64:	bd70      	pop	{r4, r5, r6, pc}
 8000a66:	bf00      	nop
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	20000000 	.word	0x20000000

08000a74 <spi_flash_interface_initialize_SPI>:

void spi_flash_interface_initialize_SPI()
{
 8000a74:	b508      	push	{r3, lr}
	spi_flash_gpio_init();
 8000a76:	f7ff ffbb 	bl	80009f0 <spi_flash_gpio_init>

	flash_spi_handle.Instance = SPI2;
 8000a7a:	480c      	ldr	r0, [pc, #48]	@ (8000aac <spi_flash_interface_initialize_SPI+0x38>)
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <spi_flash_interface_initialize_SPI+0x3c>)
 8000a7e:	6003      	str	r3, [r0, #0]
	flash_spi_handle.Init.Mode = SPI_MODE_MASTER; // Set master mode
 8000a80:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000a84:	6043      	str	r3, [r0, #4]
	flash_spi_handle.Init.TIMode = SPI_TIMODE_DISABLE; // Use Motorola mode, not TI mode
 8000a86:	2300      	movs	r3, #0
 8000a88:	6243      	str	r3, [r0, #36]	@ 0x24
	flash_spi_handle.Init.Direction = SPI_DIRECTION_2LINES; //Subject to change?
 8000a8a:	6083      	str	r3, [r0, #8]
	flash_spi_handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8c:	6203      	str	r3, [r0, #32]
	flash_spi_handle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a8e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a92:	60c2      	str	r2, [r0, #12]
	flash_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a94:	6103      	str	r3, [r0, #16]
	flash_spi_handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a96:	6143      	str	r3, [r0, #20]
	flash_spi_handle.Init.NSS = SPI_NSS_SOFT;
 8000a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a9c:	6182      	str	r2, [r0, #24]
	flash_spi_handle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a9e:	6343      	str	r3, [r0, #52]	@ 0x34
	flash_spi_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000aa0:	2338      	movs	r3, #56	@ 0x38
 8000aa2:	61c3      	str	r3, [r0, #28]

	HAL_SPI_Init(&flash_spi_handle);
 8000aa4:	f000 fe1f 	bl	80016e6 <HAL_SPI_Init>
}
 8000aa8:	bd08      	pop	{r3, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000584 	.word	0x20000584
 8000ab0:	40003800 	.word	0x40003800

08000ab4 <HAL_UART_MspInit>:
UART_HandleTypeDef USB_UART;

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000ab4:	b530      	push	{r4, r5, lr}
 8000ab6:	b08b      	sub	sp, #44	@ 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000ab8:	6803      	ldr	r3, [r0, #0]
 8000aba:	4a2e      	ldr	r2, [pc, #184]	@ (8000b74 <HAL_UART_MspInit+0xc0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d004      	beq.n	8000aca <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b78 <HAL_UART_MspInit+0xc4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d02c      	beq.n	8000b20 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000ac6:	b00b      	add	sp, #44	@ 0x2c
 8000ac8:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000aca:	4c2c      	ldr	r4, [pc, #176]	@ (8000b7c <HAL_UART_MspInit+0xc8>)
 8000acc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ad4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000ade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ae2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af0:	2307      	movs	r3, #7
 8000af2:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000af4:	4d22      	ldr	r5, [pc, #136]	@ (8000b80 <HAL_UART_MspInit+0xcc>)
 8000af6:	a905      	add	r1, sp, #20
 8000af8:	4628      	mov	r0, r5
 8000afa:	f000 f95b 	bl	8000db4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000afe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b02:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000b04:	a905      	add	r1, sp, #20
 8000b06:	4628      	mov	r0, r5
 8000b08:	f000 f954 	bl	8000db4 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000b0c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	6463      	str	r3, [r4, #68]	@ 0x44
 8000b14:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000b16:	f003 0310 	and.w	r3, r3, #16
 8000b1a:	9302      	str	r3, [sp, #8]
 8000b1c:	9b02      	ldr	r3, [sp, #8]
 8000b1e:	e7d2      	b.n	8000ac6 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000b20:	4c16      	ldr	r4, [pc, #88]	@ (8000b7c <HAL_UART_MspInit+0xc8>)
 8000b22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	9303      	str	r3, [sp, #12]
 8000b32:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000b34:	2340      	movs	r3, #64	@ 0x40
 8000b36:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b44:	2308      	movs	r3, #8
 8000b46:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000b48:	4d0e      	ldr	r5, [pc, #56]	@ (8000b84 <HAL_UART_MspInit+0xd0>)
 8000b4a:	a905      	add	r1, sp, #20
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f000 f931 	bl	8000db4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000b56:	a905      	add	r1, sp, #20
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f000 f92b 	bl	8000db4 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000b5e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000b60:	f043 0320 	orr.w	r3, r3, #32
 8000b64:	6463      	str	r3, [r4, #68]	@ 0x44
 8000b66:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000b68:	f003 0320 	and.w	r3, r3, #32
 8000b6c:	9304      	str	r3, [sp, #16]
 8000b6e:	9b04      	ldr	r3, [sp, #16]
}
 8000b70:	e7a9      	b.n	8000ac6 <HAL_UART_MspInit+0x12>
 8000b72:	bf00      	nop
 8000b74:	40011000 	.word	0x40011000
 8000b78:	40011400 	.word	0x40011400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000
 8000b84:	40020800 	.word	0x40020800

08000b88 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000b88:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000b8a:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000b8c:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	2200      	movs	r2, #0
 8000b90:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000b92:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000b94:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000b96:	210c      	movs	r1, #12
 8000b98:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000b9a:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000b9c:	f001 f9bc 	bl	8001f18 <HAL_UART_Init>
}
 8000ba0:	bd08      	pop	{r3, pc}
	...

08000ba4 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000ba4:	b510      	push	{r4, lr}
 8000ba6:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000ba8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bac:	b292      	uxth	r2, r2
 8000bae:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <_write+0x14>)
 8000bb0:	f001 f893 	bl	8001cda <HAL_UART_Transmit>
	return len;
}
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	bd10      	pop	{r4, pc}
 8000bb8:	200005e8 	.word	0x200005e8

08000bbc <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000bbc:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <_read+0x18>)
 8000bca:	f001 f8e4 	bl	8001d96 <HAL_UART_Receive>
	return len;
}
 8000bce:	2001      	movs	r0, #1
 8000bd0:	bd08      	pop	{r3, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200005e8 	.word	0x200005e8

08000bd8 <_close>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3
__attribute__((weak)) void _close(void){}
 8000bd8:	4770      	bx	lr

08000bda <_lseek>:
__attribute__((weak)) void _lseek(void){}
 8000bda:	4770      	bx	lr

08000bdc <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8000bdc:	4770      	bx	lr

08000bde <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 8000bde:	4770      	bx	lr

08000be0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be0:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000be4:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490e      	ldr	r1, [pc, #56]	@ (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0b      	ldr	r4, [pc, #44]	@ (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c0a:	f000 f813 	bl	8000c34 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c0e:	f001 fbd7 	bl	80023c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c12:	f7ff fec7 	bl	80009a4 <main>

08000c16 <LoopForever>:

LoopForever:
    b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   r0, =_estack
 8000c18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c24:	08003008 	.word	0x08003008
  ldr r2, =_sbss
 8000c28:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000c2c:	200007c4 	.word	0x200007c4

08000c30 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>
	...

08000c34 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4a03      	ldr	r2, [pc, #12]	@ (8000c44 <SystemInit+0x10>)
 8000c36:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000c3a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000c48:	4770      	bx	lr
	...

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b510      	push	{r4, lr}
 8000c4e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <HAL_InitTick+0x40>)
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c90 <HAL_InitTick+0x44>)
 8000c5e:	6810      	ldr	r0, [r2, #0]
 8000c60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c64:	f000 f892 	bl	8000d8c <HAL_SYSTICK_Config>
 8000c68:	b968      	cbnz	r0, 8000c86 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	2c0f      	cmp	r4, #15
 8000c6c:	d901      	bls.n	8000c72 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
 8000c70:	e00a      	b.n	8000c88 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c72:	2200      	movs	r2, #0
 8000c74:	4621      	mov	r1, r4
 8000c76:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7a:	f000 f877 	bl	8000d6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7e:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <HAL_InitTick+0x40>)
 8000c80:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000c82:	2000      	movs	r0, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c86:	2001      	movs	r0, #1
}
 8000c88:	bd10      	pop	{r4, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000018 	.word	0x20000018
 8000c90:	20000014 	.word	0x20000014

08000c94 <HAL_Init>:
{
 8000c94:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_Init+0x28>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c9e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ca6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f84d 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f7ff ffcc 	bl	8000c4c <HAL_InitTick>
  HAL_MspInit();
 8000cb4:	f7ff ffc8 	bl	8000c48 <HAL_MspInit>
}
 8000cb8:	2000      	movs	r0, #0
 8000cba:	bd08      	pop	{r3, pc}
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000cc0:	4a03      	ldr	r2, [pc, #12]	@ (8000cd0 <HAL_IncTick+0x10>)
 8000cc2:	6811      	ldr	r1, [r2, #0]
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <HAL_IncTick+0x14>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	440b      	add	r3, r1
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000670 	.word	0x20000670
 8000cd4:	20000018 	.word	0x20000018

08000cd8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cd8:	4b01      	ldr	r3, [pc, #4]	@ (8000ce0 <HAL_GetTick+0x8>)
 8000cda:	6818      	ldr	r0, [r3, #0]
}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000670 	.word	0x20000670

08000ce4 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	db04      	blt.n	8000cf2 <__NVIC_SetPriority+0xe>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	0109      	lsls	r1, r1, #4
 8000cea:	b2c9      	uxtb	r1, r1
 8000cec:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <__NVIC_SetPriority+0x1c>)
 8000cee:	5419      	strb	r1, [r3, r0]
 8000cf0:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	f000 000f 	and.w	r0, r0, #15
 8000cf6:	0109      	lsls	r1, r1, #4
 8000cf8:	b2c9      	uxtb	r1, r1
 8000cfa:	4b02      	ldr	r3, [pc, #8]	@ (8000d04 <__NVIC_SetPriority+0x20>)
 8000cfc:	5419      	strb	r1, [r3, r0]
}
 8000cfe:	4770      	bx	lr
 8000d00:	e000e400 	.word	0xe000e400
 8000d04:	e000ed14 	.word	0xe000ed14

08000d08 <NVIC_EncodePriority>:
{
 8000d08:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0a:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0e:	f1c0 0c07 	rsb	ip, r0, #7
 8000d12:	f1bc 0f04 	cmp.w	ip, #4
 8000d16:	bf28      	it	cs
 8000d18:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1c:	1d03      	adds	r3, r0, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d90f      	bls.n	8000d42 <NVIC_EncodePriority+0x3a>
 8000d22:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 3eff 	mov.w	lr, #4294967295
 8000d28:	fa0e f00c 	lsl.w	r0, lr, ip
 8000d2c:	ea21 0100 	bic.w	r1, r1, r0
 8000d30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d32:	fa0e fe03 	lsl.w	lr, lr, r3
 8000d36:	ea22 020e 	bic.w	r2, r2, lr
}
 8000d3a:	ea41 0002 	orr.w	r0, r1, r2
 8000d3e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	2300      	movs	r3, #0
 8000d44:	e7ee      	b.n	8000d24 <NVIC_EncodePriority+0x1c>
	...

08000d48 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4906      	ldr	r1, [pc, #24]	@ (8000d64 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000d4a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000d50:	041b      	lsls	r3, r3, #16
 8000d52:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	0200      	lsls	r0, r0, #8
 8000d56:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000d5c:	4a02      	ldr	r2, [pc, #8]	@ (8000d68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d5e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000d60:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00
 8000d68:	05fa0000 	.word	0x05fa0000

08000d6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6c:	b510      	push	{r4, lr}
 8000d6e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <HAL_NVIC_SetPriority+0x1c>)
 8000d72:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d74:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000d78:	f7ff ffc6 	bl	8000d08 <NVIC_EncodePriority>
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f7ff ffb0 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000d84:	bd10      	pop	{r4, pc}
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d92:	d20b      	bcs.n	8000dac <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000d98:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <HAL_SYSTICK_Config+0x24>)
 8000d9c:	21f0      	movs	r1, #240	@ 0xf0
 8000d9e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da2:	2000      	movs	r0, #0
 8000da4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	2207      	movs	r2, #7
 8000da8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000daa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	2b0f      	cmp	r3, #15
 8000db8:	f200 80f4 	bhi.w	8000fa4 <HAL_GPIO_Init+0x1f0>
{
 8000dbc:	b570      	push	{r4, r5, r6, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	e066      	b.n	8000e90 <HAL_GPIO_Init+0xdc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dc4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000dc8:	2403      	movs	r4, #3
 8000dca:	fa04 f40e 	lsl.w	r4, r4, lr
 8000dce:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dd2:	68cc      	ldr	r4, [r1, #12]
 8000dd4:	fa04 f40e 	lsl.w	r4, r4, lr
 8000dd8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000dda:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ddc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dde:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de2:	684a      	ldr	r2, [r1, #4]
 8000de4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000de8:	409a      	lsls	r2, r3
 8000dea:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000dec:	6042      	str	r2, [r0, #4]
 8000dee:	e05d      	b.n	8000eac <HAL_GPIO_Init+0xf8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000df0:	08dc      	lsrs	r4, r3, #3
 8000df2:	3408      	adds	r4, #8
 8000df4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000df8:	f003 0507 	and.w	r5, r3, #7
 8000dfc:	00ad      	lsls	r5, r5, #2
 8000dfe:	f04f 0e0f 	mov.w	lr, #15
 8000e02:	fa0e fe05 	lsl.w	lr, lr, r5
 8000e06:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e0a:	690a      	ldr	r2, [r1, #16]
 8000e0c:	40aa      	lsls	r2, r5
 8000e0e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8000e12:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000e16:	e05d      	b.n	8000ed4 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e18:	2209      	movs	r2, #9
 8000e1a:	e000      	b.n	8000e1e <HAL_GPIO_Init+0x6a>
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e22:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e24:	3402      	adds	r4, #2
 8000e26:	4d60      	ldr	r5, [pc, #384]	@ (8000fa8 <HAL_GPIO_Init+0x1f4>)
 8000e28:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2c:	4a5f      	ldr	r2, [pc, #380]	@ (8000fac <HAL_GPIO_Init+0x1f8>)
 8000e2e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e30:	ea6f 020c 	mvn.w	r2, ip
 8000e34:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e38:	684e      	ldr	r6, [r1, #4]
 8000e3a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000e3e:	d001      	beq.n	8000e44 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000e40:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000e44:	4c59      	ldr	r4, [pc, #356]	@ (8000fac <HAL_GPIO_Init+0x1f8>)
 8000e46:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000e48:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e4e:	684e      	ldr	r6, [r1, #4]
 8000e50:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000e54:	d001      	beq.n	8000e5a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000e56:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000e5a:	4c54      	ldr	r4, [pc, #336]	@ (8000fac <HAL_GPIO_Init+0x1f8>)
 8000e5c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000e5e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e64:	684e      	ldr	r6, [r1, #4]
 8000e66:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000e6a:	d001      	beq.n	8000e70 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000e6c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000e70:	4c4e      	ldr	r4, [pc, #312]	@ (8000fac <HAL_GPIO_Init+0x1f8>)
 8000e72:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e74:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e76:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e78:	684d      	ldr	r5, [r1, #4]
 8000e7a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000e7e:	d001      	beq.n	8000e84 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000e80:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000e84:	4c49      	ldr	r4, [pc, #292]	@ (8000fac <HAL_GPIO_Init+0x1f8>)
 8000e86:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e88:	3301      	adds	r3, #1
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	f200 8088 	bhi.w	8000fa0 <HAL_GPIO_Init+0x1ec>
    ioposition = ((uint32_t)0x01) << position;
 8000e90:	2201      	movs	r2, #1
 8000e92:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e94:	680c      	ldr	r4, [r1, #0]
 8000e96:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000e9a:	ea32 0404 	bics.w	r4, r2, r4
 8000e9e:	d1f3      	bne.n	8000e88 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea0:	684c      	ldr	r4, [r1, #4]
 8000ea2:	f004 0403 	and.w	r4, r4, #3
 8000ea6:	3c01      	subs	r4, #1
 8000ea8:	2c01      	cmp	r4, #1
 8000eaa:	d98a      	bls.n	8000dc2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eac:	684a      	ldr	r2, [r1, #4]
 8000eae:	f002 0203 	and.w	r2, r2, #3
 8000eb2:	2a03      	cmp	r2, #3
 8000eb4:	d009      	beq.n	8000eca <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8000eb6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000eb8:	005d      	lsls	r5, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	40aa      	lsls	r2, r5
 8000ebe:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ec2:	688a      	ldr	r2, [r1, #8]
 8000ec4:	40aa      	lsls	r2, r5
 8000ec6:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000ec8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	684a      	ldr	r2, [r1, #4]
 8000ecc:	f002 0203 	and.w	r2, r2, #3
 8000ed0:	2a02      	cmp	r2, #2
 8000ed2:	d08d      	beq.n	8000df0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000ed4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ed6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ee0:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ee4:	684a      	ldr	r2, [r1, #4]
 8000ee6:	f002 0203 	and.w	r2, r2, #3
 8000eea:	fa02 f20e 	lsl.w	r2, r2, lr
 8000eee:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000ef0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef2:	684a      	ldr	r2, [r1, #4]
 8000ef4:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000ef8:	d0c6      	beq.n	8000e88 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4a2d      	ldr	r2, [pc, #180]	@ (8000fb0 <HAL_GPIO_Init+0x1fc>)
 8000efc:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000efe:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000f02:	6454      	str	r4, [r2, #68]	@ 0x44
 8000f04:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000f06:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000f0a:	9201      	str	r2, [sp, #4]
 8000f0c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000f0e:	089c      	lsrs	r4, r3, #2
 8000f10:	1ca5      	adds	r5, r4, #2
 8000f12:	4a25      	ldr	r2, [pc, #148]	@ (8000fa8 <HAL_GPIO_Init+0x1f4>)
 8000f14:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f18:	f003 0e03 	and.w	lr, r3, #3
 8000f1c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f26:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f2a:	4a22      	ldr	r2, [pc, #136]	@ (8000fb4 <HAL_GPIO_Init+0x200>)
 8000f2c:	4290      	cmp	r0, r2
 8000f2e:	f43f af75 	beq.w	8000e1c <HAL_GPIO_Init+0x68>
 8000f32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f36:	4290      	cmp	r0, r2
 8000f38:	d022      	beq.n	8000f80 <HAL_GPIO_Init+0x1cc>
 8000f3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f3e:	4290      	cmp	r0, r2
 8000f40:	d020      	beq.n	8000f84 <HAL_GPIO_Init+0x1d0>
 8000f42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f46:	4290      	cmp	r0, r2
 8000f48:	d01e      	beq.n	8000f88 <HAL_GPIO_Init+0x1d4>
 8000f4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f4e:	4290      	cmp	r0, r2
 8000f50:	d01c      	beq.n	8000f8c <HAL_GPIO_Init+0x1d8>
 8000f52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f56:	4290      	cmp	r0, r2
 8000f58:	d01a      	beq.n	8000f90 <HAL_GPIO_Init+0x1dc>
 8000f5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f5e:	4290      	cmp	r0, r2
 8000f60:	d018      	beq.n	8000f94 <HAL_GPIO_Init+0x1e0>
 8000f62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f66:	4290      	cmp	r0, r2
 8000f68:	d016      	beq.n	8000f98 <HAL_GPIO_Init+0x1e4>
 8000f6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f6e:	4290      	cmp	r0, r2
 8000f70:	d014      	beq.n	8000f9c <HAL_GPIO_Init+0x1e8>
 8000f72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f76:	4290      	cmp	r0, r2
 8000f78:	f43f af4e 	beq.w	8000e18 <HAL_GPIO_Init+0x64>
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	e74e      	b.n	8000e1e <HAL_GPIO_Init+0x6a>
 8000f80:	2201      	movs	r2, #1
 8000f82:	e74c      	b.n	8000e1e <HAL_GPIO_Init+0x6a>
 8000f84:	2202      	movs	r2, #2
 8000f86:	e74a      	b.n	8000e1e <HAL_GPIO_Init+0x6a>
 8000f88:	2203      	movs	r2, #3
 8000f8a:	e748      	b.n	8000e1e <HAL_GPIO_Init+0x6a>
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	e746      	b.n	8000e1e <HAL_GPIO_Init+0x6a>
 8000f90:	2205      	movs	r2, #5
 8000f92:	e744      	b.n	8000e1e <HAL_GPIO_Init+0x6a>
 8000f94:	2206      	movs	r2, #6
 8000f96:	e742      	b.n	8000e1e <HAL_GPIO_Init+0x6a>
 8000f98:	2207      	movs	r2, #7
 8000f9a:	e740      	b.n	8000e1e <HAL_GPIO_Init+0x6a>
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	e73e      	b.n	8000e1e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40013800 	.word	0x40013800
 8000fac:	40013c00 	.word	0x40013c00
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb8:	b10a      	cbz	r2, 8000fbe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fba:	6181      	str	r1, [r0, #24]
 8000fbc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000fbe:	0409      	lsls	r1, r1, #16
 8000fc0:	6181      	str	r1, [r0, #24]
  }
}
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <HAL_PWREx_EnableOverDrive+0x74>)
 8000fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fcc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000fd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fdc:	4a17      	ldr	r2, [pc, #92]	@ (800103c <HAL_PWREx_EnableOverDrive+0x78>)
 8000fde:	6813      	ldr	r3, [r2, #0]
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe6:	f7ff fe77 	bl	8000cd8 <HAL_GetTick>
 8000fea:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fec:	4b13      	ldr	r3, [pc, #76]	@ (800103c <HAL_PWREx_EnableOverDrive+0x78>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000ff4:	d108      	bne.n	8001008 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ff6:	f7ff fe6f 	bl	8000cd8 <HAL_GetTick>
 8000ffa:	1b00      	subs	r0, r0, r4
 8000ffc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001000:	d9f4      	bls.n	8000fec <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001002:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001004:	b002      	add	sp, #8
 8001006:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001008:	4a0c      	ldr	r2, [pc, #48]	@ (800103c <HAL_PWREx_EnableOverDrive+0x78>)
 800100a:	6813      	ldr	r3, [r2, #0]
 800100c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001010:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001012:	f7ff fe61 	bl	8000cd8 <HAL_GetTick>
 8001016:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <HAL_PWREx_EnableOverDrive+0x78>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001020:	d107      	bne.n	8001032 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001022:	f7ff fe59 	bl	8000cd8 <HAL_GetTick>
 8001026:	1b00      	subs	r0, r0, r4
 8001028:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800102c:	d9f4      	bls.n	8001018 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800102e:	2003      	movs	r0, #3
 8001030:	e7e8      	b.n	8001004 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001032:	2000      	movs	r0, #0
 8001034:	e7e6      	b.n	8001004 <HAL_PWREx_EnableOverDrive+0x40>
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000

08001040 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001040:	2800      	cmp	r0, #0
 8001042:	f000 8206 	beq.w	8001452 <HAL_RCC_OscConfig+0x412>
{
 8001046:	b570      	push	{r4, r5, r6, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104c:	6803      	ldr	r3, [r0, #0]
 800104e:	f013 0f01 	tst.w	r3, #1
 8001052:	d029      	beq.n	80010a8 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001054:	4b95      	ldr	r3, [pc, #596]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b04      	cmp	r3, #4
 800105e:	d01a      	beq.n	8001096 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001060:	4b92      	ldr	r3, [pc, #584]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 030c 	and.w	r3, r3, #12
 8001068:	2b08      	cmp	r3, #8
 800106a:	d00f      	beq.n	800108c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106c:	6863      	ldr	r3, [r4, #4]
 800106e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001072:	d040      	beq.n	80010f6 <HAL_RCC_OscConfig+0xb6>
 8001074:	2b00      	cmp	r3, #0
 8001076:	d154      	bne.n	8001122 <HAL_RCC_OscConfig+0xe2>
 8001078:	4b8c      	ldr	r3, [pc, #560]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e039      	b.n	8001100 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108c:	4b87      	ldr	r3, [pc, #540]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001094:	d0ea      	beq.n	800106c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001096:	4b85      	ldr	r3, [pc, #532]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800109e:	d003      	beq.n	80010a8 <HAL_RCC_OscConfig+0x68>
 80010a0:	6863      	ldr	r3, [r4, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 81d7 	beq.w	8001456 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	f013 0f02 	tst.w	r3, #2
 80010ae:	d074      	beq.n	800119a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010b0:	4b7e      	ldr	r3, [pc, #504]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f013 0f0c 	tst.w	r3, #12
 80010b8:	d05e      	beq.n	8001178 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ba:	4b7c      	ldr	r3, [pc, #496]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d053      	beq.n	800116e <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010c6:	68e3      	ldr	r3, [r4, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 8089 	beq.w	80011e0 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ce:	4a77      	ldr	r2, [pc, #476]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010d0:	6813      	ldr	r3, [r2, #0]
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d8:	f7ff fdfe 	bl	8000cd8 <HAL_GetTick>
 80010dc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010de:	4b73      	ldr	r3, [pc, #460]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f013 0f02 	tst.w	r3, #2
 80010e6:	d172      	bne.n	80011ce <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fdf6 	bl	8000cd8 <HAL_GetTick>
 80010ec:	1b40      	subs	r0, r0, r5
 80010ee:	2802      	cmp	r0, #2
 80010f0:	d9f5      	bls.n	80010de <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80010f2:	2003      	movs	r0, #3
 80010f4:	e1b4      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f6:	4a6d      	ldr	r2, [pc, #436]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010fe:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001100:	6863      	ldr	r3, [r4, #4]
 8001102:	b32b      	cbz	r3, 8001150 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001104:	f7ff fde8 	bl	8000cd8 <HAL_GetTick>
 8001108:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b68      	ldr	r3, [pc, #416]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001112:	d1c9      	bne.n	80010a8 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fde0 	bl	8000cd8 <HAL_GetTick>
 8001118:	1b40      	subs	r0, r0, r5
 800111a:	2864      	cmp	r0, #100	@ 0x64
 800111c:	d9f5      	bls.n	800110a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800111e:	2003      	movs	r0, #3
 8001120:	e19e      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001122:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001126:	d009      	beq.n	800113c <HAL_RCC_OscConfig+0xfc>
 8001128:	4b60      	ldr	r3, [pc, #384]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e7e1      	b.n	8001100 <HAL_RCC_OscConfig+0xc0>
 800113c:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e7d7      	b.n	8001100 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8001150:	f7ff fdc2 	bl	8000cd8 <HAL_GetTick>
 8001154:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	4b55      	ldr	r3, [pc, #340]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800115e:	d0a3      	beq.n	80010a8 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fdba 	bl	8000cd8 <HAL_GetTick>
 8001164:	1b40      	subs	r0, r0, r5
 8001166:	2864      	cmp	r0, #100	@ 0x64
 8001168:	d9f5      	bls.n	8001156 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800116a:	2003      	movs	r0, #3
 800116c:	e178      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800116e:	4b4f      	ldr	r3, [pc, #316]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001176:	d1a6      	bne.n	80010c6 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001178:	4b4c      	ldr	r3, [pc, #304]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f013 0f02 	tst.w	r3, #2
 8001180:	d003      	beq.n	800118a <HAL_RCC_OscConfig+0x14a>
 8001182:	68e3      	ldr	r3, [r4, #12]
 8001184:	2b01      	cmp	r3, #1
 8001186:	f040 8168 	bne.w	800145a <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4a48      	ldr	r2, [pc, #288]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 800118c:	6813      	ldr	r3, [r2, #0]
 800118e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001192:	6921      	ldr	r1, [r4, #16]
 8001194:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001198:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	f013 0f08 	tst.w	r3, #8
 80011a0:	d046      	beq.n	8001230 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011a2:	6963      	ldr	r3, [r4, #20]
 80011a4:	b383      	cbz	r3, 8001208 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a6:	4a41      	ldr	r2, [pc, #260]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 80011a8:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b0:	f7ff fd92 	bl	8000cd8 <HAL_GetTick>
 80011b4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 80011b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ba:	f013 0f02 	tst.w	r3, #2
 80011be:	d137      	bne.n	8001230 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c0:	f7ff fd8a 	bl	8000cd8 <HAL_GetTick>
 80011c4:	1b40      	subs	r0, r0, r5
 80011c6:	2802      	cmp	r0, #2
 80011c8:	d9f5      	bls.n	80011b6 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80011ca:	2003      	movs	r0, #3
 80011cc:	e148      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4a37      	ldr	r2, [pc, #220]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 80011d0:	6813      	ldr	r3, [r2, #0]
 80011d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80011d6:	6921      	ldr	r1, [r4, #16]
 80011d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e7dc      	b.n	800119a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80011e0:	4a32      	ldr	r2, [pc, #200]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 80011e2:	6813      	ldr	r3, [r2, #0]
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011ea:	f7ff fd75 	bl	8000cd8 <HAL_GetTick>
 80011ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f0:	4b2e      	ldr	r3, [pc, #184]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f013 0f02 	tst.w	r3, #2
 80011f8:	d0cf      	beq.n	800119a <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fd6d 	bl	8000cd8 <HAL_GetTick>
 80011fe:	1b40      	subs	r0, r0, r5
 8001200:	2802      	cmp	r0, #2
 8001202:	d9f5      	bls.n	80011f0 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8001204:	2003      	movs	r0, #3
 8001206:	e12b      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001208:	4a28      	ldr	r2, [pc, #160]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 800120a:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001212:	f7ff fd61 	bl	8000cd8 <HAL_GetTick>
 8001216:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 800121a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800121c:	f013 0f02 	tst.w	r3, #2
 8001220:	d006      	beq.n	8001230 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff fd59 	bl	8000cd8 <HAL_GetTick>
 8001226:	1b40      	subs	r0, r0, r5
 8001228:	2802      	cmp	r0, #2
 800122a:	d9f5      	bls.n	8001218 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 800122c:	2003      	movs	r0, #3
 800122e:	e117      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	f013 0f04 	tst.w	r3, #4
 8001236:	d07d      	beq.n	8001334 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001240:	d11e      	bne.n	8001280 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 8001244:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001246:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800124a:	641a      	str	r2, [r3, #64]	@ 0x40
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001256:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001258:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001260:	d010      	beq.n	8001284 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001262:	68a3      	ldr	r3, [r4, #8]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d025      	beq.n	80012b4 <HAL_RCC_OscConfig+0x274>
 8001268:	2b00      	cmp	r3, #0
 800126a:	d13b      	bne.n	80012e4 <HAL_RCC_OscConfig+0x2a4>
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_RCC_OscConfig+0x26c>)
 800126e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001270:	f022 0201 	bic.w	r2, r2, #1
 8001274:	671a      	str	r2, [r3, #112]	@ 0x70
 8001276:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001278:	f022 0204 	bic.w	r2, r2, #4
 800127c:	671a      	str	r2, [r3, #112]	@ 0x70
 800127e:	e01e      	b.n	80012be <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8001280:	2500      	movs	r5, #0
 8001282:	e7e9      	b.n	8001258 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8001284:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001286:	6813      	ldr	r3, [r2, #0]
 8001288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800128e:	f7ff fd23 	bl	8000cd8 <HAL_GetTick>
 8001292:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800129c:	d1e1      	bne.n	8001262 <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129e:	f7ff fd1b 	bl	8000cd8 <HAL_GetTick>
 80012a2:	1b80      	subs	r0, r0, r6
 80012a4:	2864      	cmp	r0, #100	@ 0x64
 80012a6:	d9f5      	bls.n	8001294 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 80012a8:	2003      	movs	r0, #3
 80012aa:	e0d9      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	4a72      	ldr	r2, [pc, #456]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 80012b6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012be:	68a3      	ldr	r3, [r4, #8]
 80012c0:	b333      	cbz	r3, 8001310 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c2:	f7ff fd09 	bl	8000cd8 <HAL_GetTick>
 80012c6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 80012ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012cc:	f013 0f02 	tst.w	r3, #2
 80012d0:	d12f      	bne.n	8001332 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7ff fd01 	bl	8000cd8 <HAL_GetTick>
 80012d6:	1b80      	subs	r0, r0, r6
 80012d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80012dc:	4298      	cmp	r0, r3
 80012de:	d9f3      	bls.n	80012c8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80012e0:	2003      	movs	r0, #3
 80012e2:	e0bd      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d009      	beq.n	80012fc <HAL_RCC_OscConfig+0x2bc>
 80012e8:	4b65      	ldr	r3, [pc, #404]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 80012ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80012ec:	f022 0201 	bic.w	r2, r2, #1
 80012f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80012f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80012f4:	f022 0204 	bic.w	r2, r2, #4
 80012f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80012fa:	e7e0      	b.n	80012be <HAL_RCC_OscConfig+0x27e>
 80012fc:	4b60      	ldr	r3, [pc, #384]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 80012fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001300:	f042 0204 	orr.w	r2, r2, #4
 8001304:	671a      	str	r2, [r3, #112]	@ 0x70
 8001306:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001308:	f042 0201 	orr.w	r2, r2, #1
 800130c:	671a      	str	r2, [r3, #112]	@ 0x70
 800130e:	e7d6      	b.n	80012be <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff fce2 	bl	8000cd8 <HAL_GetTick>
 8001314:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001316:	4b5a      	ldr	r3, [pc, #360]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800131a:	f013 0f02 	tst.w	r3, #2
 800131e:	d008      	beq.n	8001332 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001320:	f7ff fcda 	bl	8000cd8 <HAL_GetTick>
 8001324:	1b80      	subs	r0, r0, r6
 8001326:	f241 3388 	movw	r3, #5000	@ 0x1388
 800132a:	4298      	cmp	r0, r3
 800132c:	d9f3      	bls.n	8001316 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800132e:	2003      	movs	r0, #3
 8001330:	e096      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001332:	b9fd      	cbnz	r5, 8001374 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001334:	69a3      	ldr	r3, [r4, #24]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 8091 	beq.w	800145e <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800133c:	4a50      	ldr	r2, [pc, #320]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 800133e:	6892      	ldr	r2, [r2, #8]
 8001340:	f002 020c 	and.w	r2, r2, #12
 8001344:	2a08      	cmp	r2, #8
 8001346:	d059      	beq.n	80013fc <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001348:	2b02      	cmp	r3, #2
 800134a:	d019      	beq.n	8001380 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134c:	4a4c      	ldr	r2, [pc, #304]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 800134e:	6813      	ldr	r3, [r2, #0]
 8001350:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001356:	f7ff fcbf 	bl	8000cd8 <HAL_GetTick>
 800135a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135c:	4b48      	ldr	r3, [pc, #288]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001364:	d048      	beq.n	80013f8 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001366:	f7ff fcb7 	bl	8000cd8 <HAL_GetTick>
 800136a:	1b00      	subs	r0, r0, r4
 800136c:	2802      	cmp	r0, #2
 800136e:	d9f5      	bls.n	800135c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001370:	2003      	movs	r0, #3
 8001372:	e075      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001374:	4a42      	ldr	r2, [pc, #264]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 8001376:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	e7d9      	b.n	8001334 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001380:	4a3f      	ldr	r2, [pc, #252]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 8001382:	6813      	ldr	r3, [r2, #0]
 8001384:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001388:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800138a:	f7ff fca5 	bl	8000cd8 <HAL_GetTick>
 800138e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001390:	4b3b      	ldr	r3, [pc, #236]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001398:	d006      	beq.n	80013a8 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fc9d 	bl	8000cd8 <HAL_GetTick>
 800139e:	1b40      	subs	r0, r0, r5
 80013a0:	2802      	cmp	r0, #2
 80013a2:	d9f5      	bls.n	8001390 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80013a4:	2003      	movs	r0, #3
 80013a6:	e05b      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a8:	69e3      	ldr	r3, [r4, #28]
 80013aa:	6a22      	ldr	r2, [r4, #32]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80013b0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013b4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80013b6:	0852      	lsrs	r2, r2, #1
 80013b8:	3a01      	subs	r2, #1
 80013ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80013c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013c4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80013c6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80013ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 80013cc:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80013ce:	6813      	ldr	r3, [r2, #0]
 80013d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80013d6:	f7ff fc7f 	bl	8000cd8 <HAL_GetTick>
 80013da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013dc:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff fc77 	bl	8000cd8 <HAL_GetTick>
 80013ea:	1b00      	subs	r0, r0, r4
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d9f5      	bls.n	80013dc <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80013f0:	2003      	movs	r0, #3
 80013f2:	e035      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80013f4:	2000      	movs	r0, #0
 80013f6:	e033      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
 80013f8:	2000      	movs	r0, #0
 80013fa:	e031      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 80013fc:	4a20      	ldr	r2, [pc, #128]	@ (8001480 <HAL_RCC_OscConfig+0x440>)
 80013fe:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001400:	2b01      	cmp	r3, #1
 8001402:	d02f      	beq.n	8001464 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001404:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8001408:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140a:	428b      	cmp	r3, r1
 800140c:	d12c      	bne.n	8001468 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800140e:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 8001412:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001414:	428b      	cmp	r3, r1
 8001416:	d129      	bne.n	800146c <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001418:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800141a:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800141e:	4013      	ands	r3, r2
 8001420:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001424:	d124      	bne.n	8001470 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001426:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 800142a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800142c:	085b      	lsrs	r3, r3, #1
 800142e:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001430:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001434:	d11e      	bne.n	8001474 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001436:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 800143a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800143c:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8001440:	d11a      	bne.n	8001478 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001442:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8001446:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001448:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 800144c:	d116      	bne.n	800147c <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 800144e:	2000      	movs	r0, #0
 8001450:	e006      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 8001452:	2001      	movs	r0, #1
}
 8001454:	4770      	bx	lr
        return HAL_ERROR;
 8001456:	2001      	movs	r0, #1
 8001458:	e002      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
 800145c:	e000      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 800145e:	2000      	movs	r0, #0
}
 8001460:	b002      	add	sp, #8
 8001462:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001464:	2001      	movs	r0, #1
 8001466:	e7fb      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
 8001468:	2001      	movs	r0, #1
 800146a:	e7f9      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
 800146c:	2001      	movs	r0, #1
 800146e:	e7f7      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
 8001470:	2001      	movs	r0, #1
 8001472:	e7f5      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
 8001474:	2001      	movs	r0, #1
 8001476:	e7f3      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
 8001478:	2001      	movs	r0, #1
 800147a:	e7f1      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
 800147c:	2001      	movs	r0, #1
 800147e:	e7ef      	b.n	8001460 <HAL_RCC_OscConfig+0x420>
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001484:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b04      	cmp	r3, #4
 8001490:	d041      	beq.n	8001516 <HAL_RCC_GetSysClockFreq+0x92>
 8001492:	2b08      	cmp	r3, #8
 8001494:	d141      	bne.n	800151a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001496:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80014a4:	d012      	beq.n	80014cc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014a8:	6859      	ldr	r1, [r3, #4]
 80014aa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014ae:	481d      	ldr	r0, [pc, #116]	@ (8001524 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014b0:	2300      	movs	r3, #0
 80014b2:	fba1 0100 	umull	r0, r1, r1, r0
 80014b6:	f7fe ff13 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014c2:	3301      	adds	r3, #1
 80014c4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80014c6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80014ca:	e027      	b.n	800151c <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014ce:	6858      	ldr	r0, [r3, #4]
 80014d0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80014d4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80014d8:	ebbc 0c00 	subs.w	ip, ip, r0
 80014dc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80014e0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80014e4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80014e8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80014ec:	ebb1 010c 	subs.w	r1, r1, ip
 80014f0:	eb63 030e 	sbc.w	r3, r3, lr
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014fa:	00c9      	lsls	r1, r1, #3
 80014fc:	eb11 0c00 	adds.w	ip, r1, r0
 8001500:	f143 0300 	adc.w	r3, r3, #0
 8001504:	0299      	lsls	r1, r3, #10
 8001506:	2300      	movs	r3, #0
 8001508:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800150c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001510:	f7fe fee6 	bl	80002e0 <__aeabi_uldivmod>
 8001514:	e7d1      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001516:	4803      	ldr	r0, [pc, #12]	@ (8001524 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001518:	e000      	b.n	800151c <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800151a:	4803      	ldr	r0, [pc, #12]	@ (8001528 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800151c:	bd08      	pop	{r3, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	017d7840 	.word	0x017d7840
 8001528:	00f42400 	.word	0x00f42400

0800152c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800152c:	2800      	cmp	r0, #0
 800152e:	f000 80a0 	beq.w	8001672 <HAL_RCC_ClockConfig+0x146>
{
 8001532:	b570      	push	{r4, r5, r6, lr}
 8001534:	460d      	mov	r5, r1
 8001536:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001538:	4b52      	ldr	r3, [pc, #328]	@ (8001684 <HAL_RCC_ClockConfig+0x158>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	428b      	cmp	r3, r1
 8001542:	d20b      	bcs.n	800155c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001544:	4a4f      	ldr	r2, [pc, #316]	@ (8001684 <HAL_RCC_ClockConfig+0x158>)
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	f023 030f 	bic.w	r3, r3, #15
 800154c:	430b      	orrs	r3, r1
 800154e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001550:	6813      	ldr	r3, [r2, #0]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	428b      	cmp	r3, r1
 8001558:	f040 808d 	bne.w	8001676 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	f013 0f02 	tst.w	r3, #2
 8001562:	d017      	beq.n	8001594 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	f013 0f04 	tst.w	r3, #4
 8001568:	d004      	beq.n	8001574 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800156a:	4a47      	ldr	r2, [pc, #284]	@ (8001688 <HAL_RCC_ClockConfig+0x15c>)
 800156c:	6893      	ldr	r3, [r2, #8]
 800156e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001572:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	f013 0f08 	tst.w	r3, #8
 800157a:	d004      	beq.n	8001586 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800157c:	4a42      	ldr	r2, [pc, #264]	@ (8001688 <HAL_RCC_ClockConfig+0x15c>)
 800157e:	6893      	ldr	r3, [r2, #8]
 8001580:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001584:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001586:	4a40      	ldr	r2, [pc, #256]	@ (8001688 <HAL_RCC_ClockConfig+0x15c>)
 8001588:	6893      	ldr	r3, [r2, #8]
 800158a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800158e:	68a1      	ldr	r1, [r4, #8]
 8001590:	430b      	orrs	r3, r1
 8001592:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	f013 0f01 	tst.w	r3, #1
 800159a:	d031      	beq.n	8001600 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159c:	6863      	ldr	r3, [r4, #4]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d020      	beq.n	80015e4 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d025      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a6:	4a38      	ldr	r2, [pc, #224]	@ (8001688 <HAL_RCC_ClockConfig+0x15c>)
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	f012 0f02 	tst.w	r2, #2
 80015ae:	d064      	beq.n	800167a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b0:	4935      	ldr	r1, [pc, #212]	@ (8001688 <HAL_RCC_ClockConfig+0x15c>)
 80015b2:	688a      	ldr	r2, [r1, #8]
 80015b4:	f022 0203 	bic.w	r2, r2, #3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80015bc:	f7ff fb8c 	bl	8000cd8 <HAL_GetTick>
 80015c0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	4b31      	ldr	r3, [pc, #196]	@ (8001688 <HAL_RCC_ClockConfig+0x15c>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	6862      	ldr	r2, [r4, #4]
 80015cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015d0:	d016      	beq.n	8001600 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d2:	f7ff fb81 	bl	8000cd8 <HAL_GetTick>
 80015d6:	1b80      	subs	r0, r0, r6
 80015d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015dc:	4298      	cmp	r0, r3
 80015de:	d9f0      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80015e0:	2003      	movs	r0, #3
 80015e2:	e045      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e4:	4a28      	ldr	r2, [pc, #160]	@ (8001688 <HAL_RCC_ClockConfig+0x15c>)
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80015ec:	d1e0      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
 80015f0:	e03e      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	4a25      	ldr	r2, [pc, #148]	@ (8001688 <HAL_RCC_ClockConfig+0x15c>)
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80015fa:	d1d9      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80015fc:	2001      	movs	r0, #1
 80015fe:	e037      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <HAL_RCC_ClockConfig+0x158>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	42ab      	cmp	r3, r5
 800160a:	d90a      	bls.n	8001622 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160c:	4a1d      	ldr	r2, [pc, #116]	@ (8001684 <HAL_RCC_ClockConfig+0x158>)
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	f023 030f 	bic.w	r3, r3, #15
 8001614:	432b      	orrs	r3, r5
 8001616:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001618:	6813      	ldr	r3, [r2, #0]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	42ab      	cmp	r3, r5
 8001620:	d12d      	bne.n	800167e <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	f013 0f04 	tst.w	r3, #4
 8001628:	d006      	beq.n	8001638 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800162a:	4a17      	ldr	r2, [pc, #92]	@ (8001688 <HAL_RCC_ClockConfig+0x15c>)
 800162c:	6893      	ldr	r3, [r2, #8]
 800162e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001632:	68e1      	ldr	r1, [r4, #12]
 8001634:	430b      	orrs	r3, r1
 8001636:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	f013 0f08 	tst.w	r3, #8
 800163e:	d007      	beq.n	8001650 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001640:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <HAL_RCC_ClockConfig+0x15c>)
 8001642:	6893      	ldr	r3, [r2, #8]
 8001644:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001648:	6921      	ldr	r1, [r4, #16]
 800164a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800164e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001650:	f7ff ff18 	bl	8001484 <HAL_RCC_GetSysClockFreq>
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <HAL_RCC_ClockConfig+0x15c>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800165c:	4a0b      	ldr	r2, [pc, #44]	@ (800168c <HAL_RCC_ClockConfig+0x160>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	40d8      	lsrs	r0, r3
 8001662:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_RCC_ClockConfig+0x164>)
 8001664:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_RCC_ClockConfig+0x168>)
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	f7ff faef 	bl	8000c4c <HAL_InitTick>
  return HAL_OK;
 800166e:	2000      	movs	r0, #0
}
 8001670:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001672:	2001      	movs	r0, #1
}
 8001674:	4770      	bx	lr
      return HAL_ERROR;
 8001676:	2001      	movs	r0, #1
 8001678:	e7fa      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800167a:	2001      	movs	r0, #1
 800167c:	e7f8      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800167e:	2001      	movs	r0, #1
 8001680:	e7f6      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00
 8001688:	40023800 	.word	0x40023800
 800168c:	08002fa8 	.word	0x08002fa8
 8001690:	20000014 	.word	0x20000014
 8001694:	2000001c 	.word	0x2000001c

08001698 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001698:	4b01      	ldr	r3, [pc, #4]	@ (80016a0 <HAL_RCC_GetHCLKFreq+0x8>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000014 	.word	0x20000014

080016a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016a4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016a6:	f7ff fff7 	bl	8001698 <HAL_RCC_GetHCLKFreq>
 80016aa:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80016b2:	4a03      	ldr	r2, [pc, #12]	@ (80016c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
}
 80016b6:	40d8      	lsrs	r0, r3
 80016b8:	bd08      	pop	{r3, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	08002fb8 	.word	0x08002fb8

080016c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016c6:	f7ff ffe7 	bl	8001698 <HAL_RCC_GetHCLKFreq>
 80016ca:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80016d2:	4a03      	ldr	r2, [pc, #12]	@ (80016e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
}
 80016d6:	40d8      	lsrs	r0, r3
 80016d8:	bd08      	pop	{r3, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	08002fb8 	.word	0x08002fb8

080016e4 <HAL_SPI_MspInit>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80016e4:	4770      	bx	lr

080016e6 <HAL_SPI_Init>:
  if (hspi == NULL)
 80016e6:	2800      	cmp	r0, #0
 80016e8:	f000 808e 	beq.w	8001808 <HAL_SPI_Init+0x122>
{
 80016ec:	b510      	push	{r4, lr}
 80016ee:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016f0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80016f2:	b933      	cbnz	r3, 8001702 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016f4:	6843      	ldr	r3, [r0, #4]
 80016f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80016fa:	d005      	beq.n	8001708 <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61c3      	str	r3, [r0, #28]
 8001700:	e002      	b.n	8001708 <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001706:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001708:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800170c:	2b00      	cmp	r3, #0
 800170e:	d05a      	beq.n	80017c6 <HAL_SPI_Init+0xe0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001710:	2302      	movs	r3, #2
 8001712:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001716:	6822      	ldr	r2, [r4, #0]
 8001718:	6813      	ldr	r3, [r2, #0]
 800171a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800171e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001720:	68e3      	ldr	r3, [r4, #12]
 8001722:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001726:	d954      	bls.n	80017d2 <HAL_SPI_Init+0xec>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001728:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800172a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800172e:	bf18      	it	ne
 8001730:	f5b3 6fe0 	cmpne.w	r3, #1792	@ 0x700
 8001734:	d001      	beq.n	800173a <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800173a:	6863      	ldr	r3, [r4, #4]
 800173c:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8001740:	68a1      	ldr	r1, [r4, #8]
 8001742:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8001746:	430b      	orrs	r3, r1
 8001748:	6921      	ldr	r1, [r4, #16]
 800174a:	f001 0102 	and.w	r1, r1, #2
 800174e:	430b      	orrs	r3, r1
 8001750:	6961      	ldr	r1, [r4, #20]
 8001752:	f001 0101 	and.w	r1, r1, #1
 8001756:	430b      	orrs	r3, r1
 8001758:	69a1      	ldr	r1, [r4, #24]
 800175a:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 800175e:	430b      	orrs	r3, r1
 8001760:	69e1      	ldr	r1, [r4, #28]
 8001762:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8001766:	430b      	orrs	r3, r1
 8001768:	6a21      	ldr	r1, [r4, #32]
 800176a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800176e:	430b      	orrs	r3, r1
 8001770:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001772:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8001776:	6820      	ldr	r0, [r4, #0]
 8001778:	430b      	orrs	r3, r1
 800177a:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800177c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800177e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001782:	d029      	beq.n	80017d8 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001784:	8b63      	ldrh	r3, [r4, #26]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800178c:	f001 0110 	and.w	r1, r1, #16
 8001790:	430b      	orrs	r3, r1
 8001792:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001794:	f001 0108 	and.w	r1, r1, #8
 8001798:	430b      	orrs	r3, r1
 800179a:	68e1      	ldr	r1, [r4, #12]
 800179c:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6821      	ldr	r1, [r4, #0]
 80017a4:	431a      	orrs	r2, r3
 80017a6:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80017aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017ae:	d027      	beq.n	8001800 <HAL_SPI_Init+0x11a>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017b0:	6822      	ldr	r2, [r4, #0]
 80017b2:	69d3      	ldr	r3, [r2, #28]
 80017b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80017b8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017ba:	2000      	movs	r0, #0
 80017bc:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80017be:	2301      	movs	r3, #1
 80017c0:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 80017c4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80017c6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80017ca:	4620      	mov	r0, r4
 80017cc:	f7ff ff8a 	bl	80016e4 <HAL_SPI_MspInit>
 80017d0:	e79e      	b.n	8001710 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80017d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017d6:	e7a8      	b.n	800172a <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80017d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80017da:	b92b      	cbnz	r3, 80017e8 <HAL_SPI_Init+0x102>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017dc:	68e3      	ldr	r3, [r4, #12]
 80017de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80017e2:	d90a      	bls.n	80017fa <HAL_SPI_Init+0x114>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80017e4:	2302      	movs	r3, #2
 80017e6:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80017e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d1ca      	bne.n	8001784 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80017ee:	6821      	ldr	r1, [r4, #0]
 80017f0:	680b      	ldr	r3, [r1, #0]
 80017f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017f6:	600b      	str	r3, [r1, #0]
 80017f8:	e7c4      	b.n	8001784 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80017fa:	2301      	movs	r3, #1
 80017fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80017fe:	e7f3      	b.n	80017e8 <HAL_SPI_Init+0x102>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8001804:	611a      	str	r2, [r3, #16]
 8001806:	e7d3      	b.n	80017b0 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 8001808:	2001      	movs	r0, #1
}
 800180a:	4770      	bx	lr

0800180c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800180c:	b510      	push	{r4, lr}
 800180e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001810:	6883      	ldr	r3, [r0, #8]
 8001812:	6902      	ldr	r2, [r0, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	6942      	ldr	r2, [r0, #20]
 8001818:	4313      	orrs	r3, r2
 800181a:	69c2      	ldr	r2, [r0, #28]
 800181c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800181e:	6801      	ldr	r1, [r0, #0]
 8001820:	6808      	ldr	r0, [r1, #0]
 8001822:	4a93      	ldr	r2, [pc, #588]	@ (8001a70 <UART_SetConfig+0x264>)
 8001824:	4002      	ands	r2, r0
 8001826:	431a      	orrs	r2, r3
 8001828:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800182a:	6822      	ldr	r2, [r4, #0]
 800182c:	6853      	ldr	r3, [r2, #4]
 800182e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001832:	68e1      	ldr	r1, [r4, #12]
 8001834:	430b      	orrs	r3, r1
 8001836:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001838:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 800183a:	6a23      	ldr	r3, [r4, #32]
 800183c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800183e:	6821      	ldr	r1, [r4, #0]
 8001840:	688b      	ldr	r3, [r1, #8]
 8001842:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	4a89      	ldr	r2, [pc, #548]	@ (8001a74 <UART_SetConfig+0x268>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d019      	beq.n	8001886 <UART_SetConfig+0x7a>
 8001852:	4a89      	ldr	r2, [pc, #548]	@ (8001a78 <UART_SetConfig+0x26c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d029      	beq.n	80018ac <UART_SetConfig+0xa0>
 8001858:	4a88      	ldr	r2, [pc, #544]	@ (8001a7c <UART_SetConfig+0x270>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d03e      	beq.n	80018dc <UART_SetConfig+0xd0>
 800185e:	4a88      	ldr	r2, [pc, #544]	@ (8001a80 <UART_SetConfig+0x274>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d062      	beq.n	800192a <UART_SetConfig+0x11e>
 8001864:	4a87      	ldr	r2, [pc, #540]	@ (8001a84 <UART_SetConfig+0x278>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d071      	beq.n	800194e <UART_SetConfig+0x142>
 800186a:	4a87      	ldr	r2, [pc, #540]	@ (8001a88 <UART_SetConfig+0x27c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	f000 8083 	beq.w	8001978 <UART_SetConfig+0x16c>
 8001872:	4a86      	ldr	r2, [pc, #536]	@ (8001a8c <UART_SetConfig+0x280>)
 8001874:	4293      	cmp	r3, r2
 8001876:	f000 8094 	beq.w	80019a2 <UART_SetConfig+0x196>
 800187a:	4a85      	ldr	r2, [pc, #532]	@ (8001a90 <UART_SetConfig+0x284>)
 800187c:	4293      	cmp	r3, r2
 800187e:	f000 80a5 	beq.w	80019cc <UART_SetConfig+0x1c0>
 8001882:	2310      	movs	r3, #16
 8001884:	e03a      	b.n	80018fc <UART_SetConfig+0xf0>
 8001886:	4b83      	ldr	r3, [pc, #524]	@ (8001a94 <UART_SetConfig+0x288>)
 8001888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d809      	bhi.n	80018a8 <UART_SetConfig+0x9c>
 8001894:	e8df f003 	tbb	[pc, r3]
 8001898:	06ae0402 	.word	0x06ae0402
 800189c:	2301      	movs	r3, #1
 800189e:	e02d      	b.n	80018fc <UART_SetConfig+0xf0>
 80018a0:	2304      	movs	r3, #4
 80018a2:	e02b      	b.n	80018fc <UART_SetConfig+0xf0>
 80018a4:	2308      	movs	r3, #8
 80018a6:	e029      	b.n	80018fc <UART_SetConfig+0xf0>
 80018a8:	2310      	movs	r3, #16
 80018aa:	e027      	b.n	80018fc <UART_SetConfig+0xf0>
 80018ac:	4b79      	ldr	r3, [pc, #484]	@ (8001a94 <UART_SetConfig+0x288>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d80e      	bhi.n	80018d8 <UART_SetConfig+0xcc>
 80018ba:	e8df f003 	tbb	[pc, r3]
 80018be:	0d07      	.short	0x0d07
 80018c0:	0d090d0d 	.word	0x0d090d0d
 80018c4:	0d9d0d0d 	.word	0x0d9d0d0d
 80018c8:	0d0d      	.short	0x0d0d
 80018ca:	0b          	.byte	0x0b
 80018cb:	00          	.byte	0x00
 80018cc:	2300      	movs	r3, #0
 80018ce:	e015      	b.n	80018fc <UART_SetConfig+0xf0>
 80018d0:	2304      	movs	r3, #4
 80018d2:	e013      	b.n	80018fc <UART_SetConfig+0xf0>
 80018d4:	2308      	movs	r3, #8
 80018d6:	e011      	b.n	80018fc <UART_SetConfig+0xf0>
 80018d8:	2310      	movs	r3, #16
 80018da:	e00f      	b.n	80018fc <UART_SetConfig+0xf0>
 80018dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001a94 <UART_SetConfig+0x288>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80018e6:	2b20      	cmp	r3, #32
 80018e8:	f000 8088 	beq.w	80019fc <UART_SetConfig+0x1f0>
 80018ec:	d819      	bhi.n	8001922 <UART_SetConfig+0x116>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8086 	beq.w	8001a00 <UART_SetConfig+0x1f4>
 80018f4:	2b10      	cmp	r3, #16
 80018f6:	f040 8085 	bne.w	8001a04 <UART_SetConfig+0x1f8>
 80018fa:	2304      	movs	r3, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018fc:	69e0      	ldr	r0, [r4, #28]
 80018fe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001902:	f000 80ab 	beq.w	8001a5c <UART_SetConfig+0x250>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001906:	2b08      	cmp	r3, #8
 8001908:	f200 810c 	bhi.w	8001b24 <UART_SetConfig+0x318>
 800190c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001910:	00fb00e8 	.word	0x00fb00e8
 8001914:	010a00e6 	.word	0x010a00e6
 8001918:	010a00fe 	.word	0x010a00fe
 800191c:	010a010a 	.word	0x010a010a
 8001920:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001922:	2b30      	cmp	r3, #48	@ 0x30
 8001924:	d170      	bne.n	8001a08 <UART_SetConfig+0x1fc>
 8001926:	2308      	movs	r3, #8
 8001928:	e7e8      	b.n	80018fc <UART_SetConfig+0xf0>
 800192a:	4b5a      	ldr	r3, [pc, #360]	@ (8001a94 <UART_SetConfig+0x288>)
 800192c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001930:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001934:	2b80      	cmp	r3, #128	@ 0x80
 8001936:	d069      	beq.n	8001a0c <UART_SetConfig+0x200>
 8001938:	d805      	bhi.n	8001946 <UART_SetConfig+0x13a>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d068      	beq.n	8001a10 <UART_SetConfig+0x204>
 800193e:	2b40      	cmp	r3, #64	@ 0x40
 8001940:	d168      	bne.n	8001a14 <UART_SetConfig+0x208>
 8001942:	2304      	movs	r3, #4
 8001944:	e7da      	b.n	80018fc <UART_SetConfig+0xf0>
 8001946:	2bc0      	cmp	r3, #192	@ 0xc0
 8001948:	d166      	bne.n	8001a18 <UART_SetConfig+0x20c>
 800194a:	2308      	movs	r3, #8
 800194c:	e7d6      	b.n	80018fc <UART_SetConfig+0xf0>
 800194e:	4b51      	ldr	r3, [pc, #324]	@ (8001a94 <UART_SetConfig+0x288>)
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800195c:	d05e      	beq.n	8001a1c <UART_SetConfig+0x210>
 800195e:	d806      	bhi.n	800196e <UART_SetConfig+0x162>
 8001960:	2b00      	cmp	r3, #0
 8001962:	d05d      	beq.n	8001a20 <UART_SetConfig+0x214>
 8001964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001968:	d15c      	bne.n	8001a24 <UART_SetConfig+0x218>
 800196a:	2304      	movs	r3, #4
 800196c:	e7c6      	b.n	80018fc <UART_SetConfig+0xf0>
 800196e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001972:	d159      	bne.n	8001a28 <UART_SetConfig+0x21c>
 8001974:	2308      	movs	r3, #8
 8001976:	e7c1      	b.n	80018fc <UART_SetConfig+0xf0>
 8001978:	4b46      	ldr	r3, [pc, #280]	@ (8001a94 <UART_SetConfig+0x288>)
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001986:	d051      	beq.n	8001a2c <UART_SetConfig+0x220>
 8001988:	d806      	bhi.n	8001998 <UART_SetConfig+0x18c>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d050      	beq.n	8001a30 <UART_SetConfig+0x224>
 800198e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001992:	d14f      	bne.n	8001a34 <UART_SetConfig+0x228>
 8001994:	2304      	movs	r3, #4
 8001996:	e7b1      	b.n	80018fc <UART_SetConfig+0xf0>
 8001998:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800199c:	d14c      	bne.n	8001a38 <UART_SetConfig+0x22c>
 800199e:	2308      	movs	r3, #8
 80019a0:	e7ac      	b.n	80018fc <UART_SetConfig+0xf0>
 80019a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001a94 <UART_SetConfig+0x288>)
 80019a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80019ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019b0:	d044      	beq.n	8001a3c <UART_SetConfig+0x230>
 80019b2:	d806      	bhi.n	80019c2 <UART_SetConfig+0x1b6>
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d043      	beq.n	8001a40 <UART_SetConfig+0x234>
 80019b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019bc:	d142      	bne.n	8001a44 <UART_SetConfig+0x238>
 80019be:	2304      	movs	r3, #4
 80019c0:	e79c      	b.n	80018fc <UART_SetConfig+0xf0>
 80019c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80019c6:	d13f      	bne.n	8001a48 <UART_SetConfig+0x23c>
 80019c8:	2308      	movs	r3, #8
 80019ca:	e797      	b.n	80018fc <UART_SetConfig+0xf0>
 80019cc:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <UART_SetConfig+0x288>)
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019da:	d037      	beq.n	8001a4c <UART_SetConfig+0x240>
 80019dc:	d805      	bhi.n	80019ea <UART_SetConfig+0x1de>
 80019de:	b3bb      	cbz	r3, 8001a50 <UART_SetConfig+0x244>
 80019e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019e4:	d136      	bne.n	8001a54 <UART_SetConfig+0x248>
 80019e6:	2304      	movs	r3, #4
 80019e8:	e788      	b.n	80018fc <UART_SetConfig+0xf0>
 80019ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80019ee:	d133      	bne.n	8001a58 <UART_SetConfig+0x24c>
 80019f0:	2308      	movs	r3, #8
 80019f2:	e783      	b.n	80018fc <UART_SetConfig+0xf0>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e781      	b.n	80018fc <UART_SetConfig+0xf0>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e77f      	b.n	80018fc <UART_SetConfig+0xf0>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e77d      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a00:	2300      	movs	r3, #0
 8001a02:	e77b      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a04:	2310      	movs	r3, #16
 8001a06:	e779      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a08:	2310      	movs	r3, #16
 8001a0a:	e777      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e775      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a10:	2300      	movs	r3, #0
 8001a12:	e773      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a14:	2310      	movs	r3, #16
 8001a16:	e771      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a18:	2310      	movs	r3, #16
 8001a1a:	e76f      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e76d      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a20:	2300      	movs	r3, #0
 8001a22:	e76b      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a24:	2310      	movs	r3, #16
 8001a26:	e769      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a28:	2310      	movs	r3, #16
 8001a2a:	e767      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e765      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e763      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a34:	2310      	movs	r3, #16
 8001a36:	e761      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a38:	2310      	movs	r3, #16
 8001a3a:	e75f      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e75d      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a40:	2300      	movs	r3, #0
 8001a42:	e75b      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a44:	2310      	movs	r3, #16
 8001a46:	e759      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a48:	2310      	movs	r3, #16
 8001a4a:	e757      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e755      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a50:	2300      	movs	r3, #0
 8001a52:	e753      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a54:	2310      	movs	r3, #16
 8001a56:	e751      	b.n	80018fc <UART_SetConfig+0xf0>
 8001a58:	2310      	movs	r3, #16
 8001a5a:	e74f      	b.n	80018fc <UART_SetConfig+0xf0>
    switch (clocksource)
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d85b      	bhi.n	8001b18 <UART_SetConfig+0x30c>
 8001a60:	e8df f003 	tbb	[pc, r3]
 8001a64:	5a3a341a 	.word	0x5a3a341a
 8001a68:	5a5a5a37 	.word	0x5a5a5a37
 8001a6c:	1e          	.byte	0x1e
 8001a6d:	00          	.byte	0x00
 8001a6e:	bf00      	nop
 8001a70:	efff69f3 	.word	0xefff69f3
 8001a74:	40011000 	.word	0x40011000
 8001a78:	40004400 	.word	0x40004400
 8001a7c:	40004800 	.word	0x40004800
 8001a80:	40004c00 	.word	0x40004c00
 8001a84:	40005000 	.word	0x40005000
 8001a88:	40011400 	.word	0x40011400
 8001a8c:	40007800 	.word	0x40007800
 8001a90:	40007c00 	.word	0x40007c00
 8001a94:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a98:	f7ff fe04 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	d03d      	beq.n	8001b1c <UART_SetConfig+0x310>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001aa0:	6862      	ldr	r2, [r4, #4]
 8001aa2:	0853      	lsrs	r3, r2, #1
 8001aa4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001aa8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001aac:	f1a3 0110 	sub.w	r1, r3, #16
 8001ab0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8001ab4:	4291      	cmp	r1, r2
 8001ab6:	d833      	bhi.n	8001b20 <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001abe:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001ac2:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8001ac4:	6822      	ldr	r2, [r4, #0]
 8001ac6:	60d3      	str	r3, [r2, #12]
 8001ac8:	2000      	movs	r0, #0
 8001aca:	e030      	b.n	8001b2e <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001acc:	f7ff fdfa 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
        break;
 8001ad0:	e7e4      	b.n	8001a9c <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 8001ad2:	f7ff fcd7 	bl	8001484 <HAL_RCC_GetSysClockFreq>
        break;
 8001ad6:	e7e1      	b.n	8001a9c <UART_SetConfig+0x290>
        pclk = (uint32_t) HSI_VALUE;
 8001ad8:	4817      	ldr	r0, [pc, #92]	@ (8001b38 <UART_SetConfig+0x32c>)
 8001ada:	e7e1      	b.n	8001aa0 <UART_SetConfig+0x294>
    switch (clocksource)
 8001adc:	4816      	ldr	r0, [pc, #88]	@ (8001b38 <UART_SetConfig+0x32c>)
 8001ade:	e002      	b.n	8001ae6 <UART_SetConfig+0x2da>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ae0:	f7ff fde0 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8001ae4:	b300      	cbz	r0, 8001b28 <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ae6:	6863      	ldr	r3, [r4, #4]
 8001ae8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001aec:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001af0:	f1a0 0210 	sub.w	r2, r0, #16
 8001af4:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d817      	bhi.n	8001b2c <UART_SetConfig+0x320>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	b280      	uxth	r0, r0
 8001b00:	60d8      	str	r0, [r3, #12]
 8001b02:	2000      	movs	r0, #0
 8001b04:	e013      	b.n	8001b2e <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b06:	f7ff fddd 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
        break;
 8001b0a:	e7eb      	b.n	8001ae4 <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b0c:	f7ff fcba 	bl	8001484 <HAL_RCC_GetSysClockFreq>
        break;
 8001b10:	e7e8      	b.n	8001ae4 <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 8001b12:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b16:	e7e6      	b.n	8001ae6 <UART_SetConfig+0x2da>
    switch (clocksource)
 8001b18:	2001      	movs	r0, #1
 8001b1a:	e008      	b.n	8001b2e <UART_SetConfig+0x322>
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	e006      	b.n	8001b2e <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8001b20:	2001      	movs	r0, #1
 8001b22:	e004      	b.n	8001b2e <UART_SetConfig+0x322>
    switch (clocksource)
 8001b24:	2001      	movs	r0, #1
 8001b26:	e002      	b.n	8001b2e <UART_SetConfig+0x322>
 8001b28:	2000      	movs	r0, #0
 8001b2a:	e000      	b.n	8001b2e <UART_SetConfig+0x322>
      }
      else
      {
        ret = HAL_ERROR;
 8001b2c:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8001b32:	66e3      	str	r3, [r4, #108]	@ 0x6c

  return ret;
}
 8001b34:	bd10      	pop	{r4, pc}
 8001b36:	bf00      	nop
 8001b38:	00f42400 	.word	0x00f42400

08001b3c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b3c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001b3e:	f013 0f01 	tst.w	r3, #1
 8001b42:	d006      	beq.n	8001b52 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001b44:	6802      	ldr	r2, [r0, #0]
 8001b46:	6853      	ldr	r3, [r2, #4]
 8001b48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001b4c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001b52:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001b54:	f013 0f02 	tst.w	r3, #2
 8001b58:	d006      	beq.n	8001b68 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001b5a:	6802      	ldr	r2, [r0, #0]
 8001b5c:	6853      	ldr	r3, [r2, #4]
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b62:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001b64:	430b      	orrs	r3, r1
 8001b66:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b68:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001b6a:	f013 0f04 	tst.w	r3, #4
 8001b6e:	d006      	beq.n	8001b7e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b70:	6802      	ldr	r2, [r0, #0]
 8001b72:	6853      	ldr	r3, [r2, #4]
 8001b74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b78:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b7e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001b80:	f013 0f08 	tst.w	r3, #8
 8001b84:	d006      	beq.n	8001b94 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b86:	6802      	ldr	r2, [r0, #0]
 8001b88:	6853      	ldr	r3, [r2, #4]
 8001b8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001b8e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001b90:	430b      	orrs	r3, r1
 8001b92:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b94:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001b96:	f013 0f10 	tst.w	r3, #16
 8001b9a:	d006      	beq.n	8001baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b9c:	6802      	ldr	r2, [r0, #0]
 8001b9e:	6893      	ldr	r3, [r2, #8]
 8001ba0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ba4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001baa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001bac:	f013 0f20 	tst.w	r3, #32
 8001bb0:	d006      	beq.n	8001bc0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001bb2:	6802      	ldr	r2, [r0, #0]
 8001bb4:	6893      	ldr	r3, [r2, #8]
 8001bb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001bba:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001bc0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001bc2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001bc6:	d00a      	beq.n	8001bde <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001bc8:	6802      	ldr	r2, [r0, #0]
 8001bca:	6853      	ldr	r3, [r2, #4]
 8001bcc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001bd0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001bd6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001bd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bdc:	d00b      	beq.n	8001bf6 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001bde:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001be0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001be4:	d006      	beq.n	8001bf4 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001be6:	6802      	ldr	r2, [r0, #0]
 8001be8:	6853      	ldr	r3, [r2, #4]
 8001bea:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001bee:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6053      	str	r3, [r2, #4]
  }
}
 8001bf4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001bf6:	6802      	ldr	r2, [r0, #0]
 8001bf8:	6853      	ldr	r3, [r2, #4]
 8001bfa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8001bfe:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001c00:	430b      	orrs	r3, r1
 8001c02:	6053      	str	r3, [r2, #4]
 8001c04:	e7eb      	b.n	8001bde <UART_AdvFeatureConfig+0xa2>

08001c06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001c06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c0a:	4605      	mov	r5, r0
 8001c0c:	460f      	mov	r7, r1
 8001c0e:	4616      	mov	r6, r2
 8001c10:	4699      	mov	r9, r3
 8001c12:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c16:	682b      	ldr	r3, [r5, #0]
 8001c18:	69dc      	ldr	r4, [r3, #28]
 8001c1a:	ea37 0404 	bics.w	r4, r7, r4
 8001c1e:	bf0c      	ite	eq
 8001c20:	2401      	moveq	r4, #1
 8001c22:	2400      	movne	r4, #0
 8001c24:	42b4      	cmp	r4, r6
 8001c26:	d155      	bne.n	8001cd4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c28:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001c2c:	d0f3      	beq.n	8001c16 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c2e:	f7ff f853 	bl	8000cd8 <HAL_GetTick>
 8001c32:	eba0 0009 	sub.w	r0, r0, r9
 8001c36:	4540      	cmp	r0, r8
 8001c38:	d82e      	bhi.n	8001c98 <UART_WaitOnFlagUntilTimeout+0x92>
 8001c3a:	f1b8 0f00 	cmp.w	r8, #0
 8001c3e:	d02b      	beq.n	8001c98 <UART_WaitOnFlagUntilTimeout+0x92>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	f012 0f04 	tst.w	r2, #4
 8001c48:	d0e5      	beq.n	8001c16 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8001c50:	d0e1      	beq.n	8001c16 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c56:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c58:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c5a:	e852 3f00 	ldrex	r3, [r2]
 8001c5e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c62:	e842 3100 	strex	r1, r3, [r2]
 8001c66:	2900      	cmp	r1, #0
 8001c68:	d1f6      	bne.n	8001c58 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c6a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c6c:	f102 0308 	add.w	r3, r2, #8
 8001c70:	e853 3f00 	ldrex	r3, [r3]
 8001c74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c78:	3208      	adds	r2, #8
 8001c7a:	e842 3100 	strex	r1, r3, [r2]
 8001c7e:	2900      	cmp	r1, #0
 8001c80:	d1f3      	bne.n	8001c6a <UART_WaitOnFlagUntilTimeout+0x64>

          huart->gState = HAL_UART_STATE_READY;
 8001c82:	2320      	movs	r3, #32
 8001c84:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8001c86:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c8a:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78

          return HAL_TIMEOUT;
 8001c94:	2003      	movs	r0, #3
 8001c96:	e01e      	b.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c98:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c9a:	e852 3f00 	ldrex	r3, [r2]
 8001c9e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca2:	e842 3100 	strex	r1, r3, [r2]
 8001ca6:	2900      	cmp	r1, #0
 8001ca8:	d1f6      	bne.n	8001c98 <UART_WaitOnFlagUntilTimeout+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001caa:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cac:	f102 0308 	add.w	r3, r2, #8
 8001cb0:	e853 3f00 	ldrex	r3, [r3]
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cb8:	3208      	adds	r2, #8
 8001cba:	e842 3100 	strex	r1, r3, [r2]
 8001cbe:	2900      	cmp	r1, #0
 8001cc0:	d1f3      	bne.n	8001caa <UART_WaitOnFlagUntilTimeout+0xa4>
        huart->gState = HAL_UART_STATE_READY;
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8001cc6:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
        __HAL_UNLOCK(huart);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
        return HAL_TIMEOUT;
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	e000      	b.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0xd0>
        }
      }
    }
  }
  return HAL_OK;
 8001cd4:	2000      	movs	r0, #0
}
 8001cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001cda <HAL_UART_Transmit>:
{
 8001cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001ce2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d14e      	bne.n	8001d86 <HAL_UART_Transmit+0xac>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	460d      	mov	r5, r1
 8001cec:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	bf18      	it	ne
 8001cf2:	2900      	cmpne	r1, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	e046      	b.n	8001d88 <HAL_UART_Transmit+0xae>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d00:	2321      	movs	r3, #33	@ 0x21
 8001d02:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8001d04:	f7fe ffe8 	bl	8000cd8 <HAL_GetTick>
 8001d08:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001d0a:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 8001d0e:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d12:	68a3      	ldr	r3, [r4, #8]
 8001d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d18:	d002      	beq.n	8001d20 <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 8001d1a:	f04f 0800 	mov.w	r8, #0
 8001d1e:	e011      	b.n	8001d44 <HAL_UART_Transmit+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d20:	6923      	ldr	r3, [r4, #16]
 8001d22:	b313      	cbz	r3, 8001d6a <HAL_UART_Transmit+0x90>
      pdata16bits = NULL;
 8001d24:	f04f 0800 	mov.w	r8, #0
 8001d28:	e00c      	b.n	8001d44 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d2a:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001d2e:	6822      	ldr	r2, [r4, #0]
 8001d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d34:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8001d36:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	3a01      	subs	r2, #1
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8001d44:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	b18b      	cbz	r3, 8001d70 <HAL_UART_Transmit+0x96>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d4c:	9600      	str	r6, [sp, #0]
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2200      	movs	r2, #0
 8001d52:	2180      	movs	r1, #128	@ 0x80
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff ff56 	bl	8001c06 <UART_WaitOnFlagUntilTimeout>
 8001d5a:	b9c0      	cbnz	r0, 8001d8e <HAL_UART_Transmit+0xb4>
      if (pdata8bits == NULL)
 8001d5c:	2d00      	cmp	r5, #0
 8001d5e:	d0e4      	beq.n	8001d2a <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d60:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001d68:	e7e5      	b.n	8001d36 <HAL_UART_Transmit+0x5c>
      pdata16bits = (const uint16_t *) pData;
 8001d6a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001d6c:	2500      	movs	r5, #0
 8001d6e:	e7e9      	b.n	8001d44 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d70:	9600      	str	r6, [sp, #0]
 8001d72:	463b      	mov	r3, r7
 8001d74:	2200      	movs	r2, #0
 8001d76:	2140      	movs	r1, #64	@ 0x40
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7ff ff44 	bl	8001c06 <UART_WaitOnFlagUntilTimeout>
 8001d7e:	b940      	cbnz	r0, 8001d92 <HAL_UART_Transmit+0xb8>
    huart->gState = HAL_UART_STATE_READY;
 8001d80:	2320      	movs	r3, #32
 8001d82:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8001d84:	e000      	b.n	8001d88 <HAL_UART_Transmit+0xae>
    return HAL_BUSY;
 8001d86:	2002      	movs	r0, #2
}
 8001d88:	b002      	add	sp, #8
 8001d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 8001d8e:	2003      	movs	r0, #3
 8001d90:	e7fa      	b.n	8001d88 <HAL_UART_Transmit+0xae>
      return HAL_TIMEOUT;
 8001d92:	2003      	movs	r0, #3
 8001d94:	e7f8      	b.n	8001d88 <HAL_UART_Transmit+0xae>

08001d96 <HAL_UART_Receive>:
{
 8001d96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d9e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d178      	bne.n	8001e98 <HAL_UART_Receive+0x102>
 8001da6:	4604      	mov	r4, r0
 8001da8:	460d      	mov	r5, r1
 8001daa:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001dac:	2a00      	cmp	r2, #0
 8001dae:	bf18      	it	ne
 8001db0:	2900      	cmpne	r1, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8001db4:	2001      	movs	r0, #1
 8001db6:	e070      	b.n	8001e9a <HAL_UART_Receive+0x104>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dbe:	2222      	movs	r2, #34	@ 0x22
 8001dc0:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dc4:	6603      	str	r3, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8001dc6:	f7fe ff87 	bl	8000cd8 <HAL_GetTick>
 8001dca:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001dcc:	f8a4 8058 	strh.w	r8, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8001dd0:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8001dd4:	68a3      	ldr	r3, [r4, #8]
 8001dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dda:	d006      	beq.n	8001dea <HAL_UART_Receive+0x54>
 8001ddc:	b9a3      	cbnz	r3, 8001e08 <HAL_UART_Receive+0x72>
 8001dde:	6922      	ldr	r2, [r4, #16]
 8001de0:	b972      	cbnz	r2, 8001e00 <HAL_UART_Receive+0x6a>
 8001de2:	22ff      	movs	r2, #255	@ 0xff
 8001de4:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001de8:	e014      	b.n	8001e14 <HAL_UART_Receive+0x7e>
 8001dea:	6922      	ldr	r2, [r4, #16]
 8001dec:	b922      	cbnz	r2, 8001df8 <HAL_UART_Receive+0x62>
 8001dee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001df2:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001df6:	e00d      	b.n	8001e14 <HAL_UART_Receive+0x7e>
 8001df8:	22ff      	movs	r2, #255	@ 0xff
 8001dfa:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001dfe:	e009      	b.n	8001e14 <HAL_UART_Receive+0x7e>
 8001e00:	227f      	movs	r2, #127	@ 0x7f
 8001e02:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001e06:	e005      	b.n	8001e14 <HAL_UART_Receive+0x7e>
 8001e08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e0c:	d00a      	beq.n	8001e24 <HAL_UART_Receive+0x8e>
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 8001e14:	f8b4 805c 	ldrh.w	r8, [r4, #92]	@ 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e1c:	d00c      	beq.n	8001e38 <HAL_UART_Receive+0xa2>
      pdata16bits = NULL;
 8001e1e:	f04f 0900 	mov.w	r9, #0
 8001e22:	e01f      	b.n	8001e64 <HAL_UART_Receive+0xce>
    UART_MASK_COMPUTATION(huart);
 8001e24:	6922      	ldr	r2, [r4, #16]
 8001e26:	b91a      	cbnz	r2, 8001e30 <HAL_UART_Receive+0x9a>
 8001e28:	227f      	movs	r2, #127	@ 0x7f
 8001e2a:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001e2e:	e7f1      	b.n	8001e14 <HAL_UART_Receive+0x7e>
 8001e30:	223f      	movs	r2, #63	@ 0x3f
 8001e32:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001e36:	e7ed      	b.n	8001e14 <HAL_UART_Receive+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e38:	6923      	ldr	r3, [r4, #16]
 8001e3a:	b113      	cbz	r3, 8001e42 <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 8001e3c:	f04f 0900 	mov.w	r9, #0
 8001e40:	e010      	b.n	8001e64 <HAL_UART_Receive+0xce>
      pdata16bits = (uint16_t *) pData;
 8001e42:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001e44:	2500      	movs	r5, #0
 8001e46:	e00d      	b.n	8001e64 <HAL_UART_Receive+0xce>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e4c:	fa5f f388 	uxtb.w	r3, r8
 8001e50:	4013      	ands	r3, r2
 8001e52:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8001e56:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8001e5a:	b292      	uxth	r2, r2
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8001e64:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b183      	cbz	r3, 8001e8e <HAL_UART_Receive+0xf8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e6c:	9600      	str	r6, [sp, #0]
 8001e6e:	463b      	mov	r3, r7
 8001e70:	2200      	movs	r2, #0
 8001e72:	2120      	movs	r1, #32
 8001e74:	4620      	mov	r0, r4
 8001e76:	f7ff fec6 	bl	8001c06 <UART_WaitOnFlagUntilTimeout>
 8001e7a:	b988      	cbnz	r0, 8001ea0 <HAL_UART_Receive+0x10a>
      if (pdata8bits == NULL)
 8001e7c:	2d00      	cmp	r5, #0
 8001e7e:	d1e3      	bne.n	8001e48 <HAL_UART_Receive+0xb2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	ea08 0303 	and.w	r3, r8, r3
 8001e88:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 8001e8c:	e7e3      	b.n	8001e56 <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8001e94:	2000      	movs	r0, #0
 8001e96:	e000      	b.n	8001e9a <HAL_UART_Receive+0x104>
    return HAL_BUSY;
 8001e98:	2002      	movs	r0, #2
}
 8001e9a:	b003      	add	sp, #12
 8001e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	e7fa      	b.n	8001e9a <HAL_UART_Receive+0x104>

08001ea4 <UART_CheckIdleState>:
{
 8001ea4:	b530      	push	{r4, r5, lr}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8001eb0:	f7fe ff12 	bl	8000cd8 <HAL_GetTick>
 8001eb4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	f012 0f08 	tst.w	r2, #8
 8001ebe:	d10f      	bne.n	8001ee0 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f013 0f04 	tst.w	r3, #4
 8001ec8:	d118      	bne.n	8001efc <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001ece:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ed6:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8001ed8:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 8001edc:	b003      	add	sp, #12
 8001ede:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ee0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7ff fe89 	bl	8001c06 <UART_WaitOnFlagUntilTimeout>
 8001ef4:	2800      	cmp	r0, #0
 8001ef6:	d0e3      	beq.n	8001ec0 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8001ef8:	2003      	movs	r0, #3
 8001efa:	e7ef      	b.n	8001edc <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001efc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	462b      	mov	r3, r5
 8001f04:	2200      	movs	r2, #0
 8001f06:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7ff fe7b 	bl	8001c06 <UART_WaitOnFlagUntilTimeout>
 8001f10:	2800      	cmp	r0, #0
 8001f12:	d0da      	beq.n	8001eca <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8001f14:	2003      	movs	r0, #3
 8001f16:	e7e1      	b.n	8001edc <UART_CheckIdleState+0x38>

08001f18 <HAL_UART_Init>:
  if (huart == NULL)
 8001f18:	b368      	cbz	r0, 8001f76 <HAL_UART_Init+0x5e>
{
 8001f1a:	b510      	push	{r4, lr}
 8001f1c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001f1e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001f20:	b303      	cbz	r3, 8001f64 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001f22:	2324      	movs	r3, #36	@ 0x24
 8001f24:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8001f26:	6822      	ldr	r2, [r4, #0]
 8001f28:	6813      	ldr	r3, [r2, #0]
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff fc6b 	bl	800180c <UART_SetConfig>
 8001f36:	2801      	cmp	r0, #1
 8001f38:	d013      	beq.n	8001f62 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f3c:	b9bb      	cbnz	r3, 8001f6e <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f3e:	6822      	ldr	r2, [r4, #0]
 8001f40:	6853      	ldr	r3, [r2, #4]
 8001f42:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001f46:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f48:	6822      	ldr	r2, [r4, #0]
 8001f4a:	6893      	ldr	r3, [r2, #8]
 8001f4c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001f50:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001f52:	6822      	ldr	r2, [r4, #0]
 8001f54:	6813      	ldr	r3, [r2, #0]
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f7ff ffa1 	bl	8001ea4 <UART_CheckIdleState>
}
 8001f62:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001f64:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8001f68:	f7fe fda4 	bl	8000ab4 <HAL_UART_MspInit>
 8001f6c:	e7d9      	b.n	8001f22 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f7ff fde4 	bl	8001b3c <UART_AdvFeatureConfig>
 8001f74:	e7e3      	b.n	8001f3e <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001f76:	2001      	movs	r0, #1
}
 8001f78:	4770      	bx	lr
	...

08001f7c <std>:
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	b510      	push	{r4, lr}
 8001f80:	4604      	mov	r4, r0
 8001f82:	e9c0 3300 	strd	r3, r3, [r0]
 8001f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f8a:	6083      	str	r3, [r0, #8]
 8001f8c:	8181      	strh	r1, [r0, #12]
 8001f8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f90:	81c2      	strh	r2, [r0, #14]
 8001f92:	6183      	str	r3, [r0, #24]
 8001f94:	4619      	mov	r1, r3
 8001f96:	2208      	movs	r2, #8
 8001f98:	305c      	adds	r0, #92	@ 0x5c
 8001f9a:	f000 f9c2 	bl	8002322 <memset>
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <std+0x58>)
 8001fa0:	6263      	str	r3, [r4, #36]	@ 0x24
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd8 <std+0x5c>)
 8001fa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <std+0x60>)
 8001fa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <std+0x64>)
 8001fac:	6323      	str	r3, [r4, #48]	@ 0x30
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <std+0x68>)
 8001fb0:	6224      	str	r4, [r4, #32]
 8001fb2:	429c      	cmp	r4, r3
 8001fb4:	d006      	beq.n	8001fc4 <std+0x48>
 8001fb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001fba:	4294      	cmp	r4, r2
 8001fbc:	d002      	beq.n	8001fc4 <std+0x48>
 8001fbe:	33d0      	adds	r3, #208	@ 0xd0
 8001fc0:	429c      	cmp	r4, r3
 8001fc2:	d105      	bne.n	8001fd0 <std+0x54>
 8001fc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fcc:	f000 ba1c 	b.w	8002408 <__retarget_lock_init_recursive>
 8001fd0:	bd10      	pop	{r4, pc}
 8001fd2:	bf00      	nop
 8001fd4:	0800229d 	.word	0x0800229d
 8001fd8:	080022bf 	.word	0x080022bf
 8001fdc:	080022f7 	.word	0x080022f7
 8001fe0:	0800231b 	.word	0x0800231b
 8001fe4:	20000674 	.word	0x20000674

08001fe8 <stdio_exit_handler>:
 8001fe8:	4a02      	ldr	r2, [pc, #8]	@ (8001ff4 <stdio_exit_handler+0xc>)
 8001fea:	4903      	ldr	r1, [pc, #12]	@ (8001ff8 <stdio_exit_handler+0x10>)
 8001fec:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <stdio_exit_handler+0x14>)
 8001fee:	f000 b869 	b.w	80020c4 <_fwalk_sglue>
 8001ff2:	bf00      	nop
 8001ff4:	20000020 	.word	0x20000020
 8001ff8:	08002cd5 	.word	0x08002cd5
 8001ffc:	20000030 	.word	0x20000030

08002000 <cleanup_stdio>:
 8002000:	6841      	ldr	r1, [r0, #4]
 8002002:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <cleanup_stdio+0x34>)
 8002004:	4299      	cmp	r1, r3
 8002006:	b510      	push	{r4, lr}
 8002008:	4604      	mov	r4, r0
 800200a:	d001      	beq.n	8002010 <cleanup_stdio+0x10>
 800200c:	f000 fe62 	bl	8002cd4 <_fflush_r>
 8002010:	68a1      	ldr	r1, [r4, #8]
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <cleanup_stdio+0x38>)
 8002014:	4299      	cmp	r1, r3
 8002016:	d002      	beq.n	800201e <cleanup_stdio+0x1e>
 8002018:	4620      	mov	r0, r4
 800201a:	f000 fe5b 	bl	8002cd4 <_fflush_r>
 800201e:	68e1      	ldr	r1, [r4, #12]
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <cleanup_stdio+0x3c>)
 8002022:	4299      	cmp	r1, r3
 8002024:	d004      	beq.n	8002030 <cleanup_stdio+0x30>
 8002026:	4620      	mov	r0, r4
 8002028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800202c:	f000 be52 	b.w	8002cd4 <_fflush_r>
 8002030:	bd10      	pop	{r4, pc}
 8002032:	bf00      	nop
 8002034:	20000674 	.word	0x20000674
 8002038:	200006dc 	.word	0x200006dc
 800203c:	20000744 	.word	0x20000744

08002040 <global_stdio_init.part.0>:
 8002040:	b510      	push	{r4, lr}
 8002042:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <global_stdio_init.part.0+0x30>)
 8002044:	4c0b      	ldr	r4, [pc, #44]	@ (8002074 <global_stdio_init.part.0+0x34>)
 8002046:	4a0c      	ldr	r2, [pc, #48]	@ (8002078 <global_stdio_init.part.0+0x38>)
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	4620      	mov	r0, r4
 800204c:	2200      	movs	r2, #0
 800204e:	2104      	movs	r1, #4
 8002050:	f7ff ff94 	bl	8001f7c <std>
 8002054:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002058:	2201      	movs	r2, #1
 800205a:	2109      	movs	r1, #9
 800205c:	f7ff ff8e 	bl	8001f7c <std>
 8002060:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002064:	2202      	movs	r2, #2
 8002066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800206a:	2112      	movs	r1, #18
 800206c:	f7ff bf86 	b.w	8001f7c <std>
 8002070:	200007ac 	.word	0x200007ac
 8002074:	20000674 	.word	0x20000674
 8002078:	08001fe9 	.word	0x08001fe9

0800207c <__sfp_lock_acquire>:
 800207c:	4801      	ldr	r0, [pc, #4]	@ (8002084 <__sfp_lock_acquire+0x8>)
 800207e:	f000 b9c4 	b.w	800240a <__retarget_lock_acquire_recursive>
 8002082:	bf00      	nop
 8002084:	200007b5 	.word	0x200007b5

08002088 <__sfp_lock_release>:
 8002088:	4801      	ldr	r0, [pc, #4]	@ (8002090 <__sfp_lock_release+0x8>)
 800208a:	f000 b9bf 	b.w	800240c <__retarget_lock_release_recursive>
 800208e:	bf00      	nop
 8002090:	200007b5 	.word	0x200007b5

08002094 <__sinit>:
 8002094:	b510      	push	{r4, lr}
 8002096:	4604      	mov	r4, r0
 8002098:	f7ff fff0 	bl	800207c <__sfp_lock_acquire>
 800209c:	6a23      	ldr	r3, [r4, #32]
 800209e:	b11b      	cbz	r3, 80020a8 <__sinit+0x14>
 80020a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020a4:	f7ff bff0 	b.w	8002088 <__sfp_lock_release>
 80020a8:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <__sinit+0x28>)
 80020aa:	6223      	str	r3, [r4, #32]
 80020ac:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <__sinit+0x2c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f5      	bne.n	80020a0 <__sinit+0xc>
 80020b4:	f7ff ffc4 	bl	8002040 <global_stdio_init.part.0>
 80020b8:	e7f2      	b.n	80020a0 <__sinit+0xc>
 80020ba:	bf00      	nop
 80020bc:	08002001 	.word	0x08002001
 80020c0:	200007ac 	.word	0x200007ac

080020c4 <_fwalk_sglue>:
 80020c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020c8:	4607      	mov	r7, r0
 80020ca:	4688      	mov	r8, r1
 80020cc:	4614      	mov	r4, r2
 80020ce:	2600      	movs	r6, #0
 80020d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80020d4:	f1b9 0901 	subs.w	r9, r9, #1
 80020d8:	d505      	bpl.n	80020e6 <_fwalk_sglue+0x22>
 80020da:	6824      	ldr	r4, [r4, #0]
 80020dc:	2c00      	cmp	r4, #0
 80020de:	d1f7      	bne.n	80020d0 <_fwalk_sglue+0xc>
 80020e0:	4630      	mov	r0, r6
 80020e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020e6:	89ab      	ldrh	r3, [r5, #12]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d907      	bls.n	80020fc <_fwalk_sglue+0x38>
 80020ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020f0:	3301      	adds	r3, #1
 80020f2:	d003      	beq.n	80020fc <_fwalk_sglue+0x38>
 80020f4:	4629      	mov	r1, r5
 80020f6:	4638      	mov	r0, r7
 80020f8:	47c0      	blx	r8
 80020fa:	4306      	orrs	r6, r0
 80020fc:	3568      	adds	r5, #104	@ 0x68
 80020fe:	e7e9      	b.n	80020d4 <_fwalk_sglue+0x10>

08002100 <iprintf>:
 8002100:	b40f      	push	{r0, r1, r2, r3}
 8002102:	b507      	push	{r0, r1, r2, lr}
 8002104:	4906      	ldr	r1, [pc, #24]	@ (8002120 <iprintf+0x20>)
 8002106:	ab04      	add	r3, sp, #16
 8002108:	6808      	ldr	r0, [r1, #0]
 800210a:	f853 2b04 	ldr.w	r2, [r3], #4
 800210e:	6881      	ldr	r1, [r0, #8]
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	f000 fab5 	bl	8002680 <_vfiprintf_r>
 8002116:	b003      	add	sp, #12
 8002118:	f85d eb04 	ldr.w	lr, [sp], #4
 800211c:	b004      	add	sp, #16
 800211e:	4770      	bx	lr
 8002120:	2000002c 	.word	0x2000002c

08002124 <setbuf>:
 8002124:	fab1 f281 	clz	r2, r1
 8002128:	0952      	lsrs	r2, r2, #5
 800212a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800212e:	0052      	lsls	r2, r2, #1
 8002130:	f000 b800 	b.w	8002134 <setvbuf>

08002134 <setvbuf>:
 8002134:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002138:	461d      	mov	r5, r3
 800213a:	4b57      	ldr	r3, [pc, #348]	@ (8002298 <setvbuf+0x164>)
 800213c:	681f      	ldr	r7, [r3, #0]
 800213e:	4604      	mov	r4, r0
 8002140:	460e      	mov	r6, r1
 8002142:	4690      	mov	r8, r2
 8002144:	b127      	cbz	r7, 8002150 <setvbuf+0x1c>
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	b913      	cbnz	r3, 8002150 <setvbuf+0x1c>
 800214a:	4638      	mov	r0, r7
 800214c:	f7ff ffa2 	bl	8002094 <__sinit>
 8002150:	f1b8 0f02 	cmp.w	r8, #2
 8002154:	d006      	beq.n	8002164 <setvbuf+0x30>
 8002156:	f1b8 0f01 	cmp.w	r8, #1
 800215a:	f200 809a 	bhi.w	8002292 <setvbuf+0x15e>
 800215e:	2d00      	cmp	r5, #0
 8002160:	f2c0 8097 	blt.w	8002292 <setvbuf+0x15e>
 8002164:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002166:	07d9      	lsls	r1, r3, #31
 8002168:	d405      	bmi.n	8002176 <setvbuf+0x42>
 800216a:	89a3      	ldrh	r3, [r4, #12]
 800216c:	059a      	lsls	r2, r3, #22
 800216e:	d402      	bmi.n	8002176 <setvbuf+0x42>
 8002170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002172:	f000 f94a 	bl	800240a <__retarget_lock_acquire_recursive>
 8002176:	4621      	mov	r1, r4
 8002178:	4638      	mov	r0, r7
 800217a:	f000 fdab 	bl	8002cd4 <_fflush_r>
 800217e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002180:	b141      	cbz	r1, 8002194 <setvbuf+0x60>
 8002182:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002186:	4299      	cmp	r1, r3
 8002188:	d002      	beq.n	8002190 <setvbuf+0x5c>
 800218a:	4638      	mov	r0, r7
 800218c:	f000 f94e 	bl	800242c <_free_r>
 8002190:	2300      	movs	r3, #0
 8002192:	6363      	str	r3, [r4, #52]	@ 0x34
 8002194:	2300      	movs	r3, #0
 8002196:	61a3      	str	r3, [r4, #24]
 8002198:	6063      	str	r3, [r4, #4]
 800219a:	89a3      	ldrh	r3, [r4, #12]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	d503      	bpl.n	80021a8 <setvbuf+0x74>
 80021a0:	6921      	ldr	r1, [r4, #16]
 80021a2:	4638      	mov	r0, r7
 80021a4:	f000 f942 	bl	800242c <_free_r>
 80021a8:	89a3      	ldrh	r3, [r4, #12]
 80021aa:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	f1b8 0f02 	cmp.w	r8, #2
 80021b6:	81a3      	strh	r3, [r4, #12]
 80021b8:	d061      	beq.n	800227e <setvbuf+0x14a>
 80021ba:	ab01      	add	r3, sp, #4
 80021bc:	466a      	mov	r2, sp
 80021be:	4621      	mov	r1, r4
 80021c0:	4638      	mov	r0, r7
 80021c2:	f000 fdaf 	bl	8002d24 <__swhatbuf_r>
 80021c6:	89a3      	ldrh	r3, [r4, #12]
 80021c8:	4318      	orrs	r0, r3
 80021ca:	81a0      	strh	r0, [r4, #12]
 80021cc:	bb2d      	cbnz	r5, 800221a <setvbuf+0xe6>
 80021ce:	9d00      	ldr	r5, [sp, #0]
 80021d0:	4628      	mov	r0, r5
 80021d2:	f000 f975 	bl	80024c0 <malloc>
 80021d6:	4606      	mov	r6, r0
 80021d8:	2800      	cmp	r0, #0
 80021da:	d152      	bne.n	8002282 <setvbuf+0x14e>
 80021dc:	f8dd 9000 	ldr.w	r9, [sp]
 80021e0:	45a9      	cmp	r9, r5
 80021e2:	d140      	bne.n	8002266 <setvbuf+0x132>
 80021e4:	f04f 35ff 	mov.w	r5, #4294967295
 80021e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ec:	f043 0202 	orr.w	r2, r3, #2
 80021f0:	81a2      	strh	r2, [r4, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	60a2      	str	r2, [r4, #8]
 80021f6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80021fa:	6022      	str	r2, [r4, #0]
 80021fc:	6122      	str	r2, [r4, #16]
 80021fe:	2201      	movs	r2, #1
 8002200:	6162      	str	r2, [r4, #20]
 8002202:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002204:	07d6      	lsls	r6, r2, #31
 8002206:	d404      	bmi.n	8002212 <setvbuf+0xde>
 8002208:	0598      	lsls	r0, r3, #22
 800220a:	d402      	bmi.n	8002212 <setvbuf+0xde>
 800220c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800220e:	f000 f8fd 	bl	800240c <__retarget_lock_release_recursive>
 8002212:	4628      	mov	r0, r5
 8002214:	b003      	add	sp, #12
 8002216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800221a:	2e00      	cmp	r6, #0
 800221c:	d0d8      	beq.n	80021d0 <setvbuf+0x9c>
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	b913      	cbnz	r3, 8002228 <setvbuf+0xf4>
 8002222:	4638      	mov	r0, r7
 8002224:	f7ff ff36 	bl	8002094 <__sinit>
 8002228:	f1b8 0f01 	cmp.w	r8, #1
 800222c:	bf08      	it	eq
 800222e:	89a3      	ldrheq	r3, [r4, #12]
 8002230:	6026      	str	r6, [r4, #0]
 8002232:	bf04      	itt	eq
 8002234:	f043 0301 	orreq.w	r3, r3, #1
 8002238:	81a3      	strheq	r3, [r4, #12]
 800223a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800223e:	f013 0208 	ands.w	r2, r3, #8
 8002242:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002246:	d01e      	beq.n	8002286 <setvbuf+0x152>
 8002248:	07d9      	lsls	r1, r3, #31
 800224a:	bf41      	itttt	mi
 800224c:	2200      	movmi	r2, #0
 800224e:	426d      	negmi	r5, r5
 8002250:	60a2      	strmi	r2, [r4, #8]
 8002252:	61a5      	strmi	r5, [r4, #24]
 8002254:	bf58      	it	pl
 8002256:	60a5      	strpl	r5, [r4, #8]
 8002258:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800225a:	07d2      	lsls	r2, r2, #31
 800225c:	d401      	bmi.n	8002262 <setvbuf+0x12e>
 800225e:	059b      	lsls	r3, r3, #22
 8002260:	d513      	bpl.n	800228a <setvbuf+0x156>
 8002262:	2500      	movs	r5, #0
 8002264:	e7d5      	b.n	8002212 <setvbuf+0xde>
 8002266:	4648      	mov	r0, r9
 8002268:	f000 f92a 	bl	80024c0 <malloc>
 800226c:	4606      	mov	r6, r0
 800226e:	2800      	cmp	r0, #0
 8002270:	d0b8      	beq.n	80021e4 <setvbuf+0xb0>
 8002272:	89a3      	ldrh	r3, [r4, #12]
 8002274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002278:	81a3      	strh	r3, [r4, #12]
 800227a:	464d      	mov	r5, r9
 800227c:	e7cf      	b.n	800221e <setvbuf+0xea>
 800227e:	2500      	movs	r5, #0
 8002280:	e7b2      	b.n	80021e8 <setvbuf+0xb4>
 8002282:	46a9      	mov	r9, r5
 8002284:	e7f5      	b.n	8002272 <setvbuf+0x13e>
 8002286:	60a2      	str	r2, [r4, #8]
 8002288:	e7e6      	b.n	8002258 <setvbuf+0x124>
 800228a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800228c:	f000 f8be 	bl	800240c <__retarget_lock_release_recursive>
 8002290:	e7e7      	b.n	8002262 <setvbuf+0x12e>
 8002292:	f04f 35ff 	mov.w	r5, #4294967295
 8002296:	e7bc      	b.n	8002212 <setvbuf+0xde>
 8002298:	2000002c 	.word	0x2000002c

0800229c <__sread>:
 800229c:	b510      	push	{r4, lr}
 800229e:	460c      	mov	r4, r1
 80022a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022a4:	f000 f868 	bl	8002378 <_read_r>
 80022a8:	2800      	cmp	r0, #0
 80022aa:	bfab      	itete	ge
 80022ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80022ae:	89a3      	ldrhlt	r3, [r4, #12]
 80022b0:	181b      	addge	r3, r3, r0
 80022b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80022b6:	bfac      	ite	ge
 80022b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80022ba:	81a3      	strhlt	r3, [r4, #12]
 80022bc:	bd10      	pop	{r4, pc}

080022be <__swrite>:
 80022be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022c2:	461f      	mov	r7, r3
 80022c4:	898b      	ldrh	r3, [r1, #12]
 80022c6:	05db      	lsls	r3, r3, #23
 80022c8:	4605      	mov	r5, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	4616      	mov	r6, r2
 80022ce:	d505      	bpl.n	80022dc <__swrite+0x1e>
 80022d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d4:	2302      	movs	r3, #2
 80022d6:	2200      	movs	r2, #0
 80022d8:	f000 f83c 	bl	8002354 <_lseek_r>
 80022dc:	89a3      	ldrh	r3, [r4, #12]
 80022de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022e6:	81a3      	strh	r3, [r4, #12]
 80022e8:	4632      	mov	r2, r6
 80022ea:	463b      	mov	r3, r7
 80022ec:	4628      	mov	r0, r5
 80022ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022f2:	f000 b853 	b.w	800239c <_write_r>

080022f6 <__sseek>:
 80022f6:	b510      	push	{r4, lr}
 80022f8:	460c      	mov	r4, r1
 80022fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fe:	f000 f829 	bl	8002354 <_lseek_r>
 8002302:	1c43      	adds	r3, r0, #1
 8002304:	89a3      	ldrh	r3, [r4, #12]
 8002306:	bf15      	itete	ne
 8002308:	6560      	strne	r0, [r4, #84]	@ 0x54
 800230a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800230e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002312:	81a3      	strheq	r3, [r4, #12]
 8002314:	bf18      	it	ne
 8002316:	81a3      	strhne	r3, [r4, #12]
 8002318:	bd10      	pop	{r4, pc}

0800231a <__sclose>:
 800231a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800231e:	f000 b809 	b.w	8002334 <_close_r>

08002322 <memset>:
 8002322:	4402      	add	r2, r0
 8002324:	4603      	mov	r3, r0
 8002326:	4293      	cmp	r3, r2
 8002328:	d100      	bne.n	800232c <memset+0xa>
 800232a:	4770      	bx	lr
 800232c:	f803 1b01 	strb.w	r1, [r3], #1
 8002330:	e7f9      	b.n	8002326 <memset+0x4>
	...

08002334 <_close_r>:
 8002334:	b538      	push	{r3, r4, r5, lr}
 8002336:	4d06      	ldr	r5, [pc, #24]	@ (8002350 <_close_r+0x1c>)
 8002338:	2300      	movs	r3, #0
 800233a:	4604      	mov	r4, r0
 800233c:	4608      	mov	r0, r1
 800233e:	602b      	str	r3, [r5, #0]
 8002340:	f7fe fc4a 	bl	8000bd8 <_close>
 8002344:	1c43      	adds	r3, r0, #1
 8002346:	d102      	bne.n	800234e <_close_r+0x1a>
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	b103      	cbz	r3, 800234e <_close_r+0x1a>
 800234c:	6023      	str	r3, [r4, #0]
 800234e:	bd38      	pop	{r3, r4, r5, pc}
 8002350:	200007b0 	.word	0x200007b0

08002354 <_lseek_r>:
 8002354:	b538      	push	{r3, r4, r5, lr}
 8002356:	4d07      	ldr	r5, [pc, #28]	@ (8002374 <_lseek_r+0x20>)
 8002358:	4604      	mov	r4, r0
 800235a:	4608      	mov	r0, r1
 800235c:	4611      	mov	r1, r2
 800235e:	2200      	movs	r2, #0
 8002360:	602a      	str	r2, [r5, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	f7fe fc39 	bl	8000bda <_lseek>
 8002368:	1c43      	adds	r3, r0, #1
 800236a:	d102      	bne.n	8002372 <_lseek_r+0x1e>
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	b103      	cbz	r3, 8002372 <_lseek_r+0x1e>
 8002370:	6023      	str	r3, [r4, #0]
 8002372:	bd38      	pop	{r3, r4, r5, pc}
 8002374:	200007b0 	.word	0x200007b0

08002378 <_read_r>:
 8002378:	b538      	push	{r3, r4, r5, lr}
 800237a:	4d07      	ldr	r5, [pc, #28]	@ (8002398 <_read_r+0x20>)
 800237c:	4604      	mov	r4, r0
 800237e:	4608      	mov	r0, r1
 8002380:	4611      	mov	r1, r2
 8002382:	2200      	movs	r2, #0
 8002384:	602a      	str	r2, [r5, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	f7fe fc18 	bl	8000bbc <_read>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d102      	bne.n	8002396 <_read_r+0x1e>
 8002390:	682b      	ldr	r3, [r5, #0]
 8002392:	b103      	cbz	r3, 8002396 <_read_r+0x1e>
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	bd38      	pop	{r3, r4, r5, pc}
 8002398:	200007b0 	.word	0x200007b0

0800239c <_write_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4d07      	ldr	r5, [pc, #28]	@ (80023bc <_write_r+0x20>)
 80023a0:	4604      	mov	r4, r0
 80023a2:	4608      	mov	r0, r1
 80023a4:	4611      	mov	r1, r2
 80023a6:	2200      	movs	r2, #0
 80023a8:	602a      	str	r2, [r5, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f7fe fbfa 	bl	8000ba4 <_write>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d102      	bne.n	80023ba <_write_r+0x1e>
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	b103      	cbz	r3, 80023ba <_write_r+0x1e>
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	bd38      	pop	{r3, r4, r5, pc}
 80023bc:	200007b0 	.word	0x200007b0

080023c0 <__libc_init_array>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	4d0d      	ldr	r5, [pc, #52]	@ (80023f8 <__libc_init_array+0x38>)
 80023c4:	4c0d      	ldr	r4, [pc, #52]	@ (80023fc <__libc_init_array+0x3c>)
 80023c6:	1b64      	subs	r4, r4, r5
 80023c8:	10a4      	asrs	r4, r4, #2
 80023ca:	2600      	movs	r6, #0
 80023cc:	42a6      	cmp	r6, r4
 80023ce:	d109      	bne.n	80023e4 <__libc_init_array+0x24>
 80023d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002400 <__libc_init_array+0x40>)
 80023d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002404 <__libc_init_array+0x44>)
 80023d4:	f000 fddc 	bl	8002f90 <_init>
 80023d8:	1b64      	subs	r4, r4, r5
 80023da:	10a4      	asrs	r4, r4, #2
 80023dc:	2600      	movs	r6, #0
 80023de:	42a6      	cmp	r6, r4
 80023e0:	d105      	bne.n	80023ee <__libc_init_array+0x2e>
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
 80023e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e8:	4798      	blx	r3
 80023ea:	3601      	adds	r6, #1
 80023ec:	e7ee      	b.n	80023cc <__libc_init_array+0xc>
 80023ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80023f2:	4798      	blx	r3
 80023f4:	3601      	adds	r6, #1
 80023f6:	e7f2      	b.n	80023de <__libc_init_array+0x1e>
 80023f8:	08003000 	.word	0x08003000
 80023fc:	08003000 	.word	0x08003000
 8002400:	08003000 	.word	0x08003000
 8002404:	08003004 	.word	0x08003004

08002408 <__retarget_lock_init_recursive>:
 8002408:	4770      	bx	lr

0800240a <__retarget_lock_acquire_recursive>:
 800240a:	4770      	bx	lr

0800240c <__retarget_lock_release_recursive>:
 800240c:	4770      	bx	lr

0800240e <memcpy>:
 800240e:	440a      	add	r2, r1
 8002410:	4291      	cmp	r1, r2
 8002412:	f100 33ff 	add.w	r3, r0, #4294967295
 8002416:	d100      	bne.n	800241a <memcpy+0xc>
 8002418:	4770      	bx	lr
 800241a:	b510      	push	{r4, lr}
 800241c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002424:	4291      	cmp	r1, r2
 8002426:	d1f9      	bne.n	800241c <memcpy+0xe>
 8002428:	bd10      	pop	{r4, pc}
	...

0800242c <_free_r>:
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	4605      	mov	r5, r0
 8002430:	2900      	cmp	r1, #0
 8002432:	d041      	beq.n	80024b8 <_free_r+0x8c>
 8002434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002438:	1f0c      	subs	r4, r1, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	bfb8      	it	lt
 800243e:	18e4      	addlt	r4, r4, r3
 8002440:	f000 f8e8 	bl	8002614 <__malloc_lock>
 8002444:	4a1d      	ldr	r2, [pc, #116]	@ (80024bc <_free_r+0x90>)
 8002446:	6813      	ldr	r3, [r2, #0]
 8002448:	b933      	cbnz	r3, 8002458 <_free_r+0x2c>
 800244a:	6063      	str	r3, [r4, #4]
 800244c:	6014      	str	r4, [r2, #0]
 800244e:	4628      	mov	r0, r5
 8002450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002454:	f000 b8e4 	b.w	8002620 <__malloc_unlock>
 8002458:	42a3      	cmp	r3, r4
 800245a:	d908      	bls.n	800246e <_free_r+0x42>
 800245c:	6820      	ldr	r0, [r4, #0]
 800245e:	1821      	adds	r1, r4, r0
 8002460:	428b      	cmp	r3, r1
 8002462:	bf01      	itttt	eq
 8002464:	6819      	ldreq	r1, [r3, #0]
 8002466:	685b      	ldreq	r3, [r3, #4]
 8002468:	1809      	addeq	r1, r1, r0
 800246a:	6021      	streq	r1, [r4, #0]
 800246c:	e7ed      	b.n	800244a <_free_r+0x1e>
 800246e:	461a      	mov	r2, r3
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	b10b      	cbz	r3, 8002478 <_free_r+0x4c>
 8002474:	42a3      	cmp	r3, r4
 8002476:	d9fa      	bls.n	800246e <_free_r+0x42>
 8002478:	6811      	ldr	r1, [r2, #0]
 800247a:	1850      	adds	r0, r2, r1
 800247c:	42a0      	cmp	r0, r4
 800247e:	d10b      	bne.n	8002498 <_free_r+0x6c>
 8002480:	6820      	ldr	r0, [r4, #0]
 8002482:	4401      	add	r1, r0
 8002484:	1850      	adds	r0, r2, r1
 8002486:	4283      	cmp	r3, r0
 8002488:	6011      	str	r1, [r2, #0]
 800248a:	d1e0      	bne.n	800244e <_free_r+0x22>
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	6053      	str	r3, [r2, #4]
 8002492:	4408      	add	r0, r1
 8002494:	6010      	str	r0, [r2, #0]
 8002496:	e7da      	b.n	800244e <_free_r+0x22>
 8002498:	d902      	bls.n	80024a0 <_free_r+0x74>
 800249a:	230c      	movs	r3, #12
 800249c:	602b      	str	r3, [r5, #0]
 800249e:	e7d6      	b.n	800244e <_free_r+0x22>
 80024a0:	6820      	ldr	r0, [r4, #0]
 80024a2:	1821      	adds	r1, r4, r0
 80024a4:	428b      	cmp	r3, r1
 80024a6:	bf04      	itt	eq
 80024a8:	6819      	ldreq	r1, [r3, #0]
 80024aa:	685b      	ldreq	r3, [r3, #4]
 80024ac:	6063      	str	r3, [r4, #4]
 80024ae:	bf04      	itt	eq
 80024b0:	1809      	addeq	r1, r1, r0
 80024b2:	6021      	streq	r1, [r4, #0]
 80024b4:	6054      	str	r4, [r2, #4]
 80024b6:	e7ca      	b.n	800244e <_free_r+0x22>
 80024b8:	bd38      	pop	{r3, r4, r5, pc}
 80024ba:	bf00      	nop
 80024bc:	200007bc 	.word	0x200007bc

080024c0 <malloc>:
 80024c0:	4b02      	ldr	r3, [pc, #8]	@ (80024cc <malloc+0xc>)
 80024c2:	4601      	mov	r1, r0
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	f000 b825 	b.w	8002514 <_malloc_r>
 80024ca:	bf00      	nop
 80024cc:	2000002c 	.word	0x2000002c

080024d0 <sbrk_aligned>:
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	4e0f      	ldr	r6, [pc, #60]	@ (8002510 <sbrk_aligned+0x40>)
 80024d4:	460c      	mov	r4, r1
 80024d6:	6831      	ldr	r1, [r6, #0]
 80024d8:	4605      	mov	r5, r0
 80024da:	b911      	cbnz	r1, 80024e2 <sbrk_aligned+0x12>
 80024dc:	f000 fd3a 	bl	8002f54 <_sbrk_r>
 80024e0:	6030      	str	r0, [r6, #0]
 80024e2:	4621      	mov	r1, r4
 80024e4:	4628      	mov	r0, r5
 80024e6:	f000 fd35 	bl	8002f54 <_sbrk_r>
 80024ea:	1c43      	adds	r3, r0, #1
 80024ec:	d103      	bne.n	80024f6 <sbrk_aligned+0x26>
 80024ee:	f04f 34ff 	mov.w	r4, #4294967295
 80024f2:	4620      	mov	r0, r4
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
 80024f6:	1cc4      	adds	r4, r0, #3
 80024f8:	f024 0403 	bic.w	r4, r4, #3
 80024fc:	42a0      	cmp	r0, r4
 80024fe:	d0f8      	beq.n	80024f2 <sbrk_aligned+0x22>
 8002500:	1a21      	subs	r1, r4, r0
 8002502:	4628      	mov	r0, r5
 8002504:	f000 fd26 	bl	8002f54 <_sbrk_r>
 8002508:	3001      	adds	r0, #1
 800250a:	d1f2      	bne.n	80024f2 <sbrk_aligned+0x22>
 800250c:	e7ef      	b.n	80024ee <sbrk_aligned+0x1e>
 800250e:	bf00      	nop
 8002510:	200007b8 	.word	0x200007b8

08002514 <_malloc_r>:
 8002514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002518:	1ccd      	adds	r5, r1, #3
 800251a:	f025 0503 	bic.w	r5, r5, #3
 800251e:	3508      	adds	r5, #8
 8002520:	2d0c      	cmp	r5, #12
 8002522:	bf38      	it	cc
 8002524:	250c      	movcc	r5, #12
 8002526:	2d00      	cmp	r5, #0
 8002528:	4606      	mov	r6, r0
 800252a:	db01      	blt.n	8002530 <_malloc_r+0x1c>
 800252c:	42a9      	cmp	r1, r5
 800252e:	d904      	bls.n	800253a <_malloc_r+0x26>
 8002530:	230c      	movs	r3, #12
 8002532:	6033      	str	r3, [r6, #0]
 8002534:	2000      	movs	r0, #0
 8002536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800253a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002610 <_malloc_r+0xfc>
 800253e:	f000 f869 	bl	8002614 <__malloc_lock>
 8002542:	f8d8 3000 	ldr.w	r3, [r8]
 8002546:	461c      	mov	r4, r3
 8002548:	bb44      	cbnz	r4, 800259c <_malloc_r+0x88>
 800254a:	4629      	mov	r1, r5
 800254c:	4630      	mov	r0, r6
 800254e:	f7ff ffbf 	bl	80024d0 <sbrk_aligned>
 8002552:	1c43      	adds	r3, r0, #1
 8002554:	4604      	mov	r4, r0
 8002556:	d158      	bne.n	800260a <_malloc_r+0xf6>
 8002558:	f8d8 4000 	ldr.w	r4, [r8]
 800255c:	4627      	mov	r7, r4
 800255e:	2f00      	cmp	r7, #0
 8002560:	d143      	bne.n	80025ea <_malloc_r+0xd6>
 8002562:	2c00      	cmp	r4, #0
 8002564:	d04b      	beq.n	80025fe <_malloc_r+0xea>
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	4639      	mov	r1, r7
 800256a:	4630      	mov	r0, r6
 800256c:	eb04 0903 	add.w	r9, r4, r3
 8002570:	f000 fcf0 	bl	8002f54 <_sbrk_r>
 8002574:	4581      	cmp	r9, r0
 8002576:	d142      	bne.n	80025fe <_malloc_r+0xea>
 8002578:	6821      	ldr	r1, [r4, #0]
 800257a:	1a6d      	subs	r5, r5, r1
 800257c:	4629      	mov	r1, r5
 800257e:	4630      	mov	r0, r6
 8002580:	f7ff ffa6 	bl	80024d0 <sbrk_aligned>
 8002584:	3001      	adds	r0, #1
 8002586:	d03a      	beq.n	80025fe <_malloc_r+0xea>
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	442b      	add	r3, r5
 800258c:	6023      	str	r3, [r4, #0]
 800258e:	f8d8 3000 	ldr.w	r3, [r8]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	bb62      	cbnz	r2, 80025f0 <_malloc_r+0xdc>
 8002596:	f8c8 7000 	str.w	r7, [r8]
 800259a:	e00f      	b.n	80025bc <_malloc_r+0xa8>
 800259c:	6822      	ldr	r2, [r4, #0]
 800259e:	1b52      	subs	r2, r2, r5
 80025a0:	d420      	bmi.n	80025e4 <_malloc_r+0xd0>
 80025a2:	2a0b      	cmp	r2, #11
 80025a4:	d917      	bls.n	80025d6 <_malloc_r+0xc2>
 80025a6:	1961      	adds	r1, r4, r5
 80025a8:	42a3      	cmp	r3, r4
 80025aa:	6025      	str	r5, [r4, #0]
 80025ac:	bf18      	it	ne
 80025ae:	6059      	strne	r1, [r3, #4]
 80025b0:	6863      	ldr	r3, [r4, #4]
 80025b2:	bf08      	it	eq
 80025b4:	f8c8 1000 	streq.w	r1, [r8]
 80025b8:	5162      	str	r2, [r4, r5]
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 f82f 	bl	8002620 <__malloc_unlock>
 80025c2:	f104 000b 	add.w	r0, r4, #11
 80025c6:	1d23      	adds	r3, r4, #4
 80025c8:	f020 0007 	bic.w	r0, r0, #7
 80025cc:	1ac2      	subs	r2, r0, r3
 80025ce:	bf1c      	itt	ne
 80025d0:	1a1b      	subne	r3, r3, r0
 80025d2:	50a3      	strne	r3, [r4, r2]
 80025d4:	e7af      	b.n	8002536 <_malloc_r+0x22>
 80025d6:	6862      	ldr	r2, [r4, #4]
 80025d8:	42a3      	cmp	r3, r4
 80025da:	bf0c      	ite	eq
 80025dc:	f8c8 2000 	streq.w	r2, [r8]
 80025e0:	605a      	strne	r2, [r3, #4]
 80025e2:	e7eb      	b.n	80025bc <_malloc_r+0xa8>
 80025e4:	4623      	mov	r3, r4
 80025e6:	6864      	ldr	r4, [r4, #4]
 80025e8:	e7ae      	b.n	8002548 <_malloc_r+0x34>
 80025ea:	463c      	mov	r4, r7
 80025ec:	687f      	ldr	r7, [r7, #4]
 80025ee:	e7b6      	b.n	800255e <_malloc_r+0x4a>
 80025f0:	461a      	mov	r2, r3
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	42a3      	cmp	r3, r4
 80025f6:	d1fb      	bne.n	80025f0 <_malloc_r+0xdc>
 80025f8:	2300      	movs	r3, #0
 80025fa:	6053      	str	r3, [r2, #4]
 80025fc:	e7de      	b.n	80025bc <_malloc_r+0xa8>
 80025fe:	230c      	movs	r3, #12
 8002600:	6033      	str	r3, [r6, #0]
 8002602:	4630      	mov	r0, r6
 8002604:	f000 f80c 	bl	8002620 <__malloc_unlock>
 8002608:	e794      	b.n	8002534 <_malloc_r+0x20>
 800260a:	6005      	str	r5, [r0, #0]
 800260c:	e7d6      	b.n	80025bc <_malloc_r+0xa8>
 800260e:	bf00      	nop
 8002610:	200007bc 	.word	0x200007bc

08002614 <__malloc_lock>:
 8002614:	4801      	ldr	r0, [pc, #4]	@ (800261c <__malloc_lock+0x8>)
 8002616:	f7ff bef8 	b.w	800240a <__retarget_lock_acquire_recursive>
 800261a:	bf00      	nop
 800261c:	200007b4 	.word	0x200007b4

08002620 <__malloc_unlock>:
 8002620:	4801      	ldr	r0, [pc, #4]	@ (8002628 <__malloc_unlock+0x8>)
 8002622:	f7ff bef3 	b.w	800240c <__retarget_lock_release_recursive>
 8002626:	bf00      	nop
 8002628:	200007b4 	.word	0x200007b4

0800262c <__sfputc_r>:
 800262c:	6893      	ldr	r3, [r2, #8]
 800262e:	3b01      	subs	r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	b410      	push	{r4}
 8002634:	6093      	str	r3, [r2, #8]
 8002636:	da08      	bge.n	800264a <__sfputc_r+0x1e>
 8002638:	6994      	ldr	r4, [r2, #24]
 800263a:	42a3      	cmp	r3, r4
 800263c:	db01      	blt.n	8002642 <__sfputc_r+0x16>
 800263e:	290a      	cmp	r1, #10
 8002640:	d103      	bne.n	800264a <__sfputc_r+0x1e>
 8002642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002646:	f000 bbcf 	b.w	8002de8 <__swbuf_r>
 800264a:	6813      	ldr	r3, [r2, #0]
 800264c:	1c58      	adds	r0, r3, #1
 800264e:	6010      	str	r0, [r2, #0]
 8002650:	7019      	strb	r1, [r3, #0]
 8002652:	4608      	mov	r0, r1
 8002654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002658:	4770      	bx	lr

0800265a <__sfputs_r>:
 800265a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265c:	4606      	mov	r6, r0
 800265e:	460f      	mov	r7, r1
 8002660:	4614      	mov	r4, r2
 8002662:	18d5      	adds	r5, r2, r3
 8002664:	42ac      	cmp	r4, r5
 8002666:	d101      	bne.n	800266c <__sfputs_r+0x12>
 8002668:	2000      	movs	r0, #0
 800266a:	e007      	b.n	800267c <__sfputs_r+0x22>
 800266c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002670:	463a      	mov	r2, r7
 8002672:	4630      	mov	r0, r6
 8002674:	f7ff ffda 	bl	800262c <__sfputc_r>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	d1f3      	bne.n	8002664 <__sfputs_r+0xa>
 800267c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002680 <_vfiprintf_r>:
 8002680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002684:	460d      	mov	r5, r1
 8002686:	b09d      	sub	sp, #116	@ 0x74
 8002688:	4614      	mov	r4, r2
 800268a:	4698      	mov	r8, r3
 800268c:	4606      	mov	r6, r0
 800268e:	b118      	cbz	r0, 8002698 <_vfiprintf_r+0x18>
 8002690:	6a03      	ldr	r3, [r0, #32]
 8002692:	b90b      	cbnz	r3, 8002698 <_vfiprintf_r+0x18>
 8002694:	f7ff fcfe 	bl	8002094 <__sinit>
 8002698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800269a:	07d9      	lsls	r1, r3, #31
 800269c:	d405      	bmi.n	80026aa <_vfiprintf_r+0x2a>
 800269e:	89ab      	ldrh	r3, [r5, #12]
 80026a0:	059a      	lsls	r2, r3, #22
 80026a2:	d402      	bmi.n	80026aa <_vfiprintf_r+0x2a>
 80026a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026a6:	f7ff feb0 	bl	800240a <__retarget_lock_acquire_recursive>
 80026aa:	89ab      	ldrh	r3, [r5, #12]
 80026ac:	071b      	lsls	r3, r3, #28
 80026ae:	d501      	bpl.n	80026b4 <_vfiprintf_r+0x34>
 80026b0:	692b      	ldr	r3, [r5, #16]
 80026b2:	b99b      	cbnz	r3, 80026dc <_vfiprintf_r+0x5c>
 80026b4:	4629      	mov	r1, r5
 80026b6:	4630      	mov	r0, r6
 80026b8:	f000 fbd4 	bl	8002e64 <__swsetup_r>
 80026bc:	b170      	cbz	r0, 80026dc <_vfiprintf_r+0x5c>
 80026be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026c0:	07dc      	lsls	r4, r3, #31
 80026c2:	d504      	bpl.n	80026ce <_vfiprintf_r+0x4e>
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	b01d      	add	sp, #116	@ 0x74
 80026ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ce:	89ab      	ldrh	r3, [r5, #12]
 80026d0:	0598      	lsls	r0, r3, #22
 80026d2:	d4f7      	bmi.n	80026c4 <_vfiprintf_r+0x44>
 80026d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026d6:	f7ff fe99 	bl	800240c <__retarget_lock_release_recursive>
 80026da:	e7f3      	b.n	80026c4 <_vfiprintf_r+0x44>
 80026dc:	2300      	movs	r3, #0
 80026de:	9309      	str	r3, [sp, #36]	@ 0x24
 80026e0:	2320      	movs	r3, #32
 80026e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80026e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80026ea:	2330      	movs	r3, #48	@ 0x30
 80026ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800289c <_vfiprintf_r+0x21c>
 80026f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80026f4:	f04f 0901 	mov.w	r9, #1
 80026f8:	4623      	mov	r3, r4
 80026fa:	469a      	mov	sl, r3
 80026fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002700:	b10a      	cbz	r2, 8002706 <_vfiprintf_r+0x86>
 8002702:	2a25      	cmp	r2, #37	@ 0x25
 8002704:	d1f9      	bne.n	80026fa <_vfiprintf_r+0x7a>
 8002706:	ebba 0b04 	subs.w	fp, sl, r4
 800270a:	d00b      	beq.n	8002724 <_vfiprintf_r+0xa4>
 800270c:	465b      	mov	r3, fp
 800270e:	4622      	mov	r2, r4
 8002710:	4629      	mov	r1, r5
 8002712:	4630      	mov	r0, r6
 8002714:	f7ff ffa1 	bl	800265a <__sfputs_r>
 8002718:	3001      	adds	r0, #1
 800271a:	f000 80a7 	beq.w	800286c <_vfiprintf_r+0x1ec>
 800271e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002720:	445a      	add	r2, fp
 8002722:	9209      	str	r2, [sp, #36]	@ 0x24
 8002724:	f89a 3000 	ldrb.w	r3, [sl]
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 809f 	beq.w	800286c <_vfiprintf_r+0x1ec>
 800272e:	2300      	movs	r3, #0
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002738:	f10a 0a01 	add.w	sl, sl, #1
 800273c:	9304      	str	r3, [sp, #16]
 800273e:	9307      	str	r3, [sp, #28]
 8002740:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002744:	931a      	str	r3, [sp, #104]	@ 0x68
 8002746:	4654      	mov	r4, sl
 8002748:	2205      	movs	r2, #5
 800274a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800274e:	4853      	ldr	r0, [pc, #332]	@ (800289c <_vfiprintf_r+0x21c>)
 8002750:	f7fd fd76 	bl	8000240 <memchr>
 8002754:	9a04      	ldr	r2, [sp, #16]
 8002756:	b9d8      	cbnz	r0, 8002790 <_vfiprintf_r+0x110>
 8002758:	06d1      	lsls	r1, r2, #27
 800275a:	bf44      	itt	mi
 800275c:	2320      	movmi	r3, #32
 800275e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002762:	0713      	lsls	r3, r2, #28
 8002764:	bf44      	itt	mi
 8002766:	232b      	movmi	r3, #43	@ 0x2b
 8002768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800276c:	f89a 3000 	ldrb.w	r3, [sl]
 8002770:	2b2a      	cmp	r3, #42	@ 0x2a
 8002772:	d015      	beq.n	80027a0 <_vfiprintf_r+0x120>
 8002774:	9a07      	ldr	r2, [sp, #28]
 8002776:	4654      	mov	r4, sl
 8002778:	2000      	movs	r0, #0
 800277a:	f04f 0c0a 	mov.w	ip, #10
 800277e:	4621      	mov	r1, r4
 8002780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002784:	3b30      	subs	r3, #48	@ 0x30
 8002786:	2b09      	cmp	r3, #9
 8002788:	d94b      	bls.n	8002822 <_vfiprintf_r+0x1a2>
 800278a:	b1b0      	cbz	r0, 80027ba <_vfiprintf_r+0x13a>
 800278c:	9207      	str	r2, [sp, #28]
 800278e:	e014      	b.n	80027ba <_vfiprintf_r+0x13a>
 8002790:	eba0 0308 	sub.w	r3, r0, r8
 8002794:	fa09 f303 	lsl.w	r3, r9, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	9304      	str	r3, [sp, #16]
 800279c:	46a2      	mov	sl, r4
 800279e:	e7d2      	b.n	8002746 <_vfiprintf_r+0xc6>
 80027a0:	9b03      	ldr	r3, [sp, #12]
 80027a2:	1d19      	adds	r1, r3, #4
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	9103      	str	r1, [sp, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bfbb      	ittet	lt
 80027ac:	425b      	neglt	r3, r3
 80027ae:	f042 0202 	orrlt.w	r2, r2, #2
 80027b2:	9307      	strge	r3, [sp, #28]
 80027b4:	9307      	strlt	r3, [sp, #28]
 80027b6:	bfb8      	it	lt
 80027b8:	9204      	strlt	r2, [sp, #16]
 80027ba:	7823      	ldrb	r3, [r4, #0]
 80027bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80027be:	d10a      	bne.n	80027d6 <_vfiprintf_r+0x156>
 80027c0:	7863      	ldrb	r3, [r4, #1]
 80027c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80027c4:	d132      	bne.n	800282c <_vfiprintf_r+0x1ac>
 80027c6:	9b03      	ldr	r3, [sp, #12]
 80027c8:	1d1a      	adds	r2, r3, #4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	9203      	str	r2, [sp, #12]
 80027ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80027d2:	3402      	adds	r4, #2
 80027d4:	9305      	str	r3, [sp, #20]
 80027d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80028ac <_vfiprintf_r+0x22c>
 80027da:	7821      	ldrb	r1, [r4, #0]
 80027dc:	2203      	movs	r2, #3
 80027de:	4650      	mov	r0, sl
 80027e0:	f7fd fd2e 	bl	8000240 <memchr>
 80027e4:	b138      	cbz	r0, 80027f6 <_vfiprintf_r+0x176>
 80027e6:	9b04      	ldr	r3, [sp, #16]
 80027e8:	eba0 000a 	sub.w	r0, r0, sl
 80027ec:	2240      	movs	r2, #64	@ 0x40
 80027ee:	4082      	lsls	r2, r0
 80027f0:	4313      	orrs	r3, r2
 80027f2:	3401      	adds	r4, #1
 80027f4:	9304      	str	r3, [sp, #16]
 80027f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027fa:	4829      	ldr	r0, [pc, #164]	@ (80028a0 <_vfiprintf_r+0x220>)
 80027fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002800:	2206      	movs	r2, #6
 8002802:	f7fd fd1d 	bl	8000240 <memchr>
 8002806:	2800      	cmp	r0, #0
 8002808:	d03f      	beq.n	800288a <_vfiprintf_r+0x20a>
 800280a:	4b26      	ldr	r3, [pc, #152]	@ (80028a4 <_vfiprintf_r+0x224>)
 800280c:	bb1b      	cbnz	r3, 8002856 <_vfiprintf_r+0x1d6>
 800280e:	9b03      	ldr	r3, [sp, #12]
 8002810:	3307      	adds	r3, #7
 8002812:	f023 0307 	bic.w	r3, r3, #7
 8002816:	3308      	adds	r3, #8
 8002818:	9303      	str	r3, [sp, #12]
 800281a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800281c:	443b      	add	r3, r7
 800281e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002820:	e76a      	b.n	80026f8 <_vfiprintf_r+0x78>
 8002822:	fb0c 3202 	mla	r2, ip, r2, r3
 8002826:	460c      	mov	r4, r1
 8002828:	2001      	movs	r0, #1
 800282a:	e7a8      	b.n	800277e <_vfiprintf_r+0xfe>
 800282c:	2300      	movs	r3, #0
 800282e:	3401      	adds	r4, #1
 8002830:	9305      	str	r3, [sp, #20]
 8002832:	4619      	mov	r1, r3
 8002834:	f04f 0c0a 	mov.w	ip, #10
 8002838:	4620      	mov	r0, r4
 800283a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800283e:	3a30      	subs	r2, #48	@ 0x30
 8002840:	2a09      	cmp	r2, #9
 8002842:	d903      	bls.n	800284c <_vfiprintf_r+0x1cc>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0c6      	beq.n	80027d6 <_vfiprintf_r+0x156>
 8002848:	9105      	str	r1, [sp, #20]
 800284a:	e7c4      	b.n	80027d6 <_vfiprintf_r+0x156>
 800284c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002850:	4604      	mov	r4, r0
 8002852:	2301      	movs	r3, #1
 8002854:	e7f0      	b.n	8002838 <_vfiprintf_r+0x1b8>
 8002856:	ab03      	add	r3, sp, #12
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	462a      	mov	r2, r5
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <_vfiprintf_r+0x228>)
 800285e:	a904      	add	r1, sp, #16
 8002860:	4630      	mov	r0, r6
 8002862:	f3af 8000 	nop.w
 8002866:	4607      	mov	r7, r0
 8002868:	1c78      	adds	r0, r7, #1
 800286a:	d1d6      	bne.n	800281a <_vfiprintf_r+0x19a>
 800286c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800286e:	07d9      	lsls	r1, r3, #31
 8002870:	d405      	bmi.n	800287e <_vfiprintf_r+0x1fe>
 8002872:	89ab      	ldrh	r3, [r5, #12]
 8002874:	059a      	lsls	r2, r3, #22
 8002876:	d402      	bmi.n	800287e <_vfiprintf_r+0x1fe>
 8002878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800287a:	f7ff fdc7 	bl	800240c <__retarget_lock_release_recursive>
 800287e:	89ab      	ldrh	r3, [r5, #12]
 8002880:	065b      	lsls	r3, r3, #25
 8002882:	f53f af1f 	bmi.w	80026c4 <_vfiprintf_r+0x44>
 8002886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002888:	e71e      	b.n	80026c8 <_vfiprintf_r+0x48>
 800288a:	ab03      	add	r3, sp, #12
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	462a      	mov	r2, r5
 8002890:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <_vfiprintf_r+0x228>)
 8002892:	a904      	add	r1, sp, #16
 8002894:	4630      	mov	r0, r6
 8002896:	f000 f879 	bl	800298c <_printf_i>
 800289a:	e7e4      	b.n	8002866 <_vfiprintf_r+0x1e6>
 800289c:	08002fc5 	.word	0x08002fc5
 80028a0:	08002fcf 	.word	0x08002fcf
 80028a4:	00000000 	.word	0x00000000
 80028a8:	0800265b 	.word	0x0800265b
 80028ac:	08002fcb 	.word	0x08002fcb

080028b0 <_printf_common>:
 80028b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b4:	4616      	mov	r6, r2
 80028b6:	4698      	mov	r8, r3
 80028b8:	688a      	ldr	r2, [r1, #8]
 80028ba:	690b      	ldr	r3, [r1, #16]
 80028bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80028c0:	4293      	cmp	r3, r2
 80028c2:	bfb8      	it	lt
 80028c4:	4613      	movlt	r3, r2
 80028c6:	6033      	str	r3, [r6, #0]
 80028c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80028cc:	4607      	mov	r7, r0
 80028ce:	460c      	mov	r4, r1
 80028d0:	b10a      	cbz	r2, 80028d6 <_printf_common+0x26>
 80028d2:	3301      	adds	r3, #1
 80028d4:	6033      	str	r3, [r6, #0]
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	0699      	lsls	r1, r3, #26
 80028da:	bf42      	ittt	mi
 80028dc:	6833      	ldrmi	r3, [r6, #0]
 80028de:	3302      	addmi	r3, #2
 80028e0:	6033      	strmi	r3, [r6, #0]
 80028e2:	6825      	ldr	r5, [r4, #0]
 80028e4:	f015 0506 	ands.w	r5, r5, #6
 80028e8:	d106      	bne.n	80028f8 <_printf_common+0x48>
 80028ea:	f104 0a19 	add.w	sl, r4, #25
 80028ee:	68e3      	ldr	r3, [r4, #12]
 80028f0:	6832      	ldr	r2, [r6, #0]
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	42ab      	cmp	r3, r5
 80028f6:	dc26      	bgt.n	8002946 <_printf_common+0x96>
 80028f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	3b00      	subs	r3, #0
 8002900:	bf18      	it	ne
 8002902:	2301      	movne	r3, #1
 8002904:	0692      	lsls	r2, r2, #26
 8002906:	d42b      	bmi.n	8002960 <_printf_common+0xb0>
 8002908:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800290c:	4641      	mov	r1, r8
 800290e:	4638      	mov	r0, r7
 8002910:	47c8      	blx	r9
 8002912:	3001      	adds	r0, #1
 8002914:	d01e      	beq.n	8002954 <_printf_common+0xa4>
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	6922      	ldr	r2, [r4, #16]
 800291a:	f003 0306 	and.w	r3, r3, #6
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf02      	ittt	eq
 8002922:	68e5      	ldreq	r5, [r4, #12]
 8002924:	6833      	ldreq	r3, [r6, #0]
 8002926:	1aed      	subeq	r5, r5, r3
 8002928:	68a3      	ldr	r3, [r4, #8]
 800292a:	bf0c      	ite	eq
 800292c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002930:	2500      	movne	r5, #0
 8002932:	4293      	cmp	r3, r2
 8002934:	bfc4      	itt	gt
 8002936:	1a9b      	subgt	r3, r3, r2
 8002938:	18ed      	addgt	r5, r5, r3
 800293a:	2600      	movs	r6, #0
 800293c:	341a      	adds	r4, #26
 800293e:	42b5      	cmp	r5, r6
 8002940:	d11a      	bne.n	8002978 <_printf_common+0xc8>
 8002942:	2000      	movs	r0, #0
 8002944:	e008      	b.n	8002958 <_printf_common+0xa8>
 8002946:	2301      	movs	r3, #1
 8002948:	4652      	mov	r2, sl
 800294a:	4641      	mov	r1, r8
 800294c:	4638      	mov	r0, r7
 800294e:	47c8      	blx	r9
 8002950:	3001      	adds	r0, #1
 8002952:	d103      	bne.n	800295c <_printf_common+0xac>
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800295c:	3501      	adds	r5, #1
 800295e:	e7c6      	b.n	80028ee <_printf_common+0x3e>
 8002960:	18e1      	adds	r1, r4, r3
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	2030      	movs	r0, #48	@ 0x30
 8002966:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800296a:	4422      	add	r2, r4
 800296c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002970:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002974:	3302      	adds	r3, #2
 8002976:	e7c7      	b.n	8002908 <_printf_common+0x58>
 8002978:	2301      	movs	r3, #1
 800297a:	4622      	mov	r2, r4
 800297c:	4641      	mov	r1, r8
 800297e:	4638      	mov	r0, r7
 8002980:	47c8      	blx	r9
 8002982:	3001      	adds	r0, #1
 8002984:	d0e6      	beq.n	8002954 <_printf_common+0xa4>
 8002986:	3601      	adds	r6, #1
 8002988:	e7d9      	b.n	800293e <_printf_common+0x8e>
	...

0800298c <_printf_i>:
 800298c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002990:	7e0f      	ldrb	r7, [r1, #24]
 8002992:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002994:	2f78      	cmp	r7, #120	@ 0x78
 8002996:	4691      	mov	r9, r2
 8002998:	4680      	mov	r8, r0
 800299a:	460c      	mov	r4, r1
 800299c:	469a      	mov	sl, r3
 800299e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80029a2:	d807      	bhi.n	80029b4 <_printf_i+0x28>
 80029a4:	2f62      	cmp	r7, #98	@ 0x62
 80029a6:	d80a      	bhi.n	80029be <_printf_i+0x32>
 80029a8:	2f00      	cmp	r7, #0
 80029aa:	f000 80d2 	beq.w	8002b52 <_printf_i+0x1c6>
 80029ae:	2f58      	cmp	r7, #88	@ 0x58
 80029b0:	f000 80b9 	beq.w	8002b26 <_printf_i+0x19a>
 80029b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80029bc:	e03a      	b.n	8002a34 <_printf_i+0xa8>
 80029be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80029c2:	2b15      	cmp	r3, #21
 80029c4:	d8f6      	bhi.n	80029b4 <_printf_i+0x28>
 80029c6:	a101      	add	r1, pc, #4	@ (adr r1, 80029cc <_printf_i+0x40>)
 80029c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029cc:	08002a25 	.word	0x08002a25
 80029d0:	08002a39 	.word	0x08002a39
 80029d4:	080029b5 	.word	0x080029b5
 80029d8:	080029b5 	.word	0x080029b5
 80029dc:	080029b5 	.word	0x080029b5
 80029e0:	080029b5 	.word	0x080029b5
 80029e4:	08002a39 	.word	0x08002a39
 80029e8:	080029b5 	.word	0x080029b5
 80029ec:	080029b5 	.word	0x080029b5
 80029f0:	080029b5 	.word	0x080029b5
 80029f4:	080029b5 	.word	0x080029b5
 80029f8:	08002b39 	.word	0x08002b39
 80029fc:	08002a63 	.word	0x08002a63
 8002a00:	08002af3 	.word	0x08002af3
 8002a04:	080029b5 	.word	0x080029b5
 8002a08:	080029b5 	.word	0x080029b5
 8002a0c:	08002b5b 	.word	0x08002b5b
 8002a10:	080029b5 	.word	0x080029b5
 8002a14:	08002a63 	.word	0x08002a63
 8002a18:	080029b5 	.word	0x080029b5
 8002a1c:	080029b5 	.word	0x080029b5
 8002a20:	08002afb 	.word	0x08002afb
 8002a24:	6833      	ldr	r3, [r6, #0]
 8002a26:	1d1a      	adds	r2, r3, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6032      	str	r2, [r6, #0]
 8002a2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a34:	2301      	movs	r3, #1
 8002a36:	e09d      	b.n	8002b74 <_printf_i+0x1e8>
 8002a38:	6833      	ldr	r3, [r6, #0]
 8002a3a:	6820      	ldr	r0, [r4, #0]
 8002a3c:	1d19      	adds	r1, r3, #4
 8002a3e:	6031      	str	r1, [r6, #0]
 8002a40:	0606      	lsls	r6, r0, #24
 8002a42:	d501      	bpl.n	8002a48 <_printf_i+0xbc>
 8002a44:	681d      	ldr	r5, [r3, #0]
 8002a46:	e003      	b.n	8002a50 <_printf_i+0xc4>
 8002a48:	0645      	lsls	r5, r0, #25
 8002a4a:	d5fb      	bpl.n	8002a44 <_printf_i+0xb8>
 8002a4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a50:	2d00      	cmp	r5, #0
 8002a52:	da03      	bge.n	8002a5c <_printf_i+0xd0>
 8002a54:	232d      	movs	r3, #45	@ 0x2d
 8002a56:	426d      	negs	r5, r5
 8002a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a5c:	4859      	ldr	r0, [pc, #356]	@ (8002bc4 <_printf_i+0x238>)
 8002a5e:	230a      	movs	r3, #10
 8002a60:	e011      	b.n	8002a86 <_printf_i+0xfa>
 8002a62:	6821      	ldr	r1, [r4, #0]
 8002a64:	6833      	ldr	r3, [r6, #0]
 8002a66:	0608      	lsls	r0, r1, #24
 8002a68:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a6c:	d402      	bmi.n	8002a74 <_printf_i+0xe8>
 8002a6e:	0649      	lsls	r1, r1, #25
 8002a70:	bf48      	it	mi
 8002a72:	b2ad      	uxthmi	r5, r5
 8002a74:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a76:	4853      	ldr	r0, [pc, #332]	@ (8002bc4 <_printf_i+0x238>)
 8002a78:	6033      	str	r3, [r6, #0]
 8002a7a:	bf14      	ite	ne
 8002a7c:	230a      	movne	r3, #10
 8002a7e:	2308      	moveq	r3, #8
 8002a80:	2100      	movs	r1, #0
 8002a82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002a86:	6866      	ldr	r6, [r4, #4]
 8002a88:	60a6      	str	r6, [r4, #8]
 8002a8a:	2e00      	cmp	r6, #0
 8002a8c:	bfa2      	ittt	ge
 8002a8e:	6821      	ldrge	r1, [r4, #0]
 8002a90:	f021 0104 	bicge.w	r1, r1, #4
 8002a94:	6021      	strge	r1, [r4, #0]
 8002a96:	b90d      	cbnz	r5, 8002a9c <_printf_i+0x110>
 8002a98:	2e00      	cmp	r6, #0
 8002a9a:	d04b      	beq.n	8002b34 <_printf_i+0x1a8>
 8002a9c:	4616      	mov	r6, r2
 8002a9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002aa2:	fb03 5711 	mls	r7, r3, r1, r5
 8002aa6:	5dc7      	ldrb	r7, [r0, r7]
 8002aa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002aac:	462f      	mov	r7, r5
 8002aae:	42bb      	cmp	r3, r7
 8002ab0:	460d      	mov	r5, r1
 8002ab2:	d9f4      	bls.n	8002a9e <_printf_i+0x112>
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d10b      	bne.n	8002ad0 <_printf_i+0x144>
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	07df      	lsls	r7, r3, #31
 8002abc:	d508      	bpl.n	8002ad0 <_printf_i+0x144>
 8002abe:	6923      	ldr	r3, [r4, #16]
 8002ac0:	6861      	ldr	r1, [r4, #4]
 8002ac2:	4299      	cmp	r1, r3
 8002ac4:	bfde      	ittt	le
 8002ac6:	2330      	movle	r3, #48	@ 0x30
 8002ac8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002acc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ad0:	1b92      	subs	r2, r2, r6
 8002ad2:	6122      	str	r2, [r4, #16]
 8002ad4:	f8cd a000 	str.w	sl, [sp]
 8002ad8:	464b      	mov	r3, r9
 8002ada:	aa03      	add	r2, sp, #12
 8002adc:	4621      	mov	r1, r4
 8002ade:	4640      	mov	r0, r8
 8002ae0:	f7ff fee6 	bl	80028b0 <_printf_common>
 8002ae4:	3001      	adds	r0, #1
 8002ae6:	d14a      	bne.n	8002b7e <_printf_i+0x1f2>
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	b004      	add	sp, #16
 8002aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	f043 0320 	orr.w	r3, r3, #32
 8002af8:	6023      	str	r3, [r4, #0]
 8002afa:	4833      	ldr	r0, [pc, #204]	@ (8002bc8 <_printf_i+0x23c>)
 8002afc:	2778      	movs	r7, #120	@ 0x78
 8002afe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	6831      	ldr	r1, [r6, #0]
 8002b06:	061f      	lsls	r7, r3, #24
 8002b08:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b0c:	d402      	bmi.n	8002b14 <_printf_i+0x188>
 8002b0e:	065f      	lsls	r7, r3, #25
 8002b10:	bf48      	it	mi
 8002b12:	b2ad      	uxthmi	r5, r5
 8002b14:	6031      	str	r1, [r6, #0]
 8002b16:	07d9      	lsls	r1, r3, #31
 8002b18:	bf44      	itt	mi
 8002b1a:	f043 0320 	orrmi.w	r3, r3, #32
 8002b1e:	6023      	strmi	r3, [r4, #0]
 8002b20:	b11d      	cbz	r5, 8002b2a <_printf_i+0x19e>
 8002b22:	2310      	movs	r3, #16
 8002b24:	e7ac      	b.n	8002a80 <_printf_i+0xf4>
 8002b26:	4827      	ldr	r0, [pc, #156]	@ (8002bc4 <_printf_i+0x238>)
 8002b28:	e7e9      	b.n	8002afe <_printf_i+0x172>
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	f023 0320 	bic.w	r3, r3, #32
 8002b30:	6023      	str	r3, [r4, #0]
 8002b32:	e7f6      	b.n	8002b22 <_printf_i+0x196>
 8002b34:	4616      	mov	r6, r2
 8002b36:	e7bd      	b.n	8002ab4 <_printf_i+0x128>
 8002b38:	6833      	ldr	r3, [r6, #0]
 8002b3a:	6825      	ldr	r5, [r4, #0]
 8002b3c:	6961      	ldr	r1, [r4, #20]
 8002b3e:	1d18      	adds	r0, r3, #4
 8002b40:	6030      	str	r0, [r6, #0]
 8002b42:	062e      	lsls	r6, r5, #24
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	d501      	bpl.n	8002b4c <_printf_i+0x1c0>
 8002b48:	6019      	str	r1, [r3, #0]
 8002b4a:	e002      	b.n	8002b52 <_printf_i+0x1c6>
 8002b4c:	0668      	lsls	r0, r5, #25
 8002b4e:	d5fb      	bpl.n	8002b48 <_printf_i+0x1bc>
 8002b50:	8019      	strh	r1, [r3, #0]
 8002b52:	2300      	movs	r3, #0
 8002b54:	6123      	str	r3, [r4, #16]
 8002b56:	4616      	mov	r6, r2
 8002b58:	e7bc      	b.n	8002ad4 <_printf_i+0x148>
 8002b5a:	6833      	ldr	r3, [r6, #0]
 8002b5c:	1d1a      	adds	r2, r3, #4
 8002b5e:	6032      	str	r2, [r6, #0]
 8002b60:	681e      	ldr	r6, [r3, #0]
 8002b62:	6862      	ldr	r2, [r4, #4]
 8002b64:	2100      	movs	r1, #0
 8002b66:	4630      	mov	r0, r6
 8002b68:	f7fd fb6a 	bl	8000240 <memchr>
 8002b6c:	b108      	cbz	r0, 8002b72 <_printf_i+0x1e6>
 8002b6e:	1b80      	subs	r0, r0, r6
 8002b70:	6060      	str	r0, [r4, #4]
 8002b72:	6863      	ldr	r3, [r4, #4]
 8002b74:	6123      	str	r3, [r4, #16]
 8002b76:	2300      	movs	r3, #0
 8002b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b7c:	e7aa      	b.n	8002ad4 <_printf_i+0x148>
 8002b7e:	6923      	ldr	r3, [r4, #16]
 8002b80:	4632      	mov	r2, r6
 8002b82:	4649      	mov	r1, r9
 8002b84:	4640      	mov	r0, r8
 8002b86:	47d0      	blx	sl
 8002b88:	3001      	adds	r0, #1
 8002b8a:	d0ad      	beq.n	8002ae8 <_printf_i+0x15c>
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	079b      	lsls	r3, r3, #30
 8002b90:	d413      	bmi.n	8002bba <_printf_i+0x22e>
 8002b92:	68e0      	ldr	r0, [r4, #12]
 8002b94:	9b03      	ldr	r3, [sp, #12]
 8002b96:	4298      	cmp	r0, r3
 8002b98:	bfb8      	it	lt
 8002b9a:	4618      	movlt	r0, r3
 8002b9c:	e7a6      	b.n	8002aec <_printf_i+0x160>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	4632      	mov	r2, r6
 8002ba2:	4649      	mov	r1, r9
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	47d0      	blx	sl
 8002ba8:	3001      	adds	r0, #1
 8002baa:	d09d      	beq.n	8002ae8 <_printf_i+0x15c>
 8002bac:	3501      	adds	r5, #1
 8002bae:	68e3      	ldr	r3, [r4, #12]
 8002bb0:	9903      	ldr	r1, [sp, #12]
 8002bb2:	1a5b      	subs	r3, r3, r1
 8002bb4:	42ab      	cmp	r3, r5
 8002bb6:	dcf2      	bgt.n	8002b9e <_printf_i+0x212>
 8002bb8:	e7eb      	b.n	8002b92 <_printf_i+0x206>
 8002bba:	2500      	movs	r5, #0
 8002bbc:	f104 0619 	add.w	r6, r4, #25
 8002bc0:	e7f5      	b.n	8002bae <_printf_i+0x222>
 8002bc2:	bf00      	nop
 8002bc4:	08002fd6 	.word	0x08002fd6
 8002bc8:	08002fe7 	.word	0x08002fe7

08002bcc <__sflush_r>:
 8002bcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd4:	0716      	lsls	r6, r2, #28
 8002bd6:	4605      	mov	r5, r0
 8002bd8:	460c      	mov	r4, r1
 8002bda:	d454      	bmi.n	8002c86 <__sflush_r+0xba>
 8002bdc:	684b      	ldr	r3, [r1, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	dc02      	bgt.n	8002be8 <__sflush_r+0x1c>
 8002be2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	dd48      	ble.n	8002c7a <__sflush_r+0xae>
 8002be8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002bea:	2e00      	cmp	r6, #0
 8002bec:	d045      	beq.n	8002c7a <__sflush_r+0xae>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002bf4:	682f      	ldr	r7, [r5, #0]
 8002bf6:	6a21      	ldr	r1, [r4, #32]
 8002bf8:	602b      	str	r3, [r5, #0]
 8002bfa:	d030      	beq.n	8002c5e <__sflush_r+0x92>
 8002bfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002bfe:	89a3      	ldrh	r3, [r4, #12]
 8002c00:	0759      	lsls	r1, r3, #29
 8002c02:	d505      	bpl.n	8002c10 <__sflush_r+0x44>
 8002c04:	6863      	ldr	r3, [r4, #4]
 8002c06:	1ad2      	subs	r2, r2, r3
 8002c08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c0a:	b10b      	cbz	r3, 8002c10 <__sflush_r+0x44>
 8002c0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c0e:	1ad2      	subs	r2, r2, r3
 8002c10:	2300      	movs	r3, #0
 8002c12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c14:	6a21      	ldr	r1, [r4, #32]
 8002c16:	4628      	mov	r0, r5
 8002c18:	47b0      	blx	r6
 8002c1a:	1c43      	adds	r3, r0, #1
 8002c1c:	89a3      	ldrh	r3, [r4, #12]
 8002c1e:	d106      	bne.n	8002c2e <__sflush_r+0x62>
 8002c20:	6829      	ldr	r1, [r5, #0]
 8002c22:	291d      	cmp	r1, #29
 8002c24:	d82b      	bhi.n	8002c7e <__sflush_r+0xb2>
 8002c26:	4a2a      	ldr	r2, [pc, #168]	@ (8002cd0 <__sflush_r+0x104>)
 8002c28:	410a      	asrs	r2, r1
 8002c2a:	07d6      	lsls	r6, r2, #31
 8002c2c:	d427      	bmi.n	8002c7e <__sflush_r+0xb2>
 8002c2e:	2200      	movs	r2, #0
 8002c30:	6062      	str	r2, [r4, #4]
 8002c32:	04d9      	lsls	r1, r3, #19
 8002c34:	6922      	ldr	r2, [r4, #16]
 8002c36:	6022      	str	r2, [r4, #0]
 8002c38:	d504      	bpl.n	8002c44 <__sflush_r+0x78>
 8002c3a:	1c42      	adds	r2, r0, #1
 8002c3c:	d101      	bne.n	8002c42 <__sflush_r+0x76>
 8002c3e:	682b      	ldr	r3, [r5, #0]
 8002c40:	b903      	cbnz	r3, 8002c44 <__sflush_r+0x78>
 8002c42:	6560      	str	r0, [r4, #84]	@ 0x54
 8002c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c46:	602f      	str	r7, [r5, #0]
 8002c48:	b1b9      	cbz	r1, 8002c7a <__sflush_r+0xae>
 8002c4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c4e:	4299      	cmp	r1, r3
 8002c50:	d002      	beq.n	8002c58 <__sflush_r+0x8c>
 8002c52:	4628      	mov	r0, r5
 8002c54:	f7ff fbea 	bl	800242c <_free_r>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c5c:	e00d      	b.n	8002c7a <__sflush_r+0xae>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	4628      	mov	r0, r5
 8002c62:	47b0      	blx	r6
 8002c64:	4602      	mov	r2, r0
 8002c66:	1c50      	adds	r0, r2, #1
 8002c68:	d1c9      	bne.n	8002bfe <__sflush_r+0x32>
 8002c6a:	682b      	ldr	r3, [r5, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0c6      	beq.n	8002bfe <__sflush_r+0x32>
 8002c70:	2b1d      	cmp	r3, #29
 8002c72:	d001      	beq.n	8002c78 <__sflush_r+0xac>
 8002c74:	2b16      	cmp	r3, #22
 8002c76:	d11e      	bne.n	8002cb6 <__sflush_r+0xea>
 8002c78:	602f      	str	r7, [r5, #0]
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	e022      	b.n	8002cc4 <__sflush_r+0xf8>
 8002c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	e01b      	b.n	8002cbe <__sflush_r+0xf2>
 8002c86:	690f      	ldr	r7, [r1, #16]
 8002c88:	2f00      	cmp	r7, #0
 8002c8a:	d0f6      	beq.n	8002c7a <__sflush_r+0xae>
 8002c8c:	0793      	lsls	r3, r2, #30
 8002c8e:	680e      	ldr	r6, [r1, #0]
 8002c90:	bf08      	it	eq
 8002c92:	694b      	ldreq	r3, [r1, #20]
 8002c94:	600f      	str	r7, [r1, #0]
 8002c96:	bf18      	it	ne
 8002c98:	2300      	movne	r3, #0
 8002c9a:	eba6 0807 	sub.w	r8, r6, r7
 8002c9e:	608b      	str	r3, [r1, #8]
 8002ca0:	f1b8 0f00 	cmp.w	r8, #0
 8002ca4:	dde9      	ble.n	8002c7a <__sflush_r+0xae>
 8002ca6:	6a21      	ldr	r1, [r4, #32]
 8002ca8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002caa:	4643      	mov	r3, r8
 8002cac:	463a      	mov	r2, r7
 8002cae:	4628      	mov	r0, r5
 8002cb0:	47b0      	blx	r6
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	dc08      	bgt.n	8002cc8 <__sflush_r+0xfc>
 8002cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cbe:	81a3      	strh	r3, [r4, #12]
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cc8:	4407      	add	r7, r0
 8002cca:	eba8 0800 	sub.w	r8, r8, r0
 8002cce:	e7e7      	b.n	8002ca0 <__sflush_r+0xd4>
 8002cd0:	dfbffffe 	.word	0xdfbffffe

08002cd4 <_fflush_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	690b      	ldr	r3, [r1, #16]
 8002cd8:	4605      	mov	r5, r0
 8002cda:	460c      	mov	r4, r1
 8002cdc:	b913      	cbnz	r3, 8002ce4 <_fflush_r+0x10>
 8002cde:	2500      	movs	r5, #0
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
 8002ce4:	b118      	cbz	r0, 8002cee <_fflush_r+0x1a>
 8002ce6:	6a03      	ldr	r3, [r0, #32]
 8002ce8:	b90b      	cbnz	r3, 8002cee <_fflush_r+0x1a>
 8002cea:	f7ff f9d3 	bl	8002094 <__sinit>
 8002cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f3      	beq.n	8002cde <_fflush_r+0xa>
 8002cf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002cf8:	07d0      	lsls	r0, r2, #31
 8002cfa:	d404      	bmi.n	8002d06 <_fflush_r+0x32>
 8002cfc:	0599      	lsls	r1, r3, #22
 8002cfe:	d402      	bmi.n	8002d06 <_fflush_r+0x32>
 8002d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d02:	f7ff fb82 	bl	800240a <__retarget_lock_acquire_recursive>
 8002d06:	4628      	mov	r0, r5
 8002d08:	4621      	mov	r1, r4
 8002d0a:	f7ff ff5f 	bl	8002bcc <__sflush_r>
 8002d0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d10:	07da      	lsls	r2, r3, #31
 8002d12:	4605      	mov	r5, r0
 8002d14:	d4e4      	bmi.n	8002ce0 <_fflush_r+0xc>
 8002d16:	89a3      	ldrh	r3, [r4, #12]
 8002d18:	059b      	lsls	r3, r3, #22
 8002d1a:	d4e1      	bmi.n	8002ce0 <_fflush_r+0xc>
 8002d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d1e:	f7ff fb75 	bl	800240c <__retarget_lock_release_recursive>
 8002d22:	e7dd      	b.n	8002ce0 <_fflush_r+0xc>

08002d24 <__swhatbuf_r>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	460c      	mov	r4, r1
 8002d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d2c:	2900      	cmp	r1, #0
 8002d2e:	b096      	sub	sp, #88	@ 0x58
 8002d30:	4615      	mov	r5, r2
 8002d32:	461e      	mov	r6, r3
 8002d34:	da0d      	bge.n	8002d52 <__swhatbuf_r+0x2e>
 8002d36:	89a3      	ldrh	r3, [r4, #12]
 8002d38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002d3c:	f04f 0100 	mov.w	r1, #0
 8002d40:	bf14      	ite	ne
 8002d42:	2340      	movne	r3, #64	@ 0x40
 8002d44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002d48:	2000      	movs	r0, #0
 8002d4a:	6031      	str	r1, [r6, #0]
 8002d4c:	602b      	str	r3, [r5, #0]
 8002d4e:	b016      	add	sp, #88	@ 0x58
 8002d50:	bd70      	pop	{r4, r5, r6, pc}
 8002d52:	466a      	mov	r2, sp
 8002d54:	f000 f8dc 	bl	8002f10 <_fstat_r>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	dbec      	blt.n	8002d36 <__swhatbuf_r+0x12>
 8002d5c:	9901      	ldr	r1, [sp, #4]
 8002d5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002d62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002d66:	4259      	negs	r1, r3
 8002d68:	4159      	adcs	r1, r3
 8002d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d6e:	e7eb      	b.n	8002d48 <__swhatbuf_r+0x24>

08002d70 <__smakebuf_r>:
 8002d70:	898b      	ldrh	r3, [r1, #12]
 8002d72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d74:	079d      	lsls	r5, r3, #30
 8002d76:	4606      	mov	r6, r0
 8002d78:	460c      	mov	r4, r1
 8002d7a:	d507      	bpl.n	8002d8c <__smakebuf_r+0x1c>
 8002d7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	6123      	str	r3, [r4, #16]
 8002d84:	2301      	movs	r3, #1
 8002d86:	6163      	str	r3, [r4, #20]
 8002d88:	b003      	add	sp, #12
 8002d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d8c:	ab01      	add	r3, sp, #4
 8002d8e:	466a      	mov	r2, sp
 8002d90:	f7ff ffc8 	bl	8002d24 <__swhatbuf_r>
 8002d94:	9f00      	ldr	r7, [sp, #0]
 8002d96:	4605      	mov	r5, r0
 8002d98:	4639      	mov	r1, r7
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	f7ff fbba 	bl	8002514 <_malloc_r>
 8002da0:	b948      	cbnz	r0, 8002db6 <__smakebuf_r+0x46>
 8002da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002da6:	059a      	lsls	r2, r3, #22
 8002da8:	d4ee      	bmi.n	8002d88 <__smakebuf_r+0x18>
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	f043 0302 	orr.w	r3, r3, #2
 8002db2:	81a3      	strh	r3, [r4, #12]
 8002db4:	e7e2      	b.n	8002d7c <__smakebuf_r+0xc>
 8002db6:	89a3      	ldrh	r3, [r4, #12]
 8002db8:	6020      	str	r0, [r4, #0]
 8002dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dbe:	81a3      	strh	r3, [r4, #12]
 8002dc0:	9b01      	ldr	r3, [sp, #4]
 8002dc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002dc6:	b15b      	cbz	r3, 8002de0 <__smakebuf_r+0x70>
 8002dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dcc:	4630      	mov	r0, r6
 8002dce:	f000 f8b1 	bl	8002f34 <_isatty_r>
 8002dd2:	b128      	cbz	r0, 8002de0 <__smakebuf_r+0x70>
 8002dd4:	89a3      	ldrh	r3, [r4, #12]
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	81a3      	strh	r3, [r4, #12]
 8002de0:	89a3      	ldrh	r3, [r4, #12]
 8002de2:	431d      	orrs	r5, r3
 8002de4:	81a5      	strh	r5, [r4, #12]
 8002de6:	e7cf      	b.n	8002d88 <__smakebuf_r+0x18>

08002de8 <__swbuf_r>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	460e      	mov	r6, r1
 8002dec:	4614      	mov	r4, r2
 8002dee:	4605      	mov	r5, r0
 8002df0:	b118      	cbz	r0, 8002dfa <__swbuf_r+0x12>
 8002df2:	6a03      	ldr	r3, [r0, #32]
 8002df4:	b90b      	cbnz	r3, 8002dfa <__swbuf_r+0x12>
 8002df6:	f7ff f94d 	bl	8002094 <__sinit>
 8002dfa:	69a3      	ldr	r3, [r4, #24]
 8002dfc:	60a3      	str	r3, [r4, #8]
 8002dfe:	89a3      	ldrh	r3, [r4, #12]
 8002e00:	071a      	lsls	r2, r3, #28
 8002e02:	d501      	bpl.n	8002e08 <__swbuf_r+0x20>
 8002e04:	6923      	ldr	r3, [r4, #16]
 8002e06:	b943      	cbnz	r3, 8002e1a <__swbuf_r+0x32>
 8002e08:	4621      	mov	r1, r4
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	f000 f82a 	bl	8002e64 <__swsetup_r>
 8002e10:	b118      	cbz	r0, 8002e1a <__swbuf_r+0x32>
 8002e12:	f04f 37ff 	mov.w	r7, #4294967295
 8002e16:	4638      	mov	r0, r7
 8002e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	6922      	ldr	r2, [r4, #16]
 8002e1e:	1a98      	subs	r0, r3, r2
 8002e20:	6963      	ldr	r3, [r4, #20]
 8002e22:	b2f6      	uxtb	r6, r6
 8002e24:	4283      	cmp	r3, r0
 8002e26:	4637      	mov	r7, r6
 8002e28:	dc05      	bgt.n	8002e36 <__swbuf_r+0x4e>
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	f7ff ff51 	bl	8002cd4 <_fflush_r>
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d1ed      	bne.n	8002e12 <__swbuf_r+0x2a>
 8002e36:	68a3      	ldr	r3, [r4, #8]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	60a3      	str	r3, [r4, #8]
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	6022      	str	r2, [r4, #0]
 8002e42:	701e      	strb	r6, [r3, #0]
 8002e44:	6962      	ldr	r2, [r4, #20]
 8002e46:	1c43      	adds	r3, r0, #1
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d004      	beq.n	8002e56 <__swbuf_r+0x6e>
 8002e4c:	89a3      	ldrh	r3, [r4, #12]
 8002e4e:	07db      	lsls	r3, r3, #31
 8002e50:	d5e1      	bpl.n	8002e16 <__swbuf_r+0x2e>
 8002e52:	2e0a      	cmp	r6, #10
 8002e54:	d1df      	bne.n	8002e16 <__swbuf_r+0x2e>
 8002e56:	4621      	mov	r1, r4
 8002e58:	4628      	mov	r0, r5
 8002e5a:	f7ff ff3b 	bl	8002cd4 <_fflush_r>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d0d9      	beq.n	8002e16 <__swbuf_r+0x2e>
 8002e62:	e7d6      	b.n	8002e12 <__swbuf_r+0x2a>

08002e64 <__swsetup_r>:
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	4b29      	ldr	r3, [pc, #164]	@ (8002f0c <__swsetup_r+0xa8>)
 8002e68:	4605      	mov	r5, r0
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	460c      	mov	r4, r1
 8002e6e:	b118      	cbz	r0, 8002e78 <__swsetup_r+0x14>
 8002e70:	6a03      	ldr	r3, [r0, #32]
 8002e72:	b90b      	cbnz	r3, 8002e78 <__swsetup_r+0x14>
 8002e74:	f7ff f90e 	bl	8002094 <__sinit>
 8002e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e7c:	0719      	lsls	r1, r3, #28
 8002e7e:	d422      	bmi.n	8002ec6 <__swsetup_r+0x62>
 8002e80:	06da      	lsls	r2, r3, #27
 8002e82:	d407      	bmi.n	8002e94 <__swsetup_r+0x30>
 8002e84:	2209      	movs	r2, #9
 8002e86:	602a      	str	r2, [r5, #0]
 8002e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e8c:	81a3      	strh	r3, [r4, #12]
 8002e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e92:	e033      	b.n	8002efc <__swsetup_r+0x98>
 8002e94:	0758      	lsls	r0, r3, #29
 8002e96:	d512      	bpl.n	8002ebe <__swsetup_r+0x5a>
 8002e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e9a:	b141      	cbz	r1, 8002eae <__swsetup_r+0x4a>
 8002e9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ea0:	4299      	cmp	r1, r3
 8002ea2:	d002      	beq.n	8002eaa <__swsetup_r+0x46>
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f7ff fac1 	bl	800242c <_free_r>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	6363      	str	r3, [r4, #52]	@ 0x34
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002eb4:	81a3      	strh	r3, [r4, #12]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6063      	str	r3, [r4, #4]
 8002eba:	6923      	ldr	r3, [r4, #16]
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	89a3      	ldrh	r3, [r4, #12]
 8002ec0:	f043 0308 	orr.w	r3, r3, #8
 8002ec4:	81a3      	strh	r3, [r4, #12]
 8002ec6:	6923      	ldr	r3, [r4, #16]
 8002ec8:	b94b      	cbnz	r3, 8002ede <__swsetup_r+0x7a>
 8002eca:	89a3      	ldrh	r3, [r4, #12]
 8002ecc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed4:	d003      	beq.n	8002ede <__swsetup_r+0x7a>
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f7ff ff49 	bl	8002d70 <__smakebuf_r>
 8002ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee2:	f013 0201 	ands.w	r2, r3, #1
 8002ee6:	d00a      	beq.n	8002efe <__swsetup_r+0x9a>
 8002ee8:	2200      	movs	r2, #0
 8002eea:	60a2      	str	r2, [r4, #8]
 8002eec:	6962      	ldr	r2, [r4, #20]
 8002eee:	4252      	negs	r2, r2
 8002ef0:	61a2      	str	r2, [r4, #24]
 8002ef2:	6922      	ldr	r2, [r4, #16]
 8002ef4:	b942      	cbnz	r2, 8002f08 <__swsetup_r+0xa4>
 8002ef6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002efa:	d1c5      	bne.n	8002e88 <__swsetup_r+0x24>
 8002efc:	bd38      	pop	{r3, r4, r5, pc}
 8002efe:	0799      	lsls	r1, r3, #30
 8002f00:	bf58      	it	pl
 8002f02:	6962      	ldrpl	r2, [r4, #20]
 8002f04:	60a2      	str	r2, [r4, #8]
 8002f06:	e7f4      	b.n	8002ef2 <__swsetup_r+0x8e>
 8002f08:	2000      	movs	r0, #0
 8002f0a:	e7f7      	b.n	8002efc <__swsetup_r+0x98>
 8002f0c:	2000002c 	.word	0x2000002c

08002f10 <_fstat_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	4d07      	ldr	r5, [pc, #28]	@ (8002f30 <_fstat_r+0x20>)
 8002f14:	2300      	movs	r3, #0
 8002f16:	4604      	mov	r4, r0
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	602b      	str	r3, [r5, #0]
 8002f1e:	f7fd fe5d 	bl	8000bdc <_fstat>
 8002f22:	1c43      	adds	r3, r0, #1
 8002f24:	d102      	bne.n	8002f2c <_fstat_r+0x1c>
 8002f26:	682b      	ldr	r3, [r5, #0]
 8002f28:	b103      	cbz	r3, 8002f2c <_fstat_r+0x1c>
 8002f2a:	6023      	str	r3, [r4, #0]
 8002f2c:	bd38      	pop	{r3, r4, r5, pc}
 8002f2e:	bf00      	nop
 8002f30:	200007b0 	.word	0x200007b0

08002f34 <_isatty_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	4d06      	ldr	r5, [pc, #24]	@ (8002f50 <_isatty_r+0x1c>)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	602b      	str	r3, [r5, #0]
 8002f40:	f7fd fe4d 	bl	8000bde <_isatty>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d102      	bne.n	8002f4e <_isatty_r+0x1a>
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	b103      	cbz	r3, 8002f4e <_isatty_r+0x1a>
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	200007b0 	.word	0x200007b0

08002f54 <_sbrk_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4d06      	ldr	r5, [pc, #24]	@ (8002f70 <_sbrk_r+0x1c>)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	602b      	str	r3, [r5, #0]
 8002f60:	f000 f808 	bl	8002f74 <_sbrk>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d102      	bne.n	8002f6e <_sbrk_r+0x1a>
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	b103      	cbz	r3, 8002f6e <_sbrk_r+0x1a>
 8002f6c:	6023      	str	r3, [r4, #0]
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	200007b0 	.word	0x200007b0

08002f74 <_sbrk>:
 8002f74:	4a04      	ldr	r2, [pc, #16]	@ (8002f88 <_sbrk+0x14>)
 8002f76:	6811      	ldr	r1, [r2, #0]
 8002f78:	4603      	mov	r3, r0
 8002f7a:	b909      	cbnz	r1, 8002f80 <_sbrk+0xc>
 8002f7c:	4903      	ldr	r1, [pc, #12]	@ (8002f8c <_sbrk+0x18>)
 8002f7e:	6011      	str	r1, [r2, #0]
 8002f80:	6810      	ldr	r0, [r2, #0]
 8002f82:	4403      	add	r3, r0
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4770      	bx	lr
 8002f88:	200007c0 	.word	0x200007c0
 8002f8c:	200007c8 	.word	0x200007c8

08002f90 <_init>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	bf00      	nop
 8002f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f96:	bc08      	pop	{r3}
 8002f98:	469e      	mov	lr, r3
 8002f9a:	4770      	bx	lr

08002f9c <_fini>:
 8002f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9e:	bf00      	nop
 8002fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa2:	bc08      	pop	{r3}
 8002fa4:	469e      	mov	lr, r3
 8002fa6:	4770      	bx	lr
