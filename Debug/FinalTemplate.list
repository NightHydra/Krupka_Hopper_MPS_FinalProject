
FinalTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .apptext      00000000  00000000  00000000  0000407c  2**0
                  CONTENTS
  2 .text         00002504  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  080026fc  080026fc  000036fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08002714  08002714  0000407c  2**0
                  CONTENTS
  5 .ARM          00000008  08002714  08002714  00003714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800271c  0800271c  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800271c  0800271c  0000371c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08002720  08002720  00003720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000007c  20000000  08002724  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000025c  2000007c  080027a0  0000407c  2**2
                  ALLOC
 11 ._user_heap_stack 00000400  200002d8  080027a0  000042d8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e841  00000000  00000000  000040aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb4  00000000  00000000  000128eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00005430  00000000  00000000  0001449f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008f0  00000000  00000000  000198d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006ba  00000000  00000000  0001a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002dde7  00000000  00000000  0001a87a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010c36  00000000  00000000  00048661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011c2a1  00000000  00000000  00059297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00175538  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001d8c  00000000  00000000  0017557c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000050  00000000  00000000  00177308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000007c 	.word	0x2000007c
 8000214:	00000000 	.word	0x00000000
 8000218:	080026e4 	.word	0x080026e4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000080 	.word	0x20000080
 8000234:	080026e4 	.word	0x080026e4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000528:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800052c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <SCB_EnableICache+0x2c>)
 8000532:	2200      	movs	r2, #0
 8000534:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800053c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000540:	695a      	ldr	r2, [r3, #20]
 8000542:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000546:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800054c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000558:	b410      	push	{r4}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800055a:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <SCB_EnableDCache+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000562:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000566:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800056a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800056e:	e000      	b.n	8000572 <SCB_EnableDCache+0x1a>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000570:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000572:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000576:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800057a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800057e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000582:	490b      	ldr	r1, [pc, #44]	@ (80005b0 <SCB_EnableDCache+0x58>)
 8000584:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8000588:	4613      	mov	r3, r2
 800058a:	3a01      	subs	r2, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1f2      	bne.n	8000576 <SCB_EnableDCache+0x1e>
    } while(sets-- != 0U);
 8000590:	1e43      	subs	r3, r0, #1
 8000592:	2800      	cmp	r0, #0
 8000594:	d1ec      	bne.n	8000570 <SCB_EnableDCache+0x18>
 8000596:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800059a:	694b      	ldr	r3, [r1, #20]
 800059c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005a0:	614b      	str	r3, [r1, #20]
 80005a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005a6:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80005aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80005b4:	b500      	push	{lr}
 80005b6:	b093      	sub	sp, #76	@ 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005ca:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005cc:	2219      	movs	r2, #25
 80005ce:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 80005d0:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80005d4:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005d8:	2309      	movs	r3, #9
 80005da:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	930c      	str	r3, [sp, #48]	@ 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005e0:	4668      	mov	r0, sp
 80005e2:	f000 fca7 	bl	8000f34 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 80005e6:	b100      	cbz	r0, 80005ea <SystemClock_Config+0x36>
    while(1) { ; }
 80005e8:	e7fe      	b.n	80005e8 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 80005ea:	f000 fc65 	bl	8000eb8 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 80005ee:	b100      	cbz	r0, 80005f2 <SystemClock_Config+0x3e>
    while(1) { ; }
 80005f0:	e7fe      	b.n	80005f0 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80005f2:	230f      	movs	r3, #15
 80005f4:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000602:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000608:	9311      	str	r3, [sp, #68]	@ 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800060a:	2107      	movs	r1, #7
 800060c:	a80d      	add	r0, sp, #52	@ 0x34
 800060e:	f000 ff07 	bl	8001420 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8000612:	b100      	cbz	r0, 8000616 <SystemClock_Config+0x62>
    while(1) { ; }
 8000614:	e7fe      	b.n	8000614 <SystemClock_Config+0x60>
  }
}
 8000616:	b013      	add	sp, #76	@ 0x4c
 8000618:	f85d fb04 	ldr.w	pc, [sp], #4

0800061c <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 800061c:	b508      	push	{r3, lr}
  /* Enable I-Cache */
  SCB_EnableICache();
 800061e:	f7ff ff83 	bl	8000528 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8000622:	f7ff ff99 	bl	8000558 <SCB_EnableDCache>
}
 8000626:	bd08      	pop	{r3, pc}

08000628 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 8000628:	b0a4      	sub	sp, #144	@ 0x90
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b9f      	ldr	r3, [pc, #636]	@ (80008a8 <Clock_Inits+0x280>)
 800062c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800062e:	f042 0201 	orr.w	r2, r2, #1
 8000632:	631a      	str	r2, [r3, #48]	@ 0x30
 8000634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000636:	f002 0201 	and.w	r2, r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000640:	f042 0202 	orr.w	r2, r2, #2
 8000644:	631a      	str	r2, [r3, #48]	@ 0x30
 8000646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000648:	f002 0202 	and.w	r2, r2, #2
 800064c:	9202      	str	r2, [sp, #8]
 800064e:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000652:	f042 0204 	orr.w	r2, r2, #4
 8000656:	631a      	str	r2, [r3, #48]	@ 0x30
 8000658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800065a:	f002 0204 	and.w	r2, r2, #4
 800065e:	9203      	str	r2, [sp, #12]
 8000660:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000664:	f042 0208 	orr.w	r2, r2, #8
 8000668:	631a      	str	r2, [r3, #48]	@ 0x30
 800066a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800066c:	f002 0208 	and.w	r2, r2, #8
 8000670:	9204      	str	r2, [sp, #16]
 8000672:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000676:	f042 0210 	orr.w	r2, r2, #16
 800067a:	631a      	str	r2, [r3, #48]	@ 0x30
 800067c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800067e:	f002 0210 	and.w	r2, r2, #16
 8000682:	9205      	str	r2, [sp, #20]
 8000684:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000688:	f042 0220 	orr.w	r2, r2, #32
 800068c:	631a      	str	r2, [r3, #48]	@ 0x30
 800068e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000690:	f002 0220 	and.w	r2, r2, #32
 8000694:	9206      	str	r2, [sp, #24]
 8000696:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800069a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800069e:	631a      	str	r2, [r3, #48]	@ 0x30
 80006a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006a2:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80006a6:	9207      	str	r2, [sp, #28]
 80006a8:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80006b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80006b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006b4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80006b8:	9208      	str	r2, [sp, #32]
 80006ba:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80006bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80006c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80006c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006c6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80006ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80006cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80006ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80006d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80006d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006d8:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80006dc:	920a      	str	r2, [sp, #40]	@ 0x28
 80006de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
	__HAL_RCC_GPIOK_CLK_ENABLE();
 80006e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80006e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80006e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006ea:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 80006ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 80006f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80006f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80006f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80006fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80006fc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000700:	920c      	str	r2, [sp, #48]	@ 0x30
 8000702:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000706:	f042 0201 	orr.w	r2, r2, #1
 800070a:	645a      	str	r2, [r3, #68]	@ 0x44
 800070c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800070e:	f002 0201 	and.w	r2, r2, #1
 8000712:	920d      	str	r2, [sp, #52]	@ 0x34
 8000714:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000716:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000718:	f042 0201 	orr.w	r2, r2, #1
 800071c:	641a      	str	r2, [r3, #64]	@ 0x40
 800071e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000720:	f002 0201 	and.w	r2, r2, #1
 8000724:	920e      	str	r2, [sp, #56]	@ 0x38
 8000726:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000728:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800072a:	f042 0202 	orr.w	r2, r2, #2
 800072e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000730:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000732:	f002 0202 	and.w	r2, r2, #2
 8000736:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000738:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
	__HAL_RCC_TIM4_CLK_ENABLE();
 800073a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800073c:	f042 0204 	orr.w	r2, r2, #4
 8000740:	641a      	str	r2, [r3, #64]	@ 0x40
 8000742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000744:	f002 0204 	and.w	r2, r2, #4
 8000748:	9210      	str	r2, [sp, #64]	@ 0x40
 800074a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
	__HAL_RCC_TIM5_CLK_ENABLE();
 800074c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800074e:	f042 0208 	orr.w	r2, r2, #8
 8000752:	641a      	str	r2, [r3, #64]	@ 0x40
 8000754:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000756:	f002 0208 	and.w	r2, r2, #8
 800075a:	9211      	str	r2, [sp, #68]	@ 0x44
 800075c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
	__HAL_RCC_TIM6_CLK_ENABLE();
 800075e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000760:	f042 0210 	orr.w	r2, r2, #16
 8000764:	641a      	str	r2, [r3, #64]	@ 0x40
 8000766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000768:	f002 0210 	and.w	r2, r2, #16
 800076c:	9212      	str	r2, [sp, #72]	@ 0x48
 800076e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
	__HAL_RCC_TIM7_CLK_ENABLE();
 8000770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000772:	f042 0220 	orr.w	r2, r2, #32
 8000776:	641a      	str	r2, [r3, #64]	@ 0x40
 8000778:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800077a:	f002 0220 	and.w	r2, r2, #32
 800077e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8000780:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
	__HAL_RCC_TIM8_CLK_ENABLE();
 8000782:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000784:	f042 0202 	orr.w	r2, r2, #2
 8000788:	645a      	str	r2, [r3, #68]	@ 0x44
 800078a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800078c:	f002 0202 	and.w	r2, r2, #2
 8000790:	9214      	str	r2, [sp, #80]	@ 0x50
 8000792:	9a14      	ldr	r2, [sp, #80]	@ 0x50
	__HAL_RCC_TIM9_CLK_ENABLE();
 8000794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000796:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800079a:	645a      	str	r2, [r3, #68]	@ 0x44
 800079c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800079e:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 80007a2:	9215      	str	r2, [sp, #84]	@ 0x54
 80007a4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
	__HAL_RCC_TIM10_CLK_ENABLE();
 80007a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007a8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80007ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80007ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007b0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80007b4:	9216      	str	r2, [sp, #88]	@ 0x58
 80007b6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
	__HAL_RCC_TIM11_CLK_ENABLE();
 80007b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007ba:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80007be:	645a      	str	r2, [r3, #68]	@ 0x44
 80007c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007c2:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80007c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80007c8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
	__HAL_RCC_TIM12_CLK_ENABLE();
 80007ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80007d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007d4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80007d8:	9218      	str	r2, [sp, #96]	@ 0x60
 80007da:	9a18      	ldr	r2, [sp, #96]	@ 0x60
	__HAL_RCC_TIM13_CLK_ENABLE();
 80007dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80007e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80007e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007e6:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80007ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80007ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
	__HAL_RCC_TIM14_CLK_ENABLE();
 80007ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80007f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80007f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007f8:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80007fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80007fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000800:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000806:	641a      	str	r2, [r3, #64]	@ 0x40
 8000808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800080a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800080e:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000810:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 8000812:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000814:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000818:	641a      	str	r2, [r3, #64]	@ 0x40
 800081a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800081c:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8000820:	921c      	str	r2, [sp, #112]	@ 0x70
 8000822:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000824:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000826:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800082a:	645a      	str	r2, [r3, #68]	@ 0x44
 800082c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800082e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000832:	921d      	str	r2, [sp, #116]	@ 0x74
 8000834:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
	__HAL_RCC_ADC2_CLK_ENABLE();
 8000836:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800083c:	645a      	str	r2, [r3, #68]	@ 0x44
 800083e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000840:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000844:	921e      	str	r2, [sp, #120]	@ 0x78
 8000846:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
	__HAL_RCC_ADC3_CLK_ENABLE();
 8000848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800084a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800084e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000852:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8000856:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000858:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 800085a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800085c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000860:	631a      	str	r2, [r3, #48]	@ 0x30
 8000862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000864:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8000868:	9220      	str	r2, [sp, #128]	@ 0x80
 800086a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
	__HAL_RCC_DMA2_CLK_ENABLE();
 800086c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800086e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000872:	631a      	str	r2, [r3, #48]	@ 0x30
 8000874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000876:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 800087a:	9221      	str	r2, [sp, #132]	@ 0x84
 800087c:	9a21      	ldr	r2, [sp, #132]	@ 0x84

	// JPEG Clock
	__HAL_RCC_JPEG_CLK_ENABLE();
 800087e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000880:	f042 0202 	orr.w	r2, r2, #2
 8000884:	635a      	str	r2, [r3, #52]	@ 0x34
 8000886:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000888:	f002 0202 	and.w	r2, r2, #2
 800088c:	9222      	str	r2, [sp, #136]	@ 0x88
 800088e:	9a22      	ldr	r2, [sp, #136]	@ 0x88

	// DMA2D Clock
	__HAL_RCC_DMA2D_CLK_ENABLE();
 8000890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000892:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000896:	631a      	str	r2, [r3, #48]	@ 0x30
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800089e:	9323      	str	r3, [sp, #140]	@ 0x8c
 80008a0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c

}
 80008a2:	b024      	add	sp, #144	@ 0x90
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <Sys_Init>:
void Sys_Init(void) {
 80008ac:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 80008ae:	f7ff feb5 	bl	800061c <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80008b2:	f000 f96f 	bl	8000b94 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80008b6:	f7ff fe7d 	bl	80005b4 <SystemClock_Config>
	Clock_Inits();
 80008ba:	f7ff feb5 	bl	8000628 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 80008be:	4a06      	ldr	r2, [pc, #24]	@ (80008d8 <Sys_Init+0x2c>)
 80008c0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80008c4:	4805      	ldr	r0, [pc, #20]	@ (80008dc <Sys_Init+0x30>)
 80008c6:	f000 f8df 	bl	8000a88 <initUart>
	setbuf(stdout, NULL);
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <Sys_Init+0x34>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2100      	movs	r1, #0
 80008d0:	6898      	ldr	r0, [r3, #8]
 80008d2:	f001 fb8f 	bl	8001ff4 <setbuf>
}
 80008d6:	bd08      	pop	{r3, pc}
 80008d8:	40011000 	.word	0x40011000
 80008dc:	200000fc 	.word	0x200000fc
 80008e0:	2000002c 	.word	0x2000002c

080008e4 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 80008e4:	b508      	push	{r3, lr}
  HAL_IncTick();
 80008e6:	f000 f96b 	bl	8000bc0 <HAL_IncTick>
}
 80008ea:	bd08      	pop	{r3, pc}

080008ec <main>:
#include "init.h"
#include "spi_flash_interface.h"

int main(void){
 80008ec:	b508      	push	{r3, lr}

	Sys_Init();
 80008ee:	f7ff ffdd 	bl	80008ac <Sys_Init>

	// Read the README in the base directory of this project.
	spi_flash_interface_initialize_SPI();
 80008f2:	f000 f83d 	bl	8000970 <spi_flash_interface_initialize_SPI>

	while(1)
 80008f6:	e7fe      	b.n	80008f6 <main+0xa>

080008f8 <spi_flash_gpio_init>:
/** =============================================================
 *  Initialization Function
    ============================================================= */

void spi_flash_gpio_init()
{
 80008f8:	b530      	push	{r4, r5, lr}
 80008fa:	b08b      	sub	sp, #44	@ 0x2c
	// Initialize the MOSI and MISO pins
	GPIO_InitTypeDef spi_pins_init_struct = {0};
 80008fc:	2400      	movs	r4, #0
 80008fe:	9405      	str	r4, [sp, #20]
 8000900:	9406      	str	r4, [sp, #24]
 8000902:	9407      	str	r4, [sp, #28]
 8000904:	9408      	str	r4, [sp, #32]
 8000906:	9409      	str	r4, [sp, #36]	@ 0x24

	spi_pins_init_struct.Pin = MOSI_PIN |MISO_PIN;
 8000908:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800090c:	9305      	str	r3, [sp, #20]
	spi_pins_init_struct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	9306      	str	r3, [sp, #24]
	spi_pins_init_struct.Pull = GPIO_NOPULL;
	spi_pins_init_struct.Speed = GPIO_SPEED_HIGH;
 8000912:	2503      	movs	r5, #3
 8000914:	9508      	str	r5, [sp, #32]
	spi_pins_init_struct.Alternate = GPIO_AF5_SPI2;			// From Table 13 of stm32f769xx_Datasheet
 8000916:	2305      	movs	r3, #5
 8000918:	9309      	str	r3, [sp, #36]	@ 0x24
	HAL_GPIO_Init(MOSI_MISO_PORT, &spi_pins_init_struct);
 800091a:	a905      	add	r1, sp, #20
 800091c:	4811      	ldr	r0, [pc, #68]	@ (8000964 <spi_flash_gpio_init+0x6c>)
 800091e:	f000 f9c9 	bl	8000cb4 <HAL_GPIO_Init>

	// Initialize the SCLK PIN
	spi_pins_init_struct.Pin = SCLK_PIN;
 8000922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000926:	9305      	str	r3, [sp, #20]

	HAL_GPIO_Init(SCLK_PORT, &spi_pins_init_struct);
 8000928:	a905      	add	r1, sp, #20
 800092a:	480f      	ldr	r0, [pc, #60]	@ (8000968 <spi_flash_gpio_init+0x70>)
 800092c:	f000 f9c2 	bl	8000cb4 <HAL_GPIO_Init>

	// Initialize the NSS Pins as normal GPIO Pins

	GPIO_InitTypeDef nss_control_pin_init_struct = {0};
 8000930:	9400      	str	r4, [sp, #0]
 8000932:	9401      	str	r4, [sp, #4]
 8000934:	9402      	str	r4, [sp, #8]
 8000936:	9403      	str	r4, [sp, #12]
 8000938:	9404      	str	r4, [sp, #16]

	nss_control_pin_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	9301      	str	r3, [sp, #4]
	nss_control_pin_init_struct.Pull = GPIO_NOPULL;
	nss_control_pin_init_struct.Speed = GPIO_SPEED_HIGH;
 800093e:	9503      	str	r5, [sp, #12]

	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000940:	e00b      	b.n	800095a <spi_flash_gpio_init+0x62>
	{
		nss_control_pin_init_struct.Pin = cartridge_nss_pin_numbers[i];
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <spi_flash_gpio_init+0x74>)
 8000944:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8000948:	9200      	str	r2, [sp, #0]
		HAL_GPIO_Init(cartridge_nss_ports[i], &nss_control_pin_init_struct);
 800094a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800094e:	4669      	mov	r1, sp
 8000950:	6898      	ldr	r0, [r3, #8]
 8000952:	f000 f9af 	bl	8000cb4 <HAL_GPIO_Init>
	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000956:	3401      	adds	r4, #1
 8000958:	b2e4      	uxtb	r4, r4
 800095a:	2c02      	cmp	r4, #2
 800095c:	d9f1      	bls.n	8000942 <spi_flash_gpio_init+0x4a>
	}

}
 800095e:	b00b      	add	sp, #44	@ 0x2c
 8000960:	bd30      	pop	{r4, r5, pc}
 8000962:	bf00      	nop
 8000964:	40020400 	.word	0x40020400
 8000968:	40020000 	.word	0x40020000
 800096c:	20000000 	.word	0x20000000

08000970 <spi_flash_interface_initialize_SPI>:

void spi_flash_interface_initialize_SPI()
{
 8000970:	b508      	push	{r3, lr}
	spi_flash_gpio_init();
 8000972:	f7ff ffc1 	bl	80008f8 <spi_flash_gpio_init>

	flash_spi_handle.Instance = SPI2;
 8000976:	480d      	ldr	r0, [pc, #52]	@ (80009ac <spi_flash_interface_initialize_SPI+0x3c>)
 8000978:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <spi_flash_interface_initialize_SPI+0x40>)
 800097a:	6003      	str	r3, [r0, #0]
	flash_spi_handle.Init.Mode = SPI_MODE_MASTER; // Set master mode
 800097c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000980:	6043      	str	r3, [r0, #4]
	flash_spi_handle.Init.TIMode = SPI_TIMODE_DISABLE; // Use Motorola mode, not TI mode
 8000982:	2300      	movs	r3, #0
 8000984:	6243      	str	r3, [r0, #36]	@ 0x24
	flash_spi_handle.Init.Direction = SPI_DIRECTION_2LINES; //Subject to change?
 8000986:	6083      	str	r3, [r0, #8]
	flash_spi_handle.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	6202      	str	r2, [r0, #32]
	flash_spi_handle.Init.DataSize = SPI_DATASIZE_16BIT;
 800098c:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000990:	60c2      	str	r2, [r0, #12]
	flash_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000992:	6103      	str	r3, [r0, #16]
	flash_spi_handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000994:	2201      	movs	r2, #1
 8000996:	6142      	str	r2, [r0, #20]
	flash_spi_handle.Init.NSS = SPI_NSS_SOFT;
 8000998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800099c:	6182      	str	r2, [r0, #24]
	flash_spi_handle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800099e:	6343      	str	r3, [r0, #52]	@ 0x34
	flash_spi_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009a0:	2330      	movs	r3, #48	@ 0x30
 80009a2:	61c3      	str	r3, [r0, #28]

	HAL_SPI_Init(&flash_spi_handle);
 80009a4:	f000 fe19 	bl	80015da <HAL_SPI_Init>
}
 80009a8:	bd08      	pop	{r3, pc}
 80009aa:	bf00      	nop
 80009ac:	20000098 	.word	0x20000098
 80009b0:	40003800 	.word	0x40003800

080009b4 <HAL_UART_MspInit>:
UART_HandleTypeDef USB_UART;

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80009b4:	b530      	push	{r4, r5, lr}
 80009b6:	b08b      	sub	sp, #44	@ 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 80009b8:	6803      	ldr	r3, [r0, #0]
 80009ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000a74 <HAL_UART_MspInit+0xc0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d004      	beq.n	80009ca <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 80009c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000a78 <HAL_UART_MspInit+0xc4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d02c      	beq.n	8000a20 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 80009c6:	b00b      	add	sp, #44	@ 0x2c
 80009c8:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 80009ca:	4c2c      	ldr	r4, [pc, #176]	@ (8000a7c <HAL_UART_MspInit+0xc8>)
 80009cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80009d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	9301      	str	r3, [sp, #4]
 80009dc:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80009de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009e2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009f0:	2307      	movs	r3, #7
 80009f2:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 80009f4:	4d22      	ldr	r5, [pc, #136]	@ (8000a80 <HAL_UART_MspInit+0xcc>)
 80009f6:	a905      	add	r1, sp, #20
 80009f8:	4628      	mov	r0, r5
 80009fa:	f000 f95b 	bl	8000cb4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a02:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000a04:	a905      	add	r1, sp, #20
 8000a06:	4628      	mov	r0, r5
 8000a08:	f000 f954 	bl	8000cb4 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000a0c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6463      	str	r3, [r4, #68]	@ 0x44
 8000a14:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	9b02      	ldr	r3, [sp, #8]
 8000a1e:	e7d2      	b.n	80009c6 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000a20:	4c16      	ldr	r4, [pc, #88]	@ (8000a7c <HAL_UART_MspInit+0xc8>)
 8000a22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6323      	str	r3, [r4, #48]	@ 0x30
 8000a2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	9303      	str	r3, [sp, #12]
 8000a32:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000a34:	2340      	movs	r3, #64	@ 0x40
 8000a36:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a44:	2308      	movs	r3, #8
 8000a46:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000a48:	4d0e      	ldr	r5, [pc, #56]	@ (8000a84 <HAL_UART_MspInit+0xd0>)
 8000a4a:	a905      	add	r1, sp, #20
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	f000 f931 	bl	8000cb4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a52:	2380      	movs	r3, #128	@ 0x80
 8000a54:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000a56:	a905      	add	r1, sp, #20
 8000a58:	4628      	mov	r0, r5
 8000a5a:	f000 f92b 	bl	8000cb4 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000a5e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000a60:	f043 0320 	orr.w	r3, r3, #32
 8000a64:	6463      	str	r3, [r4, #68]	@ 0x44
 8000a66:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000a68:	f003 0320 	and.w	r3, r3, #32
 8000a6c:	9304      	str	r3, [sp, #16]
 8000a6e:	9b04      	ldr	r3, [sp, #16]
}
 8000a70:	e7a9      	b.n	80009c6 <HAL_UART_MspInit+0x12>
 8000a72:	bf00      	nop
 8000a74:	40011000 	.word	0x40011000
 8000a78:	40011400 	.word	0x40011400
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020800 	.word	0x40020800

08000a88 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000a88:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000a8a:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000a8c:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	2200      	movs	r2, #0
 8000a90:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000a92:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000a94:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000a96:	210c      	movs	r1, #12
 8000a98:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000a9a:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000a9c:	f001 f9b6 	bl	8001e0c <HAL_UART_Init>
}
 8000aa0:	bd08      	pop	{r3, pc}
	...

08000aa4 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000aa4:	b510      	push	{r4, lr}
 8000aa6:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aac:	b292      	uxth	r2, r2
 8000aae:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <_write+0x14>)
 8000ab0:	f001 f88d 	bl	8001bce <HAL_UART_Transmit>
	return len;
}
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	bd10      	pop	{r4, pc}
 8000ab8:	200000fc 	.word	0x200000fc

08000abc <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000abc:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000abe:	2200      	movs	r2, #0
 8000ac0:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <_read+0x18>)
 8000aca:	f001 f8de 	bl	8001c8a <HAL_UART_Receive>
	return len;
}
 8000ace:	2001      	movs	r0, #1
 8000ad0:	bd08      	pop	{r3, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000fc 	.word	0x200000fc

08000ad8 <_close>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3
__attribute__((weak)) void _close(void){}
 8000ad8:	4770      	bx	lr

08000ada <_lseek>:
__attribute__((weak)) void _lseek(void){}
 8000ada:	4770      	bx	lr

08000adc <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8000adc:	4770      	bx	lr
	...

08000ae0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae0:	480d      	ldr	r0, [pc, #52]	@ (8000b18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae6:	490e      	ldr	r1, [pc, #56]	@ (8000b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b24 <LoopForever+0xe>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000afc:	4c0b      	ldr	r4, [pc, #44]	@ (8000b2c <LoopForever+0x16>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b0a:	f000 f813 	bl	8000b34 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b0e:	f001 fbbf 	bl	8002290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b12:	f7ff feeb 	bl	80008ec <main>

08000b16 <LoopForever>:

LoopForever:
    b LoopForever
 8000b16:	e7fe      	b.n	8000b16 <LoopForever>
  ldr   r0, =_estack
 8000b18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000b24:	08002724 	.word	0x08002724
  ldr r2, =_sbss
 8000b28:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000b2c:	200002d8 	.word	0x200002d8

08000b30 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC_IRQHandler>
	...

08000b34 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4a03      	ldr	r2, [pc, #12]	@ (8000b44 <SystemInit+0x10>)
 8000b36:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000b3a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000b48:	4770      	bx	lr
	...

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b510      	push	{r4, lr}
 8000b4e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_InitTick+0x40>)
 8000b52:	781a      	ldrb	r2, [r3, #0]
 8000b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b90 <HAL_InitTick+0x44>)
 8000b5e:	6810      	ldr	r0, [r2, #0]
 8000b60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b64:	f000 f892 	bl	8000c8c <HAL_SYSTICK_Config>
 8000b68:	b968      	cbnz	r0, 8000b86 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	2c0f      	cmp	r4, #15
 8000b6c:	d901      	bls.n	8000b72 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b6e:	2001      	movs	r0, #1
 8000b70:	e00a      	b.n	8000b88 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b72:	2200      	movs	r2, #0
 8000b74:	4621      	mov	r1, r4
 8000b76:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7a:	f000 f877 	bl	8000c6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7e:	4b03      	ldr	r3, [pc, #12]	@ (8000b8c <HAL_InitTick+0x40>)
 8000b80:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2000      	movs	r0, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b86:	2001      	movs	r0, #1
}
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000018 	.word	0x20000018
 8000b90:	20000014 	.word	0x20000014

08000b94 <HAL_Init>:
{
 8000b94:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <HAL_Init+0x28>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b9e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ba6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f84d 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	200f      	movs	r0, #15
 8000bb0:	f7ff ffcc 	bl	8000b4c <HAL_InitTick>
  HAL_MspInit();
 8000bb4:	f7ff ffc8 	bl	8000b48 <HAL_MspInit>
}
 8000bb8:	2000      	movs	r0, #0
 8000bba:	bd08      	pop	{r3, pc}
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bc0:	4a03      	ldr	r2, [pc, #12]	@ (8000bd0 <HAL_IncTick+0x10>)
 8000bc2:	6811      	ldr	r1, [r2, #0]
 8000bc4:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <HAL_IncTick+0x14>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	440b      	add	r3, r1
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000184 	.word	0x20000184
 8000bd4:	20000018 	.word	0x20000018

08000bd8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bd8:	4b01      	ldr	r3, [pc, #4]	@ (8000be0 <HAL_GetTick+0x8>)
 8000bda:	6818      	ldr	r0, [r3, #0]
}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000184 	.word	0x20000184

08000be4 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8000be4:	2800      	cmp	r0, #0
 8000be6:	db04      	blt.n	8000bf2 <__NVIC_SetPriority+0xe>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	0109      	lsls	r1, r1, #4
 8000bea:	b2c9      	uxtb	r1, r1
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <__NVIC_SetPriority+0x1c>)
 8000bee:	5419      	strb	r1, [r3, r0]
 8000bf0:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	f000 000f 	and.w	r0, r0, #15
 8000bf6:	0109      	lsls	r1, r1, #4
 8000bf8:	b2c9      	uxtb	r1, r1
 8000bfa:	4b02      	ldr	r3, [pc, #8]	@ (8000c04 <__NVIC_SetPriority+0x20>)
 8000bfc:	5419      	strb	r1, [r3, r0]
}
 8000bfe:	4770      	bx	lr
 8000c00:	e000e400 	.word	0xe000e400
 8000c04:	e000ed14 	.word	0xe000ed14

08000c08 <NVIC_EncodePriority>:
{
 8000c08:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0a:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0e:	f1c0 0c07 	rsb	ip, r0, #7
 8000c12:	f1bc 0f04 	cmp.w	ip, #4
 8000c16:	bf28      	it	cs
 8000c18:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1c:	1d03      	adds	r3, r0, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d90f      	bls.n	8000c42 <NVIC_EncodePriority+0x3a>
 8000c22:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 3eff 	mov.w	lr, #4294967295
 8000c28:	fa0e f00c 	lsl.w	r0, lr, ip
 8000c2c:	ea21 0100 	bic.w	r1, r1, r0
 8000c30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c32:	fa0e fe03 	lsl.w	lr, lr, r3
 8000c36:	ea22 020e 	bic.w	r2, r2, lr
}
 8000c3a:	ea41 0002 	orr.w	r0, r1, r2
 8000c3e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	2300      	movs	r3, #0
 8000c44:	e7ee      	b.n	8000c24 <NVIC_EncodePriority+0x1c>
	...

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4906      	ldr	r1, [pc, #24]	@ (8000c64 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000c4a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000c50:	041b      	lsls	r3, r3, #16
 8000c52:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	0200      	lsls	r0, r0, #8
 8000c56:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000c5c:	4a02      	ldr	r2, [pc, #8]	@ (8000c68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c5e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000c60:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00
 8000c68:	05fa0000 	.word	0x05fa0000

08000c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6c:	b510      	push	{r4, lr}
 8000c6e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <HAL_NVIC_SetPriority+0x1c>)
 8000c72:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c74:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000c78:	f7ff ffc6 	bl	8000c08 <NVIC_EncodePriority>
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f7ff ffb0 	bl	8000be4 <__NVIC_SetPriority>
}
 8000c84:	bd10      	pop	{r4, pc}
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c92:	d20b      	bcs.n	8000cac <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000c98:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <HAL_SYSTICK_Config+0x24>)
 8000c9c:	21f0      	movs	r1, #240	@ 0xf0
 8000c9e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	2207      	movs	r2, #7
 8000ca8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000caa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	f200 80f4 	bhi.w	8000ea4 <HAL_GPIO_Init+0x1f0>
{
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	e066      	b.n	8000d90 <HAL_GPIO_Init+0xdc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cc2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cc4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000cc8:	2403      	movs	r4, #3
 8000cca:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cce:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cd2:	68cc      	ldr	r4, [r1, #12]
 8000cd4:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cd8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000cda:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cdc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cde:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce2:	684a      	ldr	r2, [r1, #4]
 8000ce4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000cec:	6042      	str	r2, [r0, #4]
 8000cee:	e05d      	b.n	8000dac <HAL_GPIO_Init+0xf8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000cf0:	08dc      	lsrs	r4, r3, #3
 8000cf2:	3408      	adds	r4, #8
 8000cf4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cf8:	f003 0507 	and.w	r5, r3, #7
 8000cfc:	00ad      	lsls	r5, r5, #2
 8000cfe:	f04f 0e0f 	mov.w	lr, #15
 8000d02:	fa0e fe05 	lsl.w	lr, lr, r5
 8000d06:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d0a:	690a      	ldr	r2, [r1, #16]
 8000d0c:	40aa      	lsls	r2, r5
 8000d0e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8000d12:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000d16:	e05d      	b.n	8000dd4 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d18:	2209      	movs	r2, #9
 8000d1a:	e000      	b.n	8000d1e <HAL_GPIO_Init+0x6a>
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d22:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d24:	3402      	adds	r4, #2
 8000d26:	4d60      	ldr	r5, [pc, #384]	@ (8000ea8 <HAL_GPIO_Init+0x1f4>)
 8000d28:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d2c:	4a5f      	ldr	r2, [pc, #380]	@ (8000eac <HAL_GPIO_Init+0x1f8>)
 8000d2e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d30:	ea6f 020c 	mvn.w	r2, ip
 8000d34:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d38:	684e      	ldr	r6, [r1, #4]
 8000d3a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000d3e:	d001      	beq.n	8000d44 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000d40:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000d44:	4c59      	ldr	r4, [pc, #356]	@ (8000eac <HAL_GPIO_Init+0x1f8>)
 8000d46:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000d48:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d4a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d4e:	684e      	ldr	r6, [r1, #4]
 8000d50:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000d54:	d001      	beq.n	8000d5a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000d56:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000d5a:	4c54      	ldr	r4, [pc, #336]	@ (8000eac <HAL_GPIO_Init+0x1f8>)
 8000d5c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000d5e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d60:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d64:	684e      	ldr	r6, [r1, #4]
 8000d66:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000d6a:	d001      	beq.n	8000d70 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000d6c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000d70:	4c4e      	ldr	r4, [pc, #312]	@ (8000eac <HAL_GPIO_Init+0x1f8>)
 8000d72:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d74:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d76:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d78:	684d      	ldr	r5, [r1, #4]
 8000d7a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000d7e:	d001      	beq.n	8000d84 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000d80:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000d84:	4c49      	ldr	r4, [pc, #292]	@ (8000eac <HAL_GPIO_Init+0x1f8>)
 8000d86:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d88:	3301      	adds	r3, #1
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	f200 8088 	bhi.w	8000ea0 <HAL_GPIO_Init+0x1ec>
    ioposition = ((uint32_t)0x01) << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d94:	680c      	ldr	r4, [r1, #0]
 8000d96:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000d9a:	ea32 0404 	bics.w	r4, r2, r4
 8000d9e:	d1f3      	bne.n	8000d88 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da0:	684c      	ldr	r4, [r1, #4]
 8000da2:	f004 0403 	and.w	r4, r4, #3
 8000da6:	3c01      	subs	r4, #1
 8000da8:	2c01      	cmp	r4, #1
 8000daa:	d98a      	bls.n	8000cc2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dac:	684a      	ldr	r2, [r1, #4]
 8000dae:	f002 0203 	and.w	r2, r2, #3
 8000db2:	2a03      	cmp	r2, #3
 8000db4:	d009      	beq.n	8000dca <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8000db6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000db8:	005d      	lsls	r5, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	40aa      	lsls	r2, r5
 8000dbe:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000dc2:	688a      	ldr	r2, [r1, #8]
 8000dc4:	40aa      	lsls	r2, r5
 8000dc6:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000dc8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	684a      	ldr	r2, [r1, #4]
 8000dcc:	f002 0203 	and.w	r2, r2, #3
 8000dd0:	2a02      	cmp	r2, #2
 8000dd2:	d08d      	beq.n	8000cf0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000dd4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000dd6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f20e 	lsl.w	r2, r2, lr
 8000de0:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000de4:	684a      	ldr	r2, [r1, #4]
 8000de6:	f002 0203 	and.w	r2, r2, #3
 8000dea:	fa02 f20e 	lsl.w	r2, r2, lr
 8000dee:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000df0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df2:	684a      	ldr	r2, [r1, #4]
 8000df4:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000df8:	d0c6      	beq.n	8000d88 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8000eb0 <HAL_GPIO_Init+0x1fc>)
 8000dfc:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000dfe:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000e02:	6454      	str	r4, [r2, #68]	@ 0x44
 8000e04:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000e06:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000e0a:	9201      	str	r2, [sp, #4]
 8000e0c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000e0e:	089c      	lsrs	r4, r3, #2
 8000e10:	1ca5      	adds	r5, r4, #2
 8000e12:	4a25      	ldr	r2, [pc, #148]	@ (8000ea8 <HAL_GPIO_Init+0x1f4>)
 8000e14:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e18:	f003 0e03 	and.w	lr, r3, #3
 8000e1c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e26:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e2a:	4a22      	ldr	r2, [pc, #136]	@ (8000eb4 <HAL_GPIO_Init+0x200>)
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	f43f af75 	beq.w	8000d1c <HAL_GPIO_Init+0x68>
 8000e32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d022      	beq.n	8000e80 <HAL_GPIO_Init+0x1cc>
 8000e3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e3e:	4290      	cmp	r0, r2
 8000e40:	d020      	beq.n	8000e84 <HAL_GPIO_Init+0x1d0>
 8000e42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d01e      	beq.n	8000e88 <HAL_GPIO_Init+0x1d4>
 8000e4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d01c      	beq.n	8000e8c <HAL_GPIO_Init+0x1d8>
 8000e52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e56:	4290      	cmp	r0, r2
 8000e58:	d01a      	beq.n	8000e90 <HAL_GPIO_Init+0x1dc>
 8000e5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e5e:	4290      	cmp	r0, r2
 8000e60:	d018      	beq.n	8000e94 <HAL_GPIO_Init+0x1e0>
 8000e62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d016      	beq.n	8000e98 <HAL_GPIO_Init+0x1e4>
 8000e6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e6e:	4290      	cmp	r0, r2
 8000e70:	d014      	beq.n	8000e9c <HAL_GPIO_Init+0x1e8>
 8000e72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e76:	4290      	cmp	r0, r2
 8000e78:	f43f af4e 	beq.w	8000d18 <HAL_GPIO_Init+0x64>
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	e74e      	b.n	8000d1e <HAL_GPIO_Init+0x6a>
 8000e80:	2201      	movs	r2, #1
 8000e82:	e74c      	b.n	8000d1e <HAL_GPIO_Init+0x6a>
 8000e84:	2202      	movs	r2, #2
 8000e86:	e74a      	b.n	8000d1e <HAL_GPIO_Init+0x6a>
 8000e88:	2203      	movs	r2, #3
 8000e8a:	e748      	b.n	8000d1e <HAL_GPIO_Init+0x6a>
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	e746      	b.n	8000d1e <HAL_GPIO_Init+0x6a>
 8000e90:	2205      	movs	r2, #5
 8000e92:	e744      	b.n	8000d1e <HAL_GPIO_Init+0x6a>
 8000e94:	2206      	movs	r2, #6
 8000e96:	e742      	b.n	8000d1e <HAL_GPIO_Init+0x6a>
 8000e98:	2207      	movs	r2, #7
 8000e9a:	e740      	b.n	8000d1e <HAL_GPIO_Init+0x6a>
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	e73e      	b.n	8000d1e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	40013c00 	.word	0x40013c00
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <HAL_PWREx_EnableOverDrive+0x74>)
 8000ebe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ec0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ed0:	4a17      	ldr	r2, [pc, #92]	@ (8000f30 <HAL_PWREx_EnableOverDrive+0x78>)
 8000ed2:	6813      	ldr	r3, [r2, #0]
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eda:	f7ff fe7d 	bl	8000bd8 <HAL_GetTick>
 8000ede:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <HAL_PWREx_EnableOverDrive+0x78>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000ee8:	d108      	bne.n	8000efc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000eea:	f7ff fe75 	bl	8000bd8 <HAL_GetTick>
 8000eee:	1b00      	subs	r0, r0, r4
 8000ef0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000ef4:	d9f4      	bls.n	8000ee0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000efc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <HAL_PWREx_EnableOverDrive+0x78>)
 8000efe:	6813      	ldr	r3, [r2, #0]
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f04:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000f06:	f7ff fe67 	bl	8000bd8 <HAL_GetTick>
 8000f0a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <HAL_PWREx_EnableOverDrive+0x78>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f14:	d107      	bne.n	8000f26 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f16:	f7ff fe5f 	bl	8000bd8 <HAL_GetTick>
 8000f1a:	1b00      	subs	r0, r0, r4
 8000f1c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000f20:	d9f4      	bls.n	8000f0c <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000f22:	2003      	movs	r0, #3
 8000f24:	e7e8      	b.n	8000ef8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000f26:	2000      	movs	r0, #0
 8000f28:	e7e6      	b.n	8000ef8 <HAL_PWREx_EnableOverDrive+0x40>
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f34:	2800      	cmp	r0, #0
 8000f36:	f000 8206 	beq.w	8001346 <HAL_RCC_OscConfig+0x412>
{
 8000f3a:	b570      	push	{r4, r5, r6, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f40:	6803      	ldr	r3, [r0, #0]
 8000f42:	f013 0f01 	tst.w	r3, #1
 8000f46:	d029      	beq.n	8000f9c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f48:	4b95      	ldr	r3, [pc, #596]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d01a      	beq.n	8000f8a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f54:	4b92      	ldr	r3, [pc, #584]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d00f      	beq.n	8000f80 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f60:	6863      	ldr	r3, [r4, #4]
 8000f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f66:	d040      	beq.n	8000fea <HAL_RCC_OscConfig+0xb6>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d154      	bne.n	8001016 <HAL_RCC_OscConfig+0xe2>
 8000f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e039      	b.n	8000ff4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f80:	4b87      	ldr	r3, [pc, #540]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000f88:	d0ea      	beq.n	8000f60 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8a:	4b85      	ldr	r3, [pc, #532]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f92:	d003      	beq.n	8000f9c <HAL_RCC_OscConfig+0x68>
 8000f94:	6863      	ldr	r3, [r4, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 81d7 	beq.w	800134a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	f013 0f02 	tst.w	r3, #2
 8000fa2:	d074      	beq.n	800108e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f013 0f0c 	tst.w	r3, #12
 8000fac:	d05e      	beq.n	800106c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fae:	4b7c      	ldr	r3, [pc, #496]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d053      	beq.n	8001062 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000fba:	68e3      	ldr	r3, [r4, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 8089 	beq.w	80010d4 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc2:	4a77      	ldr	r2, [pc, #476]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	6813      	ldr	r3, [r2, #0]
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fe04 	bl	8000bd8 <HAL_GetTick>
 8000fd0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd2:	4b73      	ldr	r3, [pc, #460]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f013 0f02 	tst.w	r3, #2
 8000fda:	d172      	bne.n	80010c2 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fdfc 	bl	8000bd8 <HAL_GetTick>
 8000fe0:	1b40      	subs	r0, r0, r5
 8000fe2:	2802      	cmp	r0, #2
 8000fe4:	d9f5      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000fe6:	2003      	movs	r0, #3
 8000fe8:	e1b4      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fea:	4a6d      	ldr	r2, [pc, #436]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	6813      	ldr	r3, [r2, #0]
 8000fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff4:	6863      	ldr	r3, [r4, #4]
 8000ff6:	b32b      	cbz	r3, 8001044 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fdee 	bl	8000bd8 <HAL_GetTick>
 8000ffc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	4b68      	ldr	r3, [pc, #416]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001006:	d1c9      	bne.n	8000f9c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fde6 	bl	8000bd8 <HAL_GetTick>
 800100c:	1b40      	subs	r0, r0, r5
 800100e:	2864      	cmp	r0, #100	@ 0x64
 8001010:	d9f5      	bls.n	8000ffe <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001012:	2003      	movs	r0, #3
 8001014:	e19e      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001016:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800101a:	d009      	beq.n	8001030 <HAL_RCC_OscConfig+0xfc>
 800101c:	4b60      	ldr	r3, [pc, #384]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e7e1      	b.n	8000ff4 <HAL_RCC_OscConfig+0xc0>
 8001030:	4b5b      	ldr	r3, [pc, #364]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e7d7      	b.n	8000ff4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8001044:	f7ff fdc8 	bl	8000bd8 <HAL_GetTick>
 8001048:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	4b55      	ldr	r3, [pc, #340]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001052:	d0a3      	beq.n	8000f9c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fdc0 	bl	8000bd8 <HAL_GetTick>
 8001058:	1b40      	subs	r0, r0, r5
 800105a:	2864      	cmp	r0, #100	@ 0x64
 800105c:	d9f5      	bls.n	800104a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800105e:	2003      	movs	r0, #3
 8001060:	e178      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001062:	4b4f      	ldr	r3, [pc, #316]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800106a:	d1a6      	bne.n	8000fba <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106c:	4b4c      	ldr	r3, [pc, #304]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f013 0f02 	tst.w	r3, #2
 8001074:	d003      	beq.n	800107e <HAL_RCC_OscConfig+0x14a>
 8001076:	68e3      	ldr	r3, [r4, #12]
 8001078:	2b01      	cmp	r3, #1
 800107a:	f040 8168 	bne.w	800134e <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107e:	4a48      	ldr	r2, [pc, #288]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001080:	6813      	ldr	r3, [r2, #0]
 8001082:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001086:	6921      	ldr	r1, [r4, #16]
 8001088:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800108c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	f013 0f08 	tst.w	r3, #8
 8001094:	d046      	beq.n	8001124 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001096:	6963      	ldr	r3, [r4, #20]
 8001098:	b383      	cbz	r3, 80010fc <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109a:	4a41      	ldr	r2, [pc, #260]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800109c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a4:	f7ff fd98 	bl	8000bd8 <HAL_GetTick>
 80010a8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010aa:	4b3d      	ldr	r3, [pc, #244]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010ae:	f013 0f02 	tst.w	r3, #2
 80010b2:	d137      	bne.n	8001124 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b4:	f7ff fd90 	bl	8000bd8 <HAL_GetTick>
 80010b8:	1b40      	subs	r0, r0, r5
 80010ba:	2802      	cmp	r0, #2
 80010bc:	d9f5      	bls.n	80010aa <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80010be:	2003      	movs	r0, #3
 80010c0:	e148      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c2:	4a37      	ldr	r2, [pc, #220]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80010ca:	6921      	ldr	r1, [r4, #16]
 80010cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e7dc      	b.n	800108e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80010d4:	4a32      	ldr	r2, [pc, #200]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	6813      	ldr	r3, [r2, #0]
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80010de:	f7ff fd7b 	bl	8000bd8 <HAL_GetTick>
 80010e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e4:	4b2e      	ldr	r3, [pc, #184]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f013 0f02 	tst.w	r3, #2
 80010ec:	d0cf      	beq.n	800108e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fd73 	bl	8000bd8 <HAL_GetTick>
 80010f2:	1b40      	subs	r0, r0, r5
 80010f4:	2802      	cmp	r0, #2
 80010f6:	d9f5      	bls.n	80010e4 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80010f8:	2003      	movs	r0, #3
 80010fa:	e12b      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fc:	4a28      	ldr	r2, [pc, #160]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001106:	f7ff fd67 	bl	8000bd8 <HAL_GetTick>
 800110a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800110e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001110:	f013 0f02 	tst.w	r3, #2
 8001114:	d006      	beq.n	8001124 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001116:	f7ff fd5f 	bl	8000bd8 <HAL_GetTick>
 800111a:	1b40      	subs	r0, r0, r5
 800111c:	2802      	cmp	r0, #2
 800111e:	d9f5      	bls.n	800110c <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001120:	2003      	movs	r0, #3
 8001122:	e117      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	f013 0f04 	tst.w	r3, #4
 800112a:	d07d      	beq.n	8001228 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112c:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001134:	d11e      	bne.n	8001174 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001138:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800113a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800113e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800114a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_RCC_OscConfig+0x270>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001154:	d010      	beq.n	8001178 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001156:	68a3      	ldr	r3, [r4, #8]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d025      	beq.n	80011a8 <HAL_RCC_OscConfig+0x274>
 800115c:	2b00      	cmp	r3, #0
 800115e:	d13b      	bne.n	80011d8 <HAL_RCC_OscConfig+0x2a4>
 8001160:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001162:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001164:	f022 0201 	bic.w	r2, r2, #1
 8001168:	671a      	str	r2, [r3, #112]	@ 0x70
 800116a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800116c:	f022 0204 	bic.w	r2, r2, #4
 8001170:	671a      	str	r2, [r3, #112]	@ 0x70
 8001172:	e01e      	b.n	80011b2 <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8001174:	2500      	movs	r5, #0
 8001176:	e7e9      	b.n	800114c <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8001178:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <HAL_RCC_OscConfig+0x270>)
 800117a:	6813      	ldr	r3, [r2, #0]
 800117c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001180:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001182:	f7ff fd29 	bl	8000bd8 <HAL_GetTick>
 8001186:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_RCC_OscConfig+0x270>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001190:	d1e1      	bne.n	8001156 <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001192:	f7ff fd21 	bl	8000bd8 <HAL_GetTick>
 8001196:	1b80      	subs	r0, r0, r6
 8001198:	2864      	cmp	r0, #100	@ 0x64
 800119a:	d9f5      	bls.n	8001188 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800119c:	2003      	movs	r0, #3
 800119e:	e0d9      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a8:	4a72      	ldr	r2, [pc, #456]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 80011aa:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011b2:	68a3      	ldr	r3, [r4, #8]
 80011b4:	b333      	cbz	r3, 8001204 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b6:	f7ff fd0f 	bl	8000bd8 <HAL_GetTick>
 80011ba:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011bc:	4b6d      	ldr	r3, [pc, #436]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 80011be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c0:	f013 0f02 	tst.w	r3, #2
 80011c4:	d12f      	bne.n	8001226 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c6:	f7ff fd07 	bl	8000bd8 <HAL_GetTick>
 80011ca:	1b80      	subs	r0, r0, r6
 80011cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011d0:	4298      	cmp	r0, r3
 80011d2:	d9f3      	bls.n	80011bc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80011d4:	2003      	movs	r0, #3
 80011d6:	e0bd      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d009      	beq.n	80011f0 <HAL_RCC_OscConfig+0x2bc>
 80011dc:	4b65      	ldr	r3, [pc, #404]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 80011de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80011e0:	f022 0201 	bic.w	r2, r2, #1
 80011e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80011e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80011e8:	f022 0204 	bic.w	r2, r2, #4
 80011ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80011ee:	e7e0      	b.n	80011b2 <HAL_RCC_OscConfig+0x27e>
 80011f0:	4b60      	ldr	r3, [pc, #384]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 80011f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80011f4:	f042 0204 	orr.w	r2, r2, #4
 80011f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80011fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80011fc:	f042 0201 	orr.w	r2, r2, #1
 8001200:	671a      	str	r2, [r3, #112]	@ 0x70
 8001202:	e7d6      	b.n	80011b2 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001204:	f7ff fce8 	bl	8000bd8 <HAL_GetTick>
 8001208:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120a:	4b5a      	ldr	r3, [pc, #360]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 800120c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800120e:	f013 0f02 	tst.w	r3, #2
 8001212:	d008      	beq.n	8001226 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fce0 	bl	8000bd8 <HAL_GetTick>
 8001218:	1b80      	subs	r0, r0, r6
 800121a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800121e:	4298      	cmp	r0, r3
 8001220:	d9f3      	bls.n	800120a <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8001222:	2003      	movs	r0, #3
 8001224:	e096      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001226:	b9fd      	cbnz	r5, 8001268 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001228:	69a3      	ldr	r3, [r4, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8091 	beq.w	8001352 <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001230:	4a50      	ldr	r2, [pc, #320]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 8001232:	6892      	ldr	r2, [r2, #8]
 8001234:	f002 020c 	and.w	r2, r2, #12
 8001238:	2a08      	cmp	r2, #8
 800123a:	d059      	beq.n	80012f0 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123c:	2b02      	cmp	r3, #2
 800123e:	d019      	beq.n	8001274 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001240:	4a4c      	ldr	r2, [pc, #304]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124a:	f7ff fcc5 	bl	8000bd8 <HAL_GetTick>
 800124e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001250:	4b48      	ldr	r3, [pc, #288]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001258:	d048      	beq.n	80012ec <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125a:	f7ff fcbd 	bl	8000bd8 <HAL_GetTick>
 800125e:	1b00      	subs	r0, r0, r4
 8001260:	2802      	cmp	r0, #2
 8001262:	d9f5      	bls.n	8001250 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001264:	2003      	movs	r0, #3
 8001266:	e075      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001268:	4a42      	ldr	r2, [pc, #264]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 800126a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800126c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	@ 0x40
 8001272:	e7d9      	b.n	8001228 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001274:	4a3f      	ldr	r2, [pc, #252]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800127c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800127e:	f7ff fcab 	bl	8000bd8 <HAL_GetTick>
 8001282:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001284:	4b3b      	ldr	r3, [pc, #236]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800128c:	d006      	beq.n	800129c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128e:	f7ff fca3 	bl	8000bd8 <HAL_GetTick>
 8001292:	1b40      	subs	r0, r0, r5
 8001294:	2802      	cmp	r0, #2
 8001296:	d9f5      	bls.n	8001284 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001298:	2003      	movs	r0, #3
 800129a:	e05b      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800129c:	69e3      	ldr	r3, [r4, #28]
 800129e:	6a22      	ldr	r2, [r4, #32]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80012a4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012a8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80012aa:	0852      	lsrs	r2, r2, #1
 80012ac:	3a01      	subs	r2, #1
 80012ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80012b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012b8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80012ba:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80012be:	4a2d      	ldr	r2, [pc, #180]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 80012c0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80012c2:	6813      	ldr	r3, [r2, #0]
 80012c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80012ca:	f7ff fc85 	bl	8000bd8 <HAL_GetTick>
 80012ce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d0:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80012d8:	d106      	bne.n	80012e8 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fc7d 	bl	8000bd8 <HAL_GetTick>
 80012de:	1b00      	subs	r0, r0, r4
 80012e0:	2802      	cmp	r0, #2
 80012e2:	d9f5      	bls.n	80012d0 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80012e4:	2003      	movs	r0, #3
 80012e6:	e035      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80012e8:	2000      	movs	r0, #0
 80012ea:	e033      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
 80012ec:	2000      	movs	r0, #0
 80012ee:	e031      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 80012f0:	4a20      	ldr	r2, [pc, #128]	@ (8001374 <HAL_RCC_OscConfig+0x440>)
 80012f2:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d02f      	beq.n	8001358 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80012fc:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012fe:	428b      	cmp	r3, r1
 8001300:	d12c      	bne.n	800135c <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001302:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 8001306:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001308:	428b      	cmp	r3, r1
 800130a:	d129      	bne.n	8001360 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800130c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800130e:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001312:	4013      	ands	r3, r2
 8001314:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001318:	d124      	bne.n	8001364 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800131a:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 800131e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001320:	085b      	lsrs	r3, r3, #1
 8001322:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001324:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001328:	d11e      	bne.n	8001368 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800132a:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 800132e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001330:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8001334:	d11a      	bne.n	800136c <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001336:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 800133a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800133c:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 8001342:	2000      	movs	r0, #0
 8001344:	e006      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 8001346:	2001      	movs	r0, #1
}
 8001348:	4770      	bx	lr
        return HAL_ERROR;
 800134a:	2001      	movs	r0, #1
 800134c:	e002      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 800134e:	2001      	movs	r0, #1
 8001350:	e000      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8001352:	2000      	movs	r0, #0
}
 8001354:	b002      	add	sp, #8
 8001356:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
 800135a:	e7fb      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
 800135c:	2001      	movs	r0, #1
 800135e:	e7f9      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
 8001360:	2001      	movs	r0, #1
 8001362:	e7f7      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
 8001364:	2001      	movs	r0, #1
 8001366:	e7f5      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
 8001368:	2001      	movs	r0, #1
 800136a:	e7f3      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
 800136c:	2001      	movs	r0, #1
 800136e:	e7f1      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
 8001370:	2001      	movs	r0, #1
 8001372:	e7ef      	b.n	8001354 <HAL_RCC_OscConfig+0x420>
 8001374:	40023800 	.word	0x40023800

08001378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001378:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <HAL_RCC_GetSysClockFreq+0x9c>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b04      	cmp	r3, #4
 8001384:	d041      	beq.n	800140a <HAL_RCC_GetSysClockFreq+0x92>
 8001386:	2b08      	cmp	r3, #8
 8001388:	d141      	bne.n	800140e <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800138a:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <HAL_RCC_GetSysClockFreq+0x9c>)
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001398:	d012      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800139a:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <HAL_RCC_GetSysClockFreq+0x9c>)
 800139c:	6859      	ldr	r1, [r3, #4]
 800139e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013a2:	481d      	ldr	r0, [pc, #116]	@ (8001418 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013a4:	2300      	movs	r3, #0
 80013a6:	fba1 0100 	umull	r0, r1, r1, r0
 80013aa:	f7fe ff45 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80013ae:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013b6:	3301      	adds	r3, #1
 80013b8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80013ba:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80013be:	e027      	b.n	8001410 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013c2:	6858      	ldr	r0, [r3, #4]
 80013c4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80013c8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80013cc:	ebbc 0c00 	subs.w	ip, ip, r0
 80013d0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80013d4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80013d8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80013dc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80013e0:	ebb1 010c 	subs.w	r1, r1, ip
 80013e4:	eb63 030e 	sbc.w	r3, r3, lr
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013ee:	00c9      	lsls	r1, r1, #3
 80013f0:	eb11 0c00 	adds.w	ip, r1, r0
 80013f4:	f143 0300 	adc.w	r3, r3, #0
 80013f8:	0299      	lsls	r1, r3, #10
 80013fa:	2300      	movs	r3, #0
 80013fc:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001400:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001404:	f7fe ff18 	bl	8000238 <__aeabi_uldivmod>
 8001408:	e7d1      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800140a:	4803      	ldr	r0, [pc, #12]	@ (8001418 <HAL_RCC_GetSysClockFreq+0xa0>)
 800140c:	e000      	b.n	8001410 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800140e:	4803      	ldr	r0, [pc, #12]	@ (800141c <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001410:	bd08      	pop	{r3, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	017d7840 	.word	0x017d7840
 800141c:	00f42400 	.word	0x00f42400

08001420 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001420:	2800      	cmp	r0, #0
 8001422:	f000 80a0 	beq.w	8001566 <HAL_RCC_ClockConfig+0x146>
{
 8001426:	b570      	push	{r4, r5, r6, lr}
 8001428:	460d      	mov	r5, r1
 800142a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800142c:	4b52      	ldr	r3, [pc, #328]	@ (8001578 <HAL_RCC_ClockConfig+0x158>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	428b      	cmp	r3, r1
 8001436:	d20b      	bcs.n	8001450 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001438:	4a4f      	ldr	r2, [pc, #316]	@ (8001578 <HAL_RCC_ClockConfig+0x158>)
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	f023 030f 	bic.w	r3, r3, #15
 8001440:	430b      	orrs	r3, r1
 8001442:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001444:	6813      	ldr	r3, [r2, #0]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	428b      	cmp	r3, r1
 800144c:	f040 808d 	bne.w	800156a <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	f013 0f02 	tst.w	r3, #2
 8001456:	d017      	beq.n	8001488 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001458:	f013 0f04 	tst.w	r3, #4
 800145c:	d004      	beq.n	8001468 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800145e:	4a47      	ldr	r2, [pc, #284]	@ (800157c <HAL_RCC_ClockConfig+0x15c>)
 8001460:	6893      	ldr	r3, [r2, #8]
 8001462:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001466:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	f013 0f08 	tst.w	r3, #8
 800146e:	d004      	beq.n	800147a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001470:	4a42      	ldr	r2, [pc, #264]	@ (800157c <HAL_RCC_ClockConfig+0x15c>)
 8001472:	6893      	ldr	r3, [r2, #8]
 8001474:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001478:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800147a:	4a40      	ldr	r2, [pc, #256]	@ (800157c <HAL_RCC_ClockConfig+0x15c>)
 800147c:	6893      	ldr	r3, [r2, #8]
 800147e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001482:	68a1      	ldr	r1, [r4, #8]
 8001484:	430b      	orrs	r3, r1
 8001486:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	f013 0f01 	tst.w	r3, #1
 800148e:	d031      	beq.n	80014f4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d020      	beq.n	80014d8 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001496:	2b02      	cmp	r3, #2
 8001498:	d025      	beq.n	80014e6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4a38      	ldr	r2, [pc, #224]	@ (800157c <HAL_RCC_ClockConfig+0x15c>)
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	f012 0f02 	tst.w	r2, #2
 80014a2:	d064      	beq.n	800156e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a4:	4935      	ldr	r1, [pc, #212]	@ (800157c <HAL_RCC_ClockConfig+0x15c>)
 80014a6:	688a      	ldr	r2, [r1, #8]
 80014a8:	f022 0203 	bic.w	r2, r2, #3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80014b0:	f7ff fb92 	bl	8000bd8 <HAL_GetTick>
 80014b4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	4b31      	ldr	r3, [pc, #196]	@ (800157c <HAL_RCC_ClockConfig+0x15c>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	6862      	ldr	r2, [r4, #4]
 80014c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014c4:	d016      	beq.n	80014f4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c6:	f7ff fb87 	bl	8000bd8 <HAL_GetTick>
 80014ca:	1b80      	subs	r0, r0, r6
 80014cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014d0:	4298      	cmp	r0, r3
 80014d2:	d9f0      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80014d4:	2003      	movs	r0, #3
 80014d6:	e045      	b.n	8001564 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d8:	4a28      	ldr	r2, [pc, #160]	@ (800157c <HAL_RCC_ClockConfig+0x15c>)
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80014e0:	d1e0      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80014e2:	2001      	movs	r0, #1
 80014e4:	e03e      	b.n	8001564 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e6:	4a25      	ldr	r2, [pc, #148]	@ (800157c <HAL_RCC_ClockConfig+0x15c>)
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80014ee:	d1d9      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80014f0:	2001      	movs	r0, #1
 80014f2:	e037      	b.n	8001564 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <HAL_RCC_ClockConfig+0x158>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	42ab      	cmp	r3, r5
 80014fe:	d90a      	bls.n	8001516 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001500:	4a1d      	ldr	r2, [pc, #116]	@ (8001578 <HAL_RCC_ClockConfig+0x158>)
 8001502:	6813      	ldr	r3, [r2, #0]
 8001504:	f023 030f 	bic.w	r3, r3, #15
 8001508:	432b      	orrs	r3, r5
 800150a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150c:	6813      	ldr	r3, [r2, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	42ab      	cmp	r3, r5
 8001514:	d12d      	bne.n	8001572 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	f013 0f04 	tst.w	r3, #4
 800151c:	d006      	beq.n	800152c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800151e:	4a17      	ldr	r2, [pc, #92]	@ (800157c <HAL_RCC_ClockConfig+0x15c>)
 8001520:	6893      	ldr	r3, [r2, #8]
 8001522:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001526:	68e1      	ldr	r1, [r4, #12]
 8001528:	430b      	orrs	r3, r1
 800152a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	f013 0f08 	tst.w	r3, #8
 8001532:	d007      	beq.n	8001544 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001534:	4a11      	ldr	r2, [pc, #68]	@ (800157c <HAL_RCC_ClockConfig+0x15c>)
 8001536:	6893      	ldr	r3, [r2, #8]
 8001538:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800153c:	6921      	ldr	r1, [r4, #16]
 800153e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001542:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001544:	f7ff ff18 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <HAL_RCC_ClockConfig+0x15c>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001550:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <HAL_RCC_ClockConfig+0x160>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	40d8      	lsrs	r0, r3
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_RCC_ClockConfig+0x164>)
 8001558:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800155a:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <HAL_RCC_ClockConfig+0x168>)
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	f7ff faf5 	bl	8000b4c <HAL_InitTick>
  return HAL_OK;
 8001562:	2000      	movs	r0, #0
}
 8001564:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001566:	2001      	movs	r0, #1
}
 8001568:	4770      	bx	lr
      return HAL_ERROR;
 800156a:	2001      	movs	r0, #1
 800156c:	e7fa      	b.n	8001564 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800156e:	2001      	movs	r0, #1
 8001570:	e7f8      	b.n	8001564 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
 8001574:	e7f6      	b.n	8001564 <HAL_RCC_ClockConfig+0x144>
 8001576:	bf00      	nop
 8001578:	40023c00 	.word	0x40023c00
 800157c:	40023800 	.word	0x40023800
 8001580:	080026fc 	.word	0x080026fc
 8001584:	20000014 	.word	0x20000014
 8001588:	2000001c 	.word	0x2000001c

0800158c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800158c:	4b01      	ldr	r3, [pc, #4]	@ (8001594 <HAL_RCC_GetHCLKFreq+0x8>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000014 	.word	0x20000014

08001598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001598:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800159a:	f7ff fff7 	bl	800158c <HAL_RCC_GetHCLKFreq>
 800159e:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015a6:	4a03      	ldr	r2, [pc, #12]	@ (80015b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
}
 80015aa:	40d8      	lsrs	r0, r3
 80015ac:	bd08      	pop	{r3, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	0800270c 	.word	0x0800270c

080015b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015b8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015ba:	f7ff ffe7 	bl	800158c <HAL_RCC_GetHCLKFreq>
 80015be:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80015c6:	4a03      	ldr	r2, [pc, #12]	@ (80015d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
}
 80015ca:	40d8      	lsrs	r0, r3
 80015cc:	bd08      	pop	{r3, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	0800270c 	.word	0x0800270c

080015d8 <HAL_SPI_MspInit>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80015d8:	4770      	bx	lr

080015da <HAL_SPI_Init>:
  if (hspi == NULL)
 80015da:	2800      	cmp	r0, #0
 80015dc:	f000 808e 	beq.w	80016fc <HAL_SPI_Init+0x122>
{
 80015e0:	b510      	push	{r4, lr}
 80015e2:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015e4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80015e6:	b933      	cbnz	r3, 80015f6 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015e8:	6843      	ldr	r3, [r0, #4]
 80015ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80015ee:	d005      	beq.n	80015fc <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61c3      	str	r3, [r0, #28]
 80015f4:	e002      	b.n	80015fc <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015fa:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80015fc:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05a      	beq.n	80016ba <HAL_SPI_Init+0xe0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001604:	2302      	movs	r3, #2
 8001606:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800160a:	6822      	ldr	r2, [r4, #0]
 800160c:	6813      	ldr	r3, [r2, #0]
 800160e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001612:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001614:	68e3      	ldr	r3, [r4, #12]
 8001616:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800161a:	d954      	bls.n	80016c6 <HAL_SPI_Init+0xec>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800161c:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800161e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001622:	bf18      	it	ne
 8001624:	f5b3 6fe0 	cmpne.w	r3, #1792	@ 0x700
 8001628:	d001      	beq.n	800162e <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800162e:	6863      	ldr	r3, [r4, #4]
 8001630:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8001634:	68a1      	ldr	r1, [r4, #8]
 8001636:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 800163a:	430b      	orrs	r3, r1
 800163c:	6921      	ldr	r1, [r4, #16]
 800163e:	f001 0102 	and.w	r1, r1, #2
 8001642:	430b      	orrs	r3, r1
 8001644:	6961      	ldr	r1, [r4, #20]
 8001646:	f001 0101 	and.w	r1, r1, #1
 800164a:	430b      	orrs	r3, r1
 800164c:	69a1      	ldr	r1, [r4, #24]
 800164e:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8001652:	430b      	orrs	r3, r1
 8001654:	69e1      	ldr	r1, [r4, #28]
 8001656:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 800165a:	430b      	orrs	r3, r1
 800165c:	6a21      	ldr	r1, [r4, #32]
 800165e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8001662:	430b      	orrs	r3, r1
 8001664:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001666:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 800166a:	6820      	ldr	r0, [r4, #0]
 800166c:	430b      	orrs	r3, r1
 800166e:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001670:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001676:	d029      	beq.n	80016cc <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001678:	8b63      	ldrh	r3, [r4, #26]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001680:	f001 0110 	and.w	r1, r1, #16
 8001684:	430b      	orrs	r3, r1
 8001686:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001688:	f001 0108 	and.w	r1, r1, #8
 800168c:	430b      	orrs	r3, r1
 800168e:	68e1      	ldr	r1, [r4, #12]
 8001690:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8001694:	430b      	orrs	r3, r1
 8001696:	6821      	ldr	r1, [r4, #0]
 8001698:	431a      	orrs	r2, r3
 800169a:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800169c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800169e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016a2:	d027      	beq.n	80016f4 <HAL_SPI_Init+0x11a>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016a4:	6822      	ldr	r2, [r4, #0]
 80016a6:	69d3      	ldr	r3, [r2, #28]
 80016a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80016ac:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016ae:	2000      	movs	r0, #0
 80016b0:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 80016b8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80016ba:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff ff8a 	bl	80015d8 <HAL_SPI_MspInit>
 80016c4:	e79e      	b.n	8001604 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80016c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016ca:	e7a8      	b.n	800161e <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80016cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80016ce:	b92b      	cbnz	r3, 80016dc <HAL_SPI_Init+0x102>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016d0:	68e3      	ldr	r3, [r4, #12]
 80016d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80016d6:	d90a      	bls.n	80016ee <HAL_SPI_Init+0x114>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80016d8:	2302      	movs	r3, #2
 80016da:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80016dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d1ca      	bne.n	8001678 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80016e2:	6821      	ldr	r1, [r4, #0]
 80016e4:	680b      	ldr	r3, [r1, #0]
 80016e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	e7c4      	b.n	8001678 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80016ee:	2301      	movs	r3, #1
 80016f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80016f2:	e7f3      	b.n	80016dc <HAL_SPI_Init+0x102>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80016f8:	611a      	str	r2, [r3, #16]
 80016fa:	e7d3      	b.n	80016a4 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 80016fc:	2001      	movs	r0, #1
}
 80016fe:	4770      	bx	lr

08001700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001700:	b510      	push	{r4, lr}
 8001702:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001704:	6883      	ldr	r3, [r0, #8]
 8001706:	6902      	ldr	r2, [r0, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	6942      	ldr	r2, [r0, #20]
 800170c:	4313      	orrs	r3, r2
 800170e:	69c2      	ldr	r2, [r0, #28]
 8001710:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001712:	6801      	ldr	r1, [r0, #0]
 8001714:	6808      	ldr	r0, [r1, #0]
 8001716:	4a93      	ldr	r2, [pc, #588]	@ (8001964 <UART_SetConfig+0x264>)
 8001718:	4002      	ands	r2, r0
 800171a:	431a      	orrs	r2, r3
 800171c:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800171e:	6822      	ldr	r2, [r4, #0]
 8001720:	6853      	ldr	r3, [r2, #4]
 8001722:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001726:	68e1      	ldr	r1, [r4, #12]
 8001728:	430b      	orrs	r3, r1
 800172a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800172c:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 800172e:	6a23      	ldr	r3, [r4, #32]
 8001730:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001732:	6821      	ldr	r1, [r4, #0]
 8001734:	688b      	ldr	r3, [r1, #8]
 8001736:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	4a89      	ldr	r2, [pc, #548]	@ (8001968 <UART_SetConfig+0x268>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d019      	beq.n	800177a <UART_SetConfig+0x7a>
 8001746:	4a89      	ldr	r2, [pc, #548]	@ (800196c <UART_SetConfig+0x26c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d029      	beq.n	80017a0 <UART_SetConfig+0xa0>
 800174c:	4a88      	ldr	r2, [pc, #544]	@ (8001970 <UART_SetConfig+0x270>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d03e      	beq.n	80017d0 <UART_SetConfig+0xd0>
 8001752:	4a88      	ldr	r2, [pc, #544]	@ (8001974 <UART_SetConfig+0x274>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d062      	beq.n	800181e <UART_SetConfig+0x11e>
 8001758:	4a87      	ldr	r2, [pc, #540]	@ (8001978 <UART_SetConfig+0x278>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d071      	beq.n	8001842 <UART_SetConfig+0x142>
 800175e:	4a87      	ldr	r2, [pc, #540]	@ (800197c <UART_SetConfig+0x27c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	f000 8083 	beq.w	800186c <UART_SetConfig+0x16c>
 8001766:	4a86      	ldr	r2, [pc, #536]	@ (8001980 <UART_SetConfig+0x280>)
 8001768:	4293      	cmp	r3, r2
 800176a:	f000 8094 	beq.w	8001896 <UART_SetConfig+0x196>
 800176e:	4a85      	ldr	r2, [pc, #532]	@ (8001984 <UART_SetConfig+0x284>)
 8001770:	4293      	cmp	r3, r2
 8001772:	f000 80a5 	beq.w	80018c0 <UART_SetConfig+0x1c0>
 8001776:	2310      	movs	r3, #16
 8001778:	e03a      	b.n	80017f0 <UART_SetConfig+0xf0>
 800177a:	4b83      	ldr	r3, [pc, #524]	@ (8001988 <UART_SetConfig+0x288>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b03      	cmp	r3, #3
 8001786:	d809      	bhi.n	800179c <UART_SetConfig+0x9c>
 8001788:	e8df f003 	tbb	[pc, r3]
 800178c:	06ae0402 	.word	0x06ae0402
 8001790:	2301      	movs	r3, #1
 8001792:	e02d      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001794:	2304      	movs	r3, #4
 8001796:	e02b      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001798:	2308      	movs	r3, #8
 800179a:	e029      	b.n	80017f0 <UART_SetConfig+0xf0>
 800179c:	2310      	movs	r3, #16
 800179e:	e027      	b.n	80017f0 <UART_SetConfig+0xf0>
 80017a0:	4b79      	ldr	r3, [pc, #484]	@ (8001988 <UART_SetConfig+0x288>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d80e      	bhi.n	80017cc <UART_SetConfig+0xcc>
 80017ae:	e8df f003 	tbb	[pc, r3]
 80017b2:	0d07      	.short	0x0d07
 80017b4:	0d090d0d 	.word	0x0d090d0d
 80017b8:	0d9d0d0d 	.word	0x0d9d0d0d
 80017bc:	0d0d      	.short	0x0d0d
 80017be:	0b          	.byte	0x0b
 80017bf:	00          	.byte	0x00
 80017c0:	2300      	movs	r3, #0
 80017c2:	e015      	b.n	80017f0 <UART_SetConfig+0xf0>
 80017c4:	2304      	movs	r3, #4
 80017c6:	e013      	b.n	80017f0 <UART_SetConfig+0xf0>
 80017c8:	2308      	movs	r3, #8
 80017ca:	e011      	b.n	80017f0 <UART_SetConfig+0xf0>
 80017cc:	2310      	movs	r3, #16
 80017ce:	e00f      	b.n	80017f0 <UART_SetConfig+0xf0>
 80017d0:	4b6d      	ldr	r3, [pc, #436]	@ (8001988 <UART_SetConfig+0x288>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80017da:	2b20      	cmp	r3, #32
 80017dc:	f000 8088 	beq.w	80018f0 <UART_SetConfig+0x1f0>
 80017e0:	d819      	bhi.n	8001816 <UART_SetConfig+0x116>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8086 	beq.w	80018f4 <UART_SetConfig+0x1f4>
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	f040 8085 	bne.w	80018f8 <UART_SetConfig+0x1f8>
 80017ee:	2304      	movs	r3, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017f0:	69e0      	ldr	r0, [r4, #28]
 80017f2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80017f6:	f000 80ab 	beq.w	8001950 <UART_SetConfig+0x250>
      }
    }
  }
  else
  {
    switch (clocksource)
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	f200 810c 	bhi.w	8001a18 <UART_SetConfig+0x318>
 8001800:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001804:	00fb00e8 	.word	0x00fb00e8
 8001808:	010a00e6 	.word	0x010a00e6
 800180c:	010a00fe 	.word	0x010a00fe
 8001810:	010a010a 	.word	0x010a010a
 8001814:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001816:	2b30      	cmp	r3, #48	@ 0x30
 8001818:	d170      	bne.n	80018fc <UART_SetConfig+0x1fc>
 800181a:	2308      	movs	r3, #8
 800181c:	e7e8      	b.n	80017f0 <UART_SetConfig+0xf0>
 800181e:	4b5a      	ldr	r3, [pc, #360]	@ (8001988 <UART_SetConfig+0x288>)
 8001820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001824:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001828:	2b80      	cmp	r3, #128	@ 0x80
 800182a:	d069      	beq.n	8001900 <UART_SetConfig+0x200>
 800182c:	d805      	bhi.n	800183a <UART_SetConfig+0x13a>
 800182e:	2b00      	cmp	r3, #0
 8001830:	d068      	beq.n	8001904 <UART_SetConfig+0x204>
 8001832:	2b40      	cmp	r3, #64	@ 0x40
 8001834:	d168      	bne.n	8001908 <UART_SetConfig+0x208>
 8001836:	2304      	movs	r3, #4
 8001838:	e7da      	b.n	80017f0 <UART_SetConfig+0xf0>
 800183a:	2bc0      	cmp	r3, #192	@ 0xc0
 800183c:	d166      	bne.n	800190c <UART_SetConfig+0x20c>
 800183e:	2308      	movs	r3, #8
 8001840:	e7d6      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001842:	4b51      	ldr	r3, [pc, #324]	@ (8001988 <UART_SetConfig+0x288>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001848:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800184c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001850:	d05e      	beq.n	8001910 <UART_SetConfig+0x210>
 8001852:	d806      	bhi.n	8001862 <UART_SetConfig+0x162>
 8001854:	2b00      	cmp	r3, #0
 8001856:	d05d      	beq.n	8001914 <UART_SetConfig+0x214>
 8001858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800185c:	d15c      	bne.n	8001918 <UART_SetConfig+0x218>
 800185e:	2304      	movs	r3, #4
 8001860:	e7c6      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001862:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001866:	d159      	bne.n	800191c <UART_SetConfig+0x21c>
 8001868:	2308      	movs	r3, #8
 800186a:	e7c1      	b.n	80017f0 <UART_SetConfig+0xf0>
 800186c:	4b46      	ldr	r3, [pc, #280]	@ (8001988 <UART_SetConfig+0x288>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001872:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001876:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800187a:	d051      	beq.n	8001920 <UART_SetConfig+0x220>
 800187c:	d806      	bhi.n	800188c <UART_SetConfig+0x18c>
 800187e:	2b00      	cmp	r3, #0
 8001880:	d050      	beq.n	8001924 <UART_SetConfig+0x224>
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001886:	d14f      	bne.n	8001928 <UART_SetConfig+0x228>
 8001888:	2304      	movs	r3, #4
 800188a:	e7b1      	b.n	80017f0 <UART_SetConfig+0xf0>
 800188c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001890:	d14c      	bne.n	800192c <UART_SetConfig+0x22c>
 8001892:	2308      	movs	r3, #8
 8001894:	e7ac      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001896:	4b3c      	ldr	r3, [pc, #240]	@ (8001988 <UART_SetConfig+0x288>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80018a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018a4:	d044      	beq.n	8001930 <UART_SetConfig+0x230>
 80018a6:	d806      	bhi.n	80018b6 <UART_SetConfig+0x1b6>
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d043      	beq.n	8001934 <UART_SetConfig+0x234>
 80018ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018b0:	d142      	bne.n	8001938 <UART_SetConfig+0x238>
 80018b2:	2304      	movs	r3, #4
 80018b4:	e79c      	b.n	80017f0 <UART_SetConfig+0xf0>
 80018b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80018ba:	d13f      	bne.n	800193c <UART_SetConfig+0x23c>
 80018bc:	2308      	movs	r3, #8
 80018be:	e797      	b.n	80017f0 <UART_SetConfig+0xf0>
 80018c0:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <UART_SetConfig+0x288>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018ce:	d037      	beq.n	8001940 <UART_SetConfig+0x240>
 80018d0:	d805      	bhi.n	80018de <UART_SetConfig+0x1de>
 80018d2:	b3bb      	cbz	r3, 8001944 <UART_SetConfig+0x244>
 80018d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018d8:	d136      	bne.n	8001948 <UART_SetConfig+0x248>
 80018da:	2304      	movs	r3, #4
 80018dc:	e788      	b.n	80017f0 <UART_SetConfig+0xf0>
 80018de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80018e2:	d133      	bne.n	800194c <UART_SetConfig+0x24c>
 80018e4:	2308      	movs	r3, #8
 80018e6:	e783      	b.n	80017f0 <UART_SetConfig+0xf0>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e781      	b.n	80017f0 <UART_SetConfig+0xf0>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e77f      	b.n	80017f0 <UART_SetConfig+0xf0>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e77d      	b.n	80017f0 <UART_SetConfig+0xf0>
 80018f4:	2300      	movs	r3, #0
 80018f6:	e77b      	b.n	80017f0 <UART_SetConfig+0xf0>
 80018f8:	2310      	movs	r3, #16
 80018fa:	e779      	b.n	80017f0 <UART_SetConfig+0xf0>
 80018fc:	2310      	movs	r3, #16
 80018fe:	e777      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001900:	2302      	movs	r3, #2
 8001902:	e775      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001904:	2300      	movs	r3, #0
 8001906:	e773      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001908:	2310      	movs	r3, #16
 800190a:	e771      	b.n	80017f0 <UART_SetConfig+0xf0>
 800190c:	2310      	movs	r3, #16
 800190e:	e76f      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001910:	2302      	movs	r3, #2
 8001912:	e76d      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001914:	2300      	movs	r3, #0
 8001916:	e76b      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001918:	2310      	movs	r3, #16
 800191a:	e769      	b.n	80017f0 <UART_SetConfig+0xf0>
 800191c:	2310      	movs	r3, #16
 800191e:	e767      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001920:	2302      	movs	r3, #2
 8001922:	e765      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001924:	2301      	movs	r3, #1
 8001926:	e763      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001928:	2310      	movs	r3, #16
 800192a:	e761      	b.n	80017f0 <UART_SetConfig+0xf0>
 800192c:	2310      	movs	r3, #16
 800192e:	e75f      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001930:	2302      	movs	r3, #2
 8001932:	e75d      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001934:	2300      	movs	r3, #0
 8001936:	e75b      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001938:	2310      	movs	r3, #16
 800193a:	e759      	b.n	80017f0 <UART_SetConfig+0xf0>
 800193c:	2310      	movs	r3, #16
 800193e:	e757      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001940:	2302      	movs	r3, #2
 8001942:	e755      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001944:	2300      	movs	r3, #0
 8001946:	e753      	b.n	80017f0 <UART_SetConfig+0xf0>
 8001948:	2310      	movs	r3, #16
 800194a:	e751      	b.n	80017f0 <UART_SetConfig+0xf0>
 800194c:	2310      	movs	r3, #16
 800194e:	e74f      	b.n	80017f0 <UART_SetConfig+0xf0>
    switch (clocksource)
 8001950:	2b08      	cmp	r3, #8
 8001952:	d85b      	bhi.n	8001a0c <UART_SetConfig+0x30c>
 8001954:	e8df f003 	tbb	[pc, r3]
 8001958:	5a3a341a 	.word	0x5a3a341a
 800195c:	5a5a5a37 	.word	0x5a5a5a37
 8001960:	1e          	.byte	0x1e
 8001961:	00          	.byte	0x00
 8001962:	bf00      	nop
 8001964:	efff69f3 	.word	0xefff69f3
 8001968:	40011000 	.word	0x40011000
 800196c:	40004400 	.word	0x40004400
 8001970:	40004800 	.word	0x40004800
 8001974:	40004c00 	.word	0x40004c00
 8001978:	40005000 	.word	0x40005000
 800197c:	40011400 	.word	0x40011400
 8001980:	40007800 	.word	0x40007800
 8001984:	40007c00 	.word	0x40007c00
 8001988:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 800198c:	f7ff fe04 	bl	8001598 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001990:	2800      	cmp	r0, #0
 8001992:	d03d      	beq.n	8001a10 <UART_SetConfig+0x310>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001994:	6862      	ldr	r2, [r4, #4]
 8001996:	0853      	lsrs	r3, r2, #1
 8001998:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800199c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019a0:	f1a3 0110 	sub.w	r1, r3, #16
 80019a4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80019a8:	4291      	cmp	r1, r2
 80019aa:	d833      	bhi.n	8001a14 <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80019b2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80019b6:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80019b8:	6822      	ldr	r2, [r4, #0]
 80019ba:	60d3      	str	r3, [r2, #12]
 80019bc:	2000      	movs	r0, #0
 80019be:	e030      	b.n	8001a22 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 80019c0:	f7ff fdfa 	bl	80015b8 <HAL_RCC_GetPCLK2Freq>
        break;
 80019c4:	e7e4      	b.n	8001990 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 80019c6:	f7ff fcd7 	bl	8001378 <HAL_RCC_GetSysClockFreq>
        break;
 80019ca:	e7e1      	b.n	8001990 <UART_SetConfig+0x290>
        pclk = (uint32_t) HSI_VALUE;
 80019cc:	4817      	ldr	r0, [pc, #92]	@ (8001a2c <UART_SetConfig+0x32c>)
 80019ce:	e7e1      	b.n	8001994 <UART_SetConfig+0x294>
    switch (clocksource)
 80019d0:	4816      	ldr	r0, [pc, #88]	@ (8001a2c <UART_SetConfig+0x32c>)
 80019d2:	e002      	b.n	80019da <UART_SetConfig+0x2da>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80019d4:	f7ff fde0 	bl	8001598 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80019d8:	b300      	cbz	r0, 8001a1c <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80019da:	6863      	ldr	r3, [r4, #4]
 80019dc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80019e0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019e4:	f1a0 0210 	sub.w	r2, r0, #16
 80019e8:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d817      	bhi.n	8001a20 <UART_SetConfig+0x320>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	b280      	uxth	r0, r0
 80019f4:	60d8      	str	r0, [r3, #12]
 80019f6:	2000      	movs	r0, #0
 80019f8:	e013      	b.n	8001a22 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 80019fa:	f7ff fddd 	bl	80015b8 <HAL_RCC_GetPCLK2Freq>
        break;
 80019fe:	e7eb      	b.n	80019d8 <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a00:	f7ff fcba 	bl	8001378 <HAL_RCC_GetSysClockFreq>
        break;
 8001a04:	e7e8      	b.n	80019d8 <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 8001a06:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a0a:	e7e6      	b.n	80019da <UART_SetConfig+0x2da>
    switch (clocksource)
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	e008      	b.n	8001a22 <UART_SetConfig+0x322>
 8001a10:	2000      	movs	r0, #0
 8001a12:	e006      	b.n	8001a22 <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8001a14:	2001      	movs	r0, #1
 8001a16:	e004      	b.n	8001a22 <UART_SetConfig+0x322>
    switch (clocksource)
 8001a18:	2001      	movs	r0, #1
 8001a1a:	e002      	b.n	8001a22 <UART_SetConfig+0x322>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	e000      	b.n	8001a22 <UART_SetConfig+0x322>
      }
      else
      {
        ret = HAL_ERROR;
 8001a20:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8001a26:	66e3      	str	r3, [r4, #108]	@ 0x6c

  return ret;
}
 8001a28:	bd10      	pop	{r4, pc}
 8001a2a:	bf00      	nop
 8001a2c:	00f42400 	.word	0x00f42400

08001a30 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a30:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a32:	f013 0f01 	tst.w	r3, #1
 8001a36:	d006      	beq.n	8001a46 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a38:	6802      	ldr	r2, [r0, #0]
 8001a3a:	6853      	ldr	r3, [r2, #4]
 8001a3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001a40:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001a42:	430b      	orrs	r3, r1
 8001a44:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a46:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a48:	f013 0f02 	tst.w	r3, #2
 8001a4c:	d006      	beq.n	8001a5c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a4e:	6802      	ldr	r2, [r0, #0]
 8001a50:	6853      	ldr	r3, [r2, #4]
 8001a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a56:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a5c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a5e:	f013 0f04 	tst.w	r3, #4
 8001a62:	d006      	beq.n	8001a72 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a64:	6802      	ldr	r2, [r0, #0]
 8001a66:	6853      	ldr	r3, [r2, #4]
 8001a68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a6c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8001a6e:	430b      	orrs	r3, r1
 8001a70:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a72:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a74:	f013 0f08 	tst.w	r3, #8
 8001a78:	d006      	beq.n	8001a88 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a7a:	6802      	ldr	r2, [r0, #0]
 8001a7c:	6853      	ldr	r3, [r2, #4]
 8001a7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001a82:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001a84:	430b      	orrs	r3, r1
 8001a86:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a88:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a8a:	f013 0f10 	tst.w	r3, #16
 8001a8e:	d006      	beq.n	8001a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a90:	6802      	ldr	r2, [r0, #0]
 8001a92:	6893      	ldr	r3, [r2, #8]
 8001a94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a98:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a9e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001aa0:	f013 0f20 	tst.w	r3, #32
 8001aa4:	d006      	beq.n	8001ab4 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001aa6:	6802      	ldr	r2, [r0, #0]
 8001aa8:	6893      	ldr	r3, [r2, #8]
 8001aaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001aae:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ab4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001ab6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001aba:	d00a      	beq.n	8001ad2 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001abc:	6802      	ldr	r2, [r0, #0]
 8001abe:	6853      	ldr	r3, [r2, #4]
 8001ac0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ac4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001aca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001acc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ad0:	d00b      	beq.n	8001aea <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ad2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001ad4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001ad8:	d006      	beq.n	8001ae8 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ada:	6802      	ldr	r2, [r0, #0]
 8001adc:	6853      	ldr	r3, [r2, #4]
 8001ade:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001ae2:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6053      	str	r3, [r2, #4]
  }
}
 8001ae8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001aea:	6802      	ldr	r2, [r0, #0]
 8001aec:	6853      	ldr	r3, [r2, #4]
 8001aee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8001af2:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001af4:	430b      	orrs	r3, r1
 8001af6:	6053      	str	r3, [r2, #4]
 8001af8:	e7eb      	b.n	8001ad2 <UART_AdvFeatureConfig+0xa2>

08001afa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001afa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001afe:	4605      	mov	r5, r0
 8001b00:	460f      	mov	r7, r1
 8001b02:	4616      	mov	r6, r2
 8001b04:	4699      	mov	r9, r3
 8001b06:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	69dc      	ldr	r4, [r3, #28]
 8001b0e:	ea37 0404 	bics.w	r4, r7, r4
 8001b12:	bf0c      	ite	eq
 8001b14:	2401      	moveq	r4, #1
 8001b16:	2400      	movne	r4, #0
 8001b18:	42b4      	cmp	r4, r6
 8001b1a:	d155      	bne.n	8001bc8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001b20:	d0f3      	beq.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b22:	f7ff f859 	bl	8000bd8 <HAL_GetTick>
 8001b26:	eba0 0009 	sub.w	r0, r0, r9
 8001b2a:	4540      	cmp	r0, r8
 8001b2c:	d82e      	bhi.n	8001b8c <UART_WaitOnFlagUntilTimeout+0x92>
 8001b2e:	f1b8 0f00 	cmp.w	r8, #0
 8001b32:	d02b      	beq.n	8001b8c <UART_WaitOnFlagUntilTimeout+0x92>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b34:	682b      	ldr	r3, [r5, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	f012 0f04 	tst.w	r2, #4
 8001b3c:	d0e5      	beq.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8001b44:	d0e1      	beq.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b4c:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b4e:	e852 3f00 	ldrex	r3, [r2]
 8001b52:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b56:	e842 3100 	strex	r1, r3, [r2]
 8001b5a:	2900      	cmp	r1, #0
 8001b5c:	d1f6      	bne.n	8001b4c <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b5e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b60:	f102 0308 	add.w	r3, r2, #8
 8001b64:	e853 3f00 	ldrex	r3, [r3]
 8001b68:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b6c:	3208      	adds	r2, #8
 8001b6e:	e842 3100 	strex	r1, r3, [r2]
 8001b72:	2900      	cmp	r1, #0
 8001b74:	d1f3      	bne.n	8001b5e <UART_WaitOnFlagUntilTimeout+0x64>

          huart->gState = HAL_UART_STATE_READY;
 8001b76:	2320      	movs	r3, #32
 8001b78:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8001b7a:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001b7e:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b82:	2300      	movs	r3, #0
 8001b84:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78

          return HAL_TIMEOUT;
 8001b88:	2003      	movs	r0, #3
 8001b8a:	e01e      	b.n	8001bca <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b8c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b8e:	e852 3f00 	ldrex	r3, [r2]
 8001b92:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b96:	e842 3100 	strex	r1, r3, [r2]
 8001b9a:	2900      	cmp	r1, #0
 8001b9c:	d1f6      	bne.n	8001b8c <UART_WaitOnFlagUntilTimeout+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b9e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ba0:	f102 0308 	add.w	r3, r2, #8
 8001ba4:	e853 3f00 	ldrex	r3, [r3]
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bac:	3208      	adds	r2, #8
 8001bae:	e842 3100 	strex	r1, r3, [r2]
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	d1f3      	bne.n	8001b9e <UART_WaitOnFlagUntilTimeout+0xa4>
        huart->gState = HAL_UART_STATE_READY;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8001bba:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
        __HAL_UNLOCK(huart);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
        return HAL_TIMEOUT;
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	e000      	b.n	8001bca <UART_WaitOnFlagUntilTimeout+0xd0>
        }
      }
    }
  }
  return HAL_OK;
 8001bc8:	2000      	movs	r0, #0
}
 8001bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001bce <HAL_UART_Transmit>:
{
 8001bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001bd6:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d14e      	bne.n	8001c7a <HAL_UART_Transmit+0xac>
 8001bdc:	4604      	mov	r4, r0
 8001bde:	460d      	mov	r5, r1
 8001be0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001be2:	2a00      	cmp	r2, #0
 8001be4:	bf18      	it	ne
 8001be6:	2900      	cmpne	r1, #0
 8001be8:	d101      	bne.n	8001bee <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8001bea:	2001      	movs	r0, #1
 8001bec:	e046      	b.n	8001c7c <HAL_UART_Transmit+0xae>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bf4:	2321      	movs	r3, #33	@ 0x21
 8001bf6:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8001bf8:	f7fe ffee 	bl	8000bd8 <HAL_GetTick>
 8001bfc:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001bfe:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 8001c02:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c06:	68a3      	ldr	r3, [r4, #8]
 8001c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c0c:	d002      	beq.n	8001c14 <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 8001c0e:	f04f 0800 	mov.w	r8, #0
 8001c12:	e011      	b.n	8001c38 <HAL_UART_Transmit+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c14:	6923      	ldr	r3, [r4, #16]
 8001c16:	b313      	cbz	r3, 8001c5e <HAL_UART_Transmit+0x90>
      pdata16bits = NULL;
 8001c18:	f04f 0800 	mov.w	r8, #0
 8001c1c:	e00c      	b.n	8001c38 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c1e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001c22:	6822      	ldr	r2, [r4, #0]
 8001c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c28:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8001c2a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	3a01      	subs	r2, #1
 8001c32:	b292      	uxth	r2, r2
 8001c34:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8001c38:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	b18b      	cbz	r3, 8001c64 <HAL_UART_Transmit+0x96>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c40:	9600      	str	r6, [sp, #0]
 8001c42:	463b      	mov	r3, r7
 8001c44:	2200      	movs	r2, #0
 8001c46:	2180      	movs	r1, #128	@ 0x80
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f7ff ff56 	bl	8001afa <UART_WaitOnFlagUntilTimeout>
 8001c4e:	b9c0      	cbnz	r0, 8001c82 <HAL_UART_Transmit+0xb4>
      if (pdata8bits == NULL)
 8001c50:	2d00      	cmp	r5, #0
 8001c52:	d0e4      	beq.n	8001c1e <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c54:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001c5c:	e7e5      	b.n	8001c2a <HAL_UART_Transmit+0x5c>
      pdata16bits = (const uint16_t *) pData;
 8001c5e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001c60:	2500      	movs	r5, #0
 8001c62:	e7e9      	b.n	8001c38 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c64:	9600      	str	r6, [sp, #0]
 8001c66:	463b      	mov	r3, r7
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2140      	movs	r1, #64	@ 0x40
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff ff44 	bl	8001afa <UART_WaitOnFlagUntilTimeout>
 8001c72:	b940      	cbnz	r0, 8001c86 <HAL_UART_Transmit+0xb8>
    huart->gState = HAL_UART_STATE_READY;
 8001c74:	2320      	movs	r3, #32
 8001c76:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8001c78:	e000      	b.n	8001c7c <HAL_UART_Transmit+0xae>
    return HAL_BUSY;
 8001c7a:	2002      	movs	r0, #2
}
 8001c7c:	b002      	add	sp, #8
 8001c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 8001c82:	2003      	movs	r0, #3
 8001c84:	e7fa      	b.n	8001c7c <HAL_UART_Transmit+0xae>
      return HAL_TIMEOUT;
 8001c86:	2003      	movs	r0, #3
 8001c88:	e7f8      	b.n	8001c7c <HAL_UART_Transmit+0xae>

08001c8a <HAL_UART_Receive>:
{
 8001c8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c92:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d178      	bne.n	8001d8c <HAL_UART_Receive+0x102>
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	460d      	mov	r5, r1
 8001c9e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	bf18      	it	ne
 8001ca4:	2900      	cmpne	r1, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8001ca8:	2001      	movs	r0, #1
 8001caa:	e070      	b.n	8001d8e <HAL_UART_Receive+0x104>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cb2:	2222      	movs	r2, #34	@ 0x22
 8001cb4:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cb8:	6603      	str	r3, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8001cba:	f7fe ff8d 	bl	8000bd8 <HAL_GetTick>
 8001cbe:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001cc0:	f8a4 8058 	strh.w	r8, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8001cc4:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8001cc8:	68a3      	ldr	r3, [r4, #8]
 8001cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cce:	d006      	beq.n	8001cde <HAL_UART_Receive+0x54>
 8001cd0:	b9a3      	cbnz	r3, 8001cfc <HAL_UART_Receive+0x72>
 8001cd2:	6922      	ldr	r2, [r4, #16]
 8001cd4:	b972      	cbnz	r2, 8001cf4 <HAL_UART_Receive+0x6a>
 8001cd6:	22ff      	movs	r2, #255	@ 0xff
 8001cd8:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001cdc:	e014      	b.n	8001d08 <HAL_UART_Receive+0x7e>
 8001cde:	6922      	ldr	r2, [r4, #16]
 8001ce0:	b922      	cbnz	r2, 8001cec <HAL_UART_Receive+0x62>
 8001ce2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001ce6:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001cea:	e00d      	b.n	8001d08 <HAL_UART_Receive+0x7e>
 8001cec:	22ff      	movs	r2, #255	@ 0xff
 8001cee:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001cf2:	e009      	b.n	8001d08 <HAL_UART_Receive+0x7e>
 8001cf4:	227f      	movs	r2, #127	@ 0x7f
 8001cf6:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001cfa:	e005      	b.n	8001d08 <HAL_UART_Receive+0x7e>
 8001cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d00:	d00a      	beq.n	8001d18 <HAL_UART_Receive+0x8e>
 8001d02:	2200      	movs	r2, #0
 8001d04:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 8001d08:	f8b4 805c 	ldrh.w	r8, [r4, #92]	@ 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d10:	d00c      	beq.n	8001d2c <HAL_UART_Receive+0xa2>
      pdata16bits = NULL;
 8001d12:	f04f 0900 	mov.w	r9, #0
 8001d16:	e01f      	b.n	8001d58 <HAL_UART_Receive+0xce>
    UART_MASK_COMPUTATION(huart);
 8001d18:	6922      	ldr	r2, [r4, #16]
 8001d1a:	b91a      	cbnz	r2, 8001d24 <HAL_UART_Receive+0x9a>
 8001d1c:	227f      	movs	r2, #127	@ 0x7f
 8001d1e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001d22:	e7f1      	b.n	8001d08 <HAL_UART_Receive+0x7e>
 8001d24:	223f      	movs	r2, #63	@ 0x3f
 8001d26:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001d2a:	e7ed      	b.n	8001d08 <HAL_UART_Receive+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d2c:	6923      	ldr	r3, [r4, #16]
 8001d2e:	b113      	cbz	r3, 8001d36 <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 8001d30:	f04f 0900 	mov.w	r9, #0
 8001d34:	e010      	b.n	8001d58 <HAL_UART_Receive+0xce>
      pdata16bits = (uint16_t *) pData;
 8001d36:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001d38:	2500      	movs	r5, #0
 8001d3a:	e00d      	b.n	8001d58 <HAL_UART_Receive+0xce>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d40:	fa5f f388 	uxtb.w	r3, r8
 8001d44:	4013      	ands	r3, r2
 8001d46:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8001d4a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	3a01      	subs	r2, #1
 8001d52:	b292      	uxth	r2, r2
 8001d54:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8001d58:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	b183      	cbz	r3, 8001d82 <HAL_UART_Receive+0xf8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d60:	9600      	str	r6, [sp, #0]
 8001d62:	463b      	mov	r3, r7
 8001d64:	2200      	movs	r2, #0
 8001d66:	2120      	movs	r1, #32
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f7ff fec6 	bl	8001afa <UART_WaitOnFlagUntilTimeout>
 8001d6e:	b988      	cbnz	r0, 8001d94 <HAL_UART_Receive+0x10a>
      if (pdata8bits == NULL)
 8001d70:	2d00      	cmp	r5, #0
 8001d72:	d1e3      	bne.n	8001d3c <HAL_UART_Receive+0xb2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	ea08 0303 	and.w	r3, r8, r3
 8001d7c:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 8001d80:	e7e3      	b.n	8001d4a <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 8001d82:	2320      	movs	r3, #32
 8001d84:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8001d88:	2000      	movs	r0, #0
 8001d8a:	e000      	b.n	8001d8e <HAL_UART_Receive+0x104>
    return HAL_BUSY;
 8001d8c:	2002      	movs	r0, #2
}
 8001d8e:	b003      	add	sp, #12
 8001d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001d94:	2003      	movs	r0, #3
 8001d96:	e7fa      	b.n	8001d8e <HAL_UART_Receive+0x104>

08001d98 <UART_CheckIdleState>:
{
 8001d98:	b530      	push	{r4, r5, lr}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8001da4:	f7fe ff18 	bl	8000bd8 <HAL_GetTick>
 8001da8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	f012 0f08 	tst.w	r2, #8
 8001db2:	d10f      	bne.n	8001dd4 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f013 0f04 	tst.w	r3, #4
 8001dbc:	d118      	bne.n	8001df0 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001dc2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dca:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8001dcc:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 8001dd0:	b003      	add	sp, #12
 8001dd2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001de2:	4620      	mov	r0, r4
 8001de4:	f7ff fe89 	bl	8001afa <UART_WaitOnFlagUntilTimeout>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d0e3      	beq.n	8001db4 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
 8001dee:	e7ef      	b.n	8001dd0 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001df0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	462b      	mov	r3, r5
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff fe7b 	bl	8001afa <UART_WaitOnFlagUntilTimeout>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d0da      	beq.n	8001dbe <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8001e08:	2003      	movs	r0, #3
 8001e0a:	e7e1      	b.n	8001dd0 <UART_CheckIdleState+0x38>

08001e0c <HAL_UART_Init>:
  if (huart == NULL)
 8001e0c:	b368      	cbz	r0, 8001e6a <HAL_UART_Init+0x5e>
{
 8001e0e:	b510      	push	{r4, lr}
 8001e10:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e12:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001e14:	b303      	cbz	r3, 8001e58 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e16:	2324      	movs	r3, #36	@ 0x24
 8001e18:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8001e1a:	6822      	ldr	r2, [r4, #0]
 8001e1c:	6813      	ldr	r3, [r2, #0]
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff fc6b 	bl	8001700 <UART_SetConfig>
 8001e2a:	2801      	cmp	r0, #1
 8001e2c:	d013      	beq.n	8001e56 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e30:	b9bb      	cbnz	r3, 8001e62 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	6853      	ldr	r3, [r2, #4]
 8001e36:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001e3a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	6893      	ldr	r3, [r2, #8]
 8001e40:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001e44:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001e46:	6822      	ldr	r2, [r4, #0]
 8001e48:	6813      	ldr	r3, [r2, #0]
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff ffa1 	bl	8001d98 <UART_CheckIdleState>
}
 8001e56:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e58:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8001e5c:	f7fe fdaa 	bl	80009b4 <HAL_UART_MspInit>
 8001e60:	e7d9      	b.n	8001e16 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff fde4 	bl	8001a30 <UART_AdvFeatureConfig>
 8001e68:	e7e3      	b.n	8001e32 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001e6a:	2001      	movs	r0, #1
}
 8001e6c:	4770      	bx	lr
	...

08001e70 <std>:
 8001e70:	2300      	movs	r3, #0
 8001e72:	b510      	push	{r4, lr}
 8001e74:	4604      	mov	r4, r0
 8001e76:	e9c0 3300 	strd	r3, r3, [r0]
 8001e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e7e:	6083      	str	r3, [r0, #8]
 8001e80:	8181      	strh	r1, [r0, #12]
 8001e82:	6643      	str	r3, [r0, #100]	@ 0x64
 8001e84:	81c2      	strh	r2, [r0, #14]
 8001e86:	6183      	str	r3, [r0, #24]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	305c      	adds	r0, #92	@ 0x5c
 8001e8e:	f000 f9b0 	bl	80021f2 <memset>
 8001e92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <std+0x58>)
 8001e94:	6263      	str	r3, [r4, #36]	@ 0x24
 8001e96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <std+0x5c>)
 8001e98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <std+0x60>)
 8001e9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <std+0x64>)
 8001ea0:	6323      	str	r3, [r4, #48]	@ 0x30
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <std+0x68>)
 8001ea4:	6224      	str	r4, [r4, #32]
 8001ea6:	429c      	cmp	r4, r3
 8001ea8:	d006      	beq.n	8001eb8 <std+0x48>
 8001eaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001eae:	4294      	cmp	r4, r2
 8001eb0:	d002      	beq.n	8001eb8 <std+0x48>
 8001eb2:	33d0      	adds	r3, #208	@ 0xd0
 8001eb4:	429c      	cmp	r4, r3
 8001eb6:	d105      	bne.n	8001ec4 <std+0x54>
 8001eb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ec0:	f000 ba0a 	b.w	80022d8 <__retarget_lock_init_recursive>
 8001ec4:	bd10      	pop	{r4, pc}
 8001ec6:	bf00      	nop
 8001ec8:	0800216d 	.word	0x0800216d
 8001ecc:	0800218f 	.word	0x0800218f
 8001ed0:	080021c7 	.word	0x080021c7
 8001ed4:	080021eb 	.word	0x080021eb
 8001ed8:	20000188 	.word	0x20000188

08001edc <stdio_exit_handler>:
 8001edc:	4a02      	ldr	r2, [pc, #8]	@ (8001ee8 <stdio_exit_handler+0xc>)
 8001ede:	4903      	ldr	r1, [pc, #12]	@ (8001eec <stdio_exit_handler+0x10>)
 8001ee0:	4803      	ldr	r0, [pc, #12]	@ (8001ef0 <stdio_exit_handler+0x14>)
 8001ee2:	f000 b869 	b.w	8001fb8 <_fwalk_sglue>
 8001ee6:	bf00      	nop
 8001ee8:	20000020 	.word	0x20000020
 8001eec:	080025e9 	.word	0x080025e9
 8001ef0:	20000030 	.word	0x20000030

08001ef4 <cleanup_stdio>:
 8001ef4:	6841      	ldr	r1, [r0, #4]
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <cleanup_stdio+0x34>)
 8001ef8:	4299      	cmp	r1, r3
 8001efa:	b510      	push	{r4, lr}
 8001efc:	4604      	mov	r4, r0
 8001efe:	d001      	beq.n	8001f04 <cleanup_stdio+0x10>
 8001f00:	f000 fb72 	bl	80025e8 <_fflush_r>
 8001f04:	68a1      	ldr	r1, [r4, #8]
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <cleanup_stdio+0x38>)
 8001f08:	4299      	cmp	r1, r3
 8001f0a:	d002      	beq.n	8001f12 <cleanup_stdio+0x1e>
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f000 fb6b 	bl	80025e8 <_fflush_r>
 8001f12:	68e1      	ldr	r1, [r4, #12]
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <cleanup_stdio+0x3c>)
 8001f16:	4299      	cmp	r1, r3
 8001f18:	d004      	beq.n	8001f24 <cleanup_stdio+0x30>
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f20:	f000 bb62 	b.w	80025e8 <_fflush_r>
 8001f24:	bd10      	pop	{r4, pc}
 8001f26:	bf00      	nop
 8001f28:	20000188 	.word	0x20000188
 8001f2c:	200001f0 	.word	0x200001f0
 8001f30:	20000258 	.word	0x20000258

08001f34 <global_stdio_init.part.0>:
 8001f34:	b510      	push	{r4, lr}
 8001f36:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <global_stdio_init.part.0+0x30>)
 8001f38:	4c0b      	ldr	r4, [pc, #44]	@ (8001f68 <global_stdio_init.part.0+0x34>)
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f6c <global_stdio_init.part.0+0x38>)
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	4620      	mov	r0, r4
 8001f40:	2200      	movs	r2, #0
 8001f42:	2104      	movs	r1, #4
 8001f44:	f7ff ff94 	bl	8001e70 <std>
 8001f48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2109      	movs	r1, #9
 8001f50:	f7ff ff8e 	bl	8001e70 <std>
 8001f54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001f58:	2202      	movs	r2, #2
 8001f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f5e:	2112      	movs	r1, #18
 8001f60:	f7ff bf86 	b.w	8001e70 <std>
 8001f64:	200002c0 	.word	0x200002c0
 8001f68:	20000188 	.word	0x20000188
 8001f6c:	08001edd 	.word	0x08001edd

08001f70 <__sfp_lock_acquire>:
 8001f70:	4801      	ldr	r0, [pc, #4]	@ (8001f78 <__sfp_lock_acquire+0x8>)
 8001f72:	f000 b9b2 	b.w	80022da <__retarget_lock_acquire_recursive>
 8001f76:	bf00      	nop
 8001f78:	200002c9 	.word	0x200002c9

08001f7c <__sfp_lock_release>:
 8001f7c:	4801      	ldr	r0, [pc, #4]	@ (8001f84 <__sfp_lock_release+0x8>)
 8001f7e:	f000 b9ad 	b.w	80022dc <__retarget_lock_release_recursive>
 8001f82:	bf00      	nop
 8001f84:	200002c9 	.word	0x200002c9

08001f88 <__sinit>:
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	f7ff fff0 	bl	8001f70 <__sfp_lock_acquire>
 8001f90:	6a23      	ldr	r3, [r4, #32]
 8001f92:	b11b      	cbz	r3, 8001f9c <__sinit+0x14>
 8001f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f98:	f7ff bff0 	b.w	8001f7c <__sfp_lock_release>
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <__sinit+0x28>)
 8001f9e:	6223      	str	r3, [r4, #32]
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <__sinit+0x2c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f5      	bne.n	8001f94 <__sinit+0xc>
 8001fa8:	f7ff ffc4 	bl	8001f34 <global_stdio_init.part.0>
 8001fac:	e7f2      	b.n	8001f94 <__sinit+0xc>
 8001fae:	bf00      	nop
 8001fb0:	08001ef5 	.word	0x08001ef5
 8001fb4:	200002c0 	.word	0x200002c0

08001fb8 <_fwalk_sglue>:
 8001fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fbc:	4607      	mov	r7, r0
 8001fbe:	4688      	mov	r8, r1
 8001fc0:	4614      	mov	r4, r2
 8001fc2:	2600      	movs	r6, #0
 8001fc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fc8:	f1b9 0901 	subs.w	r9, r9, #1
 8001fcc:	d505      	bpl.n	8001fda <_fwalk_sglue+0x22>
 8001fce:	6824      	ldr	r4, [r4, #0]
 8001fd0:	2c00      	cmp	r4, #0
 8001fd2:	d1f7      	bne.n	8001fc4 <_fwalk_sglue+0xc>
 8001fd4:	4630      	mov	r0, r6
 8001fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fda:	89ab      	ldrh	r3, [r5, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d907      	bls.n	8001ff0 <_fwalk_sglue+0x38>
 8001fe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	d003      	beq.n	8001ff0 <_fwalk_sglue+0x38>
 8001fe8:	4629      	mov	r1, r5
 8001fea:	4638      	mov	r0, r7
 8001fec:	47c0      	blx	r8
 8001fee:	4306      	orrs	r6, r0
 8001ff0:	3568      	adds	r5, #104	@ 0x68
 8001ff2:	e7e9      	b.n	8001fc8 <_fwalk_sglue+0x10>

08001ff4 <setbuf>:
 8001ff4:	fab1 f281 	clz	r2, r1
 8001ff8:	0952      	lsrs	r2, r2, #5
 8001ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ffe:	0052      	lsls	r2, r2, #1
 8002000:	f000 b800 	b.w	8002004 <setvbuf>

08002004 <setvbuf>:
 8002004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002008:	461d      	mov	r5, r3
 800200a:	4b57      	ldr	r3, [pc, #348]	@ (8002168 <setvbuf+0x164>)
 800200c:	681f      	ldr	r7, [r3, #0]
 800200e:	4604      	mov	r4, r0
 8002010:	460e      	mov	r6, r1
 8002012:	4690      	mov	r8, r2
 8002014:	b127      	cbz	r7, 8002020 <setvbuf+0x1c>
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	b913      	cbnz	r3, 8002020 <setvbuf+0x1c>
 800201a:	4638      	mov	r0, r7
 800201c:	f7ff ffb4 	bl	8001f88 <__sinit>
 8002020:	f1b8 0f02 	cmp.w	r8, #2
 8002024:	d006      	beq.n	8002034 <setvbuf+0x30>
 8002026:	f1b8 0f01 	cmp.w	r8, #1
 800202a:	f200 809a 	bhi.w	8002162 <setvbuf+0x15e>
 800202e:	2d00      	cmp	r5, #0
 8002030:	f2c0 8097 	blt.w	8002162 <setvbuf+0x15e>
 8002034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002036:	07d9      	lsls	r1, r3, #31
 8002038:	d405      	bmi.n	8002046 <setvbuf+0x42>
 800203a:	89a3      	ldrh	r3, [r4, #12]
 800203c:	059a      	lsls	r2, r3, #22
 800203e:	d402      	bmi.n	8002046 <setvbuf+0x42>
 8002040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002042:	f000 f94a 	bl	80022da <__retarget_lock_acquire_recursive>
 8002046:	4621      	mov	r1, r4
 8002048:	4638      	mov	r0, r7
 800204a:	f000 facd 	bl	80025e8 <_fflush_r>
 800204e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002050:	b141      	cbz	r1, 8002064 <setvbuf+0x60>
 8002052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002056:	4299      	cmp	r1, r3
 8002058:	d002      	beq.n	8002060 <setvbuf+0x5c>
 800205a:	4638      	mov	r0, r7
 800205c:	f000 f940 	bl	80022e0 <_free_r>
 8002060:	2300      	movs	r3, #0
 8002062:	6363      	str	r3, [r4, #52]	@ 0x34
 8002064:	2300      	movs	r3, #0
 8002066:	61a3      	str	r3, [r4, #24]
 8002068:	6063      	str	r3, [r4, #4]
 800206a:	89a3      	ldrh	r3, [r4, #12]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	d503      	bpl.n	8002078 <setvbuf+0x74>
 8002070:	6921      	ldr	r1, [r4, #16]
 8002072:	4638      	mov	r0, r7
 8002074:	f000 f934 	bl	80022e0 <_free_r>
 8002078:	89a3      	ldrh	r3, [r4, #12]
 800207a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	f1b8 0f02 	cmp.w	r8, #2
 8002086:	81a3      	strh	r3, [r4, #12]
 8002088:	d061      	beq.n	800214e <setvbuf+0x14a>
 800208a:	ab01      	add	r3, sp, #4
 800208c:	466a      	mov	r2, sp
 800208e:	4621      	mov	r1, r4
 8002090:	4638      	mov	r0, r7
 8002092:	f000 fad1 	bl	8002638 <__swhatbuf_r>
 8002096:	89a3      	ldrh	r3, [r4, #12]
 8002098:	4318      	orrs	r0, r3
 800209a:	81a0      	strh	r0, [r4, #12]
 800209c:	bb2d      	cbnz	r5, 80020ea <setvbuf+0xe6>
 800209e:	9d00      	ldr	r5, [sp, #0]
 80020a0:	4628      	mov	r0, r5
 80020a2:	f000 f967 	bl	8002374 <malloc>
 80020a6:	4606      	mov	r6, r0
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d152      	bne.n	8002152 <setvbuf+0x14e>
 80020ac:	f8dd 9000 	ldr.w	r9, [sp]
 80020b0:	45a9      	cmp	r9, r5
 80020b2:	d140      	bne.n	8002136 <setvbuf+0x132>
 80020b4:	f04f 35ff 	mov.w	r5, #4294967295
 80020b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020bc:	f043 0202 	orr.w	r2, r3, #2
 80020c0:	81a2      	strh	r2, [r4, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	60a2      	str	r2, [r4, #8]
 80020c6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80020ca:	6022      	str	r2, [r4, #0]
 80020cc:	6122      	str	r2, [r4, #16]
 80020ce:	2201      	movs	r2, #1
 80020d0:	6162      	str	r2, [r4, #20]
 80020d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80020d4:	07d6      	lsls	r6, r2, #31
 80020d6:	d404      	bmi.n	80020e2 <setvbuf+0xde>
 80020d8:	0598      	lsls	r0, r3, #22
 80020da:	d402      	bmi.n	80020e2 <setvbuf+0xde>
 80020dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020de:	f000 f8fd 	bl	80022dc <__retarget_lock_release_recursive>
 80020e2:	4628      	mov	r0, r5
 80020e4:	b003      	add	sp, #12
 80020e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020ea:	2e00      	cmp	r6, #0
 80020ec:	d0d8      	beq.n	80020a0 <setvbuf+0x9c>
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	b913      	cbnz	r3, 80020f8 <setvbuf+0xf4>
 80020f2:	4638      	mov	r0, r7
 80020f4:	f7ff ff48 	bl	8001f88 <__sinit>
 80020f8:	f1b8 0f01 	cmp.w	r8, #1
 80020fc:	bf08      	it	eq
 80020fe:	89a3      	ldrheq	r3, [r4, #12]
 8002100:	6026      	str	r6, [r4, #0]
 8002102:	bf04      	itt	eq
 8002104:	f043 0301 	orreq.w	r3, r3, #1
 8002108:	81a3      	strheq	r3, [r4, #12]
 800210a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800210e:	f013 0208 	ands.w	r2, r3, #8
 8002112:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002116:	d01e      	beq.n	8002156 <setvbuf+0x152>
 8002118:	07d9      	lsls	r1, r3, #31
 800211a:	bf41      	itttt	mi
 800211c:	2200      	movmi	r2, #0
 800211e:	426d      	negmi	r5, r5
 8002120:	60a2      	strmi	r2, [r4, #8]
 8002122:	61a5      	strmi	r5, [r4, #24]
 8002124:	bf58      	it	pl
 8002126:	60a5      	strpl	r5, [r4, #8]
 8002128:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800212a:	07d2      	lsls	r2, r2, #31
 800212c:	d401      	bmi.n	8002132 <setvbuf+0x12e>
 800212e:	059b      	lsls	r3, r3, #22
 8002130:	d513      	bpl.n	800215a <setvbuf+0x156>
 8002132:	2500      	movs	r5, #0
 8002134:	e7d5      	b.n	80020e2 <setvbuf+0xde>
 8002136:	4648      	mov	r0, r9
 8002138:	f000 f91c 	bl	8002374 <malloc>
 800213c:	4606      	mov	r6, r0
 800213e:	2800      	cmp	r0, #0
 8002140:	d0b8      	beq.n	80020b4 <setvbuf+0xb0>
 8002142:	89a3      	ldrh	r3, [r4, #12]
 8002144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002148:	81a3      	strh	r3, [r4, #12]
 800214a:	464d      	mov	r5, r9
 800214c:	e7cf      	b.n	80020ee <setvbuf+0xea>
 800214e:	2500      	movs	r5, #0
 8002150:	e7b2      	b.n	80020b8 <setvbuf+0xb4>
 8002152:	46a9      	mov	r9, r5
 8002154:	e7f5      	b.n	8002142 <setvbuf+0x13e>
 8002156:	60a2      	str	r2, [r4, #8]
 8002158:	e7e6      	b.n	8002128 <setvbuf+0x124>
 800215a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800215c:	f000 f8be 	bl	80022dc <__retarget_lock_release_recursive>
 8002160:	e7e7      	b.n	8002132 <setvbuf+0x12e>
 8002162:	f04f 35ff 	mov.w	r5, #4294967295
 8002166:	e7bc      	b.n	80020e2 <setvbuf+0xde>
 8002168:	2000002c 	.word	0x2000002c

0800216c <__sread>:
 800216c:	b510      	push	{r4, lr}
 800216e:	460c      	mov	r4, r1
 8002170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002174:	f000 f868 	bl	8002248 <_read_r>
 8002178:	2800      	cmp	r0, #0
 800217a:	bfab      	itete	ge
 800217c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800217e:	89a3      	ldrhlt	r3, [r4, #12]
 8002180:	181b      	addge	r3, r3, r0
 8002182:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002186:	bfac      	ite	ge
 8002188:	6563      	strge	r3, [r4, #84]	@ 0x54
 800218a:	81a3      	strhlt	r3, [r4, #12]
 800218c:	bd10      	pop	{r4, pc}

0800218e <__swrite>:
 800218e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002192:	461f      	mov	r7, r3
 8002194:	898b      	ldrh	r3, [r1, #12]
 8002196:	05db      	lsls	r3, r3, #23
 8002198:	4605      	mov	r5, r0
 800219a:	460c      	mov	r4, r1
 800219c:	4616      	mov	r6, r2
 800219e:	d505      	bpl.n	80021ac <__swrite+0x1e>
 80021a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021a4:	2302      	movs	r3, #2
 80021a6:	2200      	movs	r2, #0
 80021a8:	f000 f83c 	bl	8002224 <_lseek_r>
 80021ac:	89a3      	ldrh	r3, [r4, #12]
 80021ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021b6:	81a3      	strh	r3, [r4, #12]
 80021b8:	4632      	mov	r2, r6
 80021ba:	463b      	mov	r3, r7
 80021bc:	4628      	mov	r0, r5
 80021be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021c2:	f000 b853 	b.w	800226c <_write_r>

080021c6 <__sseek>:
 80021c6:	b510      	push	{r4, lr}
 80021c8:	460c      	mov	r4, r1
 80021ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ce:	f000 f829 	bl	8002224 <_lseek_r>
 80021d2:	1c43      	adds	r3, r0, #1
 80021d4:	89a3      	ldrh	r3, [r4, #12]
 80021d6:	bf15      	itete	ne
 80021d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80021da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80021de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80021e2:	81a3      	strheq	r3, [r4, #12]
 80021e4:	bf18      	it	ne
 80021e6:	81a3      	strhne	r3, [r4, #12]
 80021e8:	bd10      	pop	{r4, pc}

080021ea <__sclose>:
 80021ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ee:	f000 b809 	b.w	8002204 <_close_r>

080021f2 <memset>:
 80021f2:	4402      	add	r2, r0
 80021f4:	4603      	mov	r3, r0
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d100      	bne.n	80021fc <memset+0xa>
 80021fa:	4770      	bx	lr
 80021fc:	f803 1b01 	strb.w	r1, [r3], #1
 8002200:	e7f9      	b.n	80021f6 <memset+0x4>
	...

08002204 <_close_r>:
 8002204:	b538      	push	{r3, r4, r5, lr}
 8002206:	4d06      	ldr	r5, [pc, #24]	@ (8002220 <_close_r+0x1c>)
 8002208:	2300      	movs	r3, #0
 800220a:	4604      	mov	r4, r0
 800220c:	4608      	mov	r0, r1
 800220e:	602b      	str	r3, [r5, #0]
 8002210:	f7fe fc62 	bl	8000ad8 <_close>
 8002214:	1c43      	adds	r3, r0, #1
 8002216:	d102      	bne.n	800221e <_close_r+0x1a>
 8002218:	682b      	ldr	r3, [r5, #0]
 800221a:	b103      	cbz	r3, 800221e <_close_r+0x1a>
 800221c:	6023      	str	r3, [r4, #0]
 800221e:	bd38      	pop	{r3, r4, r5, pc}
 8002220:	200002c4 	.word	0x200002c4

08002224 <_lseek_r>:
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	4d07      	ldr	r5, [pc, #28]	@ (8002244 <_lseek_r+0x20>)
 8002228:	4604      	mov	r4, r0
 800222a:	4608      	mov	r0, r1
 800222c:	4611      	mov	r1, r2
 800222e:	2200      	movs	r2, #0
 8002230:	602a      	str	r2, [r5, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	f7fe fc51 	bl	8000ada <_lseek>
 8002238:	1c43      	adds	r3, r0, #1
 800223a:	d102      	bne.n	8002242 <_lseek_r+0x1e>
 800223c:	682b      	ldr	r3, [r5, #0]
 800223e:	b103      	cbz	r3, 8002242 <_lseek_r+0x1e>
 8002240:	6023      	str	r3, [r4, #0]
 8002242:	bd38      	pop	{r3, r4, r5, pc}
 8002244:	200002c4 	.word	0x200002c4

08002248 <_read_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4d07      	ldr	r5, [pc, #28]	@ (8002268 <_read_r+0x20>)
 800224c:	4604      	mov	r4, r0
 800224e:	4608      	mov	r0, r1
 8002250:	4611      	mov	r1, r2
 8002252:	2200      	movs	r2, #0
 8002254:	602a      	str	r2, [r5, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	f7fe fc30 	bl	8000abc <_read>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	d102      	bne.n	8002266 <_read_r+0x1e>
 8002260:	682b      	ldr	r3, [r5, #0]
 8002262:	b103      	cbz	r3, 8002266 <_read_r+0x1e>
 8002264:	6023      	str	r3, [r4, #0]
 8002266:	bd38      	pop	{r3, r4, r5, pc}
 8002268:	200002c4 	.word	0x200002c4

0800226c <_write_r>:
 800226c:	b538      	push	{r3, r4, r5, lr}
 800226e:	4d07      	ldr	r5, [pc, #28]	@ (800228c <_write_r+0x20>)
 8002270:	4604      	mov	r4, r0
 8002272:	4608      	mov	r0, r1
 8002274:	4611      	mov	r1, r2
 8002276:	2200      	movs	r2, #0
 8002278:	602a      	str	r2, [r5, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	f7fe fc12 	bl	8000aa4 <_write>
 8002280:	1c43      	adds	r3, r0, #1
 8002282:	d102      	bne.n	800228a <_write_r+0x1e>
 8002284:	682b      	ldr	r3, [r5, #0]
 8002286:	b103      	cbz	r3, 800228a <_write_r+0x1e>
 8002288:	6023      	str	r3, [r4, #0]
 800228a:	bd38      	pop	{r3, r4, r5, pc}
 800228c:	200002c4 	.word	0x200002c4

08002290 <__libc_init_array>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4d0d      	ldr	r5, [pc, #52]	@ (80022c8 <__libc_init_array+0x38>)
 8002294:	4c0d      	ldr	r4, [pc, #52]	@ (80022cc <__libc_init_array+0x3c>)
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	2600      	movs	r6, #0
 800229c:	42a6      	cmp	r6, r4
 800229e:	d109      	bne.n	80022b4 <__libc_init_array+0x24>
 80022a0:	4d0b      	ldr	r5, [pc, #44]	@ (80022d0 <__libc_init_array+0x40>)
 80022a2:	4c0c      	ldr	r4, [pc, #48]	@ (80022d4 <__libc_init_array+0x44>)
 80022a4:	f000 fa1e 	bl	80026e4 <_init>
 80022a8:	1b64      	subs	r4, r4, r5
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	2600      	movs	r6, #0
 80022ae:	42a6      	cmp	r6, r4
 80022b0:	d105      	bne.n	80022be <__libc_init_array+0x2e>
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b8:	4798      	blx	r3
 80022ba:	3601      	adds	r6, #1
 80022bc:	e7ee      	b.n	800229c <__libc_init_array+0xc>
 80022be:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c2:	4798      	blx	r3
 80022c4:	3601      	adds	r6, #1
 80022c6:	e7f2      	b.n	80022ae <__libc_init_array+0x1e>
 80022c8:	0800271c 	.word	0x0800271c
 80022cc:	0800271c 	.word	0x0800271c
 80022d0:	0800271c 	.word	0x0800271c
 80022d4:	08002720 	.word	0x08002720

080022d8 <__retarget_lock_init_recursive>:
 80022d8:	4770      	bx	lr

080022da <__retarget_lock_acquire_recursive>:
 80022da:	4770      	bx	lr

080022dc <__retarget_lock_release_recursive>:
 80022dc:	4770      	bx	lr
	...

080022e0 <_free_r>:
 80022e0:	b538      	push	{r3, r4, r5, lr}
 80022e2:	4605      	mov	r5, r0
 80022e4:	2900      	cmp	r1, #0
 80022e6:	d041      	beq.n	800236c <_free_r+0x8c>
 80022e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022ec:	1f0c      	subs	r4, r1, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bfb8      	it	lt
 80022f2:	18e4      	addlt	r4, r4, r3
 80022f4:	f000 f8e8 	bl	80024c8 <__malloc_lock>
 80022f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <_free_r+0x90>)
 80022fa:	6813      	ldr	r3, [r2, #0]
 80022fc:	b933      	cbnz	r3, 800230c <_free_r+0x2c>
 80022fe:	6063      	str	r3, [r4, #4]
 8002300:	6014      	str	r4, [r2, #0]
 8002302:	4628      	mov	r0, r5
 8002304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002308:	f000 b8e4 	b.w	80024d4 <__malloc_unlock>
 800230c:	42a3      	cmp	r3, r4
 800230e:	d908      	bls.n	8002322 <_free_r+0x42>
 8002310:	6820      	ldr	r0, [r4, #0]
 8002312:	1821      	adds	r1, r4, r0
 8002314:	428b      	cmp	r3, r1
 8002316:	bf01      	itttt	eq
 8002318:	6819      	ldreq	r1, [r3, #0]
 800231a:	685b      	ldreq	r3, [r3, #4]
 800231c:	1809      	addeq	r1, r1, r0
 800231e:	6021      	streq	r1, [r4, #0]
 8002320:	e7ed      	b.n	80022fe <_free_r+0x1e>
 8002322:	461a      	mov	r2, r3
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	b10b      	cbz	r3, 800232c <_free_r+0x4c>
 8002328:	42a3      	cmp	r3, r4
 800232a:	d9fa      	bls.n	8002322 <_free_r+0x42>
 800232c:	6811      	ldr	r1, [r2, #0]
 800232e:	1850      	adds	r0, r2, r1
 8002330:	42a0      	cmp	r0, r4
 8002332:	d10b      	bne.n	800234c <_free_r+0x6c>
 8002334:	6820      	ldr	r0, [r4, #0]
 8002336:	4401      	add	r1, r0
 8002338:	1850      	adds	r0, r2, r1
 800233a:	4283      	cmp	r3, r0
 800233c:	6011      	str	r1, [r2, #0]
 800233e:	d1e0      	bne.n	8002302 <_free_r+0x22>
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	6053      	str	r3, [r2, #4]
 8002346:	4408      	add	r0, r1
 8002348:	6010      	str	r0, [r2, #0]
 800234a:	e7da      	b.n	8002302 <_free_r+0x22>
 800234c:	d902      	bls.n	8002354 <_free_r+0x74>
 800234e:	230c      	movs	r3, #12
 8002350:	602b      	str	r3, [r5, #0]
 8002352:	e7d6      	b.n	8002302 <_free_r+0x22>
 8002354:	6820      	ldr	r0, [r4, #0]
 8002356:	1821      	adds	r1, r4, r0
 8002358:	428b      	cmp	r3, r1
 800235a:	bf04      	itt	eq
 800235c:	6819      	ldreq	r1, [r3, #0]
 800235e:	685b      	ldreq	r3, [r3, #4]
 8002360:	6063      	str	r3, [r4, #4]
 8002362:	bf04      	itt	eq
 8002364:	1809      	addeq	r1, r1, r0
 8002366:	6021      	streq	r1, [r4, #0]
 8002368:	6054      	str	r4, [r2, #4]
 800236a:	e7ca      	b.n	8002302 <_free_r+0x22>
 800236c:	bd38      	pop	{r3, r4, r5, pc}
 800236e:	bf00      	nop
 8002370:	200002d0 	.word	0x200002d0

08002374 <malloc>:
 8002374:	4b02      	ldr	r3, [pc, #8]	@ (8002380 <malloc+0xc>)
 8002376:	4601      	mov	r1, r0
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	f000 b825 	b.w	80023c8 <_malloc_r>
 800237e:	bf00      	nop
 8002380:	2000002c 	.word	0x2000002c

08002384 <sbrk_aligned>:
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	4e0f      	ldr	r6, [pc, #60]	@ (80023c4 <sbrk_aligned+0x40>)
 8002388:	460c      	mov	r4, r1
 800238a:	6831      	ldr	r1, [r6, #0]
 800238c:	4605      	mov	r5, r0
 800238e:	b911      	cbnz	r1, 8002396 <sbrk_aligned+0x12>
 8002390:	f000 f98a 	bl	80026a8 <_sbrk_r>
 8002394:	6030      	str	r0, [r6, #0]
 8002396:	4621      	mov	r1, r4
 8002398:	4628      	mov	r0, r5
 800239a:	f000 f985 	bl	80026a8 <_sbrk_r>
 800239e:	1c43      	adds	r3, r0, #1
 80023a0:	d103      	bne.n	80023aa <sbrk_aligned+0x26>
 80023a2:	f04f 34ff 	mov.w	r4, #4294967295
 80023a6:	4620      	mov	r0, r4
 80023a8:	bd70      	pop	{r4, r5, r6, pc}
 80023aa:	1cc4      	adds	r4, r0, #3
 80023ac:	f024 0403 	bic.w	r4, r4, #3
 80023b0:	42a0      	cmp	r0, r4
 80023b2:	d0f8      	beq.n	80023a6 <sbrk_aligned+0x22>
 80023b4:	1a21      	subs	r1, r4, r0
 80023b6:	4628      	mov	r0, r5
 80023b8:	f000 f976 	bl	80026a8 <_sbrk_r>
 80023bc:	3001      	adds	r0, #1
 80023be:	d1f2      	bne.n	80023a6 <sbrk_aligned+0x22>
 80023c0:	e7ef      	b.n	80023a2 <sbrk_aligned+0x1e>
 80023c2:	bf00      	nop
 80023c4:	200002cc 	.word	0x200002cc

080023c8 <_malloc_r>:
 80023c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023cc:	1ccd      	adds	r5, r1, #3
 80023ce:	f025 0503 	bic.w	r5, r5, #3
 80023d2:	3508      	adds	r5, #8
 80023d4:	2d0c      	cmp	r5, #12
 80023d6:	bf38      	it	cc
 80023d8:	250c      	movcc	r5, #12
 80023da:	2d00      	cmp	r5, #0
 80023dc:	4606      	mov	r6, r0
 80023de:	db01      	blt.n	80023e4 <_malloc_r+0x1c>
 80023e0:	42a9      	cmp	r1, r5
 80023e2:	d904      	bls.n	80023ee <_malloc_r+0x26>
 80023e4:	230c      	movs	r3, #12
 80023e6:	6033      	str	r3, [r6, #0]
 80023e8:	2000      	movs	r0, #0
 80023ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80024c4 <_malloc_r+0xfc>
 80023f2:	f000 f869 	bl	80024c8 <__malloc_lock>
 80023f6:	f8d8 3000 	ldr.w	r3, [r8]
 80023fa:	461c      	mov	r4, r3
 80023fc:	bb44      	cbnz	r4, 8002450 <_malloc_r+0x88>
 80023fe:	4629      	mov	r1, r5
 8002400:	4630      	mov	r0, r6
 8002402:	f7ff ffbf 	bl	8002384 <sbrk_aligned>
 8002406:	1c43      	adds	r3, r0, #1
 8002408:	4604      	mov	r4, r0
 800240a:	d158      	bne.n	80024be <_malloc_r+0xf6>
 800240c:	f8d8 4000 	ldr.w	r4, [r8]
 8002410:	4627      	mov	r7, r4
 8002412:	2f00      	cmp	r7, #0
 8002414:	d143      	bne.n	800249e <_malloc_r+0xd6>
 8002416:	2c00      	cmp	r4, #0
 8002418:	d04b      	beq.n	80024b2 <_malloc_r+0xea>
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	4639      	mov	r1, r7
 800241e:	4630      	mov	r0, r6
 8002420:	eb04 0903 	add.w	r9, r4, r3
 8002424:	f000 f940 	bl	80026a8 <_sbrk_r>
 8002428:	4581      	cmp	r9, r0
 800242a:	d142      	bne.n	80024b2 <_malloc_r+0xea>
 800242c:	6821      	ldr	r1, [r4, #0]
 800242e:	1a6d      	subs	r5, r5, r1
 8002430:	4629      	mov	r1, r5
 8002432:	4630      	mov	r0, r6
 8002434:	f7ff ffa6 	bl	8002384 <sbrk_aligned>
 8002438:	3001      	adds	r0, #1
 800243a:	d03a      	beq.n	80024b2 <_malloc_r+0xea>
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	442b      	add	r3, r5
 8002440:	6023      	str	r3, [r4, #0]
 8002442:	f8d8 3000 	ldr.w	r3, [r8]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	bb62      	cbnz	r2, 80024a4 <_malloc_r+0xdc>
 800244a:	f8c8 7000 	str.w	r7, [r8]
 800244e:	e00f      	b.n	8002470 <_malloc_r+0xa8>
 8002450:	6822      	ldr	r2, [r4, #0]
 8002452:	1b52      	subs	r2, r2, r5
 8002454:	d420      	bmi.n	8002498 <_malloc_r+0xd0>
 8002456:	2a0b      	cmp	r2, #11
 8002458:	d917      	bls.n	800248a <_malloc_r+0xc2>
 800245a:	1961      	adds	r1, r4, r5
 800245c:	42a3      	cmp	r3, r4
 800245e:	6025      	str	r5, [r4, #0]
 8002460:	bf18      	it	ne
 8002462:	6059      	strne	r1, [r3, #4]
 8002464:	6863      	ldr	r3, [r4, #4]
 8002466:	bf08      	it	eq
 8002468:	f8c8 1000 	streq.w	r1, [r8]
 800246c:	5162      	str	r2, [r4, r5]
 800246e:	604b      	str	r3, [r1, #4]
 8002470:	4630      	mov	r0, r6
 8002472:	f000 f82f 	bl	80024d4 <__malloc_unlock>
 8002476:	f104 000b 	add.w	r0, r4, #11
 800247a:	1d23      	adds	r3, r4, #4
 800247c:	f020 0007 	bic.w	r0, r0, #7
 8002480:	1ac2      	subs	r2, r0, r3
 8002482:	bf1c      	itt	ne
 8002484:	1a1b      	subne	r3, r3, r0
 8002486:	50a3      	strne	r3, [r4, r2]
 8002488:	e7af      	b.n	80023ea <_malloc_r+0x22>
 800248a:	6862      	ldr	r2, [r4, #4]
 800248c:	42a3      	cmp	r3, r4
 800248e:	bf0c      	ite	eq
 8002490:	f8c8 2000 	streq.w	r2, [r8]
 8002494:	605a      	strne	r2, [r3, #4]
 8002496:	e7eb      	b.n	8002470 <_malloc_r+0xa8>
 8002498:	4623      	mov	r3, r4
 800249a:	6864      	ldr	r4, [r4, #4]
 800249c:	e7ae      	b.n	80023fc <_malloc_r+0x34>
 800249e:	463c      	mov	r4, r7
 80024a0:	687f      	ldr	r7, [r7, #4]
 80024a2:	e7b6      	b.n	8002412 <_malloc_r+0x4a>
 80024a4:	461a      	mov	r2, r3
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	42a3      	cmp	r3, r4
 80024aa:	d1fb      	bne.n	80024a4 <_malloc_r+0xdc>
 80024ac:	2300      	movs	r3, #0
 80024ae:	6053      	str	r3, [r2, #4]
 80024b0:	e7de      	b.n	8002470 <_malloc_r+0xa8>
 80024b2:	230c      	movs	r3, #12
 80024b4:	6033      	str	r3, [r6, #0]
 80024b6:	4630      	mov	r0, r6
 80024b8:	f000 f80c 	bl	80024d4 <__malloc_unlock>
 80024bc:	e794      	b.n	80023e8 <_malloc_r+0x20>
 80024be:	6005      	str	r5, [r0, #0]
 80024c0:	e7d6      	b.n	8002470 <_malloc_r+0xa8>
 80024c2:	bf00      	nop
 80024c4:	200002d0 	.word	0x200002d0

080024c8 <__malloc_lock>:
 80024c8:	4801      	ldr	r0, [pc, #4]	@ (80024d0 <__malloc_lock+0x8>)
 80024ca:	f7ff bf06 	b.w	80022da <__retarget_lock_acquire_recursive>
 80024ce:	bf00      	nop
 80024d0:	200002c8 	.word	0x200002c8

080024d4 <__malloc_unlock>:
 80024d4:	4801      	ldr	r0, [pc, #4]	@ (80024dc <__malloc_unlock+0x8>)
 80024d6:	f7ff bf01 	b.w	80022dc <__retarget_lock_release_recursive>
 80024da:	bf00      	nop
 80024dc:	200002c8 	.word	0x200002c8

080024e0 <__sflush_r>:
 80024e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80024e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024e8:	0716      	lsls	r6, r2, #28
 80024ea:	4605      	mov	r5, r0
 80024ec:	460c      	mov	r4, r1
 80024ee:	d454      	bmi.n	800259a <__sflush_r+0xba>
 80024f0:	684b      	ldr	r3, [r1, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	dc02      	bgt.n	80024fc <__sflush_r+0x1c>
 80024f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	dd48      	ble.n	800258e <__sflush_r+0xae>
 80024fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80024fe:	2e00      	cmp	r6, #0
 8002500:	d045      	beq.n	800258e <__sflush_r+0xae>
 8002502:	2300      	movs	r3, #0
 8002504:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002508:	682f      	ldr	r7, [r5, #0]
 800250a:	6a21      	ldr	r1, [r4, #32]
 800250c:	602b      	str	r3, [r5, #0]
 800250e:	d030      	beq.n	8002572 <__sflush_r+0x92>
 8002510:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002512:	89a3      	ldrh	r3, [r4, #12]
 8002514:	0759      	lsls	r1, r3, #29
 8002516:	d505      	bpl.n	8002524 <__sflush_r+0x44>
 8002518:	6863      	ldr	r3, [r4, #4]
 800251a:	1ad2      	subs	r2, r2, r3
 800251c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800251e:	b10b      	cbz	r3, 8002524 <__sflush_r+0x44>
 8002520:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	2300      	movs	r3, #0
 8002526:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002528:	6a21      	ldr	r1, [r4, #32]
 800252a:	4628      	mov	r0, r5
 800252c:	47b0      	blx	r6
 800252e:	1c43      	adds	r3, r0, #1
 8002530:	89a3      	ldrh	r3, [r4, #12]
 8002532:	d106      	bne.n	8002542 <__sflush_r+0x62>
 8002534:	6829      	ldr	r1, [r5, #0]
 8002536:	291d      	cmp	r1, #29
 8002538:	d82b      	bhi.n	8002592 <__sflush_r+0xb2>
 800253a:	4a2a      	ldr	r2, [pc, #168]	@ (80025e4 <__sflush_r+0x104>)
 800253c:	410a      	asrs	r2, r1
 800253e:	07d6      	lsls	r6, r2, #31
 8002540:	d427      	bmi.n	8002592 <__sflush_r+0xb2>
 8002542:	2200      	movs	r2, #0
 8002544:	6062      	str	r2, [r4, #4]
 8002546:	04d9      	lsls	r1, r3, #19
 8002548:	6922      	ldr	r2, [r4, #16]
 800254a:	6022      	str	r2, [r4, #0]
 800254c:	d504      	bpl.n	8002558 <__sflush_r+0x78>
 800254e:	1c42      	adds	r2, r0, #1
 8002550:	d101      	bne.n	8002556 <__sflush_r+0x76>
 8002552:	682b      	ldr	r3, [r5, #0]
 8002554:	b903      	cbnz	r3, 8002558 <__sflush_r+0x78>
 8002556:	6560      	str	r0, [r4, #84]	@ 0x54
 8002558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800255a:	602f      	str	r7, [r5, #0]
 800255c:	b1b9      	cbz	r1, 800258e <__sflush_r+0xae>
 800255e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002562:	4299      	cmp	r1, r3
 8002564:	d002      	beq.n	800256c <__sflush_r+0x8c>
 8002566:	4628      	mov	r0, r5
 8002568:	f7ff feba 	bl	80022e0 <_free_r>
 800256c:	2300      	movs	r3, #0
 800256e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002570:	e00d      	b.n	800258e <__sflush_r+0xae>
 8002572:	2301      	movs	r3, #1
 8002574:	4628      	mov	r0, r5
 8002576:	47b0      	blx	r6
 8002578:	4602      	mov	r2, r0
 800257a:	1c50      	adds	r0, r2, #1
 800257c:	d1c9      	bne.n	8002512 <__sflush_r+0x32>
 800257e:	682b      	ldr	r3, [r5, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0c6      	beq.n	8002512 <__sflush_r+0x32>
 8002584:	2b1d      	cmp	r3, #29
 8002586:	d001      	beq.n	800258c <__sflush_r+0xac>
 8002588:	2b16      	cmp	r3, #22
 800258a:	d11e      	bne.n	80025ca <__sflush_r+0xea>
 800258c:	602f      	str	r7, [r5, #0]
 800258e:	2000      	movs	r0, #0
 8002590:	e022      	b.n	80025d8 <__sflush_r+0xf8>
 8002592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002596:	b21b      	sxth	r3, r3
 8002598:	e01b      	b.n	80025d2 <__sflush_r+0xf2>
 800259a:	690f      	ldr	r7, [r1, #16]
 800259c:	2f00      	cmp	r7, #0
 800259e:	d0f6      	beq.n	800258e <__sflush_r+0xae>
 80025a0:	0793      	lsls	r3, r2, #30
 80025a2:	680e      	ldr	r6, [r1, #0]
 80025a4:	bf08      	it	eq
 80025a6:	694b      	ldreq	r3, [r1, #20]
 80025a8:	600f      	str	r7, [r1, #0]
 80025aa:	bf18      	it	ne
 80025ac:	2300      	movne	r3, #0
 80025ae:	eba6 0807 	sub.w	r8, r6, r7
 80025b2:	608b      	str	r3, [r1, #8]
 80025b4:	f1b8 0f00 	cmp.w	r8, #0
 80025b8:	dde9      	ble.n	800258e <__sflush_r+0xae>
 80025ba:	6a21      	ldr	r1, [r4, #32]
 80025bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80025be:	4643      	mov	r3, r8
 80025c0:	463a      	mov	r2, r7
 80025c2:	4628      	mov	r0, r5
 80025c4:	47b0      	blx	r6
 80025c6:	2800      	cmp	r0, #0
 80025c8:	dc08      	bgt.n	80025dc <__sflush_r+0xfc>
 80025ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025d2:	81a3      	strh	r3, [r4, #12]
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025dc:	4407      	add	r7, r0
 80025de:	eba8 0800 	sub.w	r8, r8, r0
 80025e2:	e7e7      	b.n	80025b4 <__sflush_r+0xd4>
 80025e4:	dfbffffe 	.word	0xdfbffffe

080025e8 <_fflush_r>:
 80025e8:	b538      	push	{r3, r4, r5, lr}
 80025ea:	690b      	ldr	r3, [r1, #16]
 80025ec:	4605      	mov	r5, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	b913      	cbnz	r3, 80025f8 <_fflush_r+0x10>
 80025f2:	2500      	movs	r5, #0
 80025f4:	4628      	mov	r0, r5
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	b118      	cbz	r0, 8002602 <_fflush_r+0x1a>
 80025fa:	6a03      	ldr	r3, [r0, #32]
 80025fc:	b90b      	cbnz	r3, 8002602 <_fflush_r+0x1a>
 80025fe:	f7ff fcc3 	bl	8001f88 <__sinit>
 8002602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f3      	beq.n	80025f2 <_fflush_r+0xa>
 800260a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800260c:	07d0      	lsls	r0, r2, #31
 800260e:	d404      	bmi.n	800261a <_fflush_r+0x32>
 8002610:	0599      	lsls	r1, r3, #22
 8002612:	d402      	bmi.n	800261a <_fflush_r+0x32>
 8002614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002616:	f7ff fe60 	bl	80022da <__retarget_lock_acquire_recursive>
 800261a:	4628      	mov	r0, r5
 800261c:	4621      	mov	r1, r4
 800261e:	f7ff ff5f 	bl	80024e0 <__sflush_r>
 8002622:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002624:	07da      	lsls	r2, r3, #31
 8002626:	4605      	mov	r5, r0
 8002628:	d4e4      	bmi.n	80025f4 <_fflush_r+0xc>
 800262a:	89a3      	ldrh	r3, [r4, #12]
 800262c:	059b      	lsls	r3, r3, #22
 800262e:	d4e1      	bmi.n	80025f4 <_fflush_r+0xc>
 8002630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002632:	f7ff fe53 	bl	80022dc <__retarget_lock_release_recursive>
 8002636:	e7dd      	b.n	80025f4 <_fflush_r+0xc>

08002638 <__swhatbuf_r>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	460c      	mov	r4, r1
 800263c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002640:	2900      	cmp	r1, #0
 8002642:	b096      	sub	sp, #88	@ 0x58
 8002644:	4615      	mov	r5, r2
 8002646:	461e      	mov	r6, r3
 8002648:	da0d      	bge.n	8002666 <__swhatbuf_r+0x2e>
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002650:	f04f 0100 	mov.w	r1, #0
 8002654:	bf14      	ite	ne
 8002656:	2340      	movne	r3, #64	@ 0x40
 8002658:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800265c:	2000      	movs	r0, #0
 800265e:	6031      	str	r1, [r6, #0]
 8002660:	602b      	str	r3, [r5, #0]
 8002662:	b016      	add	sp, #88	@ 0x58
 8002664:	bd70      	pop	{r4, r5, r6, pc}
 8002666:	466a      	mov	r2, sp
 8002668:	f000 f80c 	bl	8002684 <_fstat_r>
 800266c:	2800      	cmp	r0, #0
 800266e:	dbec      	blt.n	800264a <__swhatbuf_r+0x12>
 8002670:	9901      	ldr	r1, [sp, #4]
 8002672:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002676:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800267a:	4259      	negs	r1, r3
 800267c:	4159      	adcs	r1, r3
 800267e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002682:	e7eb      	b.n	800265c <__swhatbuf_r+0x24>

08002684 <_fstat_r>:
 8002684:	b538      	push	{r3, r4, r5, lr}
 8002686:	4d07      	ldr	r5, [pc, #28]	@ (80026a4 <_fstat_r+0x20>)
 8002688:	2300      	movs	r3, #0
 800268a:	4604      	mov	r4, r0
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	602b      	str	r3, [r5, #0]
 8002692:	f7fe fa23 	bl	8000adc <_fstat>
 8002696:	1c43      	adds	r3, r0, #1
 8002698:	d102      	bne.n	80026a0 <_fstat_r+0x1c>
 800269a:	682b      	ldr	r3, [r5, #0]
 800269c:	b103      	cbz	r3, 80026a0 <_fstat_r+0x1c>
 800269e:	6023      	str	r3, [r4, #0]
 80026a0:	bd38      	pop	{r3, r4, r5, pc}
 80026a2:	bf00      	nop
 80026a4:	200002c4 	.word	0x200002c4

080026a8 <_sbrk_r>:
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	4d06      	ldr	r5, [pc, #24]	@ (80026c4 <_sbrk_r+0x1c>)
 80026ac:	2300      	movs	r3, #0
 80026ae:	4604      	mov	r4, r0
 80026b0:	4608      	mov	r0, r1
 80026b2:	602b      	str	r3, [r5, #0]
 80026b4:	f000 f808 	bl	80026c8 <_sbrk>
 80026b8:	1c43      	adds	r3, r0, #1
 80026ba:	d102      	bne.n	80026c2 <_sbrk_r+0x1a>
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	b103      	cbz	r3, 80026c2 <_sbrk_r+0x1a>
 80026c0:	6023      	str	r3, [r4, #0]
 80026c2:	bd38      	pop	{r3, r4, r5, pc}
 80026c4:	200002c4 	.word	0x200002c4

080026c8 <_sbrk>:
 80026c8:	4a04      	ldr	r2, [pc, #16]	@ (80026dc <_sbrk+0x14>)
 80026ca:	6811      	ldr	r1, [r2, #0]
 80026cc:	4603      	mov	r3, r0
 80026ce:	b909      	cbnz	r1, 80026d4 <_sbrk+0xc>
 80026d0:	4903      	ldr	r1, [pc, #12]	@ (80026e0 <_sbrk+0x18>)
 80026d2:	6011      	str	r1, [r2, #0]
 80026d4:	6810      	ldr	r0, [r2, #0]
 80026d6:	4403      	add	r3, r0
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4770      	bx	lr
 80026dc:	200002d4 	.word	0x200002d4
 80026e0:	200002d8 	.word	0x200002d8

080026e4 <_init>:
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	bf00      	nop
 80026e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ea:	bc08      	pop	{r3}
 80026ec:	469e      	mov	lr, r3
 80026ee:	4770      	bx	lr

080026f0 <_fini>:
 80026f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f2:	bf00      	nop
 80026f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f6:	bc08      	pop	{r3}
 80026f8:	469e      	mov	lr, r3
 80026fa:	4770      	bx	lr
