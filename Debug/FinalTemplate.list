
FinalTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .apptext      00000000  00000000  00000000  0000407c  2**0
                  CONTENTS
  2 .apptext      00000000  080001f8  080001f8  0000407c  2**0
                  CONTENTS
  3 .text         000027b8  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000020  080029b0  080029b0  000039b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080029d0  080029d0  0000407c  2**0
                  CONTENTS
  6 .ARM          00000008  080029d0  080029d0  000039d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  080029d8  080029d8  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080029d8  080029d8  000039d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080029dc  080029dc  000039dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000007c  20000000  080029e0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000025c  2000007c  08002a5c  0000407c  2**2
                  ALLOC
 12 ._user_heap_stack 00000400  200002d8  08002a5c  000042d8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000edc8  00000000  00000000  000040aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001cac  00000000  00000000  00012e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000928  00000000  00000000  00014b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006e5  00000000  00000000  00015448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002de28  00000000  00000000  00015b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010e7b  00000000  00000000  00043955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011c438  00000000  00000000  000547d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00170c08  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001f3c  00000000  00000000  00170c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00005541  00000000  00000000  00172b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000050  00000000  00000000  001780c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000007c 	.word	0x2000007c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002998 	.word	0x08002998

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000080 	.word	0x20000080
 8000234:	08002998 	.word	0x08002998

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <inc>:



static void inc(uint8_t * a, uint8_t x)
{
	(*a) +=  x;
 8000528:	7803      	ldrb	r3, [r0, #0]
 800052a:	440b      	add	r3, r1
 800052c:	7003      	strb	r3, [r0, #0]
}
 800052e:	4770      	bx	lr

08000530 <main>:

static uint8_t func[200];

int main(void){
 8000530:	b500      	push	{lr}
 8000532:	b083      	sub	sp, #12

	Sys_Init();
 8000534:	f000 f9d2 	bl	80008dc <Sys_Init>

	// Read the README in the base directory of this project.
	spi_flash_interface_initialize_SPI();
 8000538:	f000 fa32 	bl	80009a0 <spi_flash_interface_initialize_SPI>

	void (*myFunc)(uint8_t * );
	myFunc = (void (*)(uint8_t * )) (func-1);
	*/

	uint8_t x = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	f88d 3007 	strb.w	r3, [sp, #7]
		myFunc(&x, 2);

		printf("%d\r\n", x);

#endif
		inc(&x, 2);
 8000542:	2102      	movs	r1, #2
 8000544:	f10d 0007 	add.w	r0, sp, #7
 8000548:	f7ff ffee 	bl	8000528 <inc>
		printf("FUCK\r\n");
 800054c:	4801      	ldr	r0, [pc, #4]	@ (8000554 <main+0x24>)
 800054e:	f001 fdc3 	bl	80020d8 <puts>
	while(1)
 8000552:	e7f6      	b.n	8000542 <main+0x12>
 8000554:	080029c8 	.word	0x080029c8

08000558 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000558:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800055c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <SCB_EnableICache+0x2c>)
 8000562:	2200      	movs	r2, #0
 8000564:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000568:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800056c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000570:	695a      	ldr	r2, [r3, #20]
 8000572:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000576:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000578:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800057c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b410      	push	{r4}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058a:	4b15      	ldr	r3, [pc, #84]	@ (80005e0 <SCB_EnableDCache+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000592:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000596:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800059a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800059e:	e000      	b.n	80005a2 <SCB_EnableDCache+0x1a>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80005a0:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005a2:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80005aa:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80005ae:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80005b2:	490b      	ldr	r1, [pc, #44]	@ (80005e0 <SCB_EnableDCache+0x58>)
 80005b4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80005b8:	4613      	mov	r3, r2
 80005ba:	3a01      	subs	r2, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1f2      	bne.n	80005a6 <SCB_EnableDCache+0x1e>
    } while(sets-- != 0U);
 80005c0:	1e43      	subs	r3, r0, #1
 80005c2:	2800      	cmp	r0, #0
 80005c4:	d1ec      	bne.n	80005a0 <SCB_EnableDCache+0x18>
 80005c6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ca:	694b      	ldr	r3, [r1, #20]
 80005cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005d0:	614b      	str	r3, [r1, #20]
 80005d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005d6:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80005da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80005e4:	b500      	push	{lr}
 80005e6:	b093      	sub	sp, #76	@ 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f0:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005fa:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005fc:	2219      	movs	r2, #25
 80005fe:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000600:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8000604:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000608:	2309      	movs	r3, #9
 800060a:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800060c:	2307      	movs	r3, #7
 800060e:	930c      	str	r3, [sp, #48]	@ 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000610:	4668      	mov	r0, sp
 8000612:	f000 fcab 	bl	8000f6c <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000616:	b100      	cbz	r0, 800061a <SystemClock_Config+0x36>
    while(1) { ; }
 8000618:	e7fe      	b.n	8000618 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800061a:	f000 fc69 	bl	8000ef0 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800061e:	b100      	cbz	r0, 8000622 <SystemClock_Config+0x3e>
    while(1) { ; }
 8000620:	e7fe      	b.n	8000620 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000622:	230f      	movs	r3, #15
 8000624:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000632:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000638:	9311      	str	r3, [sp, #68]	@ 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800063a:	2107      	movs	r1, #7
 800063c:	a80d      	add	r0, sp, #52	@ 0x34
 800063e:	f000 ff0b 	bl	8001458 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8000642:	b100      	cbz	r0, 8000646 <SystemClock_Config+0x62>
    while(1) { ; }
 8000644:	e7fe      	b.n	8000644 <SystemClock_Config+0x60>
  }
}
 8000646:	b013      	add	sp, #76	@ 0x4c
 8000648:	f85d fb04 	ldr.w	pc, [sp], #4

0800064c <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 800064c:	b508      	push	{r3, lr}
  /* Enable I-Cache */
  SCB_EnableICache();
 800064e:	f7ff ff83 	bl	8000558 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8000652:	f7ff ff99 	bl	8000588 <SCB_EnableDCache>
}
 8000656:	bd08      	pop	{r3, pc}

08000658 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 8000658:	b0a4      	sub	sp, #144	@ 0x90
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b9f      	ldr	r3, [pc, #636]	@ (80008d8 <Clock_Inits+0x280>)
 800065c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800065e:	f042 0201 	orr.w	r2, r2, #1
 8000662:	631a      	str	r2, [r3, #48]	@ 0x30
 8000664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000666:	f002 0201 	and.w	r2, r2, #1
 800066a:	9201      	str	r2, [sp, #4]
 800066c:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000670:	f042 0202 	orr.w	r2, r2, #2
 8000674:	631a      	str	r2, [r3, #48]	@ 0x30
 8000676:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000678:	f002 0202 	and.w	r2, r2, #2
 800067c:	9202      	str	r2, [sp, #8]
 800067e:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000682:	f042 0204 	orr.w	r2, r2, #4
 8000686:	631a      	str	r2, [r3, #48]	@ 0x30
 8000688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800068a:	f002 0204 	and.w	r2, r2, #4
 800068e:	9203      	str	r2, [sp, #12]
 8000690:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000694:	f042 0208 	orr.w	r2, r2, #8
 8000698:	631a      	str	r2, [r3, #48]	@ 0x30
 800069a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800069c:	f002 0208 	and.w	r2, r2, #8
 80006a0:	9204      	str	r2, [sp, #16]
 80006a2:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80006a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006a6:	f042 0210 	orr.w	r2, r2, #16
 80006aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80006ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006ae:	f002 0210 	and.w	r2, r2, #16
 80006b2:	9205      	str	r2, [sp, #20]
 80006b4:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006b8:	f042 0220 	orr.w	r2, r2, #32
 80006bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80006be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006c0:	f002 0220 	and.w	r2, r2, #32
 80006c4:	9206      	str	r2, [sp, #24]
 80006c6:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80006c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80006ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80006d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006d2:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80006d6:	9207      	str	r2, [sp, #28]
 80006d8:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80006e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80006e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006e4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80006e8:	9208      	str	r2, [sp, #32]
 80006ea:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80006ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80006f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006f6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80006fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80006fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80006fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000704:	631a      	str	r2, [r3, #48]	@ 0x30
 8000706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000708:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800070c:	920a      	str	r2, [sp, #40]	@ 0x28
 800070e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000712:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000716:	631a      	str	r2, [r3, #48]	@ 0x30
 8000718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800071a:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800071e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000720:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000724:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000728:	645a      	str	r2, [r3, #68]	@ 0x44
 800072a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800072c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000730:	920c      	str	r2, [sp, #48]	@ 0x30
 8000732:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000736:	f042 0201 	orr.w	r2, r2, #1
 800073a:	645a      	str	r2, [r3, #68]	@ 0x44
 800073c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800073e:	f002 0201 	and.w	r2, r2, #1
 8000742:	920d      	str	r2, [sp, #52]	@ 0x34
 8000744:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000748:	f042 0201 	orr.w	r2, r2, #1
 800074c:	641a      	str	r2, [r3, #64]	@ 0x40
 800074e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000750:	f002 0201 	and.w	r2, r2, #1
 8000754:	920e      	str	r2, [sp, #56]	@ 0x38
 8000756:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800075a:	f042 0202 	orr.w	r2, r2, #2
 800075e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000760:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000762:	f002 0202 	and.w	r2, r2, #2
 8000766:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000768:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
	__HAL_RCC_TIM4_CLK_ENABLE();
 800076a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800076c:	f042 0204 	orr.w	r2, r2, #4
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000774:	f002 0204 	and.w	r2, r2, #4
 8000778:	9210      	str	r2, [sp, #64]	@ 0x40
 800077a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
	__HAL_RCC_TIM5_CLK_ENABLE();
 800077c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800077e:	f042 0208 	orr.w	r2, r2, #8
 8000782:	641a      	str	r2, [r3, #64]	@ 0x40
 8000784:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000786:	f002 0208 	and.w	r2, r2, #8
 800078a:	9211      	str	r2, [sp, #68]	@ 0x44
 800078c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
	__HAL_RCC_TIM6_CLK_ENABLE();
 800078e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000790:	f042 0210 	orr.w	r2, r2, #16
 8000794:	641a      	str	r2, [r3, #64]	@ 0x40
 8000796:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000798:	f002 0210 	and.w	r2, r2, #16
 800079c:	9212      	str	r2, [sp, #72]	@ 0x48
 800079e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
	__HAL_RCC_TIM7_CLK_ENABLE();
 80007a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007a2:	f042 0220 	orr.w	r2, r2, #32
 80007a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80007a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007aa:	f002 0220 	and.w	r2, r2, #32
 80007ae:	9213      	str	r2, [sp, #76]	@ 0x4c
 80007b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
	__HAL_RCC_TIM8_CLK_ENABLE();
 80007b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007b4:	f042 0202 	orr.w	r2, r2, #2
 80007b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80007ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007bc:	f002 0202 	and.w	r2, r2, #2
 80007c0:	9214      	str	r2, [sp, #80]	@ 0x50
 80007c2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
	__HAL_RCC_TIM9_CLK_ENABLE();
 80007c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80007ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80007cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007ce:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 80007d2:	9215      	str	r2, [sp, #84]	@ 0x54
 80007d4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
	__HAL_RCC_TIM10_CLK_ENABLE();
 80007d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007d8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80007dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80007de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007e0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80007e4:	9216      	str	r2, [sp, #88]	@ 0x58
 80007e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
	__HAL_RCC_TIM11_CLK_ENABLE();
 80007e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007ea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80007ee:	645a      	str	r2, [r3, #68]	@ 0x44
 80007f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007f2:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80007f6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80007f8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
	__HAL_RCC_TIM12_CLK_ENABLE();
 80007fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000800:	641a      	str	r2, [r3, #64]	@ 0x40
 8000802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000804:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000808:	9218      	str	r2, [sp, #96]	@ 0x60
 800080a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
	__HAL_RCC_TIM13_CLK_ENABLE();
 800080c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800080e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000812:	641a      	str	r2, [r3, #64]	@ 0x40
 8000814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000816:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800081a:	9219      	str	r2, [sp, #100]	@ 0x64
 800081c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
	__HAL_RCC_TIM14_CLK_ENABLE();
 800081e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000820:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000824:	641a      	str	r2, [r3, #64]	@ 0x40
 8000826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000828:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800082c:	921a      	str	r2, [sp, #104]	@ 0x68
 800082e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000836:	641a      	str	r2, [r3, #64]	@ 0x40
 8000838:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800083a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800083e:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000840:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 8000842:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000844:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000848:	641a      	str	r2, [r3, #64]	@ 0x40
 800084a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084c:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8000850:	921c      	str	r2, [sp, #112]	@ 0x70
 8000852:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000856:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800085a:	645a      	str	r2, [r3, #68]	@ 0x44
 800085c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800085e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000862:	921d      	str	r2, [sp, #116]	@ 0x74
 8000864:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
	__HAL_RCC_ADC2_CLK_ENABLE();
 8000866:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000868:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800086c:	645a      	str	r2, [r3, #68]	@ 0x44
 800086e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000870:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000874:	921e      	str	r2, [sp, #120]	@ 0x78
 8000876:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
	__HAL_RCC_ADC3_CLK_ENABLE();
 8000878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800087a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800087e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000882:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8000886:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000888:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800088c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000890:	631a      	str	r2, [r3, #48]	@ 0x30
 8000892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000894:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8000898:	9220      	str	r2, [sp, #128]	@ 0x80
 800089a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
	__HAL_RCC_DMA2_CLK_ENABLE();
 800089c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800089e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80008a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80008a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008a6:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 80008aa:	9221      	str	r2, [sp, #132]	@ 0x84
 80008ac:	9a21      	ldr	r2, [sp, #132]	@ 0x84

	// JPEG Clock
	__HAL_RCC_JPEG_CLK_ENABLE();
 80008ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b0:	f042 0202 	orr.w	r2, r2, #2
 80008b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b8:	f002 0202 	and.w	r2, r2, #2
 80008bc:	9222      	str	r2, [sp, #136]	@ 0x88
 80008be:	9a22      	ldr	r2, [sp, #136]	@ 0x88

	// DMA2D Clock
	__HAL_RCC_DMA2D_CLK_ENABLE();
 80008c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008c2:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80008c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008ce:	9323      	str	r3, [sp, #140]	@ 0x8c
 80008d0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c

}
 80008d2:	b024      	add	sp, #144	@ 0x90
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <Sys_Init>:
void Sys_Init(void) {
 80008dc:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 80008de:	f7ff feb5 	bl	800064c <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80008e2:	f000 f96d 	bl	8000bc0 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80008e6:	f7ff fe7d 	bl	80005e4 <SystemClock_Config>
	Clock_Inits();
 80008ea:	f7ff feb5 	bl	8000658 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 80008ee:	4a06      	ldr	r2, [pc, #24]	@ (8000908 <Sys_Init+0x2c>)
 80008f0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <Sys_Init+0x30>)
 80008f6:	f000 f8dd 	bl	8000ab4 <initUart>
	setbuf(stdout, NULL);
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <Sys_Init+0x34>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2100      	movs	r1, #0
 8000900:	6898      	ldr	r0, [r3, #8]
 8000902:	f001 fbf1 	bl	80020e8 <setbuf>
}
 8000906:	bd08      	pop	{r3, pc}
 8000908:	40011000 	.word	0x40011000
 800090c:	200000fc 	.word	0x200000fc
 8000910:	2000002c 	.word	0x2000002c

08000914 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000914:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000916:	f000 f969 	bl	8000bec <HAL_IncTick>
}
 800091a:	bd08      	pop	{r3, pc}

0800091c <spi_flash_gpio_init>:
/** =============================================================
 *  Initialization Function
    ============================================================= */

void spi_flash_gpio_init()
{
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
	// Initialize the MOSI and MISO pins
	GPIO_InitTypeDef spi_pins_init_struct = {0};
 8000920:	2400      	movs	r4, #0
 8000922:	9405      	str	r4, [sp, #20]
 8000924:	9406      	str	r4, [sp, #24]
 8000926:	9407      	str	r4, [sp, #28]
 8000928:	9408      	str	r4, [sp, #32]
 800092a:	9409      	str	r4, [sp, #36]	@ 0x24

	spi_pins_init_struct.Pin = MOSI_PIN |MISO_PIN;
 800092c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000930:	9305      	str	r3, [sp, #20]
	spi_pins_init_struct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	9306      	str	r3, [sp, #24]
	spi_pins_init_struct.Pull = GPIO_NOPULL;
	spi_pins_init_struct.Speed = GPIO_SPEED_HIGH;
 8000936:	2503      	movs	r5, #3
 8000938:	9508      	str	r5, [sp, #32]
	spi_pins_init_struct.Alternate = GPIO_AF5_SPI2;			// From Table 13 of stm32f769xx_Datasheet
 800093a:	2305      	movs	r3, #5
 800093c:	9309      	str	r3, [sp, #36]	@ 0x24
	HAL_GPIO_Init(MOSI_MISO_PORT, &spi_pins_init_struct);
 800093e:	a905      	add	r1, sp, #20
 8000940:	4814      	ldr	r0, [pc, #80]	@ (8000994 <spi_flash_gpio_init+0x78>)
 8000942:	f000 f9cd 	bl	8000ce0 <HAL_GPIO_Init>

	// Initialize the SCLK PIN
	spi_pins_init_struct.Pin = SCLK_PIN;
 8000946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094a:	9305      	str	r3, [sp, #20]

	HAL_GPIO_Init(SCLK_PORT, &spi_pins_init_struct);
 800094c:	a905      	add	r1, sp, #20
 800094e:	4812      	ldr	r0, [pc, #72]	@ (8000998 <spi_flash_gpio_init+0x7c>)
 8000950:	f000 f9c6 	bl	8000ce0 <HAL_GPIO_Init>

	// Initialize the NSS Pins as normal GPIO Pins

	GPIO_InitTypeDef nss_control_pin_init_struct = {0};
 8000954:	9400      	str	r4, [sp, #0]
 8000956:	9401      	str	r4, [sp, #4]
 8000958:	9402      	str	r4, [sp, #8]
 800095a:	9403      	str	r4, [sp, #12]
 800095c:	9404      	str	r4, [sp, #16]

	nss_control_pin_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	9301      	str	r3, [sp, #4]
	nss_control_pin_init_struct.Pull = GPIO_NOPULL;
	nss_control_pin_init_struct.Speed = GPIO_SPEED_HIGH;
 8000962:	9503      	str	r5, [sp, #12]

	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000964:	e011      	b.n	800098a <spi_flash_gpio_init+0x6e>
	{
		nss_control_pin_init_struct.Pin = cartridge_nss_pin_numbers[i];
 8000966:	4d0d      	ldr	r5, [pc, #52]	@ (800099c <spi_flash_gpio_init+0x80>)
 8000968:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 800096c:	9300      	str	r3, [sp, #0]
		HAL_GPIO_Init(cartridge_nss_ports[i], &nss_control_pin_init_struct);
 800096e:	eb05 0684 	add.w	r6, r5, r4, lsl #2
 8000972:	4669      	mov	r1, sp
 8000974:	68b0      	ldr	r0, [r6, #8]
 8000976:	f000 f9b3 	bl	8000ce0 <HAL_GPIO_Init>

		// MAKE SURE IT IS HIGH TO START
		HAL_GPIO_WritePin(cartridge_nss_ports[i], cartridge_nss_pin_numbers[i], GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8000980:	68b0      	ldr	r0, [r6, #8]
 8000982:	f000 faaf 	bl	8000ee4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i<MAX_NUMBER_OF_CARTRIDGES; ++i)
 8000986:	3401      	adds	r4, #1
 8000988:	b2e4      	uxtb	r4, r4
 800098a:	2c02      	cmp	r4, #2
 800098c:	d9eb      	bls.n	8000966 <spi_flash_gpio_init+0x4a>
	}

}
 800098e:	b00a      	add	sp, #40	@ 0x28
 8000990:	bd70      	pop	{r4, r5, r6, pc}
 8000992:	bf00      	nop
 8000994:	40020400 	.word	0x40020400
 8000998:	40020000 	.word	0x40020000
 800099c:	20000000 	.word	0x20000000

080009a0 <spi_flash_interface_initialize_SPI>:

void spi_flash_interface_initialize_SPI()
{
 80009a0:	b508      	push	{r3, lr}
	spi_flash_gpio_init();
 80009a2:	f7ff ffbb 	bl	800091c <spi_flash_gpio_init>

	flash_spi_handle.Instance = SPI2;
 80009a6:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <spi_flash_interface_initialize_SPI+0x38>)
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <spi_flash_interface_initialize_SPI+0x3c>)
 80009aa:	6003      	str	r3, [r0, #0]
	flash_spi_handle.Init.Mode = SPI_MODE_MASTER; // Set master mode
 80009ac:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80009b0:	6043      	str	r3, [r0, #4]
	flash_spi_handle.Init.TIMode = SPI_TIMODE_DISABLE; // Use Motorola mode, not TI mode
 80009b2:	2300      	movs	r3, #0
 80009b4:	6243      	str	r3, [r0, #36]	@ 0x24
	flash_spi_handle.Init.Direction = SPI_DIRECTION_2LINES; //Subject to change?
 80009b6:	6083      	str	r3, [r0, #8]
	flash_spi_handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b8:	6203      	str	r3, [r0, #32]
	flash_spi_handle.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009be:	60c2      	str	r2, [r0, #12]
	flash_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c0:	6103      	str	r3, [r0, #16]
	flash_spi_handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c2:	6143      	str	r3, [r0, #20]
	flash_spi_handle.Init.NSS = SPI_NSS_SOFT;
 80009c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c8:	6182      	str	r2, [r0, #24]
	flash_spi_handle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009ca:	6343      	str	r3, [r0, #52]	@ 0x34
	flash_spi_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009cc:	2338      	movs	r3, #56	@ 0x38
 80009ce:	61c3      	str	r3, [r0, #28]

	HAL_SPI_Init(&flash_spi_handle);
 80009d0:	f000 fe1f 	bl	8001612 <HAL_SPI_Init>
}
 80009d4:	bd08      	pop	{r3, pc}
 80009d6:	bf00      	nop
 80009d8:	20000098 	.word	0x20000098
 80009dc:	40003800 	.word	0x40003800

080009e0 <HAL_UART_MspInit>:
UART_HandleTypeDef USB_UART;

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80009e0:	b530      	push	{r4, r5, lr}
 80009e2:	b08b      	sub	sp, #44	@ 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 80009e4:	6803      	ldr	r3, [r0, #0]
 80009e6:	4a2e      	ldr	r2, [pc, #184]	@ (8000aa0 <HAL_UART_MspInit+0xc0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d004      	beq.n	80009f6 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 80009ec:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa4 <HAL_UART_MspInit+0xc4>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d02c      	beq.n	8000a4c <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 80009f2:	b00b      	add	sp, #44	@ 0x2c
 80009f4:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 80009f6:	4c2c      	ldr	r4, [pc, #176]	@ (8000aa8 <HAL_UART_MspInit+0xc8>)
 80009f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8000a00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000a0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000a20:	4d22      	ldr	r5, [pc, #136]	@ (8000aac <HAL_UART_MspInit+0xcc>)
 8000a22:	a905      	add	r1, sp, #20
 8000a24:	4628      	mov	r0, r5
 8000a26:	f000 f95b 	bl	8000ce0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a2e:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000a30:	a905      	add	r1, sp, #20
 8000a32:	4628      	mov	r0, r5
 8000a34:	f000 f954 	bl	8000ce0 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000a38:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000a3a:	f043 0310 	orr.w	r3, r3, #16
 8000a3e:	6463      	str	r3, [r4, #68]	@ 0x44
 8000a40:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000a42:	f003 0310 	and.w	r3, r3, #16
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	9b02      	ldr	r3, [sp, #8]
 8000a4a:	e7d2      	b.n	80009f2 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000a4c:	4c16      	ldr	r4, [pc, #88]	@ (8000aa8 <HAL_UART_MspInit+0xc8>)
 8000a4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6323      	str	r3, [r4, #48]	@ 0x30
 8000a56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	9303      	str	r3, [sp, #12]
 8000a5e:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000a60:	2340      	movs	r3, #64	@ 0x40
 8000a62:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a70:	2308      	movs	r3, #8
 8000a72:	9309      	str	r3, [sp, #36]	@ 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000a74:	4d0e      	ldr	r5, [pc, #56]	@ (8000ab0 <HAL_UART_MspInit+0xd0>)
 8000a76:	a905      	add	r1, sp, #20
 8000a78:	4628      	mov	r0, r5
 8000a7a:	f000 f931 	bl	8000ce0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a7e:	2380      	movs	r3, #128	@ 0x80
 8000a80:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000a82:	a905      	add	r1, sp, #20
 8000a84:	4628      	mov	r0, r5
 8000a86:	f000 f92b 	bl	8000ce0 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000a8a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000a8c:	f043 0320 	orr.w	r3, r3, #32
 8000a90:	6463      	str	r3, [r4, #68]	@ 0x44
 8000a92:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000a94:	f003 0320 	and.w	r3, r3, #32
 8000a98:	9304      	str	r3, [sp, #16]
 8000a9a:	9b04      	ldr	r3, [sp, #16]
}
 8000a9c:	e7a9      	b.n	80009f2 <HAL_UART_MspInit+0x12>
 8000a9e:	bf00      	nop
 8000aa0:	40011000 	.word	0x40011000
 8000aa4:	40011400 	.word	0x40011400
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000ab4:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000ab6:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000ab8:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	2200      	movs	r2, #0
 8000abc:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000abe:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000ac0:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000ac2:	210c      	movs	r1, #12
 8000ac4:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000ac6:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000ac8:	f001 f9bc 	bl	8001e44 <HAL_UART_Init>
}
 8000acc:	bd08      	pop	{r3, pc}
	...

08000ad0 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000ad0:	b510      	push	{r4, lr}
 8000ad2:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000ad4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad8:	b292      	uxth	r2, r2
 8000ada:	4802      	ldr	r0, [pc, #8]	@ (8000ae4 <_write+0x14>)
 8000adc:	f001 f893 	bl	8001c06 <HAL_UART_Transmit>
	return len;
}
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	bd10      	pop	{r4, pc}
 8000ae4:	200000fc 	.word	0x200000fc

08000ae8 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000ae8:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000aea:	2200      	movs	r2, #0
 8000aec:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	2201      	movs	r2, #1
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <_read+0x18>)
 8000af6:	f001 f8e4 	bl	8001cc2 <HAL_UART_Receive>
	return len;
}
 8000afa:	2001      	movs	r0, #1
 8000afc:	bd08      	pop	{r3, pc}
 8000afe:	bf00      	nop
 8000b00:	200000fc 	.word	0x200000fc

08000b04 <_close>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3
__attribute__((weak)) void _close(void){}
 8000b04:	4770      	bx	lr

08000b06 <_lseek>:
__attribute__((weak)) void _lseek(void){}
 8000b06:	4770      	bx	lr

08000b08 <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8000b08:	4770      	bx	lr

08000b0a <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 8000b0a:	4770      	bx	lr

08000b0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b0c:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000b10:	480d      	ldr	r0, [pc, #52]	@ (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490e      	ldr	r1, [pc, #56]	@ (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0e      	ldr	r2, [pc, #56]	@ (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0b      	ldr	r2, [pc, #44]	@ (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0b      	ldr	r4, [pc, #44]	@ (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b36:	f000 f813 	bl	8000b60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b3a:	f001 fcb7 	bl	80024ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3e:	f7ff fcf7 	bl	8000530 <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   r0, =_estack
 8000b44:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000b50:	080029e0 	.word	0x080029e0
  ldr r2, =_sbss
 8000b54:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000b58:	200002d8 	.word	0x200002d8

08000b5c <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4a03      	ldr	r2, [pc, #12]	@ (8000b70 <SystemInit+0x10>)
 8000b62:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000b66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000b74:	4770      	bx	lr
	...

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <HAL_InitTick+0x40>)
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b88:	4a0c      	ldr	r2, [pc, #48]	@ (8000bbc <HAL_InitTick+0x44>)
 8000b8a:	6810      	ldr	r0, [r2, #0]
 8000b8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b90:	f000 f892 	bl	8000cb8 <HAL_SYSTICK_Config>
 8000b94:	b968      	cbnz	r0, 8000bb2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	2c0f      	cmp	r4, #15
 8000b98:	d901      	bls.n	8000b9e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	e00a      	b.n	8000bb4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4621      	mov	r1, r4
 8000ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba6:	f000 f877 	bl	8000c98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000baa:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <HAL_InitTick+0x40>)
 8000bac:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2000      	movs	r0, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000bb2:	2001      	movs	r0, #1
}
 8000bb4:	bd10      	pop	{r4, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000018 	.word	0x20000018
 8000bbc:	20000014 	.word	0x20000014

08000bc0 <HAL_Init>:
{
 8000bc0:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <HAL_Init+0x28>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000bca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000bd2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f84d 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f7ff ffcc 	bl	8000b78 <HAL_InitTick>
  HAL_MspInit();
 8000be0:	f7ff ffc8 	bl	8000b74 <HAL_MspInit>
}
 8000be4:	2000      	movs	r0, #0
 8000be6:	bd08      	pop	{r3, pc}
 8000be8:	40023c00 	.word	0x40023c00

08000bec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bec:	4a03      	ldr	r2, [pc, #12]	@ (8000bfc <HAL_IncTick+0x10>)
 8000bee:	6811      	ldr	r1, [r2, #0]
 8000bf0:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <HAL_IncTick+0x14>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000184 	.word	0x20000184
 8000c00:	20000018 	.word	0x20000018

08000c04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c04:	4b01      	ldr	r3, [pc, #4]	@ (8000c0c <HAL_GetTick+0x8>)
 8000c06:	6818      	ldr	r0, [r3, #0]
}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000184 	.word	0x20000184

08000c10 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8000c10:	2800      	cmp	r0, #0
 8000c12:	db04      	blt.n	8000c1e <__NVIC_SetPriority+0xe>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	0109      	lsls	r1, r1, #4
 8000c16:	b2c9      	uxtb	r1, r1
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <__NVIC_SetPriority+0x1c>)
 8000c1a:	5419      	strb	r1, [r3, r0]
 8000c1c:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	f000 000f 	and.w	r0, r0, #15
 8000c22:	0109      	lsls	r1, r1, #4
 8000c24:	b2c9      	uxtb	r1, r1
 8000c26:	4b02      	ldr	r3, [pc, #8]	@ (8000c30 <__NVIC_SetPriority+0x20>)
 8000c28:	5419      	strb	r1, [r3, r0]
}
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e400 	.word	0xe000e400
 8000c30:	e000ed14 	.word	0xe000ed14

08000c34 <NVIC_EncodePriority>:
{
 8000c34:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c36:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3a:	f1c0 0c07 	rsb	ip, r0, #7
 8000c3e:	f1bc 0f04 	cmp.w	ip, #4
 8000c42:	bf28      	it	cs
 8000c44:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c48:	1d03      	adds	r3, r0, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d90f      	bls.n	8000c6e <NVIC_EncodePriority+0x3a>
 8000c4e:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 3eff 	mov.w	lr, #4294967295
 8000c54:	fa0e f00c 	lsl.w	r0, lr, ip
 8000c58:	ea21 0100 	bic.w	r1, r1, r0
 8000c5c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000c62:	ea22 020e 	bic.w	r2, r2, lr
}
 8000c66:	ea41 0002 	orr.w	r0, r1, r2
 8000c6a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e7ee      	b.n	8000c50 <NVIC_EncodePriority+0x1c>
	...

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4906      	ldr	r1, [pc, #24]	@ (8000c90 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000c76:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c78:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000c7c:	041b      	lsls	r3, r3, #16
 8000c7e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	0200      	lsls	r0, r0, #8
 8000c82:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c86:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000c88:	4a02      	ldr	r2, [pc, #8]	@ (8000c94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c8a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000c8c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	05fa0000 	.word	0x05fa0000

08000c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c98:	b510      	push	{r4, lr}
 8000c9a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <HAL_NVIC_SetPriority+0x1c>)
 8000c9e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000ca4:	f7ff ffc6 	bl	8000c34 <NVIC_EncodePriority>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	4620      	mov	r0, r4
 8000cac:	f7ff ffb0 	bl	8000c10 <__NVIC_SetPriority>
}
 8000cb0:	bd10      	pop	{r4, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	3801      	subs	r0, #1
 8000cba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cbe:	d20b      	bcs.n	8000cd8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000cc4:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <HAL_SYSTICK_Config+0x24>)
 8000cc8:	21f0      	movs	r1, #240	@ 0xf0
 8000cca:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cce:	2000      	movs	r0, #0
 8000cd0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	2207      	movs	r2, #7
 8000cd4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cd8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	f200 80f4 	bhi.w	8000ed0 <HAL_GPIO_Init+0x1f0>
{
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	e066      	b.n	8000dbc <HAL_GPIO_Init+0xdc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cee:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cf0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000cf4:	2403      	movs	r4, #3
 8000cf6:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cfa:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cfe:	68cc      	ldr	r4, [r1, #12]
 8000d00:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d04:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000d06:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d08:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	684a      	ldr	r2, [r1, #4]
 8000d10:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000d14:	409a      	lsls	r2, r3
 8000d16:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000d18:	6042      	str	r2, [r0, #4]
 8000d1a:	e05d      	b.n	8000dd8 <HAL_GPIO_Init+0xf8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d1c:	08dc      	lsrs	r4, r3, #3
 8000d1e:	3408      	adds	r4, #8
 8000d20:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d24:	f003 0507 	and.w	r5, r3, #7
 8000d28:	00ad      	lsls	r5, r5, #2
 8000d2a:	f04f 0e0f 	mov.w	lr, #15
 8000d2e:	fa0e fe05 	lsl.w	lr, lr, r5
 8000d32:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d36:	690a      	ldr	r2, [r1, #16]
 8000d38:	40aa      	lsls	r2, r5
 8000d3a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8000d3e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000d42:	e05d      	b.n	8000e00 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d44:	2209      	movs	r2, #9
 8000d46:	e000      	b.n	8000d4a <HAL_GPIO_Init+0x6a>
 8000d48:	2200      	movs	r2, #0
 8000d4a:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d4e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d50:	3402      	adds	r4, #2
 8000d52:	4d60      	ldr	r5, [pc, #384]	@ (8000ed4 <HAL_GPIO_Init+0x1f4>)
 8000d54:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d58:	4a5f      	ldr	r2, [pc, #380]	@ (8000ed8 <HAL_GPIO_Init+0x1f8>)
 8000d5a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d5c:	ea6f 020c 	mvn.w	r2, ip
 8000d60:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d64:	684e      	ldr	r6, [r1, #4]
 8000d66:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000d6a:	d001      	beq.n	8000d70 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000d6c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000d70:	4c59      	ldr	r4, [pc, #356]	@ (8000ed8 <HAL_GPIO_Init+0x1f8>)
 8000d72:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000d74:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d76:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d7a:	684e      	ldr	r6, [r1, #4]
 8000d7c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000d80:	d001      	beq.n	8000d86 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000d82:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000d86:	4c54      	ldr	r4, [pc, #336]	@ (8000ed8 <HAL_GPIO_Init+0x1f8>)
 8000d88:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000d8a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d8c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d90:	684e      	ldr	r6, [r1, #4]
 8000d92:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000d96:	d001      	beq.n	8000d9c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000d98:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000d9c:	4c4e      	ldr	r4, [pc, #312]	@ (8000ed8 <HAL_GPIO_Init+0x1f8>)
 8000d9e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000da2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000da4:	684d      	ldr	r5, [r1, #4]
 8000da6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000daa:	d001      	beq.n	8000db0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000dac:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000db0:	4c49      	ldr	r4, [pc, #292]	@ (8000ed8 <HAL_GPIO_Init+0x1f8>)
 8000db2:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000db4:	3301      	adds	r3, #1
 8000db6:	2b0f      	cmp	r3, #15
 8000db8:	f200 8088 	bhi.w	8000ecc <HAL_GPIO_Init+0x1ec>
    ioposition = ((uint32_t)0x01) << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc0:	680c      	ldr	r4, [r1, #0]
 8000dc2:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000dc6:	ea32 0404 	bics.w	r4, r2, r4
 8000dca:	d1f3      	bne.n	8000db4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dcc:	684c      	ldr	r4, [r1, #4]
 8000dce:	f004 0403 	and.w	r4, r4, #3
 8000dd2:	3c01      	subs	r4, #1
 8000dd4:	2c01      	cmp	r4, #1
 8000dd6:	d98a      	bls.n	8000cee <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd8:	684a      	ldr	r2, [r1, #4]
 8000dda:	f002 0203 	and.w	r2, r2, #3
 8000dde:	2a03      	cmp	r2, #3
 8000de0:	d009      	beq.n	8000df6 <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8000de2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000de4:	005d      	lsls	r5, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	40aa      	lsls	r2, r5
 8000dea:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000dee:	688a      	ldr	r2, [r1, #8]
 8000df0:	40aa      	lsls	r2, r5
 8000df2:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000df4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	684a      	ldr	r2, [r1, #4]
 8000df8:	f002 0203 	and.w	r2, r2, #3
 8000dfc:	2a02      	cmp	r2, #2
 8000dfe:	d08d      	beq.n	8000d1c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000e00:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e02:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e0c:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e10:	684a      	ldr	r2, [r1, #4]
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e1a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000e1c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e1e:	684a      	ldr	r2, [r1, #4]
 8000e20:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000e24:	d0c6      	beq.n	8000db4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4a2d      	ldr	r2, [pc, #180]	@ (8000edc <HAL_GPIO_Init+0x1fc>)
 8000e28:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000e2a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000e2e:	6454      	str	r4, [r2, #68]	@ 0x44
 8000e30:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000e32:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000e36:	9201      	str	r2, [sp, #4]
 8000e38:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000e3a:	089c      	lsrs	r4, r3, #2
 8000e3c:	1ca5      	adds	r5, r4, #2
 8000e3e:	4a25      	ldr	r2, [pc, #148]	@ (8000ed4 <HAL_GPIO_Init+0x1f4>)
 8000e40:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e44:	f003 0e03 	and.w	lr, r3, #3
 8000e48:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e52:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e56:	4a22      	ldr	r2, [pc, #136]	@ (8000ee0 <HAL_GPIO_Init+0x200>)
 8000e58:	4290      	cmp	r0, r2
 8000e5a:	f43f af75 	beq.w	8000d48 <HAL_GPIO_Init+0x68>
 8000e5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d022      	beq.n	8000eac <HAL_GPIO_Init+0x1cc>
 8000e66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e6a:	4290      	cmp	r0, r2
 8000e6c:	d020      	beq.n	8000eb0 <HAL_GPIO_Init+0x1d0>
 8000e6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d01e      	beq.n	8000eb4 <HAL_GPIO_Init+0x1d4>
 8000e76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e7a:	4290      	cmp	r0, r2
 8000e7c:	d01c      	beq.n	8000eb8 <HAL_GPIO_Init+0x1d8>
 8000e7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d01a      	beq.n	8000ebc <HAL_GPIO_Init+0x1dc>
 8000e86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e8a:	4290      	cmp	r0, r2
 8000e8c:	d018      	beq.n	8000ec0 <HAL_GPIO_Init+0x1e0>
 8000e8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d016      	beq.n	8000ec4 <HAL_GPIO_Init+0x1e4>
 8000e96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	d014      	beq.n	8000ec8 <HAL_GPIO_Init+0x1e8>
 8000e9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ea2:	4290      	cmp	r0, r2
 8000ea4:	f43f af4e 	beq.w	8000d44 <HAL_GPIO_Init+0x64>
 8000ea8:	220a      	movs	r2, #10
 8000eaa:	e74e      	b.n	8000d4a <HAL_GPIO_Init+0x6a>
 8000eac:	2201      	movs	r2, #1
 8000eae:	e74c      	b.n	8000d4a <HAL_GPIO_Init+0x6a>
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	e74a      	b.n	8000d4a <HAL_GPIO_Init+0x6a>
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	e748      	b.n	8000d4a <HAL_GPIO_Init+0x6a>
 8000eb8:	2204      	movs	r2, #4
 8000eba:	e746      	b.n	8000d4a <HAL_GPIO_Init+0x6a>
 8000ebc:	2205      	movs	r2, #5
 8000ebe:	e744      	b.n	8000d4a <HAL_GPIO_Init+0x6a>
 8000ec0:	2206      	movs	r2, #6
 8000ec2:	e742      	b.n	8000d4a <HAL_GPIO_Init+0x6a>
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	e740      	b.n	8000d4a <HAL_GPIO_Init+0x6a>
 8000ec8:	2208      	movs	r2, #8
 8000eca:	e73e      	b.n	8000d4a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd70      	pop	{r4, r5, r6, pc}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40013c00 	.word	0x40013c00
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee4:	b10a      	cbz	r2, 8000eea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee6:	6181      	str	r1, [r0, #24]
 8000ee8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000eea:	0409      	lsls	r1, r1, #16
 8000eec:	6181      	str	r1, [r0, #24]
  }
}
 8000eee:	4770      	bx	lr

08000ef0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <HAL_PWREx_EnableOverDrive+0x74>)
 8000ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ef8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000efc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f08:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <HAL_PWREx_EnableOverDrive+0x78>)
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f12:	f7ff fe77 	bl	8000c04 <HAL_GetTick>
 8000f16:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <HAL_PWREx_EnableOverDrive+0x78>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000f20:	d108      	bne.n	8000f34 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f22:	f7ff fe6f 	bl	8000c04 <HAL_GetTick>
 8000f26:	1b00      	subs	r0, r0, r4
 8000f28:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000f2c:	d9f4      	bls.n	8000f18 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000f2e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000f30:	b002      	add	sp, #8
 8000f32:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f34:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <HAL_PWREx_EnableOverDrive+0x78>)
 8000f36:	6813      	ldr	r3, [r2, #0]
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f3c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000f3e:	f7ff fe61 	bl	8000c04 <HAL_GetTick>
 8000f42:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <HAL_PWREx_EnableOverDrive+0x78>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f4c:	d107      	bne.n	8000f5e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f4e:	f7ff fe59 	bl	8000c04 <HAL_GetTick>
 8000f52:	1b00      	subs	r0, r0, r4
 8000f54:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000f58:	d9f4      	bls.n	8000f44 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	e7e8      	b.n	8000f30 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000f5e:	2000      	movs	r0, #0
 8000f60:	e7e6      	b.n	8000f30 <HAL_PWREx_EnableOverDrive+0x40>
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	f000 8206 	beq.w	800137e <HAL_RCC_OscConfig+0x412>
{
 8000f72:	b570      	push	{r4, r5, r6, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f78:	6803      	ldr	r3, [r0, #0]
 8000f7a:	f013 0f01 	tst.w	r3, #1
 8000f7e:	d029      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f80:	4b95      	ldr	r3, [pc, #596]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d01a      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f8c:	4b92      	ldr	r3, [pc, #584]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 030c 	and.w	r3, r3, #12
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d00f      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f98:	6863      	ldr	r3, [r4, #4]
 8000f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f9e:	d040      	beq.n	8001022 <HAL_RCC_OscConfig+0xb6>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d154      	bne.n	800104e <HAL_RCC_OscConfig+0xe2>
 8000fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e039      	b.n	800102c <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fb8:	4b87      	ldr	r3, [pc, #540]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000fc0:	d0ea      	beq.n	8000f98 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc2:	4b85      	ldr	r3, [pc, #532]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000fca:	d003      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x68>
 8000fcc:	6863      	ldr	r3, [r4, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 81d7 	beq.w	8001382 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	f013 0f02 	tst.w	r3, #2
 8000fda:	d074      	beq.n	80010c6 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f013 0f0c 	tst.w	r3, #12
 8000fe4:	d05e      	beq.n	80010a4 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d053      	beq.n	800109a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ff2:	68e3      	ldr	r3, [r4, #12]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 8089 	beq.w	800110c <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ffa:	4a77      	ldr	r2, [pc, #476]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	6813      	ldr	r3, [r2, #0]
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001004:	f7ff fdfe 	bl	8000c04 <HAL_GetTick>
 8001008:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100a:	4b73      	ldr	r3, [pc, #460]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f013 0f02 	tst.w	r3, #2
 8001012:	d172      	bne.n	80010fa <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001014:	f7ff fdf6 	bl	8000c04 <HAL_GetTick>
 8001018:	1b40      	subs	r0, r0, r5
 800101a:	2802      	cmp	r0, #2
 800101c:	d9f5      	bls.n	800100a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800101e:	2003      	movs	r0, #3
 8001020:	e1b4      	b.n	800138c <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001022:	4a6d      	ldr	r2, [pc, #436]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001024:	6813      	ldr	r3, [r2, #0]
 8001026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800102a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102c:	6863      	ldr	r3, [r4, #4]
 800102e:	b32b      	cbz	r3, 800107c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001030:	f7ff fde8 	bl	8000c04 <HAL_GetTick>
 8001034:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001036:	4b68      	ldr	r3, [pc, #416]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800103e:	d1c9      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fde0 	bl	8000c04 <HAL_GetTick>
 8001044:	1b40      	subs	r0, r0, r5
 8001046:	2864      	cmp	r0, #100	@ 0x64
 8001048:	d9f5      	bls.n	8001036 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800104a:	2003      	movs	r0, #3
 800104c:	e19e      	b.n	800138c <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001052:	d009      	beq.n	8001068 <HAL_RCC_OscConfig+0xfc>
 8001054:	4b60      	ldr	r3, [pc, #384]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e7e1      	b.n	800102c <HAL_RCC_OscConfig+0xc0>
 8001068:	4b5b      	ldr	r3, [pc, #364]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e7d7      	b.n	800102c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 800107c:	f7ff fdc2 	bl	8000c04 <HAL_GetTick>
 8001080:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001082:	4b55      	ldr	r3, [pc, #340]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800108a:	d0a3      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800108c:	f7ff fdba 	bl	8000c04 <HAL_GetTick>
 8001090:	1b40      	subs	r0, r0, r5
 8001092:	2864      	cmp	r0, #100	@ 0x64
 8001094:	d9f5      	bls.n	8001082 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8001096:	2003      	movs	r0, #3
 8001098:	e178      	b.n	800138c <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800109a:	4b4f      	ldr	r3, [pc, #316]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80010a2:	d1a6      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a4:	4b4c      	ldr	r3, [pc, #304]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f013 0f02 	tst.w	r3, #2
 80010ac:	d003      	beq.n	80010b6 <HAL_RCC_OscConfig+0x14a>
 80010ae:	68e3      	ldr	r3, [r4, #12]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	f040 8168 	bne.w	8001386 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b6:	4a48      	ldr	r2, [pc, #288]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	6813      	ldr	r3, [r2, #0]
 80010ba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80010be:	6921      	ldr	r1, [r4, #16]
 80010c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010c4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	f013 0f08 	tst.w	r3, #8
 80010cc:	d046      	beq.n	800115c <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010ce:	6963      	ldr	r3, [r4, #20]
 80010d0:	b383      	cbz	r3, 8001134 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d2:	4a41      	ldr	r2, [pc, #260]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fd92 	bl	8000c04 <HAL_GetTick>
 80010e0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	4b3d      	ldr	r3, [pc, #244]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010e6:	f013 0f02 	tst.w	r3, #2
 80010ea:	d137      	bne.n	800115c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fd8a 	bl	8000c04 <HAL_GetTick>
 80010f0:	1b40      	subs	r0, r0, r5
 80010f2:	2802      	cmp	r0, #2
 80010f4:	d9f5      	bls.n	80010e2 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80010f6:	2003      	movs	r0, #3
 80010f8:	e148      	b.n	800138c <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fa:	4a37      	ldr	r2, [pc, #220]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	6813      	ldr	r3, [r2, #0]
 80010fe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001102:	6921      	ldr	r1, [r4, #16]
 8001104:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e7dc      	b.n	80010c6 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 800110c:	4a32      	ldr	r2, [pc, #200]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800110e:	6813      	ldr	r3, [r2, #0]
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001116:	f7ff fd75 	bl	8000c04 <HAL_GetTick>
 800111a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111c:	4b2e      	ldr	r3, [pc, #184]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f013 0f02 	tst.w	r3, #2
 8001124:	d0cf      	beq.n	80010c6 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001126:	f7ff fd6d 	bl	8000c04 <HAL_GetTick>
 800112a:	1b40      	subs	r0, r0, r5
 800112c:	2802      	cmp	r0, #2
 800112e:	d9f5      	bls.n	800111c <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8001130:	2003      	movs	r0, #3
 8001132:	e12b      	b.n	800138c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001134:	4a28      	ldr	r2, [pc, #160]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001136:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800113e:	f7ff fd61 	bl	8000c04 <HAL_GetTick>
 8001142:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001144:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001148:	f013 0f02 	tst.w	r3, #2
 800114c:	d006      	beq.n	800115c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114e:	f7ff fd59 	bl	8000c04 <HAL_GetTick>
 8001152:	1b40      	subs	r0, r0, r5
 8001154:	2802      	cmp	r0, #2
 8001156:	d9f5      	bls.n	8001144 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001158:	2003      	movs	r0, #3
 800115a:	e117      	b.n	800138c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	f013 0f04 	tst.w	r3, #4
 8001162:	d07d      	beq.n	8001260 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001164:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800116c:	d11e      	bne.n	80011ac <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001170:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001172:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001176:	641a      	str	r2, [r3, #64]	@ 0x40
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001182:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001184:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800118c:	d010      	beq.n	80011b0 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118e:	68a3      	ldr	r3, [r4, #8]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d025      	beq.n	80011e0 <HAL_RCC_OscConfig+0x274>
 8001194:	2b00      	cmp	r3, #0
 8001196:	d13b      	bne.n	8001210 <HAL_RCC_OscConfig+0x2a4>
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800119a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800119c:	f022 0201 	bic.w	r2, r2, #1
 80011a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80011a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80011a4:	f022 0204 	bic.w	r2, r2, #4
 80011a8:	671a      	str	r2, [r3, #112]	@ 0x70
 80011aa:	e01e      	b.n	80011ea <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 80011ac:	2500      	movs	r5, #0
 80011ae:	e7e9      	b.n	8001184 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_RCC_OscConfig+0x270>)
 80011b2:	6813      	ldr	r3, [r2, #0]
 80011b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80011ba:	f7ff fd23 	bl	8000c04 <HAL_GetTick>
 80011be:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80011c8:	d1e1      	bne.n	800118e <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ca:	f7ff fd1b 	bl	8000c04 <HAL_GetTick>
 80011ce:	1b80      	subs	r0, r0, r6
 80011d0:	2864      	cmp	r0, #100	@ 0x64
 80011d2:	d9f5      	bls.n	80011c0 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 80011d4:	2003      	movs	r0, #3
 80011d6:	e0d9      	b.n	800138c <HAL_RCC_OscConfig+0x420>
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e0:	4a72      	ldr	r2, [pc, #456]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 80011e2:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011ea:	68a3      	ldr	r3, [r4, #8]
 80011ec:	b333      	cbz	r3, 800123c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ee:	f7ff fd09 	bl	8000c04 <HAL_GetTick>
 80011f2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f4:	4b6d      	ldr	r3, [pc, #436]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 80011f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f8:	f013 0f02 	tst.w	r3, #2
 80011fc:	d12f      	bne.n	800125e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fe:	f7ff fd01 	bl	8000c04 <HAL_GetTick>
 8001202:	1b80      	subs	r0, r0, r6
 8001204:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001208:	4298      	cmp	r0, r3
 800120a:	d9f3      	bls.n	80011f4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800120c:	2003      	movs	r0, #3
 800120e:	e0bd      	b.n	800138c <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	2b05      	cmp	r3, #5
 8001212:	d009      	beq.n	8001228 <HAL_RCC_OscConfig+0x2bc>
 8001214:	4b65      	ldr	r3, [pc, #404]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 8001216:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001218:	f022 0201 	bic.w	r2, r2, #1
 800121c:	671a      	str	r2, [r3, #112]	@ 0x70
 800121e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001220:	f022 0204 	bic.w	r2, r2, #4
 8001224:	671a      	str	r2, [r3, #112]	@ 0x70
 8001226:	e7e0      	b.n	80011ea <HAL_RCC_OscConfig+0x27e>
 8001228:	4b60      	ldr	r3, [pc, #384]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 800122a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800122c:	f042 0204 	orr.w	r2, r2, #4
 8001230:	671a      	str	r2, [r3, #112]	@ 0x70
 8001232:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	671a      	str	r2, [r3, #112]	@ 0x70
 800123a:	e7d6      	b.n	80011ea <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff fce2 	bl	8000c04 <HAL_GetTick>
 8001240:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001242:	4b5a      	ldr	r3, [pc, #360]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 8001244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001246:	f013 0f02 	tst.w	r3, #2
 800124a:	d008      	beq.n	800125e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124c:	f7ff fcda 	bl	8000c04 <HAL_GetTick>
 8001250:	1b80      	subs	r0, r0, r6
 8001252:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001256:	4298      	cmp	r0, r3
 8001258:	d9f3      	bls.n	8001242 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800125a:	2003      	movs	r0, #3
 800125c:	e096      	b.n	800138c <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800125e:	b9fd      	cbnz	r5, 80012a0 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001260:	69a3      	ldr	r3, [r4, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8091 	beq.w	800138a <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001268:	4a50      	ldr	r2, [pc, #320]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 800126a:	6892      	ldr	r2, [r2, #8]
 800126c:	f002 020c 	and.w	r2, r2, #12
 8001270:	2a08      	cmp	r2, #8
 8001272:	d059      	beq.n	8001328 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001274:	2b02      	cmp	r3, #2
 8001276:	d019      	beq.n	80012ac <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001278:	4a4c      	ldr	r2, [pc, #304]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fcbf 	bl	8000c04 <HAL_GetTick>
 8001286:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001288:	4b48      	ldr	r3, [pc, #288]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001290:	d048      	beq.n	8001324 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff fcb7 	bl	8000c04 <HAL_GetTick>
 8001296:	1b00      	subs	r0, r0, r4
 8001298:	2802      	cmp	r0, #2
 800129a:	d9f5      	bls.n	8001288 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800129c:	2003      	movs	r0, #3
 800129e:	e075      	b.n	800138c <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a0:	4a42      	ldr	r2, [pc, #264]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 80012a2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80012a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012aa:	e7d9      	b.n	8001260 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80012ac:	4a3f      	ldr	r2, [pc, #252]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 80012ae:	6813      	ldr	r3, [r2, #0]
 80012b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80012b6:	f7ff fca5 	bl	8000c04 <HAL_GetTick>
 80012ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012bc:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80012c4:	d006      	beq.n	80012d4 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c6:	f7ff fc9d 	bl	8000c04 <HAL_GetTick>
 80012ca:	1b40      	subs	r0, r0, r5
 80012cc:	2802      	cmp	r0, #2
 80012ce:	d9f5      	bls.n	80012bc <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80012d0:	2003      	movs	r0, #3
 80012d2:	e05b      	b.n	800138c <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d4:	69e3      	ldr	r3, [r4, #28]
 80012d6:	6a22      	ldr	r2, [r4, #32]
 80012d8:	4313      	orrs	r3, r2
 80012da:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80012dc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012e0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80012e2:	0852      	lsrs	r2, r2, #1
 80012e4:	3a01      	subs	r2, #1
 80012e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80012ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012f0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80012f2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80012f6:	4a2d      	ldr	r2, [pc, #180]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 80012f8:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80012fa:	6813      	ldr	r3, [r2, #0]
 80012fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001300:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001302:	f7ff fc7f 	bl	8000c04 <HAL_GetTick>
 8001306:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001310:	d106      	bne.n	8001320 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001312:	f7ff fc77 	bl	8000c04 <HAL_GetTick>
 8001316:	1b00      	subs	r0, r0, r4
 8001318:	2802      	cmp	r0, #2
 800131a:	d9f5      	bls.n	8001308 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 800131c:	2003      	movs	r0, #3
 800131e:	e035      	b.n	800138c <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001320:	2000      	movs	r0, #0
 8001322:	e033      	b.n	800138c <HAL_RCC_OscConfig+0x420>
 8001324:	2000      	movs	r0, #0
 8001326:	e031      	b.n	800138c <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 8001328:	4a20      	ldr	r2, [pc, #128]	@ (80013ac <HAL_RCC_OscConfig+0x440>)
 800132a:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800132c:	2b01      	cmp	r3, #1
 800132e:	d02f      	beq.n	8001390 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001330:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8001334:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001336:	428b      	cmp	r3, r1
 8001338:	d12c      	bne.n	8001394 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800133a:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 800133e:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001340:	428b      	cmp	r3, r1
 8001342:	d129      	bne.n	8001398 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001344:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001346:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800134a:	4013      	ands	r3, r2
 800134c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001350:	d124      	bne.n	800139c <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001352:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8001356:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001358:	085b      	lsrs	r3, r3, #1
 800135a:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800135c:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001360:	d11e      	bne.n	80013a0 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001362:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 8001366:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001368:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800136c:	d11a      	bne.n	80013a4 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800136e:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8001372:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001374:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001378:	d116      	bne.n	80013a8 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 800137a:	2000      	movs	r0, #0
 800137c:	e006      	b.n	800138c <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 800137e:	2001      	movs	r0, #1
}
 8001380:	4770      	bx	lr
        return HAL_ERROR;
 8001382:	2001      	movs	r0, #1
 8001384:	e002      	b.n	800138c <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 8001386:	2001      	movs	r0, #1
 8001388:	e000      	b.n	800138c <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 800138a:	2000      	movs	r0, #0
}
 800138c:	b002      	add	sp, #8
 800138e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001390:	2001      	movs	r0, #1
 8001392:	e7fb      	b.n	800138c <HAL_RCC_OscConfig+0x420>
 8001394:	2001      	movs	r0, #1
 8001396:	e7f9      	b.n	800138c <HAL_RCC_OscConfig+0x420>
 8001398:	2001      	movs	r0, #1
 800139a:	e7f7      	b.n	800138c <HAL_RCC_OscConfig+0x420>
 800139c:	2001      	movs	r0, #1
 800139e:	e7f5      	b.n	800138c <HAL_RCC_OscConfig+0x420>
 80013a0:	2001      	movs	r0, #1
 80013a2:	e7f3      	b.n	800138c <HAL_RCC_OscConfig+0x420>
 80013a4:	2001      	movs	r0, #1
 80013a6:	e7f1      	b.n	800138c <HAL_RCC_OscConfig+0x420>
 80013a8:	2001      	movs	r0, #1
 80013aa:	e7ef      	b.n	800138c <HAL_RCC_OscConfig+0x420>
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013b0:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013b2:	4b26      	ldr	r3, [pc, #152]	@ (800144c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d041      	beq.n	8001442 <HAL_RCC_GetSysClockFreq+0x92>
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d141      	bne.n	8001446 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013c2:	4b22      	ldr	r3, [pc, #136]	@ (800144c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80013d0:	d012      	beq.n	80013f8 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d2:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013d4:	6859      	ldr	r1, [r3, #4]
 80013d6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013da:	481d      	ldr	r0, [pc, #116]	@ (8001450 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013dc:	2300      	movs	r3, #0
 80013de:	fba1 0100 	umull	r0, r1, r1, r0
 80013e2:	f7fe ff29 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013ee:	3301      	adds	r3, #1
 80013f0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80013f2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80013f6:	e027      	b.n	8001448 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f8:	4b14      	ldr	r3, [pc, #80]	@ (800144c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013fa:	6858      	ldr	r0, [r3, #4]
 80013fc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001400:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001404:	ebbc 0c00 	subs.w	ip, ip, r0
 8001408:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800140c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001410:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001414:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001418:	ebb1 010c 	subs.w	r1, r1, ip
 800141c:	eb63 030e 	sbc.w	r3, r3, lr
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001426:	00c9      	lsls	r1, r1, #3
 8001428:	eb11 0c00 	adds.w	ip, r1, r0
 800142c:	f143 0300 	adc.w	r3, r3, #0
 8001430:	0299      	lsls	r1, r3, #10
 8001432:	2300      	movs	r3, #0
 8001434:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001438:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800143c:	f7fe fefc 	bl	8000238 <__aeabi_uldivmod>
 8001440:	e7d1      	b.n	80013e6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001442:	4803      	ldr	r0, [pc, #12]	@ (8001450 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001444:	e000      	b.n	8001448 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001446:	4803      	ldr	r0, [pc, #12]	@ (8001454 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001448:	bd08      	pop	{r3, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	017d7840 	.word	0x017d7840
 8001454:	00f42400 	.word	0x00f42400

08001458 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001458:	2800      	cmp	r0, #0
 800145a:	f000 80a0 	beq.w	800159e <HAL_RCC_ClockConfig+0x146>
{
 800145e:	b570      	push	{r4, r5, r6, lr}
 8001460:	460d      	mov	r5, r1
 8001462:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001464:	4b52      	ldr	r3, [pc, #328]	@ (80015b0 <HAL_RCC_ClockConfig+0x158>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	428b      	cmp	r3, r1
 800146e:	d20b      	bcs.n	8001488 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001470:	4a4f      	ldr	r2, [pc, #316]	@ (80015b0 <HAL_RCC_ClockConfig+0x158>)
 8001472:	6813      	ldr	r3, [r2, #0]
 8001474:	f023 030f 	bic.w	r3, r3, #15
 8001478:	430b      	orrs	r3, r1
 800147a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	428b      	cmp	r3, r1
 8001484:	f040 808d 	bne.w	80015a2 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	f013 0f02 	tst.w	r3, #2
 800148e:	d017      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001490:	f013 0f04 	tst.w	r3, #4
 8001494:	d004      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001496:	4a47      	ldr	r2, [pc, #284]	@ (80015b4 <HAL_RCC_ClockConfig+0x15c>)
 8001498:	6893      	ldr	r3, [r2, #8]
 800149a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800149e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	f013 0f08 	tst.w	r3, #8
 80014a6:	d004      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a8:	4a42      	ldr	r2, [pc, #264]	@ (80015b4 <HAL_RCC_ClockConfig+0x15c>)
 80014aa:	6893      	ldr	r3, [r2, #8]
 80014ac:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014b0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b2:	4a40      	ldr	r2, [pc, #256]	@ (80015b4 <HAL_RCC_ClockConfig+0x15c>)
 80014b4:	6893      	ldr	r3, [r2, #8]
 80014b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014ba:	68a1      	ldr	r1, [r4, #8]
 80014bc:	430b      	orrs	r3, r1
 80014be:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c0:	6823      	ldr	r3, [r4, #0]
 80014c2:	f013 0f01 	tst.w	r3, #1
 80014c6:	d031      	beq.n	800152c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c8:	6863      	ldr	r3, [r4, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d020      	beq.n	8001510 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d025      	beq.n	800151e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d2:	4a38      	ldr	r2, [pc, #224]	@ (80015b4 <HAL_RCC_ClockConfig+0x15c>)
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	f012 0f02 	tst.w	r2, #2
 80014da:	d064      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014dc:	4935      	ldr	r1, [pc, #212]	@ (80015b4 <HAL_RCC_ClockConfig+0x15c>)
 80014de:	688a      	ldr	r2, [r1, #8]
 80014e0:	f022 0203 	bic.w	r2, r2, #3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80014e8:	f7ff fb8c 	bl	8000c04 <HAL_GetTick>
 80014ec:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <HAL_RCC_ClockConfig+0x15c>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	6862      	ldr	r2, [r4, #4]
 80014f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014fc:	d016      	beq.n	800152c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014fe:	f7ff fb81 	bl	8000c04 <HAL_GetTick>
 8001502:	1b80      	subs	r0, r0, r6
 8001504:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001508:	4298      	cmp	r0, r3
 800150a:	d9f0      	bls.n	80014ee <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800150c:	2003      	movs	r0, #3
 800150e:	e045      	b.n	800159c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001510:	4a28      	ldr	r2, [pc, #160]	@ (80015b4 <HAL_RCC_ClockConfig+0x15c>)
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001518:	d1e0      	bne.n	80014dc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800151a:	2001      	movs	r0, #1
 800151c:	e03e      	b.n	800159c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151e:	4a25      	ldr	r2, [pc, #148]	@ (80015b4 <HAL_RCC_ClockConfig+0x15c>)
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001526:	d1d9      	bne.n	80014dc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001528:	2001      	movs	r0, #1
 800152a:	e037      	b.n	800159c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800152c:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_RCC_ClockConfig+0x158>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	42ab      	cmp	r3, r5
 8001536:	d90a      	bls.n	800154e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001538:	4a1d      	ldr	r2, [pc, #116]	@ (80015b0 <HAL_RCC_ClockConfig+0x158>)
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	f023 030f 	bic.w	r3, r3, #15
 8001540:	432b      	orrs	r3, r5
 8001542:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001544:	6813      	ldr	r3, [r2, #0]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	42ab      	cmp	r3, r5
 800154c:	d12d      	bne.n	80015aa <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	f013 0f04 	tst.w	r3, #4
 8001554:	d006      	beq.n	8001564 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001556:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <HAL_RCC_ClockConfig+0x15c>)
 8001558:	6893      	ldr	r3, [r2, #8]
 800155a:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800155e:	68e1      	ldr	r1, [r4, #12]
 8001560:	430b      	orrs	r3, r1
 8001562:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	f013 0f08 	tst.w	r3, #8
 800156a:	d007      	beq.n	800157c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800156c:	4a11      	ldr	r2, [pc, #68]	@ (80015b4 <HAL_RCC_ClockConfig+0x15c>)
 800156e:	6893      	ldr	r3, [r2, #8]
 8001570:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001574:	6921      	ldr	r1, [r4, #16]
 8001576:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800157a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800157c:	f7ff ff18 	bl	80013b0 <HAL_RCC_GetSysClockFreq>
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <HAL_RCC_ClockConfig+0x15c>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001588:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <HAL_RCC_ClockConfig+0x160>)
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	40d8      	lsrs	r0, r3
 800158e:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <HAL_RCC_ClockConfig+0x164>)
 8001590:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <HAL_RCC_ClockConfig+0x168>)
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	f7ff faef 	bl	8000b78 <HAL_InitTick>
  return HAL_OK;
 800159a:	2000      	movs	r0, #0
}
 800159c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800159e:	2001      	movs	r0, #1
}
 80015a0:	4770      	bx	lr
      return HAL_ERROR;
 80015a2:	2001      	movs	r0, #1
 80015a4:	e7fa      	b.n	800159c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80015a6:	2001      	movs	r0, #1
 80015a8:	e7f8      	b.n	800159c <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 80015aa:	2001      	movs	r0, #1
 80015ac:	e7f6      	b.n	800159c <HAL_RCC_ClockConfig+0x144>
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00
 80015b4:	40023800 	.word	0x40023800
 80015b8:	080029b0 	.word	0x080029b0
 80015bc:	20000014 	.word	0x20000014
 80015c0:	2000001c 	.word	0x2000001c

080015c4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80015c4:	4b01      	ldr	r3, [pc, #4]	@ (80015cc <HAL_RCC_GetHCLKFreq+0x8>)
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000014 	.word	0x20000014

080015d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015d2:	f7ff fff7 	bl	80015c4 <HAL_RCC_GetHCLKFreq>
 80015d6:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015de:	4a03      	ldr	r2, [pc, #12]	@ (80015ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015e0:	5cd3      	ldrb	r3, [r2, r3]
}
 80015e2:	40d8      	lsrs	r0, r3
 80015e4:	bd08      	pop	{r3, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	080029c0 	.word	0x080029c0

080015f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015f0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015f2:	f7ff ffe7 	bl	80015c4 <HAL_RCC_GetHCLKFreq>
 80015f6:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80015fe:	4a03      	ldr	r2, [pc, #12]	@ (800160c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
}
 8001602:	40d8      	lsrs	r0, r3
 8001604:	bd08      	pop	{r3, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	080029c0 	.word	0x080029c0

08001610 <HAL_SPI_MspInit>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8001610:	4770      	bx	lr

08001612 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001612:	2800      	cmp	r0, #0
 8001614:	f000 808e 	beq.w	8001734 <HAL_SPI_Init+0x122>
{
 8001618:	b510      	push	{r4, lr}
 800161a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800161c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800161e:	b933      	cbnz	r3, 800162e <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001620:	6843      	ldr	r3, [r0, #4]
 8001622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001626:	d005      	beq.n	8001634 <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001628:	2300      	movs	r3, #0
 800162a:	61c3      	str	r3, [r0, #28]
 800162c:	e002      	b.n	8001634 <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001632:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001634:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8001638:	2b00      	cmp	r3, #0
 800163a:	d05a      	beq.n	80016f2 <HAL_SPI_Init+0xe0>
  hspi->State = HAL_SPI_STATE_BUSY;
 800163c:	2302      	movs	r3, #2
 800163e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	6813      	ldr	r3, [r2, #0]
 8001646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800164a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800164c:	68e3      	ldr	r3, [r4, #12]
 800164e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001652:	d954      	bls.n	80016fe <HAL_SPI_Init+0xec>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001654:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001656:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800165a:	bf18      	it	ne
 800165c:	f5b3 6fe0 	cmpne.w	r3, #1792	@ 0x700
 8001660:	d001      	beq.n	8001666 <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001666:	6863      	ldr	r3, [r4, #4]
 8001668:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 800166c:	68a1      	ldr	r1, [r4, #8]
 800166e:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8001672:	430b      	orrs	r3, r1
 8001674:	6921      	ldr	r1, [r4, #16]
 8001676:	f001 0102 	and.w	r1, r1, #2
 800167a:	430b      	orrs	r3, r1
 800167c:	6961      	ldr	r1, [r4, #20]
 800167e:	f001 0101 	and.w	r1, r1, #1
 8001682:	430b      	orrs	r3, r1
 8001684:	69a1      	ldr	r1, [r4, #24]
 8001686:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 800168a:	430b      	orrs	r3, r1
 800168c:	69e1      	ldr	r1, [r4, #28]
 800168e:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8001692:	430b      	orrs	r3, r1
 8001694:	6a21      	ldr	r1, [r4, #32]
 8001696:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800169a:	430b      	orrs	r3, r1
 800169c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800169e:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 80016a2:	6820      	ldr	r0, [r4, #0]
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80016aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016ae:	d029      	beq.n	8001704 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80016b0:	8b63      	ldrh	r3, [r4, #26]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80016b8:	f001 0110 	and.w	r1, r1, #16
 80016bc:	430b      	orrs	r3, r1
 80016be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80016c0:	f001 0108 	and.w	r1, r1, #8
 80016c4:	430b      	orrs	r3, r1
 80016c6:	68e1      	ldr	r1, [r4, #12]
 80016c8:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6821      	ldr	r1, [r4, #0]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80016d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016da:	d027      	beq.n	800172c <HAL_SPI_Init+0x11a>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016dc:	6822      	ldr	r2, [r4, #0]
 80016de:	69d3      	ldr	r3, [r2, #28]
 80016e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80016e4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016e6:	2000      	movs	r0, #0
 80016e8:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 80016f0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80016f2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80016f6:	4620      	mov	r0, r4
 80016f8:	f7ff ff8a 	bl	8001610 <HAL_SPI_MspInit>
 80016fc:	e79e      	b.n	800163c <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80016fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001702:	e7a8      	b.n	8001656 <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001704:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001706:	b92b      	cbnz	r3, 8001714 <HAL_SPI_Init+0x102>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001708:	68e3      	ldr	r3, [r4, #12]
 800170a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800170e:	d90a      	bls.n	8001726 <HAL_SPI_Init+0x114>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001710:	2302      	movs	r3, #2
 8001712:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8001714:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001716:	2b02      	cmp	r3, #2
 8001718:	d1ca      	bne.n	80016b0 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800171a:	6821      	ldr	r1, [r4, #0]
 800171c:	680b      	ldr	r3, [r1, #0]
 800171e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001722:	600b      	str	r3, [r1, #0]
 8001724:	e7c4      	b.n	80016b0 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001726:	2301      	movs	r3, #1
 8001728:	6323      	str	r3, [r4, #48]	@ 0x30
 800172a:	e7f3      	b.n	8001714 <HAL_SPI_Init+0x102>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	e7d3      	b.n	80016dc <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 8001734:	2001      	movs	r0, #1
}
 8001736:	4770      	bx	lr

08001738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001738:	b510      	push	{r4, lr}
 800173a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800173c:	6883      	ldr	r3, [r0, #8]
 800173e:	6902      	ldr	r2, [r0, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	6942      	ldr	r2, [r0, #20]
 8001744:	4313      	orrs	r3, r2
 8001746:	69c2      	ldr	r2, [r0, #28]
 8001748:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800174a:	6801      	ldr	r1, [r0, #0]
 800174c:	6808      	ldr	r0, [r1, #0]
 800174e:	4a93      	ldr	r2, [pc, #588]	@ (800199c <UART_SetConfig+0x264>)
 8001750:	4002      	ands	r2, r0
 8001752:	431a      	orrs	r2, r3
 8001754:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001756:	6822      	ldr	r2, [r4, #0]
 8001758:	6853      	ldr	r3, [r2, #4]
 800175a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800175e:	68e1      	ldr	r1, [r4, #12]
 8001760:	430b      	orrs	r3, r1
 8001762:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001764:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8001766:	6a23      	ldr	r3, [r4, #32]
 8001768:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800176a:	6821      	ldr	r1, [r4, #0]
 800176c:	688b      	ldr	r3, [r1, #8]
 800176e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	4a89      	ldr	r2, [pc, #548]	@ (80019a0 <UART_SetConfig+0x268>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d019      	beq.n	80017b2 <UART_SetConfig+0x7a>
 800177e:	4a89      	ldr	r2, [pc, #548]	@ (80019a4 <UART_SetConfig+0x26c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d029      	beq.n	80017d8 <UART_SetConfig+0xa0>
 8001784:	4a88      	ldr	r2, [pc, #544]	@ (80019a8 <UART_SetConfig+0x270>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d03e      	beq.n	8001808 <UART_SetConfig+0xd0>
 800178a:	4a88      	ldr	r2, [pc, #544]	@ (80019ac <UART_SetConfig+0x274>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d062      	beq.n	8001856 <UART_SetConfig+0x11e>
 8001790:	4a87      	ldr	r2, [pc, #540]	@ (80019b0 <UART_SetConfig+0x278>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d071      	beq.n	800187a <UART_SetConfig+0x142>
 8001796:	4a87      	ldr	r2, [pc, #540]	@ (80019b4 <UART_SetConfig+0x27c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	f000 8083 	beq.w	80018a4 <UART_SetConfig+0x16c>
 800179e:	4a86      	ldr	r2, [pc, #536]	@ (80019b8 <UART_SetConfig+0x280>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	f000 8094 	beq.w	80018ce <UART_SetConfig+0x196>
 80017a6:	4a85      	ldr	r2, [pc, #532]	@ (80019bc <UART_SetConfig+0x284>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	f000 80a5 	beq.w	80018f8 <UART_SetConfig+0x1c0>
 80017ae:	2310      	movs	r3, #16
 80017b0:	e03a      	b.n	8001828 <UART_SetConfig+0xf0>
 80017b2:	4b83      	ldr	r3, [pc, #524]	@ (80019c0 <UART_SetConfig+0x288>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d809      	bhi.n	80017d4 <UART_SetConfig+0x9c>
 80017c0:	e8df f003 	tbb	[pc, r3]
 80017c4:	06ae0402 	.word	0x06ae0402
 80017c8:	2301      	movs	r3, #1
 80017ca:	e02d      	b.n	8001828 <UART_SetConfig+0xf0>
 80017cc:	2304      	movs	r3, #4
 80017ce:	e02b      	b.n	8001828 <UART_SetConfig+0xf0>
 80017d0:	2308      	movs	r3, #8
 80017d2:	e029      	b.n	8001828 <UART_SetConfig+0xf0>
 80017d4:	2310      	movs	r3, #16
 80017d6:	e027      	b.n	8001828 <UART_SetConfig+0xf0>
 80017d8:	4b79      	ldr	r3, [pc, #484]	@ (80019c0 <UART_SetConfig+0x288>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d80e      	bhi.n	8001804 <UART_SetConfig+0xcc>
 80017e6:	e8df f003 	tbb	[pc, r3]
 80017ea:	0d07      	.short	0x0d07
 80017ec:	0d090d0d 	.word	0x0d090d0d
 80017f0:	0d9d0d0d 	.word	0x0d9d0d0d
 80017f4:	0d0d      	.short	0x0d0d
 80017f6:	0b          	.byte	0x0b
 80017f7:	00          	.byte	0x00
 80017f8:	2300      	movs	r3, #0
 80017fa:	e015      	b.n	8001828 <UART_SetConfig+0xf0>
 80017fc:	2304      	movs	r3, #4
 80017fe:	e013      	b.n	8001828 <UART_SetConfig+0xf0>
 8001800:	2308      	movs	r3, #8
 8001802:	e011      	b.n	8001828 <UART_SetConfig+0xf0>
 8001804:	2310      	movs	r3, #16
 8001806:	e00f      	b.n	8001828 <UART_SetConfig+0xf0>
 8001808:	4b6d      	ldr	r3, [pc, #436]	@ (80019c0 <UART_SetConfig+0x288>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001812:	2b20      	cmp	r3, #32
 8001814:	f000 8088 	beq.w	8001928 <UART_SetConfig+0x1f0>
 8001818:	d819      	bhi.n	800184e <UART_SetConfig+0x116>
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8086 	beq.w	800192c <UART_SetConfig+0x1f4>
 8001820:	2b10      	cmp	r3, #16
 8001822:	f040 8085 	bne.w	8001930 <UART_SetConfig+0x1f8>
 8001826:	2304      	movs	r3, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001828:	69e0      	ldr	r0, [r4, #28]
 800182a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800182e:	f000 80ab 	beq.w	8001988 <UART_SetConfig+0x250>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001832:	2b08      	cmp	r3, #8
 8001834:	f200 810c 	bhi.w	8001a50 <UART_SetConfig+0x318>
 8001838:	e8df f013 	tbh	[pc, r3, lsl #1]
 800183c:	00fb00e8 	.word	0x00fb00e8
 8001840:	010a00e6 	.word	0x010a00e6
 8001844:	010a00fe 	.word	0x010a00fe
 8001848:	010a010a 	.word	0x010a010a
 800184c:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 800184e:	2b30      	cmp	r3, #48	@ 0x30
 8001850:	d170      	bne.n	8001934 <UART_SetConfig+0x1fc>
 8001852:	2308      	movs	r3, #8
 8001854:	e7e8      	b.n	8001828 <UART_SetConfig+0xf0>
 8001856:	4b5a      	ldr	r3, [pc, #360]	@ (80019c0 <UART_SetConfig+0x288>)
 8001858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001860:	2b80      	cmp	r3, #128	@ 0x80
 8001862:	d069      	beq.n	8001938 <UART_SetConfig+0x200>
 8001864:	d805      	bhi.n	8001872 <UART_SetConfig+0x13a>
 8001866:	2b00      	cmp	r3, #0
 8001868:	d068      	beq.n	800193c <UART_SetConfig+0x204>
 800186a:	2b40      	cmp	r3, #64	@ 0x40
 800186c:	d168      	bne.n	8001940 <UART_SetConfig+0x208>
 800186e:	2304      	movs	r3, #4
 8001870:	e7da      	b.n	8001828 <UART_SetConfig+0xf0>
 8001872:	2bc0      	cmp	r3, #192	@ 0xc0
 8001874:	d166      	bne.n	8001944 <UART_SetConfig+0x20c>
 8001876:	2308      	movs	r3, #8
 8001878:	e7d6      	b.n	8001828 <UART_SetConfig+0xf0>
 800187a:	4b51      	ldr	r3, [pc, #324]	@ (80019c0 <UART_SetConfig+0x288>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001880:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001888:	d05e      	beq.n	8001948 <UART_SetConfig+0x210>
 800188a:	d806      	bhi.n	800189a <UART_SetConfig+0x162>
 800188c:	2b00      	cmp	r3, #0
 800188e:	d05d      	beq.n	800194c <UART_SetConfig+0x214>
 8001890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001894:	d15c      	bne.n	8001950 <UART_SetConfig+0x218>
 8001896:	2304      	movs	r3, #4
 8001898:	e7c6      	b.n	8001828 <UART_SetConfig+0xf0>
 800189a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800189e:	d159      	bne.n	8001954 <UART_SetConfig+0x21c>
 80018a0:	2308      	movs	r3, #8
 80018a2:	e7c1      	b.n	8001828 <UART_SetConfig+0xf0>
 80018a4:	4b46      	ldr	r3, [pc, #280]	@ (80019c0 <UART_SetConfig+0x288>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018aa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018b2:	d051      	beq.n	8001958 <UART_SetConfig+0x220>
 80018b4:	d806      	bhi.n	80018c4 <UART_SetConfig+0x18c>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d050      	beq.n	800195c <UART_SetConfig+0x224>
 80018ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018be:	d14f      	bne.n	8001960 <UART_SetConfig+0x228>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e7b1      	b.n	8001828 <UART_SetConfig+0xf0>
 80018c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80018c8:	d14c      	bne.n	8001964 <UART_SetConfig+0x22c>
 80018ca:	2308      	movs	r3, #8
 80018cc:	e7ac      	b.n	8001828 <UART_SetConfig+0xf0>
 80018ce:	4b3c      	ldr	r3, [pc, #240]	@ (80019c0 <UART_SetConfig+0x288>)
 80018d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80018d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018dc:	d044      	beq.n	8001968 <UART_SetConfig+0x230>
 80018de:	d806      	bhi.n	80018ee <UART_SetConfig+0x1b6>
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d043      	beq.n	800196c <UART_SetConfig+0x234>
 80018e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018e8:	d142      	bne.n	8001970 <UART_SetConfig+0x238>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e79c      	b.n	8001828 <UART_SetConfig+0xf0>
 80018ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80018f2:	d13f      	bne.n	8001974 <UART_SetConfig+0x23c>
 80018f4:	2308      	movs	r3, #8
 80018f6:	e797      	b.n	8001828 <UART_SetConfig+0xf0>
 80018f8:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <UART_SetConfig+0x288>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001906:	d037      	beq.n	8001978 <UART_SetConfig+0x240>
 8001908:	d805      	bhi.n	8001916 <UART_SetConfig+0x1de>
 800190a:	b3bb      	cbz	r3, 800197c <UART_SetConfig+0x244>
 800190c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001910:	d136      	bne.n	8001980 <UART_SetConfig+0x248>
 8001912:	2304      	movs	r3, #4
 8001914:	e788      	b.n	8001828 <UART_SetConfig+0xf0>
 8001916:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800191a:	d133      	bne.n	8001984 <UART_SetConfig+0x24c>
 800191c:	2308      	movs	r3, #8
 800191e:	e783      	b.n	8001828 <UART_SetConfig+0xf0>
 8001920:	2302      	movs	r3, #2
 8001922:	e781      	b.n	8001828 <UART_SetConfig+0xf0>
 8001924:	2302      	movs	r3, #2
 8001926:	e77f      	b.n	8001828 <UART_SetConfig+0xf0>
 8001928:	2302      	movs	r3, #2
 800192a:	e77d      	b.n	8001828 <UART_SetConfig+0xf0>
 800192c:	2300      	movs	r3, #0
 800192e:	e77b      	b.n	8001828 <UART_SetConfig+0xf0>
 8001930:	2310      	movs	r3, #16
 8001932:	e779      	b.n	8001828 <UART_SetConfig+0xf0>
 8001934:	2310      	movs	r3, #16
 8001936:	e777      	b.n	8001828 <UART_SetConfig+0xf0>
 8001938:	2302      	movs	r3, #2
 800193a:	e775      	b.n	8001828 <UART_SetConfig+0xf0>
 800193c:	2300      	movs	r3, #0
 800193e:	e773      	b.n	8001828 <UART_SetConfig+0xf0>
 8001940:	2310      	movs	r3, #16
 8001942:	e771      	b.n	8001828 <UART_SetConfig+0xf0>
 8001944:	2310      	movs	r3, #16
 8001946:	e76f      	b.n	8001828 <UART_SetConfig+0xf0>
 8001948:	2302      	movs	r3, #2
 800194a:	e76d      	b.n	8001828 <UART_SetConfig+0xf0>
 800194c:	2300      	movs	r3, #0
 800194e:	e76b      	b.n	8001828 <UART_SetConfig+0xf0>
 8001950:	2310      	movs	r3, #16
 8001952:	e769      	b.n	8001828 <UART_SetConfig+0xf0>
 8001954:	2310      	movs	r3, #16
 8001956:	e767      	b.n	8001828 <UART_SetConfig+0xf0>
 8001958:	2302      	movs	r3, #2
 800195a:	e765      	b.n	8001828 <UART_SetConfig+0xf0>
 800195c:	2301      	movs	r3, #1
 800195e:	e763      	b.n	8001828 <UART_SetConfig+0xf0>
 8001960:	2310      	movs	r3, #16
 8001962:	e761      	b.n	8001828 <UART_SetConfig+0xf0>
 8001964:	2310      	movs	r3, #16
 8001966:	e75f      	b.n	8001828 <UART_SetConfig+0xf0>
 8001968:	2302      	movs	r3, #2
 800196a:	e75d      	b.n	8001828 <UART_SetConfig+0xf0>
 800196c:	2300      	movs	r3, #0
 800196e:	e75b      	b.n	8001828 <UART_SetConfig+0xf0>
 8001970:	2310      	movs	r3, #16
 8001972:	e759      	b.n	8001828 <UART_SetConfig+0xf0>
 8001974:	2310      	movs	r3, #16
 8001976:	e757      	b.n	8001828 <UART_SetConfig+0xf0>
 8001978:	2302      	movs	r3, #2
 800197a:	e755      	b.n	8001828 <UART_SetConfig+0xf0>
 800197c:	2300      	movs	r3, #0
 800197e:	e753      	b.n	8001828 <UART_SetConfig+0xf0>
 8001980:	2310      	movs	r3, #16
 8001982:	e751      	b.n	8001828 <UART_SetConfig+0xf0>
 8001984:	2310      	movs	r3, #16
 8001986:	e74f      	b.n	8001828 <UART_SetConfig+0xf0>
    switch (clocksource)
 8001988:	2b08      	cmp	r3, #8
 800198a:	d85b      	bhi.n	8001a44 <UART_SetConfig+0x30c>
 800198c:	e8df f003 	tbb	[pc, r3]
 8001990:	5a3a341a 	.word	0x5a3a341a
 8001994:	5a5a5a37 	.word	0x5a5a5a37
 8001998:	1e          	.byte	0x1e
 8001999:	00          	.byte	0x00
 800199a:	bf00      	nop
 800199c:	efff69f3 	.word	0xefff69f3
 80019a0:	40011000 	.word	0x40011000
 80019a4:	40004400 	.word	0x40004400
 80019a8:	40004800 	.word	0x40004800
 80019ac:	40004c00 	.word	0x40004c00
 80019b0:	40005000 	.word	0x40005000
 80019b4:	40011400 	.word	0x40011400
 80019b8:	40007800 	.word	0x40007800
 80019bc:	40007c00 	.word	0x40007c00
 80019c0:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 80019c4:	f7ff fe04 	bl	80015d0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d03d      	beq.n	8001a48 <UART_SetConfig+0x310>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80019cc:	6862      	ldr	r2, [r4, #4]
 80019ce:	0853      	lsrs	r3, r2, #1
 80019d0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80019d4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019d8:	f1a3 0110 	sub.w	r1, r3, #16
 80019dc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80019e0:	4291      	cmp	r1, r2
 80019e2:	d833      	bhi.n	8001a4c <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80019ea:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80019ee:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80019f0:	6822      	ldr	r2, [r4, #0]
 80019f2:	60d3      	str	r3, [r2, #12]
 80019f4:	2000      	movs	r0, #0
 80019f6:	e030      	b.n	8001a5a <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 80019f8:	f7ff fdfa 	bl	80015f0 <HAL_RCC_GetPCLK2Freq>
        break;
 80019fc:	e7e4      	b.n	80019c8 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 80019fe:	f7ff fcd7 	bl	80013b0 <HAL_RCC_GetSysClockFreq>
        break;
 8001a02:	e7e1      	b.n	80019c8 <UART_SetConfig+0x290>
        pclk = (uint32_t) HSI_VALUE;
 8001a04:	4817      	ldr	r0, [pc, #92]	@ (8001a64 <UART_SetConfig+0x32c>)
 8001a06:	e7e1      	b.n	80019cc <UART_SetConfig+0x294>
    switch (clocksource)
 8001a08:	4816      	ldr	r0, [pc, #88]	@ (8001a64 <UART_SetConfig+0x32c>)
 8001a0a:	e002      	b.n	8001a12 <UART_SetConfig+0x2da>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a0c:	f7ff fde0 	bl	80015d0 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8001a10:	b300      	cbz	r0, 8001a54 <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001a18:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a1c:	f1a0 0210 	sub.w	r2, r0, #16
 8001a20:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d817      	bhi.n	8001a58 <UART_SetConfig+0x320>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	b280      	uxth	r0, r0
 8001a2c:	60d8      	str	r0, [r3, #12]
 8001a2e:	2000      	movs	r0, #0
 8001a30:	e013      	b.n	8001a5a <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001a32:	f7ff fddd 	bl	80015f0 <HAL_RCC_GetPCLK2Freq>
        break;
 8001a36:	e7eb      	b.n	8001a10 <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a38:	f7ff fcba 	bl	80013b0 <HAL_RCC_GetSysClockFreq>
        break;
 8001a3c:	e7e8      	b.n	8001a10 <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 8001a3e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a42:	e7e6      	b.n	8001a12 <UART_SetConfig+0x2da>
    switch (clocksource)
 8001a44:	2001      	movs	r0, #1
 8001a46:	e008      	b.n	8001a5a <UART_SetConfig+0x322>
 8001a48:	2000      	movs	r0, #0
 8001a4a:	e006      	b.n	8001a5a <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	e004      	b.n	8001a5a <UART_SetConfig+0x322>
    switch (clocksource)
 8001a50:	2001      	movs	r0, #1
 8001a52:	e002      	b.n	8001a5a <UART_SetConfig+0x322>
 8001a54:	2000      	movs	r0, #0
 8001a56:	e000      	b.n	8001a5a <UART_SetConfig+0x322>
      }
      else
      {
        ret = HAL_ERROR;
 8001a58:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8001a5e:	66e3      	str	r3, [r4, #108]	@ 0x6c

  return ret;
}
 8001a60:	bd10      	pop	{r4, pc}
 8001a62:	bf00      	nop
 8001a64:	00f42400 	.word	0x00f42400

08001a68 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a68:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a6a:	f013 0f01 	tst.w	r3, #1
 8001a6e:	d006      	beq.n	8001a7e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a70:	6802      	ldr	r2, [r0, #0]
 8001a72:	6853      	ldr	r3, [r2, #4]
 8001a74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001a78:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a7e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a80:	f013 0f02 	tst.w	r3, #2
 8001a84:	d006      	beq.n	8001a94 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a86:	6802      	ldr	r2, [r0, #0]
 8001a88:	6853      	ldr	r3, [r2, #4]
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a8e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a94:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a96:	f013 0f04 	tst.w	r3, #4
 8001a9a:	d006      	beq.n	8001aaa <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a9c:	6802      	ldr	r2, [r0, #0]
 8001a9e:	6853      	ldr	r3, [r2, #4]
 8001aa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa4:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001aaa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001aac:	f013 0f08 	tst.w	r3, #8
 8001ab0:	d006      	beq.n	8001ac0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ab2:	6802      	ldr	r2, [r0, #0]
 8001ab4:	6853      	ldr	r3, [r2, #4]
 8001ab6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001aba:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ac0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001ac2:	f013 0f10 	tst.w	r3, #16
 8001ac6:	d006      	beq.n	8001ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ac8:	6802      	ldr	r2, [r0, #0]
 8001aca:	6893      	ldr	r3, [r2, #8]
 8001acc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ad0:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ad6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001ad8:	f013 0f20 	tst.w	r3, #32
 8001adc:	d006      	beq.n	8001aec <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ade:	6802      	ldr	r2, [r0, #0]
 8001ae0:	6893      	ldr	r3, [r2, #8]
 8001ae2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001ae6:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001aec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001aee:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001af2:	d00a      	beq.n	8001b0a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001af4:	6802      	ldr	r2, [r0, #0]
 8001af6:	6853      	ldr	r3, [r2, #4]
 8001af8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001afc:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001afe:	430b      	orrs	r3, r1
 8001b00:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b02:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b08:	d00b      	beq.n	8001b22 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b0a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001b0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b10:	d006      	beq.n	8001b20 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b12:	6802      	ldr	r2, [r0, #0]
 8001b14:	6853      	ldr	r3, [r2, #4]
 8001b16:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001b1a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	6053      	str	r3, [r2, #4]
  }
}
 8001b20:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b22:	6802      	ldr	r2, [r0, #0]
 8001b24:	6853      	ldr	r3, [r2, #4]
 8001b26:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8001b2a:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	6053      	str	r3, [r2, #4]
 8001b30:	e7eb      	b.n	8001b0a <UART_AdvFeatureConfig+0xa2>

08001b32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001b32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b36:	4605      	mov	r5, r0
 8001b38:	460f      	mov	r7, r1
 8001b3a:	4616      	mov	r6, r2
 8001b3c:	4699      	mov	r9, r3
 8001b3e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b42:	682b      	ldr	r3, [r5, #0]
 8001b44:	69dc      	ldr	r4, [r3, #28]
 8001b46:	ea37 0404 	bics.w	r4, r7, r4
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2401      	moveq	r4, #1
 8001b4e:	2400      	movne	r4, #0
 8001b50:	42b4      	cmp	r4, r6
 8001b52:	d155      	bne.n	8001c00 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b54:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001b58:	d0f3      	beq.n	8001b42 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7ff f853 	bl	8000c04 <HAL_GetTick>
 8001b5e:	eba0 0009 	sub.w	r0, r0, r9
 8001b62:	4540      	cmp	r0, r8
 8001b64:	d82e      	bhi.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x92>
 8001b66:	f1b8 0f00 	cmp.w	r8, #0
 8001b6a:	d02b      	beq.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x92>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	f012 0f04 	tst.w	r2, #4
 8001b74:	d0e5      	beq.n	8001b42 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8001b7c:	d0e1      	beq.n	8001b42 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b82:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b84:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b86:	e852 3f00 	ldrex	r3, [r2]
 8001b8a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b8e:	e842 3100 	strex	r1, r3, [r2]
 8001b92:	2900      	cmp	r1, #0
 8001b94:	d1f6      	bne.n	8001b84 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b96:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b98:	f102 0308 	add.w	r3, r2, #8
 8001b9c:	e853 3f00 	ldrex	r3, [r3]
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	e842 3100 	strex	r1, r3, [r2]
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d1f3      	bne.n	8001b96 <UART_WaitOnFlagUntilTimeout+0x64>

          huart->gState = HAL_UART_STATE_READY;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8001bb2:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001bb6:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78

          return HAL_TIMEOUT;
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	e01e      	b.n	8001c02 <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bc4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bc6:	e852 3f00 	ldrex	r3, [r2]
 8001bca:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bce:	e842 3100 	strex	r1, r3, [r2]
 8001bd2:	2900      	cmp	r1, #0
 8001bd4:	d1f6      	bne.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bd6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bd8:	f102 0308 	add.w	r3, r2, #8
 8001bdc:	e853 3f00 	ldrex	r3, [r3]
 8001be0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001be4:	3208      	adds	r2, #8
 8001be6:	e842 3100 	strex	r1, r3, [r2]
 8001bea:	2900      	cmp	r1, #0
 8001bec:	d1f3      	bne.n	8001bd6 <UART_WaitOnFlagUntilTimeout+0xa4>
        huart->gState = HAL_UART_STATE_READY;
 8001bee:	2320      	movs	r3, #32
 8001bf0:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8001bf2:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
        __HAL_UNLOCK(huart);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
        return HAL_TIMEOUT;
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	e000      	b.n	8001c02 <UART_WaitOnFlagUntilTimeout+0xd0>
        }
      }
    }
  }
  return HAL_OK;
 8001c00:	2000      	movs	r0, #0
}
 8001c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c06 <HAL_UART_Transmit>:
{
 8001c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001c0e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d14e      	bne.n	8001cb2 <HAL_UART_Transmit+0xac>
 8001c14:	4604      	mov	r4, r0
 8001c16:	460d      	mov	r5, r1
 8001c18:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001c1a:	2a00      	cmp	r2, #0
 8001c1c:	bf18      	it	ne
 8001c1e:	2900      	cmpne	r1, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8001c22:	2001      	movs	r0, #1
 8001c24:	e046      	b.n	8001cb4 <HAL_UART_Transmit+0xae>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c2c:	2321      	movs	r3, #33	@ 0x21
 8001c2e:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8001c30:	f7fe ffe8 	bl	8000c04 <HAL_GetTick>
 8001c34:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001c36:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 8001c3a:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c3e:	68a3      	ldr	r3, [r4, #8]
 8001c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c44:	d002      	beq.n	8001c4c <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 8001c46:	f04f 0800 	mov.w	r8, #0
 8001c4a:	e011      	b.n	8001c70 <HAL_UART_Transmit+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c4c:	6923      	ldr	r3, [r4, #16]
 8001c4e:	b313      	cbz	r3, 8001c96 <HAL_UART_Transmit+0x90>
      pdata16bits = NULL;
 8001c50:	f04f 0800 	mov.w	r8, #0
 8001c54:	e00c      	b.n	8001c70 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c56:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001c5a:	6822      	ldr	r2, [r4, #0]
 8001c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c60:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8001c62:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8001c66:	b292      	uxth	r2, r2
 8001c68:	3a01      	subs	r2, #1
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8001c70:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	b18b      	cbz	r3, 8001c9c <HAL_UART_Transmit+0x96>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c78:	9600      	str	r6, [sp, #0]
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	@ 0x80
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff ff56 	bl	8001b32 <UART_WaitOnFlagUntilTimeout>
 8001c86:	b9c0      	cbnz	r0, 8001cba <HAL_UART_Transmit+0xb4>
      if (pdata8bits == NULL)
 8001c88:	2d00      	cmp	r5, #0
 8001c8a:	d0e4      	beq.n	8001c56 <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c8c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001c94:	e7e5      	b.n	8001c62 <HAL_UART_Transmit+0x5c>
      pdata16bits = (const uint16_t *) pData;
 8001c96:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001c98:	2500      	movs	r5, #0
 8001c9a:	e7e9      	b.n	8001c70 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c9c:	9600      	str	r6, [sp, #0]
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2140      	movs	r1, #64	@ 0x40
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f7ff ff44 	bl	8001b32 <UART_WaitOnFlagUntilTimeout>
 8001caa:	b940      	cbnz	r0, 8001cbe <HAL_UART_Transmit+0xb8>
    huart->gState = HAL_UART_STATE_READY;
 8001cac:	2320      	movs	r3, #32
 8001cae:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8001cb0:	e000      	b.n	8001cb4 <HAL_UART_Transmit+0xae>
    return HAL_BUSY;
 8001cb2:	2002      	movs	r0, #2
}
 8001cb4:	b002      	add	sp, #8
 8001cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 8001cba:	2003      	movs	r0, #3
 8001cbc:	e7fa      	b.n	8001cb4 <HAL_UART_Transmit+0xae>
      return HAL_TIMEOUT;
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	e7f8      	b.n	8001cb4 <HAL_UART_Transmit+0xae>

08001cc2 <HAL_UART_Receive>:
{
 8001cc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cca:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d178      	bne.n	8001dc4 <HAL_UART_Receive+0x102>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	460d      	mov	r5, r1
 8001cd6:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	bf18      	it	ne
 8001cdc:	2900      	cmpne	r1, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	e070      	b.n	8001dc6 <HAL_UART_Receive+0x104>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cea:	2222      	movs	r2, #34	@ 0x22
 8001cec:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cf0:	6603      	str	r3, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8001cf2:	f7fe ff87 	bl	8000c04 <HAL_GetTick>
 8001cf6:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001cf8:	f8a4 8058 	strh.w	r8, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8001cfc:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8001d00:	68a3      	ldr	r3, [r4, #8]
 8001d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d06:	d006      	beq.n	8001d16 <HAL_UART_Receive+0x54>
 8001d08:	b9a3      	cbnz	r3, 8001d34 <HAL_UART_Receive+0x72>
 8001d0a:	6922      	ldr	r2, [r4, #16]
 8001d0c:	b972      	cbnz	r2, 8001d2c <HAL_UART_Receive+0x6a>
 8001d0e:	22ff      	movs	r2, #255	@ 0xff
 8001d10:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001d14:	e014      	b.n	8001d40 <HAL_UART_Receive+0x7e>
 8001d16:	6922      	ldr	r2, [r4, #16]
 8001d18:	b922      	cbnz	r2, 8001d24 <HAL_UART_Receive+0x62>
 8001d1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001d1e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001d22:	e00d      	b.n	8001d40 <HAL_UART_Receive+0x7e>
 8001d24:	22ff      	movs	r2, #255	@ 0xff
 8001d26:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001d2a:	e009      	b.n	8001d40 <HAL_UART_Receive+0x7e>
 8001d2c:	227f      	movs	r2, #127	@ 0x7f
 8001d2e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001d32:	e005      	b.n	8001d40 <HAL_UART_Receive+0x7e>
 8001d34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d38:	d00a      	beq.n	8001d50 <HAL_UART_Receive+0x8e>
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 8001d40:	f8b4 805c 	ldrh.w	r8, [r4, #92]	@ 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d48:	d00c      	beq.n	8001d64 <HAL_UART_Receive+0xa2>
      pdata16bits = NULL;
 8001d4a:	f04f 0900 	mov.w	r9, #0
 8001d4e:	e01f      	b.n	8001d90 <HAL_UART_Receive+0xce>
    UART_MASK_COMPUTATION(huart);
 8001d50:	6922      	ldr	r2, [r4, #16]
 8001d52:	b91a      	cbnz	r2, 8001d5c <HAL_UART_Receive+0x9a>
 8001d54:	227f      	movs	r2, #127	@ 0x7f
 8001d56:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001d5a:	e7f1      	b.n	8001d40 <HAL_UART_Receive+0x7e>
 8001d5c:	223f      	movs	r2, #63	@ 0x3f
 8001d5e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8001d62:	e7ed      	b.n	8001d40 <HAL_UART_Receive+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d64:	6923      	ldr	r3, [r4, #16]
 8001d66:	b113      	cbz	r3, 8001d6e <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 8001d68:	f04f 0900 	mov.w	r9, #0
 8001d6c:	e010      	b.n	8001d90 <HAL_UART_Receive+0xce>
      pdata16bits = (uint16_t *) pData;
 8001d6e:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001d70:	2500      	movs	r5, #0
 8001d72:	e00d      	b.n	8001d90 <HAL_UART_Receive+0xce>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d78:	fa5f f388 	uxtb.w	r3, r8
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8001d82:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8001d86:	b292      	uxth	r2, r2
 8001d88:	3a01      	subs	r2, #1
 8001d8a:	b292      	uxth	r2, r2
 8001d8c:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8001d90:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	b183      	cbz	r3, 8001dba <HAL_UART_Receive+0xf8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d98:	9600      	str	r6, [sp, #0]
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2120      	movs	r1, #32
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff fec6 	bl	8001b32 <UART_WaitOnFlagUntilTimeout>
 8001da6:	b988      	cbnz	r0, 8001dcc <HAL_UART_Receive+0x10a>
      if (pdata8bits == NULL)
 8001da8:	2d00      	cmp	r5, #0
 8001daa:	d1e3      	bne.n	8001d74 <HAL_UART_Receive+0xb2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	ea08 0303 	and.w	r3, r8, r3
 8001db4:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 8001db8:	e7e3      	b.n	8001d82 <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 8001dba:	2320      	movs	r3, #32
 8001dbc:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	e000      	b.n	8001dc6 <HAL_UART_Receive+0x104>
    return HAL_BUSY;
 8001dc4:	2002      	movs	r0, #2
}
 8001dc6:	b003      	add	sp, #12
 8001dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001dcc:	2003      	movs	r0, #3
 8001dce:	e7fa      	b.n	8001dc6 <HAL_UART_Receive+0x104>

08001dd0 <UART_CheckIdleState>:
{
 8001dd0:	b530      	push	{r4, r5, lr}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8001ddc:	f7fe ff12 	bl	8000c04 <HAL_GetTick>
 8001de0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001de2:	6822      	ldr	r2, [r4, #0]
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	f012 0f08 	tst.w	r2, #8
 8001dea:	d10f      	bne.n	8001e0c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f013 0f04 	tst.w	r3, #4
 8001df4:	d118      	bne.n	8001e28 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001df6:	2320      	movs	r3, #32
 8001df8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001dfa:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dfe:	2000      	movs	r0, #0
 8001e00:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e02:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8001e04:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 8001e08:	b003      	add	sp, #12
 8001e0a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	4603      	mov	r3, r0
 8001e14:	2200      	movs	r2, #0
 8001e16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f7ff fe89 	bl	8001b32 <UART_WaitOnFlagUntilTimeout>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d0e3      	beq.n	8001dec <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8001e24:	2003      	movs	r0, #3
 8001e26:	e7ef      	b.n	8001e08 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	462b      	mov	r3, r5
 8001e30:	2200      	movs	r2, #0
 8001e32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001e36:	4620      	mov	r0, r4
 8001e38:	f7ff fe7b 	bl	8001b32 <UART_WaitOnFlagUntilTimeout>
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d0da      	beq.n	8001df6 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8001e40:	2003      	movs	r0, #3
 8001e42:	e7e1      	b.n	8001e08 <UART_CheckIdleState+0x38>

08001e44 <HAL_UART_Init>:
  if (huart == NULL)
 8001e44:	b368      	cbz	r0, 8001ea2 <HAL_UART_Init+0x5e>
{
 8001e46:	b510      	push	{r4, lr}
 8001e48:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e4a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001e4c:	b303      	cbz	r3, 8001e90 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e4e:	2324      	movs	r3, #36	@ 0x24
 8001e50:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8001e52:	6822      	ldr	r2, [r4, #0]
 8001e54:	6813      	ldr	r3, [r2, #0]
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f7ff fc6b 	bl	8001738 <UART_SetConfig>
 8001e62:	2801      	cmp	r0, #1
 8001e64:	d013      	beq.n	8001e8e <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e68:	b9bb      	cbnz	r3, 8001e9a <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6a:	6822      	ldr	r2, [r4, #0]
 8001e6c:	6853      	ldr	r3, [r2, #4]
 8001e6e:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001e72:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e74:	6822      	ldr	r2, [r4, #0]
 8001e76:	6893      	ldr	r3, [r2, #8]
 8001e78:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001e7c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001e7e:	6822      	ldr	r2, [r4, #0]
 8001e80:	6813      	ldr	r3, [r2, #0]
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff ffa1 	bl	8001dd0 <UART_CheckIdleState>
}
 8001e8e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e90:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8001e94:	f7fe fda4 	bl	80009e0 <HAL_UART_MspInit>
 8001e98:	e7d9      	b.n	8001e4e <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7ff fde4 	bl	8001a68 <UART_AdvFeatureConfig>
 8001ea0:	e7e3      	b.n	8001e6a <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001ea2:	2001      	movs	r0, #1
}
 8001ea4:	4770      	bx	lr
	...

08001ea8 <std>:
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	b510      	push	{r4, lr}
 8001eac:	4604      	mov	r4, r0
 8001eae:	e9c0 3300 	strd	r3, r3, [r0]
 8001eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001eb6:	6083      	str	r3, [r0, #8]
 8001eb8:	8181      	strh	r1, [r0, #12]
 8001eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8001ebc:	81c2      	strh	r2, [r0, #14]
 8001ebe:	6183      	str	r3, [r0, #24]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	305c      	adds	r0, #92	@ 0x5c
 8001ec6:	f000 faa3 	bl	8002410 <memset>
 8001eca:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <std+0x58>)
 8001ecc:	6263      	str	r3, [r4, #36]	@ 0x24
 8001ece:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <std+0x5c>)
 8001ed0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <std+0x60>)
 8001ed4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <std+0x64>)
 8001ed8:	6323      	str	r3, [r4, #48]	@ 0x30
 8001eda:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <std+0x68>)
 8001edc:	6224      	str	r4, [r4, #32]
 8001ede:	429c      	cmp	r4, r3
 8001ee0:	d006      	beq.n	8001ef0 <std+0x48>
 8001ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001ee6:	4294      	cmp	r4, r2
 8001ee8:	d002      	beq.n	8001ef0 <std+0x48>
 8001eea:	33d0      	adds	r3, #208	@ 0xd0
 8001eec:	429c      	cmp	r4, r3
 8001eee:	d105      	bne.n	8001efc <std+0x54>
 8001ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ef8:	f000 bafc 	b.w	80024f4 <__retarget_lock_init_recursive>
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	bf00      	nop
 8001f00:	08002261 	.word	0x08002261
 8001f04:	08002283 	.word	0x08002283
 8001f08:	080022bb 	.word	0x080022bb
 8001f0c:	080022df 	.word	0x080022df
 8001f10:	20000188 	.word	0x20000188

08001f14 <stdio_exit_handler>:
 8001f14:	4a02      	ldr	r2, [pc, #8]	@ (8001f20 <stdio_exit_handler+0xc>)
 8001f16:	4903      	ldr	r1, [pc, #12]	@ (8001f24 <stdio_exit_handler+0x10>)
 8001f18:	4803      	ldr	r0, [pc, #12]	@ (8001f28 <stdio_exit_handler+0x14>)
 8001f1a:	f000 b869 	b.w	8001ff0 <_fwalk_sglue>
 8001f1e:	bf00      	nop
 8001f20:	20000020 	.word	0x20000020
 8001f24:	08002805 	.word	0x08002805
 8001f28:	20000030 	.word	0x20000030

08001f2c <cleanup_stdio>:
 8001f2c:	6841      	ldr	r1, [r0, #4]
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <cleanup_stdio+0x34>)
 8001f30:	4299      	cmp	r1, r3
 8001f32:	b510      	push	{r4, lr}
 8001f34:	4604      	mov	r4, r0
 8001f36:	d001      	beq.n	8001f3c <cleanup_stdio+0x10>
 8001f38:	f000 fc64 	bl	8002804 <_fflush_r>
 8001f3c:	68a1      	ldr	r1, [r4, #8]
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <cleanup_stdio+0x38>)
 8001f40:	4299      	cmp	r1, r3
 8001f42:	d002      	beq.n	8001f4a <cleanup_stdio+0x1e>
 8001f44:	4620      	mov	r0, r4
 8001f46:	f000 fc5d 	bl	8002804 <_fflush_r>
 8001f4a:	68e1      	ldr	r1, [r4, #12]
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <cleanup_stdio+0x3c>)
 8001f4e:	4299      	cmp	r1, r3
 8001f50:	d004      	beq.n	8001f5c <cleanup_stdio+0x30>
 8001f52:	4620      	mov	r0, r4
 8001f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f58:	f000 bc54 	b.w	8002804 <_fflush_r>
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000188 	.word	0x20000188
 8001f64:	200001f0 	.word	0x200001f0
 8001f68:	20000258 	.word	0x20000258

08001f6c <global_stdio_init.part.0>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <global_stdio_init.part.0+0x30>)
 8001f70:	4c0b      	ldr	r4, [pc, #44]	@ (8001fa0 <global_stdio_init.part.0+0x34>)
 8001f72:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <global_stdio_init.part.0+0x38>)
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	4620      	mov	r0, r4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	f7ff ff94 	bl	8001ea8 <std>
 8001f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001f84:	2201      	movs	r2, #1
 8001f86:	2109      	movs	r1, #9
 8001f88:	f7ff ff8e 	bl	8001ea8 <std>
 8001f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001f90:	2202      	movs	r2, #2
 8001f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f96:	2112      	movs	r1, #18
 8001f98:	f7ff bf86 	b.w	8001ea8 <std>
 8001f9c:	200002c0 	.word	0x200002c0
 8001fa0:	20000188 	.word	0x20000188
 8001fa4:	08001f15 	.word	0x08001f15

08001fa8 <__sfp_lock_acquire>:
 8001fa8:	4801      	ldr	r0, [pc, #4]	@ (8001fb0 <__sfp_lock_acquire+0x8>)
 8001faa:	f000 baa4 	b.w	80024f6 <__retarget_lock_acquire_recursive>
 8001fae:	bf00      	nop
 8001fb0:	200002c9 	.word	0x200002c9

08001fb4 <__sfp_lock_release>:
 8001fb4:	4801      	ldr	r0, [pc, #4]	@ (8001fbc <__sfp_lock_release+0x8>)
 8001fb6:	f000 ba9f 	b.w	80024f8 <__retarget_lock_release_recursive>
 8001fba:	bf00      	nop
 8001fbc:	200002c9 	.word	0x200002c9

08001fc0 <__sinit>:
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	f7ff fff0 	bl	8001fa8 <__sfp_lock_acquire>
 8001fc8:	6a23      	ldr	r3, [r4, #32]
 8001fca:	b11b      	cbz	r3, 8001fd4 <__sinit+0x14>
 8001fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fd0:	f7ff bff0 	b.w	8001fb4 <__sfp_lock_release>
 8001fd4:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <__sinit+0x28>)
 8001fd6:	6223      	str	r3, [r4, #32]
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <__sinit+0x2c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f5      	bne.n	8001fcc <__sinit+0xc>
 8001fe0:	f7ff ffc4 	bl	8001f6c <global_stdio_init.part.0>
 8001fe4:	e7f2      	b.n	8001fcc <__sinit+0xc>
 8001fe6:	bf00      	nop
 8001fe8:	08001f2d 	.word	0x08001f2d
 8001fec:	200002c0 	.word	0x200002c0

08001ff0 <_fwalk_sglue>:
 8001ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ff4:	4607      	mov	r7, r0
 8001ff6:	4688      	mov	r8, r1
 8001ff8:	4614      	mov	r4, r2
 8001ffa:	2600      	movs	r6, #0
 8001ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002000:	f1b9 0901 	subs.w	r9, r9, #1
 8002004:	d505      	bpl.n	8002012 <_fwalk_sglue+0x22>
 8002006:	6824      	ldr	r4, [r4, #0]
 8002008:	2c00      	cmp	r4, #0
 800200a:	d1f7      	bne.n	8001ffc <_fwalk_sglue+0xc>
 800200c:	4630      	mov	r0, r6
 800200e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002012:	89ab      	ldrh	r3, [r5, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d907      	bls.n	8002028 <_fwalk_sglue+0x38>
 8002018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800201c:	3301      	adds	r3, #1
 800201e:	d003      	beq.n	8002028 <_fwalk_sglue+0x38>
 8002020:	4629      	mov	r1, r5
 8002022:	4638      	mov	r0, r7
 8002024:	47c0      	blx	r8
 8002026:	4306      	orrs	r6, r0
 8002028:	3568      	adds	r5, #104	@ 0x68
 800202a:	e7e9      	b.n	8002000 <_fwalk_sglue+0x10>

0800202c <_puts_r>:
 800202c:	6a03      	ldr	r3, [r0, #32]
 800202e:	b570      	push	{r4, r5, r6, lr}
 8002030:	6884      	ldr	r4, [r0, #8]
 8002032:	4605      	mov	r5, r0
 8002034:	460e      	mov	r6, r1
 8002036:	b90b      	cbnz	r3, 800203c <_puts_r+0x10>
 8002038:	f7ff ffc2 	bl	8001fc0 <__sinit>
 800203c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800203e:	07db      	lsls	r3, r3, #31
 8002040:	d405      	bmi.n	800204e <_puts_r+0x22>
 8002042:	89a3      	ldrh	r3, [r4, #12]
 8002044:	0598      	lsls	r0, r3, #22
 8002046:	d402      	bmi.n	800204e <_puts_r+0x22>
 8002048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800204a:	f000 fa54 	bl	80024f6 <__retarget_lock_acquire_recursive>
 800204e:	89a3      	ldrh	r3, [r4, #12]
 8002050:	0719      	lsls	r1, r3, #28
 8002052:	d502      	bpl.n	800205a <_puts_r+0x2e>
 8002054:	6923      	ldr	r3, [r4, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d135      	bne.n	80020c6 <_puts_r+0x9a>
 800205a:	4621      	mov	r1, r4
 800205c:	4628      	mov	r0, r5
 800205e:	f000 f981 	bl	8002364 <__swsetup_r>
 8002062:	b380      	cbz	r0, 80020c6 <_puts_r+0x9a>
 8002064:	f04f 35ff 	mov.w	r5, #4294967295
 8002068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800206a:	07da      	lsls	r2, r3, #31
 800206c:	d405      	bmi.n	800207a <_puts_r+0x4e>
 800206e:	89a3      	ldrh	r3, [r4, #12]
 8002070:	059b      	lsls	r3, r3, #22
 8002072:	d402      	bmi.n	800207a <_puts_r+0x4e>
 8002074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002076:	f000 fa3f 	bl	80024f8 <__retarget_lock_release_recursive>
 800207a:	4628      	mov	r0, r5
 800207c:	bd70      	pop	{r4, r5, r6, pc}
 800207e:	2b00      	cmp	r3, #0
 8002080:	da04      	bge.n	800208c <_puts_r+0x60>
 8002082:	69a2      	ldr	r2, [r4, #24]
 8002084:	429a      	cmp	r2, r3
 8002086:	dc17      	bgt.n	80020b8 <_puts_r+0x8c>
 8002088:	290a      	cmp	r1, #10
 800208a:	d015      	beq.n	80020b8 <_puts_r+0x8c>
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	6022      	str	r2, [r4, #0]
 8002092:	7019      	strb	r1, [r3, #0]
 8002094:	68a3      	ldr	r3, [r4, #8]
 8002096:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800209a:	3b01      	subs	r3, #1
 800209c:	60a3      	str	r3, [r4, #8]
 800209e:	2900      	cmp	r1, #0
 80020a0:	d1ed      	bne.n	800207e <_puts_r+0x52>
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	da11      	bge.n	80020ca <_puts_r+0x9e>
 80020a6:	4622      	mov	r2, r4
 80020a8:	210a      	movs	r1, #10
 80020aa:	4628      	mov	r0, r5
 80020ac:	f000 f91b 	bl	80022e6 <__swbuf_r>
 80020b0:	3001      	adds	r0, #1
 80020b2:	d0d7      	beq.n	8002064 <_puts_r+0x38>
 80020b4:	250a      	movs	r5, #10
 80020b6:	e7d7      	b.n	8002068 <_puts_r+0x3c>
 80020b8:	4622      	mov	r2, r4
 80020ba:	4628      	mov	r0, r5
 80020bc:	f000 f913 	bl	80022e6 <__swbuf_r>
 80020c0:	3001      	adds	r0, #1
 80020c2:	d1e7      	bne.n	8002094 <_puts_r+0x68>
 80020c4:	e7ce      	b.n	8002064 <_puts_r+0x38>
 80020c6:	3e01      	subs	r6, #1
 80020c8:	e7e4      	b.n	8002094 <_puts_r+0x68>
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	6022      	str	r2, [r4, #0]
 80020d0:	220a      	movs	r2, #10
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e7ee      	b.n	80020b4 <_puts_r+0x88>
	...

080020d8 <puts>:
 80020d8:	4b02      	ldr	r3, [pc, #8]	@ (80020e4 <puts+0xc>)
 80020da:	4601      	mov	r1, r0
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	f7ff bfa5 	b.w	800202c <_puts_r>
 80020e2:	bf00      	nop
 80020e4:	2000002c 	.word	0x2000002c

080020e8 <setbuf>:
 80020e8:	fab1 f281 	clz	r2, r1
 80020ec:	0952      	lsrs	r2, r2, #5
 80020ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020f2:	0052      	lsls	r2, r2, #1
 80020f4:	f000 b800 	b.w	80020f8 <setvbuf>

080020f8 <setvbuf>:
 80020f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80020fc:	461d      	mov	r5, r3
 80020fe:	4b57      	ldr	r3, [pc, #348]	@ (800225c <setvbuf+0x164>)
 8002100:	681f      	ldr	r7, [r3, #0]
 8002102:	4604      	mov	r4, r0
 8002104:	460e      	mov	r6, r1
 8002106:	4690      	mov	r8, r2
 8002108:	b127      	cbz	r7, 8002114 <setvbuf+0x1c>
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	b913      	cbnz	r3, 8002114 <setvbuf+0x1c>
 800210e:	4638      	mov	r0, r7
 8002110:	f7ff ff56 	bl	8001fc0 <__sinit>
 8002114:	f1b8 0f02 	cmp.w	r8, #2
 8002118:	d006      	beq.n	8002128 <setvbuf+0x30>
 800211a:	f1b8 0f01 	cmp.w	r8, #1
 800211e:	f200 809a 	bhi.w	8002256 <setvbuf+0x15e>
 8002122:	2d00      	cmp	r5, #0
 8002124:	f2c0 8097 	blt.w	8002256 <setvbuf+0x15e>
 8002128:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800212a:	07d9      	lsls	r1, r3, #31
 800212c:	d405      	bmi.n	800213a <setvbuf+0x42>
 800212e:	89a3      	ldrh	r3, [r4, #12]
 8002130:	059a      	lsls	r2, r3, #22
 8002132:	d402      	bmi.n	800213a <setvbuf+0x42>
 8002134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002136:	f000 f9de 	bl	80024f6 <__retarget_lock_acquire_recursive>
 800213a:	4621      	mov	r1, r4
 800213c:	4638      	mov	r0, r7
 800213e:	f000 fb61 	bl	8002804 <_fflush_r>
 8002142:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002144:	b141      	cbz	r1, 8002158 <setvbuf+0x60>
 8002146:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800214a:	4299      	cmp	r1, r3
 800214c:	d002      	beq.n	8002154 <setvbuf+0x5c>
 800214e:	4638      	mov	r0, r7
 8002150:	f000 f9d4 	bl	80024fc <_free_r>
 8002154:	2300      	movs	r3, #0
 8002156:	6363      	str	r3, [r4, #52]	@ 0x34
 8002158:	2300      	movs	r3, #0
 800215a:	61a3      	str	r3, [r4, #24]
 800215c:	6063      	str	r3, [r4, #4]
 800215e:	89a3      	ldrh	r3, [r4, #12]
 8002160:	061b      	lsls	r3, r3, #24
 8002162:	d503      	bpl.n	800216c <setvbuf+0x74>
 8002164:	6921      	ldr	r1, [r4, #16]
 8002166:	4638      	mov	r0, r7
 8002168:	f000 f9c8 	bl	80024fc <_free_r>
 800216c:	89a3      	ldrh	r3, [r4, #12]
 800216e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	f1b8 0f02 	cmp.w	r8, #2
 800217a:	81a3      	strh	r3, [r4, #12]
 800217c:	d061      	beq.n	8002242 <setvbuf+0x14a>
 800217e:	ab01      	add	r3, sp, #4
 8002180:	466a      	mov	r2, sp
 8002182:	4621      	mov	r1, r4
 8002184:	4638      	mov	r0, r7
 8002186:	f000 fb65 	bl	8002854 <__swhatbuf_r>
 800218a:	89a3      	ldrh	r3, [r4, #12]
 800218c:	4318      	orrs	r0, r3
 800218e:	81a0      	strh	r0, [r4, #12]
 8002190:	bb2d      	cbnz	r5, 80021de <setvbuf+0xe6>
 8002192:	9d00      	ldr	r5, [sp, #0]
 8002194:	4628      	mov	r0, r5
 8002196:	f000 f9fb 	bl	8002590 <malloc>
 800219a:	4606      	mov	r6, r0
 800219c:	2800      	cmp	r0, #0
 800219e:	d152      	bne.n	8002246 <setvbuf+0x14e>
 80021a0:	f8dd 9000 	ldr.w	r9, [sp]
 80021a4:	45a9      	cmp	r9, r5
 80021a6:	d140      	bne.n	800222a <setvbuf+0x132>
 80021a8:	f04f 35ff 	mov.w	r5, #4294967295
 80021ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021b0:	f043 0202 	orr.w	r2, r3, #2
 80021b4:	81a2      	strh	r2, [r4, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	60a2      	str	r2, [r4, #8]
 80021ba:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80021be:	6022      	str	r2, [r4, #0]
 80021c0:	6122      	str	r2, [r4, #16]
 80021c2:	2201      	movs	r2, #1
 80021c4:	6162      	str	r2, [r4, #20]
 80021c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80021c8:	07d6      	lsls	r6, r2, #31
 80021ca:	d404      	bmi.n	80021d6 <setvbuf+0xde>
 80021cc:	0598      	lsls	r0, r3, #22
 80021ce:	d402      	bmi.n	80021d6 <setvbuf+0xde>
 80021d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021d2:	f000 f991 	bl	80024f8 <__retarget_lock_release_recursive>
 80021d6:	4628      	mov	r0, r5
 80021d8:	b003      	add	sp, #12
 80021da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021de:	2e00      	cmp	r6, #0
 80021e0:	d0d8      	beq.n	8002194 <setvbuf+0x9c>
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	b913      	cbnz	r3, 80021ec <setvbuf+0xf4>
 80021e6:	4638      	mov	r0, r7
 80021e8:	f7ff feea 	bl	8001fc0 <__sinit>
 80021ec:	f1b8 0f01 	cmp.w	r8, #1
 80021f0:	bf08      	it	eq
 80021f2:	89a3      	ldrheq	r3, [r4, #12]
 80021f4:	6026      	str	r6, [r4, #0]
 80021f6:	bf04      	itt	eq
 80021f8:	f043 0301 	orreq.w	r3, r3, #1
 80021fc:	81a3      	strheq	r3, [r4, #12]
 80021fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002202:	f013 0208 	ands.w	r2, r3, #8
 8002206:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800220a:	d01e      	beq.n	800224a <setvbuf+0x152>
 800220c:	07d9      	lsls	r1, r3, #31
 800220e:	bf41      	itttt	mi
 8002210:	2200      	movmi	r2, #0
 8002212:	426d      	negmi	r5, r5
 8002214:	60a2      	strmi	r2, [r4, #8]
 8002216:	61a5      	strmi	r5, [r4, #24]
 8002218:	bf58      	it	pl
 800221a:	60a5      	strpl	r5, [r4, #8]
 800221c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800221e:	07d2      	lsls	r2, r2, #31
 8002220:	d401      	bmi.n	8002226 <setvbuf+0x12e>
 8002222:	059b      	lsls	r3, r3, #22
 8002224:	d513      	bpl.n	800224e <setvbuf+0x156>
 8002226:	2500      	movs	r5, #0
 8002228:	e7d5      	b.n	80021d6 <setvbuf+0xde>
 800222a:	4648      	mov	r0, r9
 800222c:	f000 f9b0 	bl	8002590 <malloc>
 8002230:	4606      	mov	r6, r0
 8002232:	2800      	cmp	r0, #0
 8002234:	d0b8      	beq.n	80021a8 <setvbuf+0xb0>
 8002236:	89a3      	ldrh	r3, [r4, #12]
 8002238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800223c:	81a3      	strh	r3, [r4, #12]
 800223e:	464d      	mov	r5, r9
 8002240:	e7cf      	b.n	80021e2 <setvbuf+0xea>
 8002242:	2500      	movs	r5, #0
 8002244:	e7b2      	b.n	80021ac <setvbuf+0xb4>
 8002246:	46a9      	mov	r9, r5
 8002248:	e7f5      	b.n	8002236 <setvbuf+0x13e>
 800224a:	60a2      	str	r2, [r4, #8]
 800224c:	e7e6      	b.n	800221c <setvbuf+0x124>
 800224e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002250:	f000 f952 	bl	80024f8 <__retarget_lock_release_recursive>
 8002254:	e7e7      	b.n	8002226 <setvbuf+0x12e>
 8002256:	f04f 35ff 	mov.w	r5, #4294967295
 800225a:	e7bc      	b.n	80021d6 <setvbuf+0xde>
 800225c:	2000002c 	.word	0x2000002c

08002260 <__sread>:
 8002260:	b510      	push	{r4, lr}
 8002262:	460c      	mov	r4, r1
 8002264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002268:	f000 f8fc 	bl	8002464 <_read_r>
 800226c:	2800      	cmp	r0, #0
 800226e:	bfab      	itete	ge
 8002270:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002272:	89a3      	ldrhlt	r3, [r4, #12]
 8002274:	181b      	addge	r3, r3, r0
 8002276:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800227a:	bfac      	ite	ge
 800227c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800227e:	81a3      	strhlt	r3, [r4, #12]
 8002280:	bd10      	pop	{r4, pc}

08002282 <__swrite>:
 8002282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002286:	461f      	mov	r7, r3
 8002288:	898b      	ldrh	r3, [r1, #12]
 800228a:	05db      	lsls	r3, r3, #23
 800228c:	4605      	mov	r5, r0
 800228e:	460c      	mov	r4, r1
 8002290:	4616      	mov	r6, r2
 8002292:	d505      	bpl.n	80022a0 <__swrite+0x1e>
 8002294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002298:	2302      	movs	r3, #2
 800229a:	2200      	movs	r2, #0
 800229c:	f000 f8d0 	bl	8002440 <_lseek_r>
 80022a0:	89a3      	ldrh	r3, [r4, #12]
 80022a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022aa:	81a3      	strh	r3, [r4, #12]
 80022ac:	4632      	mov	r2, r6
 80022ae:	463b      	mov	r3, r7
 80022b0:	4628      	mov	r0, r5
 80022b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022b6:	f000 b8e7 	b.w	8002488 <_write_r>

080022ba <__sseek>:
 80022ba:	b510      	push	{r4, lr}
 80022bc:	460c      	mov	r4, r1
 80022be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c2:	f000 f8bd 	bl	8002440 <_lseek_r>
 80022c6:	1c43      	adds	r3, r0, #1
 80022c8:	89a3      	ldrh	r3, [r4, #12]
 80022ca:	bf15      	itete	ne
 80022cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80022ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80022d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80022d6:	81a3      	strheq	r3, [r4, #12]
 80022d8:	bf18      	it	ne
 80022da:	81a3      	strhne	r3, [r4, #12]
 80022dc:	bd10      	pop	{r4, pc}

080022de <__sclose>:
 80022de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e2:	f000 b89d 	b.w	8002420 <_close_r>

080022e6 <__swbuf_r>:
 80022e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e8:	460e      	mov	r6, r1
 80022ea:	4614      	mov	r4, r2
 80022ec:	4605      	mov	r5, r0
 80022ee:	b118      	cbz	r0, 80022f8 <__swbuf_r+0x12>
 80022f0:	6a03      	ldr	r3, [r0, #32]
 80022f2:	b90b      	cbnz	r3, 80022f8 <__swbuf_r+0x12>
 80022f4:	f7ff fe64 	bl	8001fc0 <__sinit>
 80022f8:	69a3      	ldr	r3, [r4, #24]
 80022fa:	60a3      	str	r3, [r4, #8]
 80022fc:	89a3      	ldrh	r3, [r4, #12]
 80022fe:	071a      	lsls	r2, r3, #28
 8002300:	d501      	bpl.n	8002306 <__swbuf_r+0x20>
 8002302:	6923      	ldr	r3, [r4, #16]
 8002304:	b943      	cbnz	r3, 8002318 <__swbuf_r+0x32>
 8002306:	4621      	mov	r1, r4
 8002308:	4628      	mov	r0, r5
 800230a:	f000 f82b 	bl	8002364 <__swsetup_r>
 800230e:	b118      	cbz	r0, 8002318 <__swbuf_r+0x32>
 8002310:	f04f 37ff 	mov.w	r7, #4294967295
 8002314:	4638      	mov	r0, r7
 8002316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	6922      	ldr	r2, [r4, #16]
 800231c:	1a98      	subs	r0, r3, r2
 800231e:	6963      	ldr	r3, [r4, #20]
 8002320:	b2f6      	uxtb	r6, r6
 8002322:	4283      	cmp	r3, r0
 8002324:	4637      	mov	r7, r6
 8002326:	dc05      	bgt.n	8002334 <__swbuf_r+0x4e>
 8002328:	4621      	mov	r1, r4
 800232a:	4628      	mov	r0, r5
 800232c:	f000 fa6a 	bl	8002804 <_fflush_r>
 8002330:	2800      	cmp	r0, #0
 8002332:	d1ed      	bne.n	8002310 <__swbuf_r+0x2a>
 8002334:	68a3      	ldr	r3, [r4, #8]
 8002336:	3b01      	subs	r3, #1
 8002338:	60a3      	str	r3, [r4, #8]
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	6022      	str	r2, [r4, #0]
 8002340:	701e      	strb	r6, [r3, #0]
 8002342:	6962      	ldr	r2, [r4, #20]
 8002344:	1c43      	adds	r3, r0, #1
 8002346:	429a      	cmp	r2, r3
 8002348:	d004      	beq.n	8002354 <__swbuf_r+0x6e>
 800234a:	89a3      	ldrh	r3, [r4, #12]
 800234c:	07db      	lsls	r3, r3, #31
 800234e:	d5e1      	bpl.n	8002314 <__swbuf_r+0x2e>
 8002350:	2e0a      	cmp	r6, #10
 8002352:	d1df      	bne.n	8002314 <__swbuf_r+0x2e>
 8002354:	4621      	mov	r1, r4
 8002356:	4628      	mov	r0, r5
 8002358:	f000 fa54 	bl	8002804 <_fflush_r>
 800235c:	2800      	cmp	r0, #0
 800235e:	d0d9      	beq.n	8002314 <__swbuf_r+0x2e>
 8002360:	e7d6      	b.n	8002310 <__swbuf_r+0x2a>
	...

08002364 <__swsetup_r>:
 8002364:	b538      	push	{r3, r4, r5, lr}
 8002366:	4b29      	ldr	r3, [pc, #164]	@ (800240c <__swsetup_r+0xa8>)
 8002368:	4605      	mov	r5, r0
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	460c      	mov	r4, r1
 800236e:	b118      	cbz	r0, 8002378 <__swsetup_r+0x14>
 8002370:	6a03      	ldr	r3, [r0, #32]
 8002372:	b90b      	cbnz	r3, 8002378 <__swsetup_r+0x14>
 8002374:	f7ff fe24 	bl	8001fc0 <__sinit>
 8002378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800237c:	0719      	lsls	r1, r3, #28
 800237e:	d422      	bmi.n	80023c6 <__swsetup_r+0x62>
 8002380:	06da      	lsls	r2, r3, #27
 8002382:	d407      	bmi.n	8002394 <__swsetup_r+0x30>
 8002384:	2209      	movs	r2, #9
 8002386:	602a      	str	r2, [r5, #0]
 8002388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800238c:	81a3      	strh	r3, [r4, #12]
 800238e:	f04f 30ff 	mov.w	r0, #4294967295
 8002392:	e033      	b.n	80023fc <__swsetup_r+0x98>
 8002394:	0758      	lsls	r0, r3, #29
 8002396:	d512      	bpl.n	80023be <__swsetup_r+0x5a>
 8002398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800239a:	b141      	cbz	r1, 80023ae <__swsetup_r+0x4a>
 800239c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023a0:	4299      	cmp	r1, r3
 80023a2:	d002      	beq.n	80023aa <__swsetup_r+0x46>
 80023a4:	4628      	mov	r0, r5
 80023a6:	f000 f8a9 	bl	80024fc <_free_r>
 80023aa:	2300      	movs	r3, #0
 80023ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80023ae:	89a3      	ldrh	r3, [r4, #12]
 80023b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80023b4:	81a3      	strh	r3, [r4, #12]
 80023b6:	2300      	movs	r3, #0
 80023b8:	6063      	str	r3, [r4, #4]
 80023ba:	6923      	ldr	r3, [r4, #16]
 80023bc:	6023      	str	r3, [r4, #0]
 80023be:	89a3      	ldrh	r3, [r4, #12]
 80023c0:	f043 0308 	orr.w	r3, r3, #8
 80023c4:	81a3      	strh	r3, [r4, #12]
 80023c6:	6923      	ldr	r3, [r4, #16]
 80023c8:	b94b      	cbnz	r3, 80023de <__swsetup_r+0x7a>
 80023ca:	89a3      	ldrh	r3, [r4, #12]
 80023cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023d4:	d003      	beq.n	80023de <__swsetup_r+0x7a>
 80023d6:	4621      	mov	r1, r4
 80023d8:	4628      	mov	r0, r5
 80023da:	f000 fa61 	bl	80028a0 <__smakebuf_r>
 80023de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e2:	f013 0201 	ands.w	r2, r3, #1
 80023e6:	d00a      	beq.n	80023fe <__swsetup_r+0x9a>
 80023e8:	2200      	movs	r2, #0
 80023ea:	60a2      	str	r2, [r4, #8]
 80023ec:	6962      	ldr	r2, [r4, #20]
 80023ee:	4252      	negs	r2, r2
 80023f0:	61a2      	str	r2, [r4, #24]
 80023f2:	6922      	ldr	r2, [r4, #16]
 80023f4:	b942      	cbnz	r2, 8002408 <__swsetup_r+0xa4>
 80023f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80023fa:	d1c5      	bne.n	8002388 <__swsetup_r+0x24>
 80023fc:	bd38      	pop	{r3, r4, r5, pc}
 80023fe:	0799      	lsls	r1, r3, #30
 8002400:	bf58      	it	pl
 8002402:	6962      	ldrpl	r2, [r4, #20]
 8002404:	60a2      	str	r2, [r4, #8]
 8002406:	e7f4      	b.n	80023f2 <__swsetup_r+0x8e>
 8002408:	2000      	movs	r0, #0
 800240a:	e7f7      	b.n	80023fc <__swsetup_r+0x98>
 800240c:	2000002c 	.word	0x2000002c

08002410 <memset>:
 8002410:	4402      	add	r2, r0
 8002412:	4603      	mov	r3, r0
 8002414:	4293      	cmp	r3, r2
 8002416:	d100      	bne.n	800241a <memset+0xa>
 8002418:	4770      	bx	lr
 800241a:	f803 1b01 	strb.w	r1, [r3], #1
 800241e:	e7f9      	b.n	8002414 <memset+0x4>

08002420 <_close_r>:
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4d06      	ldr	r5, [pc, #24]	@ (800243c <_close_r+0x1c>)
 8002424:	2300      	movs	r3, #0
 8002426:	4604      	mov	r4, r0
 8002428:	4608      	mov	r0, r1
 800242a:	602b      	str	r3, [r5, #0]
 800242c:	f7fe fb6a 	bl	8000b04 <_close>
 8002430:	1c43      	adds	r3, r0, #1
 8002432:	d102      	bne.n	800243a <_close_r+0x1a>
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	b103      	cbz	r3, 800243a <_close_r+0x1a>
 8002438:	6023      	str	r3, [r4, #0]
 800243a:	bd38      	pop	{r3, r4, r5, pc}
 800243c:	200002c4 	.word	0x200002c4

08002440 <_lseek_r>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	4d07      	ldr	r5, [pc, #28]	@ (8002460 <_lseek_r+0x20>)
 8002444:	4604      	mov	r4, r0
 8002446:	4608      	mov	r0, r1
 8002448:	4611      	mov	r1, r2
 800244a:	2200      	movs	r2, #0
 800244c:	602a      	str	r2, [r5, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	f7fe fb59 	bl	8000b06 <_lseek>
 8002454:	1c43      	adds	r3, r0, #1
 8002456:	d102      	bne.n	800245e <_lseek_r+0x1e>
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	b103      	cbz	r3, 800245e <_lseek_r+0x1e>
 800245c:	6023      	str	r3, [r4, #0]
 800245e:	bd38      	pop	{r3, r4, r5, pc}
 8002460:	200002c4 	.word	0x200002c4

08002464 <_read_r>:
 8002464:	b538      	push	{r3, r4, r5, lr}
 8002466:	4d07      	ldr	r5, [pc, #28]	@ (8002484 <_read_r+0x20>)
 8002468:	4604      	mov	r4, r0
 800246a:	4608      	mov	r0, r1
 800246c:	4611      	mov	r1, r2
 800246e:	2200      	movs	r2, #0
 8002470:	602a      	str	r2, [r5, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	f7fe fb38 	bl	8000ae8 <_read>
 8002478:	1c43      	adds	r3, r0, #1
 800247a:	d102      	bne.n	8002482 <_read_r+0x1e>
 800247c:	682b      	ldr	r3, [r5, #0]
 800247e:	b103      	cbz	r3, 8002482 <_read_r+0x1e>
 8002480:	6023      	str	r3, [r4, #0]
 8002482:	bd38      	pop	{r3, r4, r5, pc}
 8002484:	200002c4 	.word	0x200002c4

08002488 <_write_r>:
 8002488:	b538      	push	{r3, r4, r5, lr}
 800248a:	4d07      	ldr	r5, [pc, #28]	@ (80024a8 <_write_r+0x20>)
 800248c:	4604      	mov	r4, r0
 800248e:	4608      	mov	r0, r1
 8002490:	4611      	mov	r1, r2
 8002492:	2200      	movs	r2, #0
 8002494:	602a      	str	r2, [r5, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	f7fe fb1a 	bl	8000ad0 <_write>
 800249c:	1c43      	adds	r3, r0, #1
 800249e:	d102      	bne.n	80024a6 <_write_r+0x1e>
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	b103      	cbz	r3, 80024a6 <_write_r+0x1e>
 80024a4:	6023      	str	r3, [r4, #0]
 80024a6:	bd38      	pop	{r3, r4, r5, pc}
 80024a8:	200002c4 	.word	0x200002c4

080024ac <__libc_init_array>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	4d0d      	ldr	r5, [pc, #52]	@ (80024e4 <__libc_init_array+0x38>)
 80024b0:	4c0d      	ldr	r4, [pc, #52]	@ (80024e8 <__libc_init_array+0x3c>)
 80024b2:	1b64      	subs	r4, r4, r5
 80024b4:	10a4      	asrs	r4, r4, #2
 80024b6:	2600      	movs	r6, #0
 80024b8:	42a6      	cmp	r6, r4
 80024ba:	d109      	bne.n	80024d0 <__libc_init_array+0x24>
 80024bc:	4d0b      	ldr	r5, [pc, #44]	@ (80024ec <__libc_init_array+0x40>)
 80024be:	4c0c      	ldr	r4, [pc, #48]	@ (80024f0 <__libc_init_array+0x44>)
 80024c0:	f000 fa6a 	bl	8002998 <_init>
 80024c4:	1b64      	subs	r4, r4, r5
 80024c6:	10a4      	asrs	r4, r4, #2
 80024c8:	2600      	movs	r6, #0
 80024ca:	42a6      	cmp	r6, r4
 80024cc:	d105      	bne.n	80024da <__libc_init_array+0x2e>
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
 80024d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024d4:	4798      	blx	r3
 80024d6:	3601      	adds	r6, #1
 80024d8:	e7ee      	b.n	80024b8 <__libc_init_array+0xc>
 80024da:	f855 3b04 	ldr.w	r3, [r5], #4
 80024de:	4798      	blx	r3
 80024e0:	3601      	adds	r6, #1
 80024e2:	e7f2      	b.n	80024ca <__libc_init_array+0x1e>
 80024e4:	080029d8 	.word	0x080029d8
 80024e8:	080029d8 	.word	0x080029d8
 80024ec:	080029d8 	.word	0x080029d8
 80024f0:	080029dc 	.word	0x080029dc

080024f4 <__retarget_lock_init_recursive>:
 80024f4:	4770      	bx	lr

080024f6 <__retarget_lock_acquire_recursive>:
 80024f6:	4770      	bx	lr

080024f8 <__retarget_lock_release_recursive>:
 80024f8:	4770      	bx	lr
	...

080024fc <_free_r>:
 80024fc:	b538      	push	{r3, r4, r5, lr}
 80024fe:	4605      	mov	r5, r0
 8002500:	2900      	cmp	r1, #0
 8002502:	d041      	beq.n	8002588 <_free_r+0x8c>
 8002504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002508:	1f0c      	subs	r4, r1, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	bfb8      	it	lt
 800250e:	18e4      	addlt	r4, r4, r3
 8002510:	f000 f8e8 	bl	80026e4 <__malloc_lock>
 8002514:	4a1d      	ldr	r2, [pc, #116]	@ (800258c <_free_r+0x90>)
 8002516:	6813      	ldr	r3, [r2, #0]
 8002518:	b933      	cbnz	r3, 8002528 <_free_r+0x2c>
 800251a:	6063      	str	r3, [r4, #4]
 800251c:	6014      	str	r4, [r2, #0]
 800251e:	4628      	mov	r0, r5
 8002520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002524:	f000 b8e4 	b.w	80026f0 <__malloc_unlock>
 8002528:	42a3      	cmp	r3, r4
 800252a:	d908      	bls.n	800253e <_free_r+0x42>
 800252c:	6820      	ldr	r0, [r4, #0]
 800252e:	1821      	adds	r1, r4, r0
 8002530:	428b      	cmp	r3, r1
 8002532:	bf01      	itttt	eq
 8002534:	6819      	ldreq	r1, [r3, #0]
 8002536:	685b      	ldreq	r3, [r3, #4]
 8002538:	1809      	addeq	r1, r1, r0
 800253a:	6021      	streq	r1, [r4, #0]
 800253c:	e7ed      	b.n	800251a <_free_r+0x1e>
 800253e:	461a      	mov	r2, r3
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	b10b      	cbz	r3, 8002548 <_free_r+0x4c>
 8002544:	42a3      	cmp	r3, r4
 8002546:	d9fa      	bls.n	800253e <_free_r+0x42>
 8002548:	6811      	ldr	r1, [r2, #0]
 800254a:	1850      	adds	r0, r2, r1
 800254c:	42a0      	cmp	r0, r4
 800254e:	d10b      	bne.n	8002568 <_free_r+0x6c>
 8002550:	6820      	ldr	r0, [r4, #0]
 8002552:	4401      	add	r1, r0
 8002554:	1850      	adds	r0, r2, r1
 8002556:	4283      	cmp	r3, r0
 8002558:	6011      	str	r1, [r2, #0]
 800255a:	d1e0      	bne.n	800251e <_free_r+0x22>
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	6053      	str	r3, [r2, #4]
 8002562:	4408      	add	r0, r1
 8002564:	6010      	str	r0, [r2, #0]
 8002566:	e7da      	b.n	800251e <_free_r+0x22>
 8002568:	d902      	bls.n	8002570 <_free_r+0x74>
 800256a:	230c      	movs	r3, #12
 800256c:	602b      	str	r3, [r5, #0]
 800256e:	e7d6      	b.n	800251e <_free_r+0x22>
 8002570:	6820      	ldr	r0, [r4, #0]
 8002572:	1821      	adds	r1, r4, r0
 8002574:	428b      	cmp	r3, r1
 8002576:	bf04      	itt	eq
 8002578:	6819      	ldreq	r1, [r3, #0]
 800257a:	685b      	ldreq	r3, [r3, #4]
 800257c:	6063      	str	r3, [r4, #4]
 800257e:	bf04      	itt	eq
 8002580:	1809      	addeq	r1, r1, r0
 8002582:	6021      	streq	r1, [r4, #0]
 8002584:	6054      	str	r4, [r2, #4]
 8002586:	e7ca      	b.n	800251e <_free_r+0x22>
 8002588:	bd38      	pop	{r3, r4, r5, pc}
 800258a:	bf00      	nop
 800258c:	200002d0 	.word	0x200002d0

08002590 <malloc>:
 8002590:	4b02      	ldr	r3, [pc, #8]	@ (800259c <malloc+0xc>)
 8002592:	4601      	mov	r1, r0
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	f000 b825 	b.w	80025e4 <_malloc_r>
 800259a:	bf00      	nop
 800259c:	2000002c 	.word	0x2000002c

080025a0 <sbrk_aligned>:
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	4e0f      	ldr	r6, [pc, #60]	@ (80025e0 <sbrk_aligned+0x40>)
 80025a4:	460c      	mov	r4, r1
 80025a6:	6831      	ldr	r1, [r6, #0]
 80025a8:	4605      	mov	r5, r0
 80025aa:	b911      	cbnz	r1, 80025b2 <sbrk_aligned+0x12>
 80025ac:	f000 f9d6 	bl	800295c <_sbrk_r>
 80025b0:	6030      	str	r0, [r6, #0]
 80025b2:	4621      	mov	r1, r4
 80025b4:	4628      	mov	r0, r5
 80025b6:	f000 f9d1 	bl	800295c <_sbrk_r>
 80025ba:	1c43      	adds	r3, r0, #1
 80025bc:	d103      	bne.n	80025c6 <sbrk_aligned+0x26>
 80025be:	f04f 34ff 	mov.w	r4, #4294967295
 80025c2:	4620      	mov	r0, r4
 80025c4:	bd70      	pop	{r4, r5, r6, pc}
 80025c6:	1cc4      	adds	r4, r0, #3
 80025c8:	f024 0403 	bic.w	r4, r4, #3
 80025cc:	42a0      	cmp	r0, r4
 80025ce:	d0f8      	beq.n	80025c2 <sbrk_aligned+0x22>
 80025d0:	1a21      	subs	r1, r4, r0
 80025d2:	4628      	mov	r0, r5
 80025d4:	f000 f9c2 	bl	800295c <_sbrk_r>
 80025d8:	3001      	adds	r0, #1
 80025da:	d1f2      	bne.n	80025c2 <sbrk_aligned+0x22>
 80025dc:	e7ef      	b.n	80025be <sbrk_aligned+0x1e>
 80025de:	bf00      	nop
 80025e0:	200002cc 	.word	0x200002cc

080025e4 <_malloc_r>:
 80025e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025e8:	1ccd      	adds	r5, r1, #3
 80025ea:	f025 0503 	bic.w	r5, r5, #3
 80025ee:	3508      	adds	r5, #8
 80025f0:	2d0c      	cmp	r5, #12
 80025f2:	bf38      	it	cc
 80025f4:	250c      	movcc	r5, #12
 80025f6:	2d00      	cmp	r5, #0
 80025f8:	4606      	mov	r6, r0
 80025fa:	db01      	blt.n	8002600 <_malloc_r+0x1c>
 80025fc:	42a9      	cmp	r1, r5
 80025fe:	d904      	bls.n	800260a <_malloc_r+0x26>
 8002600:	230c      	movs	r3, #12
 8002602:	6033      	str	r3, [r6, #0]
 8002604:	2000      	movs	r0, #0
 8002606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800260a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80026e0 <_malloc_r+0xfc>
 800260e:	f000 f869 	bl	80026e4 <__malloc_lock>
 8002612:	f8d8 3000 	ldr.w	r3, [r8]
 8002616:	461c      	mov	r4, r3
 8002618:	bb44      	cbnz	r4, 800266c <_malloc_r+0x88>
 800261a:	4629      	mov	r1, r5
 800261c:	4630      	mov	r0, r6
 800261e:	f7ff ffbf 	bl	80025a0 <sbrk_aligned>
 8002622:	1c43      	adds	r3, r0, #1
 8002624:	4604      	mov	r4, r0
 8002626:	d158      	bne.n	80026da <_malloc_r+0xf6>
 8002628:	f8d8 4000 	ldr.w	r4, [r8]
 800262c:	4627      	mov	r7, r4
 800262e:	2f00      	cmp	r7, #0
 8002630:	d143      	bne.n	80026ba <_malloc_r+0xd6>
 8002632:	2c00      	cmp	r4, #0
 8002634:	d04b      	beq.n	80026ce <_malloc_r+0xea>
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	4639      	mov	r1, r7
 800263a:	4630      	mov	r0, r6
 800263c:	eb04 0903 	add.w	r9, r4, r3
 8002640:	f000 f98c 	bl	800295c <_sbrk_r>
 8002644:	4581      	cmp	r9, r0
 8002646:	d142      	bne.n	80026ce <_malloc_r+0xea>
 8002648:	6821      	ldr	r1, [r4, #0]
 800264a:	1a6d      	subs	r5, r5, r1
 800264c:	4629      	mov	r1, r5
 800264e:	4630      	mov	r0, r6
 8002650:	f7ff ffa6 	bl	80025a0 <sbrk_aligned>
 8002654:	3001      	adds	r0, #1
 8002656:	d03a      	beq.n	80026ce <_malloc_r+0xea>
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	442b      	add	r3, r5
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	f8d8 3000 	ldr.w	r3, [r8]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	bb62      	cbnz	r2, 80026c0 <_malloc_r+0xdc>
 8002666:	f8c8 7000 	str.w	r7, [r8]
 800266a:	e00f      	b.n	800268c <_malloc_r+0xa8>
 800266c:	6822      	ldr	r2, [r4, #0]
 800266e:	1b52      	subs	r2, r2, r5
 8002670:	d420      	bmi.n	80026b4 <_malloc_r+0xd0>
 8002672:	2a0b      	cmp	r2, #11
 8002674:	d917      	bls.n	80026a6 <_malloc_r+0xc2>
 8002676:	1961      	adds	r1, r4, r5
 8002678:	42a3      	cmp	r3, r4
 800267a:	6025      	str	r5, [r4, #0]
 800267c:	bf18      	it	ne
 800267e:	6059      	strne	r1, [r3, #4]
 8002680:	6863      	ldr	r3, [r4, #4]
 8002682:	bf08      	it	eq
 8002684:	f8c8 1000 	streq.w	r1, [r8]
 8002688:	5162      	str	r2, [r4, r5]
 800268a:	604b      	str	r3, [r1, #4]
 800268c:	4630      	mov	r0, r6
 800268e:	f000 f82f 	bl	80026f0 <__malloc_unlock>
 8002692:	f104 000b 	add.w	r0, r4, #11
 8002696:	1d23      	adds	r3, r4, #4
 8002698:	f020 0007 	bic.w	r0, r0, #7
 800269c:	1ac2      	subs	r2, r0, r3
 800269e:	bf1c      	itt	ne
 80026a0:	1a1b      	subne	r3, r3, r0
 80026a2:	50a3      	strne	r3, [r4, r2]
 80026a4:	e7af      	b.n	8002606 <_malloc_r+0x22>
 80026a6:	6862      	ldr	r2, [r4, #4]
 80026a8:	42a3      	cmp	r3, r4
 80026aa:	bf0c      	ite	eq
 80026ac:	f8c8 2000 	streq.w	r2, [r8]
 80026b0:	605a      	strne	r2, [r3, #4]
 80026b2:	e7eb      	b.n	800268c <_malloc_r+0xa8>
 80026b4:	4623      	mov	r3, r4
 80026b6:	6864      	ldr	r4, [r4, #4]
 80026b8:	e7ae      	b.n	8002618 <_malloc_r+0x34>
 80026ba:	463c      	mov	r4, r7
 80026bc:	687f      	ldr	r7, [r7, #4]
 80026be:	e7b6      	b.n	800262e <_malloc_r+0x4a>
 80026c0:	461a      	mov	r2, r3
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	42a3      	cmp	r3, r4
 80026c6:	d1fb      	bne.n	80026c0 <_malloc_r+0xdc>
 80026c8:	2300      	movs	r3, #0
 80026ca:	6053      	str	r3, [r2, #4]
 80026cc:	e7de      	b.n	800268c <_malloc_r+0xa8>
 80026ce:	230c      	movs	r3, #12
 80026d0:	6033      	str	r3, [r6, #0]
 80026d2:	4630      	mov	r0, r6
 80026d4:	f000 f80c 	bl	80026f0 <__malloc_unlock>
 80026d8:	e794      	b.n	8002604 <_malloc_r+0x20>
 80026da:	6005      	str	r5, [r0, #0]
 80026dc:	e7d6      	b.n	800268c <_malloc_r+0xa8>
 80026de:	bf00      	nop
 80026e0:	200002d0 	.word	0x200002d0

080026e4 <__malloc_lock>:
 80026e4:	4801      	ldr	r0, [pc, #4]	@ (80026ec <__malloc_lock+0x8>)
 80026e6:	f7ff bf06 	b.w	80024f6 <__retarget_lock_acquire_recursive>
 80026ea:	bf00      	nop
 80026ec:	200002c8 	.word	0x200002c8

080026f0 <__malloc_unlock>:
 80026f0:	4801      	ldr	r0, [pc, #4]	@ (80026f8 <__malloc_unlock+0x8>)
 80026f2:	f7ff bf01 	b.w	80024f8 <__retarget_lock_release_recursive>
 80026f6:	bf00      	nop
 80026f8:	200002c8 	.word	0x200002c8

080026fc <__sflush_r>:
 80026fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002704:	0716      	lsls	r6, r2, #28
 8002706:	4605      	mov	r5, r0
 8002708:	460c      	mov	r4, r1
 800270a:	d454      	bmi.n	80027b6 <__sflush_r+0xba>
 800270c:	684b      	ldr	r3, [r1, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	dc02      	bgt.n	8002718 <__sflush_r+0x1c>
 8002712:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	dd48      	ble.n	80027aa <__sflush_r+0xae>
 8002718:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800271a:	2e00      	cmp	r6, #0
 800271c:	d045      	beq.n	80027aa <__sflush_r+0xae>
 800271e:	2300      	movs	r3, #0
 8002720:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002724:	682f      	ldr	r7, [r5, #0]
 8002726:	6a21      	ldr	r1, [r4, #32]
 8002728:	602b      	str	r3, [r5, #0]
 800272a:	d030      	beq.n	800278e <__sflush_r+0x92>
 800272c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800272e:	89a3      	ldrh	r3, [r4, #12]
 8002730:	0759      	lsls	r1, r3, #29
 8002732:	d505      	bpl.n	8002740 <__sflush_r+0x44>
 8002734:	6863      	ldr	r3, [r4, #4]
 8002736:	1ad2      	subs	r2, r2, r3
 8002738:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800273a:	b10b      	cbz	r3, 8002740 <__sflush_r+0x44>
 800273c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800273e:	1ad2      	subs	r2, r2, r3
 8002740:	2300      	movs	r3, #0
 8002742:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002744:	6a21      	ldr	r1, [r4, #32]
 8002746:	4628      	mov	r0, r5
 8002748:	47b0      	blx	r6
 800274a:	1c43      	adds	r3, r0, #1
 800274c:	89a3      	ldrh	r3, [r4, #12]
 800274e:	d106      	bne.n	800275e <__sflush_r+0x62>
 8002750:	6829      	ldr	r1, [r5, #0]
 8002752:	291d      	cmp	r1, #29
 8002754:	d82b      	bhi.n	80027ae <__sflush_r+0xb2>
 8002756:	4a2a      	ldr	r2, [pc, #168]	@ (8002800 <__sflush_r+0x104>)
 8002758:	410a      	asrs	r2, r1
 800275a:	07d6      	lsls	r6, r2, #31
 800275c:	d427      	bmi.n	80027ae <__sflush_r+0xb2>
 800275e:	2200      	movs	r2, #0
 8002760:	6062      	str	r2, [r4, #4]
 8002762:	04d9      	lsls	r1, r3, #19
 8002764:	6922      	ldr	r2, [r4, #16]
 8002766:	6022      	str	r2, [r4, #0]
 8002768:	d504      	bpl.n	8002774 <__sflush_r+0x78>
 800276a:	1c42      	adds	r2, r0, #1
 800276c:	d101      	bne.n	8002772 <__sflush_r+0x76>
 800276e:	682b      	ldr	r3, [r5, #0]
 8002770:	b903      	cbnz	r3, 8002774 <__sflush_r+0x78>
 8002772:	6560      	str	r0, [r4, #84]	@ 0x54
 8002774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002776:	602f      	str	r7, [r5, #0]
 8002778:	b1b9      	cbz	r1, 80027aa <__sflush_r+0xae>
 800277a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800277e:	4299      	cmp	r1, r3
 8002780:	d002      	beq.n	8002788 <__sflush_r+0x8c>
 8002782:	4628      	mov	r0, r5
 8002784:	f7ff feba 	bl	80024fc <_free_r>
 8002788:	2300      	movs	r3, #0
 800278a:	6363      	str	r3, [r4, #52]	@ 0x34
 800278c:	e00d      	b.n	80027aa <__sflush_r+0xae>
 800278e:	2301      	movs	r3, #1
 8002790:	4628      	mov	r0, r5
 8002792:	47b0      	blx	r6
 8002794:	4602      	mov	r2, r0
 8002796:	1c50      	adds	r0, r2, #1
 8002798:	d1c9      	bne.n	800272e <__sflush_r+0x32>
 800279a:	682b      	ldr	r3, [r5, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0c6      	beq.n	800272e <__sflush_r+0x32>
 80027a0:	2b1d      	cmp	r3, #29
 80027a2:	d001      	beq.n	80027a8 <__sflush_r+0xac>
 80027a4:	2b16      	cmp	r3, #22
 80027a6:	d11e      	bne.n	80027e6 <__sflush_r+0xea>
 80027a8:	602f      	str	r7, [r5, #0]
 80027aa:	2000      	movs	r0, #0
 80027ac:	e022      	b.n	80027f4 <__sflush_r+0xf8>
 80027ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b2:	b21b      	sxth	r3, r3
 80027b4:	e01b      	b.n	80027ee <__sflush_r+0xf2>
 80027b6:	690f      	ldr	r7, [r1, #16]
 80027b8:	2f00      	cmp	r7, #0
 80027ba:	d0f6      	beq.n	80027aa <__sflush_r+0xae>
 80027bc:	0793      	lsls	r3, r2, #30
 80027be:	680e      	ldr	r6, [r1, #0]
 80027c0:	bf08      	it	eq
 80027c2:	694b      	ldreq	r3, [r1, #20]
 80027c4:	600f      	str	r7, [r1, #0]
 80027c6:	bf18      	it	ne
 80027c8:	2300      	movne	r3, #0
 80027ca:	eba6 0807 	sub.w	r8, r6, r7
 80027ce:	608b      	str	r3, [r1, #8]
 80027d0:	f1b8 0f00 	cmp.w	r8, #0
 80027d4:	dde9      	ble.n	80027aa <__sflush_r+0xae>
 80027d6:	6a21      	ldr	r1, [r4, #32]
 80027d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80027da:	4643      	mov	r3, r8
 80027dc:	463a      	mov	r2, r7
 80027de:	4628      	mov	r0, r5
 80027e0:	47b0      	blx	r6
 80027e2:	2800      	cmp	r0, #0
 80027e4:	dc08      	bgt.n	80027f8 <__sflush_r+0xfc>
 80027e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ee:	81a3      	strh	r3, [r4, #12]
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027f8:	4407      	add	r7, r0
 80027fa:	eba8 0800 	sub.w	r8, r8, r0
 80027fe:	e7e7      	b.n	80027d0 <__sflush_r+0xd4>
 8002800:	dfbffffe 	.word	0xdfbffffe

08002804 <_fflush_r>:
 8002804:	b538      	push	{r3, r4, r5, lr}
 8002806:	690b      	ldr	r3, [r1, #16]
 8002808:	4605      	mov	r5, r0
 800280a:	460c      	mov	r4, r1
 800280c:	b913      	cbnz	r3, 8002814 <_fflush_r+0x10>
 800280e:	2500      	movs	r5, #0
 8002810:	4628      	mov	r0, r5
 8002812:	bd38      	pop	{r3, r4, r5, pc}
 8002814:	b118      	cbz	r0, 800281e <_fflush_r+0x1a>
 8002816:	6a03      	ldr	r3, [r0, #32]
 8002818:	b90b      	cbnz	r3, 800281e <_fflush_r+0x1a>
 800281a:	f7ff fbd1 	bl	8001fc0 <__sinit>
 800281e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f3      	beq.n	800280e <_fflush_r+0xa>
 8002826:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002828:	07d0      	lsls	r0, r2, #31
 800282a:	d404      	bmi.n	8002836 <_fflush_r+0x32>
 800282c:	0599      	lsls	r1, r3, #22
 800282e:	d402      	bmi.n	8002836 <_fflush_r+0x32>
 8002830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002832:	f7ff fe60 	bl	80024f6 <__retarget_lock_acquire_recursive>
 8002836:	4628      	mov	r0, r5
 8002838:	4621      	mov	r1, r4
 800283a:	f7ff ff5f 	bl	80026fc <__sflush_r>
 800283e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002840:	07da      	lsls	r2, r3, #31
 8002842:	4605      	mov	r5, r0
 8002844:	d4e4      	bmi.n	8002810 <_fflush_r+0xc>
 8002846:	89a3      	ldrh	r3, [r4, #12]
 8002848:	059b      	lsls	r3, r3, #22
 800284a:	d4e1      	bmi.n	8002810 <_fflush_r+0xc>
 800284c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800284e:	f7ff fe53 	bl	80024f8 <__retarget_lock_release_recursive>
 8002852:	e7dd      	b.n	8002810 <_fflush_r+0xc>

08002854 <__swhatbuf_r>:
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	460c      	mov	r4, r1
 8002858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285c:	2900      	cmp	r1, #0
 800285e:	b096      	sub	sp, #88	@ 0x58
 8002860:	4615      	mov	r5, r2
 8002862:	461e      	mov	r6, r3
 8002864:	da0d      	bge.n	8002882 <__swhatbuf_r+0x2e>
 8002866:	89a3      	ldrh	r3, [r4, #12]
 8002868:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800286c:	f04f 0100 	mov.w	r1, #0
 8002870:	bf14      	ite	ne
 8002872:	2340      	movne	r3, #64	@ 0x40
 8002874:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002878:	2000      	movs	r0, #0
 800287a:	6031      	str	r1, [r6, #0]
 800287c:	602b      	str	r3, [r5, #0]
 800287e:	b016      	add	sp, #88	@ 0x58
 8002880:	bd70      	pop	{r4, r5, r6, pc}
 8002882:	466a      	mov	r2, sp
 8002884:	f000 f848 	bl	8002918 <_fstat_r>
 8002888:	2800      	cmp	r0, #0
 800288a:	dbec      	blt.n	8002866 <__swhatbuf_r+0x12>
 800288c:	9901      	ldr	r1, [sp, #4]
 800288e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002892:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002896:	4259      	negs	r1, r3
 8002898:	4159      	adcs	r1, r3
 800289a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800289e:	e7eb      	b.n	8002878 <__swhatbuf_r+0x24>

080028a0 <__smakebuf_r>:
 80028a0:	898b      	ldrh	r3, [r1, #12]
 80028a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028a4:	079d      	lsls	r5, r3, #30
 80028a6:	4606      	mov	r6, r0
 80028a8:	460c      	mov	r4, r1
 80028aa:	d507      	bpl.n	80028bc <__smakebuf_r+0x1c>
 80028ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80028b0:	6023      	str	r3, [r4, #0]
 80028b2:	6123      	str	r3, [r4, #16]
 80028b4:	2301      	movs	r3, #1
 80028b6:	6163      	str	r3, [r4, #20]
 80028b8:	b003      	add	sp, #12
 80028ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028bc:	ab01      	add	r3, sp, #4
 80028be:	466a      	mov	r2, sp
 80028c0:	f7ff ffc8 	bl	8002854 <__swhatbuf_r>
 80028c4:	9f00      	ldr	r7, [sp, #0]
 80028c6:	4605      	mov	r5, r0
 80028c8:	4639      	mov	r1, r7
 80028ca:	4630      	mov	r0, r6
 80028cc:	f7ff fe8a 	bl	80025e4 <_malloc_r>
 80028d0:	b948      	cbnz	r0, 80028e6 <__smakebuf_r+0x46>
 80028d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028d6:	059a      	lsls	r2, r3, #22
 80028d8:	d4ee      	bmi.n	80028b8 <__smakebuf_r+0x18>
 80028da:	f023 0303 	bic.w	r3, r3, #3
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	81a3      	strh	r3, [r4, #12]
 80028e4:	e7e2      	b.n	80028ac <__smakebuf_r+0xc>
 80028e6:	89a3      	ldrh	r3, [r4, #12]
 80028e8:	6020      	str	r0, [r4, #0]
 80028ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ee:	81a3      	strh	r3, [r4, #12]
 80028f0:	9b01      	ldr	r3, [sp, #4]
 80028f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80028f6:	b15b      	cbz	r3, 8002910 <__smakebuf_r+0x70>
 80028f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028fc:	4630      	mov	r0, r6
 80028fe:	f000 f81d 	bl	800293c <_isatty_r>
 8002902:	b128      	cbz	r0, 8002910 <__smakebuf_r+0x70>
 8002904:	89a3      	ldrh	r3, [r4, #12]
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	81a3      	strh	r3, [r4, #12]
 8002910:	89a3      	ldrh	r3, [r4, #12]
 8002912:	431d      	orrs	r5, r3
 8002914:	81a5      	strh	r5, [r4, #12]
 8002916:	e7cf      	b.n	80028b8 <__smakebuf_r+0x18>

08002918 <_fstat_r>:
 8002918:	b538      	push	{r3, r4, r5, lr}
 800291a:	4d07      	ldr	r5, [pc, #28]	@ (8002938 <_fstat_r+0x20>)
 800291c:	2300      	movs	r3, #0
 800291e:	4604      	mov	r4, r0
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	602b      	str	r3, [r5, #0]
 8002926:	f7fe f8ef 	bl	8000b08 <_fstat>
 800292a:	1c43      	adds	r3, r0, #1
 800292c:	d102      	bne.n	8002934 <_fstat_r+0x1c>
 800292e:	682b      	ldr	r3, [r5, #0]
 8002930:	b103      	cbz	r3, 8002934 <_fstat_r+0x1c>
 8002932:	6023      	str	r3, [r4, #0]
 8002934:	bd38      	pop	{r3, r4, r5, pc}
 8002936:	bf00      	nop
 8002938:	200002c4 	.word	0x200002c4

0800293c <_isatty_r>:
 800293c:	b538      	push	{r3, r4, r5, lr}
 800293e:	4d06      	ldr	r5, [pc, #24]	@ (8002958 <_isatty_r+0x1c>)
 8002940:	2300      	movs	r3, #0
 8002942:	4604      	mov	r4, r0
 8002944:	4608      	mov	r0, r1
 8002946:	602b      	str	r3, [r5, #0]
 8002948:	f7fe f8df 	bl	8000b0a <_isatty>
 800294c:	1c43      	adds	r3, r0, #1
 800294e:	d102      	bne.n	8002956 <_isatty_r+0x1a>
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	b103      	cbz	r3, 8002956 <_isatty_r+0x1a>
 8002954:	6023      	str	r3, [r4, #0]
 8002956:	bd38      	pop	{r3, r4, r5, pc}
 8002958:	200002c4 	.word	0x200002c4

0800295c <_sbrk_r>:
 800295c:	b538      	push	{r3, r4, r5, lr}
 800295e:	4d06      	ldr	r5, [pc, #24]	@ (8002978 <_sbrk_r+0x1c>)
 8002960:	2300      	movs	r3, #0
 8002962:	4604      	mov	r4, r0
 8002964:	4608      	mov	r0, r1
 8002966:	602b      	str	r3, [r5, #0]
 8002968:	f000 f808 	bl	800297c <_sbrk>
 800296c:	1c43      	adds	r3, r0, #1
 800296e:	d102      	bne.n	8002976 <_sbrk_r+0x1a>
 8002970:	682b      	ldr	r3, [r5, #0]
 8002972:	b103      	cbz	r3, 8002976 <_sbrk_r+0x1a>
 8002974:	6023      	str	r3, [r4, #0]
 8002976:	bd38      	pop	{r3, r4, r5, pc}
 8002978:	200002c4 	.word	0x200002c4

0800297c <_sbrk>:
 800297c:	4a04      	ldr	r2, [pc, #16]	@ (8002990 <_sbrk+0x14>)
 800297e:	6811      	ldr	r1, [r2, #0]
 8002980:	4603      	mov	r3, r0
 8002982:	b909      	cbnz	r1, 8002988 <_sbrk+0xc>
 8002984:	4903      	ldr	r1, [pc, #12]	@ (8002994 <_sbrk+0x18>)
 8002986:	6011      	str	r1, [r2, #0]
 8002988:	6810      	ldr	r0, [r2, #0]
 800298a:	4403      	add	r3, r0
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4770      	bx	lr
 8002990:	200002d4 	.word	0x200002d4
 8002994:	200002d8 	.word	0x200002d8

08002998 <_init>:
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299a:	bf00      	nop
 800299c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299e:	bc08      	pop	{r3}
 80029a0:	469e      	mov	lr, r3
 80029a2:	4770      	bx	lr

080029a4 <_fini>:
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	bf00      	nop
 80029a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029aa:	bc08      	pop	{r3}
 80029ac:	469e      	mov	lr, r3
 80029ae:	4770      	bx	lr
